Search.setIndex({"docnames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection", "demos/README", "demos/assets/01_template", "demos/examples_and_demos", "demos/examples_and_demos/alexnet_demo", "demos/examples_and_demos/bert_demo", "demos/examples_and_demos/convnext_to_torch", "demos/examples_and_demos/dinov2_to_paddle", "demos/examples_and_demos/image_segmentation_with_ivy_unet", "demos/examples_and_demos/lstm_tensorflow_to_torch", "demos/examples_and_demos/lstm_torch_to_tensorflow", "demos/examples_and_demos/mmpretrain_to_jax", "demos/examples_and_demos/resnet_demo", "demos/examples_and_demos/torch_to_jax", "demos/examples_and_demos/xgboost_demo", "demos/guides", "demos/guides/01_transpiling_a_torch_model", "demos/guides/02_transpiling_a_haiku_model", "demos/guides/03_transpiling_a_tf_model", "demos/guides/04_developing_a_convnet_with_ivy", "demos/index", "demos/learn_the_basics", "demos/learn_the_basics/01_write_ivy_code", "demos/learn_the_basics/02_unify_code", "demos/learn_the_basics/03_trace_code", "demos/learn_the_basics/04_transpile_code", "demos/learn_the_basics/05_lazy_vs_eager", "demos/learn_the_basics/06_how_to_use_decorators", "demos/learn_the_basics/07_transpile_any_library", "demos/learn_the_basics/08_transpile_any_model", "demos/learn_the_basics/09_write_a_model_using_ivy", "demos/misc/odsc", "demos/quickstart", "demos/wip/0_building_blocks/0_0_unify", "demos/wip/0_building_blocks/0_1_compile", "demos/wip/0_building_blocks/0_2_transpile", "demos/wip/1_the_basics/1_0_lazy_vs_eager", "demos/wip/1_the_basics/1_1_framework_selection", "demos/wip/1_the_basics/1_2_as_a_decorator", "demos/wip/1_the_basics/1_3_dynamic_vs_static", "demos/wip/2_libraries/2_0_kornia", "demos/wip/3_models/3_0_perceiver", "demos/wip/3_models/3_1_stable_diffusion", "demos/wip/basic_operations_with_ivy", "demos/wip/compilation_of_a_basic_function", "demos/wip/deepmind_perceiver_io", "demos/wip/deepmind_perceiverio", "demos/wip/end_to_end_training_pipeline_in_ivy", "demos/wip/hf_tensorflow_deit", "demos/wip/ivy_as_a_transpiler_intro", "demos/wip/resnet_18", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type", "docs/data_classes/data_classes/array/ivy.data_classes.array.device", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental", "docs/data_classes/data_classes/array/ivy.data_classes.array.general", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients", "docs/data_classes/data_classes/array/ivy.data_classes.array.image", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms", "docs/data_classes/data_classes/array/ivy.data_classes.array.random", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching", "docs/data_classes/data_classes/array/ivy.data_classes.array.set", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations", "docs/data_classes/data_classes/container/ivy.data_classes.container.base", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type", "docs/data_classes/data_classes/container/ivy.data_classes.container.device", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental", "docs/data_classes/data_classes/container/ivy.data_classes.container.general", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients", "docs/data_classes/data_classes/container/ivy.data_classes.container.image", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms", "docs/data_classes/data_classes/container/ivy.data_classes.container.random", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching", "docs/data_classes/data_classes/container/ivy.data_classes.container.set", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor", "docs/data_classes/data_classes/ivy.data_classes.array", "docs/data_classes/data_classes/ivy.data_classes.container", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor", "docs/data_classes/data_classes/ivy.data_classes.nested_array", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise", "docs/data_classes/ivy.data_classes", "docs/functional/ivy.functional.ivy", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.dev", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str", "docs/functional/ivy/general/ivy.functional.ivy.general.default", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat", "docs/functional/ivy/general/ivy.functional.ivy.general.exists", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes", "docs/functional/ivy/general/ivy.functional.ivy.general.gather", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array", "docs/functional/ivy/general/ivy.functional.ivy.general.isin", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.shape", "docs/functional/ivy/general/ivy.functional.ivy.general.size", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow", "docs/functional/ivy/general/ivy.functional.ivy.general.strides", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad", "docs/functional/ivy/ivy.functional.ivy.activations", "docs/functional/ivy/ivy.functional.ivy.constants", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops", "docs/functional/ivy/ivy.functional.ivy.creation", "docs/functional/ivy/ivy.functional.ivy.data_type", "docs/functional/ivy/ivy.functional.ivy.device", "docs/functional/ivy/ivy.functional.ivy.elementwise", "docs/functional/ivy/ivy.functional.ivy.experimental", "docs/functional/ivy/ivy.functional.ivy.general", "docs/functional/ivy/ivy.functional.ivy.gradients", "docs/functional/ivy/ivy.functional.ivy.layers", "docs/functional/ivy/ivy.functional.ivy.linear_algebra", "docs/functional/ivy/ivy.functional.ivy.losses", "docs/functional/ivy/ivy.functional.ivy.manipulation", "docs/functional/ivy/ivy.functional.ivy.meta", "docs/functional/ivy/ivy.functional.ivy.nest", "docs/functional/ivy/ivy.functional.ivy.norms", "docs/functional/ivy/ivy.functional.ivy.random", "docs/functional/ivy/ivy.functional.ivy.searching", "docs/functional/ivy/ivy.functional.ivy.set", "docs/functional/ivy/ivy.functional.ivy.sorting", "docs/functional/ivy/ivy.functional.ivy.statistical", "docs/functional/ivy/ivy.functional.ivy.utility", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial", "docs/functional/ivy/random/ivy.functional.ivy.random.randint", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform", "docs/functional/ivy/random/ivy.functional.ivy.random.seed", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save", "docs/helpers/ivy_tests.test_ivy.helpers.assertions", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing", "docs/helpers/ivy_tests.test_ivy.helpers.globals", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper", "docs/helpers/ivy_tests.test_ivy.helpers.structs", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers", "docs/ivy.stateful", "docs/ivy.utils", "docs/ivy_tests.test_ivy.helpers", "docs/stateful/ivy.stateful.activations", "docs/stateful/ivy.stateful.converters", "docs/stateful/ivy.stateful.helpers", "docs/stateful/ivy.stateful.initializers", "docs/stateful/ivy.stateful.layers", "docs/stateful/ivy.stateful.losses", "docs/stateful/ivy.stateful.module", "docs/stateful/ivy.stateful.norms", "docs/stateful/ivy.stateful.optimizers", "docs/stateful/ivy.stateful.sequential", "docs/utils/ivy.utils.assertions", "docs/utils/ivy.utils.backend", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler", "docs/utils/ivy.utils.binaries", "docs/utils/ivy.utils.dynamic_import", "docs/utils/ivy.utils.einsum_parser", "docs/utils/ivy.utils.einsum_path_helpers", "docs/utils/ivy.utils.exceptions", "docs/utils/ivy.utils.inspection", "docs/utils/ivy.utils.logging", "docs/utils/ivy.utils.profiler", "docs/utils/ivy.utils.verbosity", "index", "overview/contributing", "overview/contributing/building_the_docs", "overview/contributing/contributor_rewards", "overview/contributing/error_handling", "overview/contributing/helpful_resources", "overview/contributing/open_tasks", "overview/contributing/setting_up", "overview/contributing/the_basics", "overview/contributing/volunteer_program", "overview/deep_dive", "overview/deep_dive/array_api_tests", "overview/deep_dive/arrays", "overview/deep_dive/backend_setting", "overview/deep_dive/building_the_docs_pipeline", "overview/deep_dive/containers", "overview/deep_dive/continuous_integration", "overview/deep_dive/data_types", "overview/deep_dive/devices", "overview/deep_dive/docstring_examples", "overview/deep_dive/docstrings", "overview/deep_dive/exception_handling", "overview/deep_dive/fix_failing_tests", "overview/deep_dive/formatting", "overview/deep_dive/function_arguments", "overview/deep_dive/function_types", "overview/deep_dive/function_wrapping", "overview/deep_dive/gradients", "overview/deep_dive/inplace_updates", "overview/deep_dive/ivy_frontends", "overview/deep_dive/ivy_frontends_tests", "overview/deep_dive/ivy_lint", "overview/deep_dive/ivy_tests", "overview/deep_dive/navigating_the_code", "overview/deep_dive/operating_modes", "overview/deep_dive/superset_behaviour", "overview/design", "overview/design/building_blocks", "overview/design/ivy_as_a_framework", "overview/design/ivy_as_a_framework/ivy_array", "overview/design/ivy_as_a_framework/ivy_container", "overview/design/ivy_as_a_framework/ivy_stateful_api", "overview/design/ivy_as_a_transpiler", "overview/faq", "overview/get_started", "overview/glossary", "overview/motivation", "overview/motivation/ml_explosion", "overview/motivation/standardization", "overview/motivation/why_unify", "overview/one_liners", "overview/one_liners/trace", "overview/one_liners/transpile", "overview/one_liners/unify", "overview/related_work", "overview/related_work/api_standards", "overview/related_work/compiler_infrastructure", "overview/related_work/exchange_formats", "overview/related_work/frameworks", "overview/related_work/graph_tracers", "overview/related_work/ml_unifying_companies", "overview/related_work/multi_vendor_compiler_frameworks", "overview/related_work/vendor_specific_apis", "overview/related_work/vendor_specific_compilers", "overview/related_work/what_does_ivy_add", "overview/related_work/wrapper_frameworks", "overview/volunteer_ranks"], "filenames": ["demos/Contributor_demos/Credit Card Fraud Detection/Credit_Card_Fraud_Detection.ipynb", "demos/README.md", "demos/assets/01_template.ipynb", "demos/examples_and_demos.rst", "demos/examples_and_demos/alexnet_demo.ipynb", "demos/examples_and_demos/bert_demo.ipynb", "demos/examples_and_demos/convnext_to_torch.ipynb", "demos/examples_and_demos/dinov2_to_paddle.ipynb", "demos/examples_and_demos/image_segmentation_with_ivy_unet.ipynb", "demos/examples_and_demos/lstm_tensorflow_to_torch.ipynb", "demos/examples_and_demos/lstm_torch_to_tensorflow.ipynb", "demos/examples_and_demos/mmpretrain_to_jax.ipynb", "demos/examples_and_demos/resnet_demo.ipynb", "demos/examples_and_demos/torch_to_jax.ipynb", "demos/examples_and_demos/xgboost_demo.ipynb", "demos/guides.rst", "demos/guides/01_transpiling_a_torch_model.ipynb", "demos/guides/02_transpiling_a_haiku_model.ipynb", "demos/guides/03_transpiling_a_tf_model.ipynb", "demos/guides/04_developing_a_convnet_with_ivy.ipynb", "demos/index.rst", "demos/learn_the_basics.rst", "demos/learn_the_basics/01_write_ivy_code.ipynb", "demos/learn_the_basics/02_unify_code.ipynb", "demos/learn_the_basics/03_trace_code.ipynb", "demos/learn_the_basics/04_transpile_code.ipynb", "demos/learn_the_basics/05_lazy_vs_eager.ipynb", "demos/learn_the_basics/06_how_to_use_decorators.ipynb", "demos/learn_the_basics/07_transpile_any_library.ipynb", "demos/learn_the_basics/08_transpile_any_model.ipynb", "demos/learn_the_basics/09_write_a_model_using_ivy.ipynb", "demos/misc/odsc.ipynb", "demos/quickstart.ipynb", "demos/wip/0_building_blocks/0_0_unify.ipynb", "demos/wip/0_building_blocks/0_1_compile.ipynb", "demos/wip/0_building_blocks/0_2_transpile.ipynb", "demos/wip/1_the_basics/1_0_lazy_vs_eager.ipynb", "demos/wip/1_the_basics/1_1_framework_selection.ipynb", "demos/wip/1_the_basics/1_2_as_a_decorator.ipynb", "demos/wip/1_the_basics/1_3_dynamic_vs_static.ipynb", "demos/wip/2_libraries/2_0_kornia.ipynb", "demos/wip/3_models/3_0_perceiver.ipynb", "demos/wip/3_models/3_1_stable_diffusion.ipynb", "demos/wip/basic_operations_with_ivy.ipynb", "demos/wip/compilation_of_a_basic_function.ipynb", "demos/wip/deepmind_perceiver_io.ipynb", "demos/wip/deepmind_perceiverio.ipynb", "demos/wip/end_to_end_training_pipeline_in_ivy.ipynb", "demos/wip/hf_tensorflow_deit.ipynb", "demos/wip/ivy_as_a_transpiler_intro.ipynb", "demos/wip/resnet_18.ipynb", "docs/data_classes/data_classes/array/ivy.data_classes.array.activations.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.conversions.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.creation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.data_type.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.device.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.elementwise.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.experimental.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.general.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.gradients.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.image.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.layers.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.linear_algebra.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.losses.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.manipulation.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.norms.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.random.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.searching.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.set.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.sorting.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.statistical.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.utility.rst", "docs/data_classes/data_classes/array/ivy.data_classes.array.wrapping.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.activations.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.base.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.conversions.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.creation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.data_type.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.device.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.elementwise.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.experimental.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.general.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.gradients.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.image.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.layers.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.linear_algebra.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.losses.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.manipulation.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.norms.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.random.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.searching.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.set.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.sorting.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.statistical.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.utility.rst", "docs/data_classes/data_classes/container/ivy.data_classes.container.wrapping.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.base.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.cp_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.parafac2_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tr_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tt_tensor.rst", "docs/data_classes/data_classes/factorized_tensor/ivy.data_classes.factorized_tensor.tucker_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.array.rst", "docs/data_classes/data_classes/ivy.data_classes.container.rst", "docs/data_classes/data_classes/ivy.data_classes.factorized_tensor.rst", "docs/data_classes/data_classes/ivy.data_classes.nested_array.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.base.rst", "docs/data_classes/data_classes/nested_array/ivy.data_classes.nested_array.elementwise.rst", "docs/data_classes/ivy.data_classes.rst", "docs/functional/ivy.functional.ivy.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.gelu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.hardswish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.leaky_relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.log_softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.mish.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.relu.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.sigmoid.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softmax.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softplus.rst", "docs/functional/ivy/activations/ivy.functional.ivy.activations.softsign.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_is.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.cmp_isnot.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.for_loop.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.if_else.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.try_except.rst", "docs/functional/ivy/control_flow_ops/ivy.functional.ivy.control_flow_ops.while_loop.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.arange.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.asarray.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.copy_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.empty_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.eye.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.from_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.frombuffer.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.full_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.linspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.logspace.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.meshgrid.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.native_array.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.one_hot.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.ones_like.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.to_dlpack.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.tril.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.triu_indices.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros.rst", "docs/functional/ivy/creation/ivy.functional.ivy.creation.zeros_like.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_ivy_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.as_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.astype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.broadcast_to.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.can_cast.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.check_float.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.closest_valid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.dtype_bits.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.finfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_supported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.function_unsupported_dtypes.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.iinfo.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.infer_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.invalid_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_bool_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_hashable_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_native_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.is_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.promote_types_of_inputs.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.result_type.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.set_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.type_promote_arrays.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_complex_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_float_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_int_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.unset_default_uint_dtype.rst", "docs/functional/ivy/data_type/ivy.functional.ivy.data_type.valid_dtype.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_ivy_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.as_native_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.clear_cached_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.dev_util.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_supported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.function_unsupported_devices.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.get_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.gpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.handle_soft_device_variable.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_cpu_cores.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_gpus.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.num_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.percent_used_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.print_all_ivy_arrays_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.set_split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_factor.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.split_func_call.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.to_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.total_mem_on_dev.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.tpu_is_available.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_default_device.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.unset_soft_device_mode.rst", "docs/functional/ivy/device/ivy.functional.ivy.device.used_mem_on_dev.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.abs.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.acosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.add.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.angle.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.asinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atan2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.atanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_invert.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_left_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_right_shift.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.bitwise_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.ceil.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cos.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.cosh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.deg2rad.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.erf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.exp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.expm1.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.floor_divide.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.fmod.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.gcd.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.greater_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.imag.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isfinite.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isinf.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isnan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.isreal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.lcm.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.less_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log10.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log1p.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.log2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logaddexp2.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_and.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_not.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_or.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.logical_xor.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.maximum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.minimum.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.multiply.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.nan_to_num.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.negative.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.not_equal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.positive.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.pow.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.rad2deg.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.real.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.reciprocal.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.remainder.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.round.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sign.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sin.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sinh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.sqrt.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.square.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.subtract.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tan.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.tanh.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trapz.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc.rst", "docs/functional/ivy/elementwise/ivy.functional.ivy.elementwise.trunc_divide.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.celu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.elu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardsilu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.hardtanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logit.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.logsigmoid.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.prelu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.relu6.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.scaled_tanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.selu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.silu.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.softshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.stanh.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.tanhshrink.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.threshold.rst", "docs/functional/ivy/experimental/activations/ivy.functional.ivy.experimental.activations.thresholded_relu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.blackman_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.eye_like.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hamming_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.hann_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_bessel_derived_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.kaiser_window.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.mel_weight_matrix.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndenumerate.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.ndindex.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.polyval.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_cp.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_parafac2.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tr.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tt.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.random_tucker.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.tril_indices.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.trilu.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_mean.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_min.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.unsorted_segment_sum.rst", "docs/functional/ivy/experimental/creation/ivy.functional.ivy.experimental.creation.vorbis_window.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.allclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.amin.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.binarizer.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.conj.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.copysign.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.count_nonzero.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.diff.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.digamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.erfinv.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fix.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.float_power.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.fmax.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.frexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.gradient.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.hypot.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.isclose.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.ldexp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lerp.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.lgamma.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.modf.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nansum.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.nextafter.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.signbit.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sinc.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.sparsify_tensor.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.xlogy.rst", "docs/functional/ivy/experimental/elementwise/ivy.functional.ivy.experimental.elementwise.zeta.rst", "docs/functional/ivy/experimental/general/ivy.functional.ivy.experimental.general.reduce.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.bind_custom_gradient_function.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.jvp.rst", "docs/functional/ivy/experimental/gradients/ivy.functional.ivy.experimental.gradients.vjp.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.activations.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.constants.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.creation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.data_type.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.device.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.elementwise.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.general.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.gradients.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.layers.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.linear_algebra.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.losses.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.manipulation.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.meta.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.nest.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.norms.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.random.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.searching.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.set.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sorting.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.sparse_array.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.statistical.rst", "docs/functional/ivy/experimental/ivy.functional.ivy.experimental.utility.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.adaptive_max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.area_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.avg_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.dropout3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.embedding.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.fft2.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.generate_einsum_equation.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.get_interpolate_kernel.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.idct.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.ifftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interp.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool2d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_pool3d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.max_unpool1d.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.nearest_interpolate.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.pool.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.reduce_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfft.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rfftn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.rnn.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.sliding_window.rst", "docs/functional/ivy/experimental/layers/ivy.functional.ivy.experimental.layers.stft.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.adjoint.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.batched_outer.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.cond.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.diagflat.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eig.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigh_tridiagonal.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.eigvals.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.general_inner_product.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.higher_order_moment.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.initialize_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.khatri_rao.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kron.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.kronecker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_factor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.lu_solve.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.make_svd_non_negative.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.matrix_exp.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.multi_mode_dot.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.partial_tucker.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.solve_triangular.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.svd_flip.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tensor_train.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.truncated_svd.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tt_matrix_to_tensor.rst", "docs/functional/ivy/experimental/linear_algebra/ivy.functional.ivy.experimental.linear_algebra.tucker.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.hinge_embedding_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.huber_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.kl_div.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.log_poisson_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.poisson_nll_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.smooth_l1_loss.rst", "docs/functional/ivy/experimental/losses/ivy.functional.ivy.experimental.losses.soft_margin_loss.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.as_strided.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.associative_scan.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_1d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_2d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.atleast_3d.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.broadcast_shapes.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.check_scalar.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.choose.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.column_stack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.concat_from_sequence.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.dstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.expand.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fill_diagonal.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fliplr.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.flipud.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.heaviside.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.hstack.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.i0.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.matricize.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.moveaxis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.pad.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_fold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_tensor_to_vec.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.partial_vec_to_tensor.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.put_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.rot90.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.soft_thresholding.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.take_along_axis.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.top_k.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.trim_zeros.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unflatten.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unfold.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.unique_consecutive.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vsplit.rst", "docs/functional/ivy/experimental/manipulation/ivy.functional.ivy.experimental.manipulation.vstack.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.batch_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.group_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.instance_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l1_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.l2_normalize.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.local_response_norm.rst", "docs/functional/ivy/experimental/norms/ivy.functional.ivy.experimental.norms.lp_normalize.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.bernoulli.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.beta.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.dirichlet.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.gamma.rst", "docs/functional/ivy/experimental/random/ivy.functional.ivy.experimental.random.poisson.rst", "docs/functional/ivy/experimental/searching/ivy.functional.ivy.experimental.searching.unravel_index.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.invert_permutation.rst", "docs/functional/ivy/experimental/sorting/ivy.functional.ivy.experimental.sorting.lexsort.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_ivy_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.is_native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array.rst", "docs/functional/ivy/experimental/sparse_array/ivy.functional.ivy.experimental.sparse_array.native_sparse_array_to_indices_values_and_shape.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.bincount.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.corrcoef.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cov.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummax.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.cummin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.histogram.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.igamma.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.median.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmean.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmedian.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanmin.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.nanprod.rst", "docs/functional/ivy/experimental/statistical/ivy.functional.ivy.experimental.statistical.quantile.rst", "docs/functional/ivy/experimental/utility/ivy.functional.ivy.experimental.utility.optional_get_element.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.all_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_info.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.arg_names.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.array_equal.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.assert_supports_inplace.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.cache_fn.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_matrix_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.clip_vector_norm.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.container_types.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.current_backend_str.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.default.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_rearrange.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_reduce.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.einops_repeat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.exists.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.fourier_encode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_supported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.function_unsupported_devices_and_dtypes.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.gather_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_num_dims.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.get_referrers_recursive.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.has_nans.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_arrays_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_decrement.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_increment.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_update.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.inplace_variables_supported.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_container.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_ivy_nested_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.is_native_array.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isin.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.isscalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.itemsize.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.match_kwargs.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.multiprocessing.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.num_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.print_all_arrays_in_memory.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_flat.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.scatter_nd.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_item.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.set_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.size.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_divide.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.stable_pow.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.strides.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.supports_inplace_updates.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_ivy_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_list.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_native_shape.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_numpy.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.to_scalar.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.try_else_none.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_exception_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_inplace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_base.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_min_denominator.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_nestable_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_precise_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_queue_timeout.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_shape_array_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_show_func_wrapper_trace_mode.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.unset_tmp_dir.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.value_is_nan.rst", "docs/functional/ivy/general/ivy.functional.ivy.general.vmap.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_step.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.adam_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.execute_with_gradients.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.grad.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.gradient_descent_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.jac.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lamb_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.lars_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.optimizer_update.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.stop_gradient.rst", "docs/functional/ivy/gradients/ivy.functional.ivy.gradients.value_and_grad.rst", "docs/functional/ivy/ivy.functional.ivy.activations.rst", "docs/functional/ivy/ivy.functional.ivy.constants.rst", "docs/functional/ivy/ivy.functional.ivy.control_flow_ops.rst", "docs/functional/ivy/ivy.functional.ivy.creation.rst", "docs/functional/ivy/ivy.functional.ivy.data_type.rst", "docs/functional/ivy/ivy.functional.ivy.device.rst", "docs/functional/ivy/ivy.functional.ivy.elementwise.rst", "docs/functional/ivy/ivy.functional.ivy.experimental.rst", "docs/functional/ivy/ivy.functional.ivy.general.rst", "docs/functional/ivy/ivy.functional.ivy.gradients.rst", "docs/functional/ivy/ivy.functional.ivy.layers.rst", "docs/functional/ivy/ivy.functional.ivy.linear_algebra.rst", "docs/functional/ivy/ivy.functional.ivy.losses.rst", "docs/functional/ivy/ivy.functional.ivy.manipulation.rst", "docs/functional/ivy/ivy.functional.ivy.meta.rst", "docs/functional/ivy/ivy.functional.ivy.nest.rst", "docs/functional/ivy/ivy.functional.ivy.norms.rst", "docs/functional/ivy/ivy.functional.ivy.random.rst", "docs/functional/ivy/ivy.functional.ivy.searching.rst", "docs/functional/ivy/ivy.functional.ivy.set.rst", "docs/functional/ivy/ivy.functional.ivy.sorting.rst", "docs/functional/ivy/ivy.functional.ivy.statistical.rst", "docs/functional/ivy/ivy.functional.ivy.utility.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv1d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv2d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv3d_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_dilated.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.conv_general_transpose.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.depthwise_conv2d.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.dropout.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.linear.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.lstm_update.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.multi_head_attention.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.nms.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.roi_align.rst", "docs/functional/ivy/layers/ivy.functional.ivy.layers.scaled_dot_product_attention.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cholesky.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.cross.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.det.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diag.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.diagonal.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eig.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.eigvalsh.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inner.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.inv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matmul.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_power.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_rank.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.matrix_transpose.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.outer.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.pinv.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.qr.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.slogdet.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.solve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svd.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.svdvals.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensordot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.tensorsolve.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.trace.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vander.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vecdot.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_norm.rst", "docs/functional/ivy/linear_algebra/ivy.functional.ivy.linear_algebra.vector_to_skew_symmetric_matrix.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.binary_cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.cross_entropy.rst", "docs/functional/ivy/losses/ivy.functional.ivy.losses.sparse_cross_entropy.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.clip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.concat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.constant_pad.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.expand_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.flip.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.permute_dims.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.repeat.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.reshape.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.roll.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.split.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.squeeze.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.stack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.swapaxes.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.tile.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.unstack.rst", "docs/functional/ivy/manipulation/ivy.functional.ivy.manipulation.zero_pad.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.fomaml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.maml_step.rst", "docs/functional/ivy/meta/ivy.functional.ivy.meta.reptile_step.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.all_nested_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.copy_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.duplicate_array_index_chains.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.insert_into_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.map_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.multi_index_nest.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_any.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_argwhere.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.nested_multi_map.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_empty.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.prune_nest_at_indices.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_index.rst", "docs/functional/ivy/nest/ivy.functional.ivy.nest.set_nest_at_indices.rst", "docs/functional/ivy/norms/ivy.functional.ivy.norms.layer_norm.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.multinomial.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.randint.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_normal.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.random_uniform.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.seed.rst", "docs/functional/ivy/random/ivy.functional.ivy.random.shuffle.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmax.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argmin.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.argwhere.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.nonzero.rst", "docs/functional/ivy/searching/ivy.functional.ivy.searching.where.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_all.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_counts.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_inverse.rst", "docs/functional/ivy/set/ivy.functional.ivy.set.unique_values.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.argsort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.msort.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.searchsorted.rst", "docs/functional/ivy/sorting/ivy.functional.ivy.sorting.sort.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumprod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.cumsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.einsum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.max.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.mean.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.min.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.prod.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.std.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.sum.rst", "docs/functional/ivy/statistical/ivy.functional.ivy.statistical.var.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.all.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.any.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.load.rst", "docs/functional/ivy/utility/ivy.functional.ivy.utility.save.rst", "docs/helpers/ivy_tests.test_ivy.helpers.assertions.rst", "docs/helpers/ivy_tests.test_ivy.helpers.available_frameworks.rst", "docs/helpers/ivy_tests.test_ivy.helpers.function_testing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.globals.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers/ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.rst", "docs/helpers/ivy_tests.test_ivy.helpers.multiprocessing.rst", "docs/helpers/ivy_tests.test_ivy.helpers.pipeline_helper.rst", "docs/helpers/ivy_tests.test_ivy.helpers.structs.rst", "docs/helpers/ivy_tests.test_ivy.helpers.test_parameter_flags.rst", "docs/helpers/ivy_tests.test_ivy.helpers.testing_helpers.rst", "docs/ivy.stateful.rst", "docs/ivy.utils.rst", "docs/ivy_tests.test_ivy.helpers.rst", "docs/stateful/ivy.stateful.activations.rst", "docs/stateful/ivy.stateful.converters.rst", "docs/stateful/ivy.stateful.helpers.rst", "docs/stateful/ivy.stateful.initializers.rst", "docs/stateful/ivy.stateful.layers.rst", "docs/stateful/ivy.stateful.losses.rst", "docs/stateful/ivy.stateful.module.rst", "docs/stateful/ivy.stateful.norms.rst", "docs/stateful/ivy.stateful.optimizers.rst", "docs/stateful/ivy.stateful.sequential.rst", "docs/utils/ivy.utils.assertions.rst", "docs/utils/ivy.utils.backend.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.ast_helpers.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.handler.rst", "docs/utils/ivy.utils.backend/ivy.utils.backend.sub_backend_handler.rst", "docs/utils/ivy.utils.binaries.rst", "docs/utils/ivy.utils.dynamic_import.rst", "docs/utils/ivy.utils.einsum_parser.rst", "docs/utils/ivy.utils.einsum_path_helpers.rst", "docs/utils/ivy.utils.exceptions.rst", "docs/utils/ivy.utils.inspection.rst", "docs/utils/ivy.utils.logging.rst", "docs/utils/ivy.utils.profiler.rst", "docs/utils/ivy.utils.verbosity.rst", "index.rst", "overview/contributing.rst", "overview/contributing/building_the_docs.rst", "overview/contributing/contributor_rewards.rst", "overview/contributing/error_handling.rst", "overview/contributing/helpful_resources.rst", "overview/contributing/open_tasks.rst", "overview/contributing/setting_up.rst", "overview/contributing/the_basics.rst", "overview/contributing/volunteer_program.rst", "overview/deep_dive.rst", "overview/deep_dive/array_api_tests.rst", "overview/deep_dive/arrays.rst", "overview/deep_dive/backend_setting.rst", "overview/deep_dive/building_the_docs_pipeline.rst", "overview/deep_dive/containers.rst", "overview/deep_dive/continuous_integration.rst", "overview/deep_dive/data_types.rst", "overview/deep_dive/devices.rst", "overview/deep_dive/docstring_examples.rst", "overview/deep_dive/docstrings.rst", "overview/deep_dive/exception_handling.rst", "overview/deep_dive/fix_failing_tests.rst", "overview/deep_dive/formatting.rst", "overview/deep_dive/function_arguments.rst", "overview/deep_dive/function_types.rst", "overview/deep_dive/function_wrapping.rst", "overview/deep_dive/gradients.rst", "overview/deep_dive/inplace_updates.rst", "overview/deep_dive/ivy_frontends.rst", "overview/deep_dive/ivy_frontends_tests.rst", "overview/deep_dive/ivy_lint.rst", "overview/deep_dive/ivy_tests.rst", "overview/deep_dive/navigating_the_code.rst", "overview/deep_dive/operating_modes.rst", "overview/deep_dive/superset_behaviour.rst", "overview/design.rst", "overview/design/building_blocks.rst", "overview/design/ivy_as_a_framework.rst", "overview/design/ivy_as_a_framework/ivy_array.rst", "overview/design/ivy_as_a_framework/ivy_container.rst", "overview/design/ivy_as_a_framework/ivy_stateful_api.rst", "overview/design/ivy_as_a_transpiler.rst", "overview/faq.rst", "overview/get_started.rst", "overview/glossary.rst", "overview/motivation.rst", "overview/motivation/ml_explosion.rst", "overview/motivation/standardization.rst", "overview/motivation/why_unify.rst", "overview/one_liners.rst", "overview/one_liners/trace.rst", "overview/one_liners/transpile.rst", "overview/one_liners/unify.rst", "overview/related_work.rst", "overview/related_work/api_standards.rst", "overview/related_work/compiler_infrastructure.rst", "overview/related_work/exchange_formats.rst", "overview/related_work/frameworks.rst", "overview/related_work/graph_tracers.rst", "overview/related_work/ml_unifying_companies.rst", "overview/related_work/multi_vendor_compiler_frameworks.rst", "overview/related_work/vendor_specific_apis.rst", "overview/related_work/vendor_specific_compilers.rst", "overview/related_work/what_does_ivy_add.rst", "overview/related_work/wrapper_frameworks.rst", "overview/volunteer_ranks.rst"], "titles": ["Credit Card Fraud Detection using Ivy Framework", "Demos", "TO REPLACE: Title", "Examples and Demos", "Ivy AlexNet demo", "# Ivy Bert Demo", "Using TensorFlow Models in your PyTorch Projects", "How To Convert Models from PyTorch to PaddlePaddle", "Image Segmentation with Ivy UNet", "&lt;no title&gt;", "&lt;no title&gt;", "Accelerating MMPreTrain models with JAX", "Using Ivy ResNet", "Accelerating PyTorch models with JAX", "Accelerating XGBoost with JAX", "Guides", "Transpiling a PyTorch model to build on top", "Transpiling a haiku model to build on top", "Transpiling a Tensorflow model to build on top", "Developing a convolutional network using Ivy", "Tutorials And Examples", "Learn the basics", "Write Ivy code", "Unify code", "Trace code", "Transpile code", "Lazy vs Eager", "How to use decorators", "Transpile any library", "Transpile any model", "Write a model using Ivy", "ODSC Ivy Demo", "Quickstart", "0.0: Unify", "0.1: Compile", "0.2: Transpile", "1.0: Lazy vs Eager", "1.1: Framework Selection", "1.2: As a Decorator", "1.3: Dynamic vs Static", "2.0: Kornia", "3.0: Perceiver", "3.1: Stable Diffusion", "Basic Operations with Ivy", "Compilation of a Basic Function", "Demo: Transpiling DeepMind\u2019s PerceiverIO", "Deepmind PerceiverIO on GPU", "End-to-End Training Pipeline in Ivy", "HuggingFace Tensorflow DeiT", "Ivy as a Transpiler Introduction", "Resnet 18", "Activations", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Activations", "Base", "Conversions", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Image", "Layers", "Linear algebra", "Losses", "Manipulation", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "Wrapping", "Base", "Cp tensor", "Parafac2 tensor", "Tr tensor", "Tt tensor", "Tucker tensor", "Array", "Container", "Factorized tensor", "Nested array", "Base", "Elementwise", "Data classes", "Functions", "gelu", "hardswish", "leaky_relu", "log_softmax", "mish", "relu", "sigmoid", "softmax", "softplus", "softsign", "cmp_is", "cmp_isnot", "for_loop", "if_else", "try_except", "while_loop", "arange", "array", "asarray", "copy_array", "empty", "empty_like", "eye", "from_dlpack", "frombuffer", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "one_hot", "ones", "ones_like", "to_dlpack", "tril", "triu", "triu_indices", "zeros", "zeros_like", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "check_float", "closest_valid_dtype", "default_complex_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "default_uint_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "infer_default_dtype", "invalid_dtype", "is_bool_dtype", "is_complex_dtype", "is_float_dtype", "is_hashable_dtype", "is_int_dtype", "is_native_dtype", "is_uint_dtype", "promote_types", "promote_types_of_inputs", "result_type", "set_default_complex_dtype", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "set_default_uint_dtype", "type_promote_arrays", "unset_default_complex_dtype", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "unset_default_uint_dtype", "valid_dtype", "as_ivy_dev", "as_native_dev", "clear_cached_mem_on_dev", "default_device", "dev", "dev_util", "function_supported_devices", "function_unsupported_devices", "get_all_ivy_arrays_on_dev", "gpu_is_available", "handle_soft_device_variable", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_soft_device_mode", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "unset_soft_device_mode", "used_mem_on_dev", "abs", "acos", "acosh", "add", "angle", "asin", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_or", "bitwise_right_shift", "bitwise_xor", "ceil", "cos", "cosh", "deg2rad", "divide", "equal", "erf", "exp", "exp2", "expm1", "floor", "floor_divide", "fmin", "fmod", "gcd", "greater", "greater_equal", "imag", "isfinite", "isinf", "isnan", "isreal", "lcm", "less", "less_equal", "log", "log10", "log1p", "log2", "logaddexp", "logaddexp2", "logical_and", "logical_not", "logical_or", "logical_xor", "maximum", "minimum", "multiply", "nan_to_num", "negative", "not_equal", "positive", "pow", "rad2deg", "real", "reciprocal", "remainder", "round", "sign", "sin", "sinh", "sqrt", "square", "subtract", "tan", "tanh", "trapz", "trunc", "trunc_divide", "celu", "elu", "hardshrink", "hardsilu", "hardtanh", "logit", "logsigmoid", "prelu", "relu6", "scaled_tanh", "selu", "silu", "softshrink", "stanh", "tanhshrink", "threshold", "thresholded_relu", "blackman_window", "eye_like", "hamming_window", "hann_window", "indices", "kaiser_bessel_derived_window", "kaiser_window", "mel_weight_matrix", "ndenumerate", "ndindex", "polyval", "random_cp", "random_parafac2", "random_tr", "random_tt", "random_tucker", "tril_indices", "trilu", "unsorted_segment_mean", "unsorted_segment_min", "unsorted_segment_sum", "vorbis_window", "allclose", "amax", "amin", "binarizer", "conj", "copysign", "count_nonzero", "diff", "digamma", "erfc", "erfinv", "fix", "float_power", "fmax", "frexp", "gradient", "hypot", "isclose", "ldexp", "lerp", "lgamma", "modf", "nansum", "nextafter", "signbit", "sinc", "sparsify_tensor", "xlogy", "zeta", "reduce", "bind_custom_gradient_function", "jvp", "vjp", "Activations", "Constants", "Creation", "Data type", "Device", "Elementwise", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Sparse array", "Statistical", "Utility", "adaptive_avg_pool1d", "adaptive_avg_pool2d", "adaptive_max_pool2d", "adaptive_max_pool3d", "area_interpolate", "avg_pool1d", "avg_pool2d", "avg_pool3d", "dct", "dft", "dropout1d", "dropout2d", "dropout3d", "embedding", "fft", "fft2", "generate_einsum_equation", "get_interpolate_kernel", "idct", "ifft", "ifftn", "interp", "interpolate", "max_pool1d", "max_pool2d", "max_pool3d", "max_unpool1d", "nearest_interpolate", "pool", "reduce_window", "rfft", "rfftn", "rnn", "sliding_window", "stft", "adjoint", "batched_outer", "cond", "diagflat", "dot", "eig", "eigh_tridiagonal", "eigvals", "general_inner_product", "higher_order_moment", "initialize_tucker", "khatri_rao", "kron", "kronecker", "lu_factor", "lu_solve", "make_svd_non_negative", "matrix_exp", "mode_dot", "multi_dot", "multi_mode_dot", "partial_tucker", "solve_triangular", "svd_flip", "tensor_train", "truncated_svd", "tt_matrix_to_tensor", "tucker", "hinge_embedding_loss", "huber_loss", "kl_div", "l1_loss", "log_poisson_loss", "poisson_nll_loss", "smooth_l1_loss", "soft_margin_loss", "as_strided", "associative_scan", "atleast_1d", "atleast_2d", "atleast_3d", "broadcast_shapes", "check_scalar", "choose", "column_stack", "concat_from_sequence", "dsplit", "dstack", "expand", "fill_diagonal", "flatten", "fliplr", "flipud", "fold", "heaviside", "hsplit", "hstack", "i0", "matricize", "moveaxis", "pad", "partial_fold", "partial_tensor_to_vec", "partial_unfold", "partial_vec_to_tensor", "put_along_axis", "rot90", "soft_thresholding", "take", "take_along_axis", "top_k", "trim_zeros", "unflatten", "unfold", "unique_consecutive", "vsplit", "vstack", "batch_norm", "group_norm", "instance_norm", "l1_normalize", "l2_normalize", "local_response_norm", "lp_normalize", "bernoulli", "beta", "dirichlet", "gamma", "poisson", "unravel_index", "invert_permutation", "lexsort", "is_ivy_sparse_array", "is_native_sparse_array", "native_sparse_array", "native_sparse_array_to_indices_values_and_shape", "bincount", "corrcoef", "cov", "cummax", "cummin", "histogram", "igamma", "median", "nanmean", "nanmedian", "nanmin", "nanprod", "quantile", "optional_get_element", "all_equal", "arg_info", "arg_names", "array_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "fourier_encode", "function_supported_devices_and_dtypes", "function_unsupported_devices_and_dtypes", "gather", "gather_nd", "get_all_arrays_in_memory", "get_item", "get_num_dims", "get_referrers_recursive", "has_nans", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_ivy_nested_array", "is_native_array", "isin", "isscalar", "itemsize", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "print_all_arrays_in_memory", "scatter_flat", "scatter_nd", "set_array_mode", "set_exception_trace_mode", "set_inplace_mode", "set_item", "set_min_base", "set_min_denominator", "set_nestable_mode", "set_precise_mode", "set_queue_timeout", "set_shape_array_mode", "set_show_func_wrapper_trace_mode", "set_tmp_dir", "shape", "size", "stable_divide", "stable_pow", "strides", "supports_inplace_updates", "to_ivy_shape", "to_list", "to_native_shape", "to_numpy", "to_scalar", "try_else_none", "unset_array_mode", "unset_exception_trace_mode", "unset_inplace_mode", "unset_min_base", "unset_min_denominator", "unset_nestable_mode", "unset_precise_mode", "unset_queue_timeout", "unset_shape_array_mode", "unset_show_func_wrapper_trace_mode", "unset_tmp_dir", "value_is_nan", "vmap", "adam_step", "adam_update", "execute_with_gradients", "grad", "gradient_descent_update", "jac", "lamb_update", "lars_update", "optimizer_update", "stop_gradient", "value_and_grad", "Activations", "Constants", "Control flow ops", "Creation", "Data type", "Device", "Elementwise", "Experimental", "General", "Gradients", "Layers", "Linear algebra", "Losses", "Manipulation", "Meta", "Nest", "Norms", "Random", "Searching", "Set", "Sorting", "Statistical", "Utility", "conv", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "conv_general_dilated", "conv_general_transpose", "depthwise_conv2d", "dropout", "linear", "lstm", "lstm_update", "multi_head_attention", "nms", "roi_align", "scaled_dot_product_attention", "cholesky", "cross", "det", "diag", "diagonal", "eig", "eigh", "eigvalsh", "inner", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "tensorsolve", "trace", "vander", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "binary_cross_entropy", "cross_entropy", "sparse_cross_entropy", "clip", "concat", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "unstack", "zero_pad", "fomaml_step", "maml_step", "reptile_step", "all_nested_indices", "copy_nest", "duplicate_array_index_chains", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_argwhere", "nested_map", "nested_multi_map", "prune_empty", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "layer_norm", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "argmax", "argmin", "argwhere", "nonzero", "where", "unique_all", "unique_counts", "unique_inverse", "unique_values", "argsort", "msort", "searchsorted", "sort", "cumprod", "cumsum", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "all", "any", "load", "save", "Assertions", "Available frameworks", "Function testing", "Globals", "Hypothesis helpers", "Array helpers", "Dtype helpers", "General helpers", "Number helpers", "Multiprocessing", "Pipeline helper", "Structs", "Test parameter flags", "Testing helpers", "Framework classes", "Utils", "Testing", "Activations", "Converters", "Helpers", "Initializers", "Layers", "Losses", "Module", "Norms", "Optimizers", "Sequential", "Assertions", "Backend", "Ast helpers", "Handler", "Sub backend handler", "Binaries", "Dynamic import", "Einsum parser", "Einsum path helpers", "Exceptions", "Inspection", "Logging", "Profiler", "Verbosity", "Home", "Contributing", "Building the Docs", "Contributor Rewards", "Error Handling", "Helpful Resources", "Open Tasks", "Setting Up", "The Basics", "Contributor Program", "Deep Dive", "Array API Tests", "Arrays", "Backend Setting", "Building the Docs Pipeline", "Containers", "Continuous Integration", "Data Types", "Devices", "Docstring Examples", "Docstrings", "Exception Handling", "Fix Failing Tests:", "Formatting", "Function Arguments", "Function Types", "Function Wrapping", "Gradients", "Inplace Updates", "Ivy Frontends", "Ivy Frontend Tests", "Ivy-Lint: Ivy\u2019s Custom Code Formatters", "Ivy Tests", "Navigating the Code", "Operating Modes", "Superset Behaviour", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "FAQ", "Get Started", "Glossary", "Motivation", "ML Explosion", "Standardization", "Why Unify?", "One liners", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.trace_graph()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.transpile()</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ivy.unify()</span></code>", "Related Work", "API Standards", "Compiler Infrastructure", "Exchange Formats", "Frameworks", "Graph Tracers", "ML-Unifying Companies", "Multi-Vendor Compiler Frameworks", "Vendor-Specific APIs", "Vendor-Specific Compilers", "What does Ivy Add?", "Wrapper Frameworks", "Contributor Leaderboard"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 165, 168, 171, 172, 173, 175, 179, 180, 194, 197, 207, 213, 214, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 409, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 580, 586, 591, 592, 593, 594, 595, 597, 599, 600, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 722, 724, 725, 730, 731, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 774, 776, 777, 779, 788, 789, 791, 792, 794, 795, 796, 797, 806, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878], "notebook": [0, 4, 5, 8, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 35, 37, 46, 794, 812], "i": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 180, 192, 194, 196, 197, 199, 200, 202, 204, 207, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 315, 316, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 385, 387, 388, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 404, 407, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 427, 428, 429, 430, 432, 433, 434, 435, 437, 438, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 572, 573, 576, 577, 578, 580, 586, 590, 591, 592, 593, 595, 597, 599, 600, 601, 613, 614, 616, 617, 618, 619, 621, 622, 623, 624, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 774, 776, 777, 778, 779, 784, 788, 789, 791, 792, 793, 794, 795, 796, 798, 801, 802, 805, 806, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "dedic": [0, 789, 821, 836, 847, 851, 853], "task": [0, 1, 6, 48, 640, 715, 716, 717, 812, 813, 815, 819, 820, 821, 841, 842, 870, 876, 877], "util": [0, 6, 7, 8, 9, 10, 13, 23, 26, 27, 28, 29, 45, 48, 57, 80, 198, 376, 447, 631, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 819, 826, 830, 833, 834, 837, 840, 844, 845, 849, 864, 868, 876, 877], "power": [0, 22, 31, 32, 56, 57, 58, 62, 79, 80, 81, 85, 102, 103, 234, 243, 244, 278, 333, 346, 369, 372, 375, 423, 582, 593, 605, 632, 634, 637, 641, 679, 692, 724, 791, 846, 851, 852, 853, 870, 872, 876], "we": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 48, 49, 50, 57, 62, 63, 64, 72, 80, 85, 86, 95, 97, 98, 118, 364, 374, 378, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 494, 499, 545, 555, 595, 617, 618, 620, 625, 626, 634, 635, 637, 638, 639, 680, 696, 702, 703, 704, 706, 708, 709, 711, 713, 788, 794, 801, 806, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 870, 871, 875, 876, 878], "emploi": [0, 14, 876], "build": [0, 9, 15, 19, 20, 22, 29, 31, 32, 35, 36, 37, 38, 43, 45, 50, 68, 74, 103, 645, 749, 750, 751, 752, 792, 793, 794, 812, 813, 819, 822, 828, 829, 837, 839, 848, 850, 853, 854, 855, 857, 860, 864, 868, 870, 872, 875, 876, 877], "Thegoal": [0, 20, 45, 247, 632, 812, 818, 821, 860, 870, 876], "accur": [0, 6, 245, 263, 632, 637, 685, 838], "distinguish": 0, "between": [0, 6, 14, 20, 21, 26, 36, 37, 38, 43, 56, 57, 58, 61, 62, 63, 64, 68, 74, 79, 80, 84, 85, 86, 87, 103, 126, 165, 228, 241, 276, 292, 334, 351, 353, 372, 375, 376, 377, 378, 387, 399, 400, 401, 412, 413, 414, 422, 428, 432, 453, 454, 455, 456, 457, 458, 459, 484, 532, 629, 630, 632, 636, 638, 639, 641, 643, 645, 659, 682, 696, 697, 698, 702, 710, 724, 739, 750, 751, 752, 777, 784, 796, 812, 824, 825, 829, 831, 836, 837, 838, 840, 841, 842, 843, 844, 847, 848, 850, 851, 852, 854, 859, 863, 864, 866, 867, 869, 870, 871, 876], "activ": [0, 6, 16, 29, 31, 32, 57, 58, 61, 72, 80, 84, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 295, 296, 297, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 595, 636, 663, 666, 791, 792, 810, 812, 819, 820, 829, 835, 845, 846, 853, 864, 870, 873], "therebi": [0, 6, 844], "enhanc": [0, 28, 31, 32, 812, 843, 864], "secur": 0, "usag": [0, 7, 213, 631, 829, 837, 840, 844, 849, 855, 860, 873], "befor": [0, 4, 5, 6, 8, 23, 24, 25, 26, 27, 33, 34, 35, 36, 37, 38, 45, 57, 61, 62, 64, 68, 70, 74, 80, 84, 85, 93, 210, 213, 218, 375, 378, 387, 403, 408, 418, 422, 468, 475, 476, 477, 484, 523, 524, 631, 636, 637, 639, 640, 641, 645, 647, 649, 650, 651, 652, 654, 656, 658, 662, 663, 666, 677, 678, 694, 700, 715, 716, 730, 749, 750, 751, 752, 757, 758, 761, 763, 765, 773, 792, 801, 805, 818, 819, 820, 823, 824, 826, 829, 830, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 849, 852, 855, 863, 864, 870], "dive": [0, 14, 20, 22, 31, 43, 812, 813, 814, 817, 818, 820, 823, 827, 829, 835, 842, 848, 851, 852, 855, 876], "need": [0, 1, 4, 7, 11, 13, 20, 22, 28, 29, 31, 32, 45, 46, 47, 57, 58, 64, 80, 81, 87, 375, 376, 387, 398, 403, 404, 408, 429, 529, 540, 541, 562, 634, 636, 637, 639, 641, 663, 672, 699, 702, 729, 777, 812, 814, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 851, 852, 855, 856, 861, 863, 864, 866, 870, 871, 872, 876], "up": [0, 4, 7, 8, 11, 13, 14, 31, 57, 58, 80, 81, 375, 378, 398, 411, 468, 476, 557, 569, 634, 636, 659, 661, 812, 813, 816, 818, 820, 821, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 859, 860, 861, 863, 871, 876, 877], "our": [0, 4, 6, 7, 11, 13, 14, 16, 18, 20, 23, 24, 26, 27, 28, 31, 32, 33, 34, 36, 37, 38, 43, 45, 46, 49, 72, 95, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 778, 788, 789, 791, 792, 794, 795, 796, 797, 812, 813, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 831, 833, 834, 835, 838, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 859, 860, 863, 875, 876, 878], "necessari": [0, 6, 7, 37, 53, 57, 76, 80, 87, 128, 240, 273, 377, 378, 452, 462, 463, 464, 470, 472, 473, 474, 475, 476, 483, 499, 585, 608, 632, 634, 702, 703, 704, 706, 708, 709, 711, 713, 812, 818, 819, 824, 825, 827, 829, 831, 840, 841, 844, 846, 847, 863, 864], "follow": [0, 1, 6, 7, 14, 25, 26, 27, 29, 31, 32, 35, 36, 37, 43, 46, 47, 57, 58, 59, 61, 62, 68, 74, 80, 81, 82, 84, 85, 134, 165, 168, 213, 223, 240, 247, 273, 275, 282, 283, 319, 369, 375, 377, 378, 381, 398, 411, 419, 457, 472, 484, 501, 503, 560, 561, 562, 592, 593, 616, 619, 621, 622, 623, 629, 630, 631, 632, 634, 635, 636, 637, 641, 645, 663, 666, 678, 684, 694, 724, 730, 749, 750, 751, 752, 792, 796, 812, 814, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 863, 867, 870, 873], "command": [0, 45, 47, 814, 819, 823, 826, 828, 834, 835, 856], "which": [0, 1, 4, 6, 7, 9, 10, 13, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 100, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 153, 155, 157, 163, 165, 168, 170, 173, 180, 192, 197, 201, 206, 208, 211, 212, 213, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 322, 325, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 348, 350, 351, 352, 353, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 385, 387, 398, 399, 400, 401, 403, 404, 408, 409, 418, 419, 420, 422, 427, 430, 442, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 489, 490, 491, 492, 493, 494, 496, 501, 503, 504, 505, 507, 508, 509, 510, 511, 512, 514, 515, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 568, 569, 574, 575, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 659, 660, 661, 663, 666, 667, 668, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 691, 693, 694, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 713, 714, 723, 724, 725, 726, 731, 733, 734, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 788, 789, 791, 792, 793, 794, 795, 796, 797, 801, 802, 808, 810, 812, 814, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877], "an": [0, 1, 3, 4, 6, 7, 9, 10, 13, 14, 20, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 37, 43, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 76, 77, 78, 79, 80, 81, 85, 86, 87, 89, 90, 91, 93, 94, 95, 97, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 165, 168, 171, 175, 179, 180, 210, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 316, 317, 318, 320, 321, 328, 329, 330, 331, 332, 333, 335, 336, 338, 341, 345, 350, 354, 359, 367, 369, 372, 375, 376, 377, 378, 381, 382, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 407, 409, 411, 412, 413, 414, 417, 418, 419, 420, 421, 422, 423, 424, 426, 429, 430, 431, 456, 457, 461, 462, 463, 464, 468, 469, 470, 472, 479, 483, 484, 490, 492, 496, 498, 499, 501, 502, 503, 506, 508, 509, 511, 514, 515, 520, 521, 522, 523, 524, 525, 526, 529, 530, 533, 538, 540, 541, 549, 552, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 571, 577, 580, 581, 590, 591, 595, 599, 600, 601, 614, 617, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 724, 737, 739, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 778, 779, 781, 784, 788, 789, 791, 792, 794, 795, 796, 797, 806, 810, 812, 814, 815, 816, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 856, 857, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 874, 876, 877], "machin": [0, 6, 7, 12, 13, 26, 27, 28, 29, 34, 35, 43, 49, 57, 62, 80, 85, 165, 168, 376, 430, 630, 637, 680, 683, 812, 819, 823, 837, 857, 860, 868, 870, 872, 873, 874, 875, 876], "learn": [0, 6, 7, 14, 16, 18, 22, 23, 24, 25, 27, 29, 31, 32, 33, 34, 35, 36, 43, 45, 57, 59, 82, 376, 377, 447, 452, 545, 616, 619, 621, 622, 623, 634, 635, 640, 715, 716, 717, 796, 812, 813, 817, 818, 819, 822, 823, 829, 834, 835, 837, 839, 848, 857, 859, 860, 868, 872, 873, 874, 875, 876, 877], "other": [0, 4, 6, 7, 9, 11, 13, 16, 18, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 45, 47, 54, 56, 57, 58, 64, 70, 74, 77, 79, 80, 81, 87, 93, 97, 102, 103, 126, 141, 153, 179, 240, 245, 247, 263, 272, 273, 337, 341, 372, 378, 468, 469, 477, 534, 535, 629, 630, 632, 634, 643, 647, 700, 710, 741, 764, 766, 773, 778, 812, 816, 818, 819, 820, 821, 823, 824, 827, 828, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 851, 853, 854, 855, 856, 857, 860, 863, 864, 866, 868, 869, 870, 876, 877], "essenti": [0, 812, 815, 818, 825, 827, 830, 831, 837, 840, 841, 842, 859, 860, 876], "panda": [0, 14, 45, 47, 860, 867], "matplotlib": [0, 6, 7, 14, 26, 27, 28, 29, 45, 46, 47, 50], "scikit": [0, 14, 376, 447, 860], "torch": [0, 6, 7, 9, 10, 11, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 48, 49, 50, 53, 58, 62, 72, 81, 85, 129, 167, 194, 195, 199, 209, 211, 216, 283, 335, 336, 372, 378, 496, 538, 562, 595, 629, 630, 631, 632, 634, 637, 640, 687, 716, 717, 773, 784, 789, 801, 810, 812, 816, 819, 820, 823, 824, 825, 826, 828, 829, 830, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 851, 852, 854, 855, 857, 863, 864, 865, 876], "cryptographi": [0, 14], "These": [0, 14, 38, 57, 80, 376, 378, 387, 429, 483, 522, 636, 637, 663, 672, 673, 812, 815, 817, 818, 819, 820, 823, 827, 829, 831, 832, 836, 837, 840, 841, 844, 849, 850, 852, 853, 854, 855, 857, 859, 860, 861, 864, 870, 874, 876, 877], "tool": [0, 14, 22, 31, 32, 812, 819, 820, 831, 835, 850, 854, 855, 858, 861, 864, 868, 869, 870, 871, 873, 876, 877], "provid": [0, 6, 9, 20, 22, 26, 29, 31, 32, 36, 37, 43, 49, 53, 57, 58, 62, 64, 67, 70, 71, 74, 76, 80, 81, 85, 87, 90, 93, 94, 122, 139, 141, 158, 159, 160, 161, 162, 170, 180, 192, 196, 209, 292, 375, 376, 378, 381, 387, 411, 419, 423, 428, 432, 445, 446, 450, 451, 468, 470, 479, 499, 501, 503, 532, 544, 576, 577, 628, 629, 630, 631, 632, 634, 636, 637, 639, 641, 644, 647, 648, 663, 679, 682, 693, 702, 703, 710, 722, 744, 764, 766, 767, 768, 777, 792, 796, 801, 802, 812, 818, 819, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 839, 840, 841, 842, 844, 845, 847, 851, 853, 855, 859, 863, 864, 865, 868, 869, 870, 871, 872, 873, 874, 877], "robust": 0, "foundat": [0, 22, 860, 873], "manipul": [0, 57, 80, 840, 841, 845, 847, 849, 854, 859, 870], "4": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 22, 23, 24, 25, 26, 27, 28, 29, 31, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 110, 111, 112, 113, 114, 115, 117, 118, 126, 127, 128, 129, 132, 134, 136, 137, 138, 139, 140, 141, 143, 147, 149, 153, 154, 155, 163, 165, 168, 173, 175, 180, 197, 198, 206, 211, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 320, 321, 328, 330, 335, 336, 338, 340, 341, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 354, 356, 359, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 394, 395, 396, 397, 399, 400, 402, 403, 404, 407, 408, 412, 413, 414, 417, 418, 419, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 440, 446, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 467, 468, 469, 470, 471, 474, 475, 476, 479, 480, 481, 483, 484, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 504, 505, 506, 507, 510, 512, 513, 515, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 555, 558, 560, 561, 562, 569, 576, 577, 592, 593, 594, 595, 597, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 719, 721, 722, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 779, 791, 792, 796, 805, 806, 812, 816, 818, 819, 825, 826, 827, 828, 829, 831, 834, 839, 842, 844, 847, 849, 851, 852, 853, 854, 861, 863, 870, 876, 877], "pip": [0, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 43, 44, 45, 46, 47, 48, 49, 50, 812, 816, 819, 826, 835], "q": [0, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 45, 46, 47, 57, 61, 62, 80, 84, 85, 362, 372, 376, 387, 429, 532, 636, 637, 641, 663, 666, 672, 673, 684, 726, 819, 820, 822, 842, 855], "r": [0, 4, 12, 45, 46, 57, 62, 74, 80, 85, 97, 98, 349, 364, 372, 374, 617, 635, 637, 639, 684, 713, 819, 820, 822, 839, 842, 878], "requir": [0, 6, 7, 26, 27, 28, 29, 36, 45, 46, 47, 50, 56, 57, 74, 79, 80, 274, 287, 291, 376, 378, 429, 430, 484, 632, 637, 639, 672, 673, 674, 710, 776, 784, 789, 806, 814, 818, 819, 824, 826, 828, 829, 830, 831, 832, 833, 835, 836, 838, 841, 842, 843, 844, 845, 847, 849, 851, 855, 864, 870, 876], "txt": [0, 4, 6, 12, 46, 58, 819, 823, 826], "16": [0, 4, 7, 8, 9, 10, 14, 26, 27, 28, 29, 43, 45, 47, 56, 57, 58, 61, 62, 66, 70, 77, 79, 80, 81, 84, 85, 87, 89, 102, 103, 168, 234, 263, 283, 290, 346, 349, 353, 372, 375, 378, 387, 394, 395, 397, 403, 407, 408, 412, 413, 418, 422, 457, 474, 523, 529, 546, 549, 571, 592, 593, 625, 630, 632, 634, 635, 636, 637, 639, 641, 643, 644, 647, 658, 660, 667, 671, 674, 675, 682, 684, 688, 713, 726, 739, 740, 741, 748, 758, 759, 776, 779, 812, 820, 829, 831, 852], "mb": [0, 6, 7, 9, 10, 12, 45, 47, 50, 828], "25": [0, 14, 43, 45, 46, 47, 56, 57, 58, 62, 63, 66, 70, 73, 79, 80, 81, 84, 85, 88, 89, 93, 102, 103, 118, 137, 223, 224, 234, 240, 242, 253, 258, 273, 278, 281, 283, 286, 287, 288, 293, 315, 369, 377, 387, 418, 453, 456, 523, 532, 560, 561, 577, 592, 629, 632, 634, 637, 638, 641, 642, 647, 650, 667, 671, 676, 692, 697, 719, 726, 730, 737, 739, 740, 741, 758, 759, 761, 766, 821, 827, 839], "1": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 102, 103, 110, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 149, 152, 153, 154, 155, 159, 163, 164, 165, 168, 173, 175, 180, 196, 197, 201, 205, 206, 208, 209, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 326, 328, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 445, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 572, 574, 576, 577, 581, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 779, 781, 784, 788, 791, 792, 793, 794, 795, 796, 797, 801, 805, 806, 810, 812, 815, 816, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 839, 840, 841, 842, 844, 847, 848, 849, 851, 852, 853, 854, 855, 860, 861, 863, 864, 865, 878], "": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 43, 46, 48, 49, 50, 53, 57, 58, 59, 62, 70, 80, 82, 85, 93, 122, 139, 145, 146, 166, 167, 196, 199, 200, 212, 247, 282, 329, 334, 335, 336, 338, 349, 351, 357, 361, 363, 369, 372, 373, 375, 376, 377, 378, 381, 382, 387, 390, 391, 398, 404, 409, 420, 428, 432, 440, 449, 454, 456, 457, 473, 475, 476, 484, 501, 502, 503, 512, 522, 532, 550, 551, 557, 571, 594, 595, 616, 618, 619, 620, 621, 623, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 641, 647, 651, 653, 655, 657, 663, 670, 678, 680, 687, 688, 694, 730, 764, 766, 777, 791, 792, 793, 794, 795, 796, 797, 801, 810, 812, 813, 814, 815, 816, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 869, 870, 871, 873, 874, 875, 876], "eta": [0, 7, 9, 10, 45, 47, 50], "0": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 100, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 126, 129, 132, 134, 135, 136, 137, 138, 141, 143, 145, 146, 147, 148, 149, 152, 153, 154, 155, 163, 165, 168, 169, 173, 175, 180, 193, 196, 198, 201, 206, 207, 208, 209, 211, 212, 213, 215, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 385, 387, 394, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 412, 413, 414, 415, 418, 419, 420, 422, 425, 426, 427, 429, 430, 431, 434, 435, 437, 440, 441, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 467, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 539, 540, 541, 544, 545, 546, 548, 549, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 572, 574, 576, 577, 581, 586, 590, 591, 592, 593, 595, 597, 599, 600, 609, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 779, 781, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 801, 805, 806, 810, 812, 816, 819, 820, 823, 825, 827, 828, 829, 830, 831, 832, 833, 834, 839, 840, 841, 842, 844, 845, 849, 851, 852, 853, 854, 855, 863, 864], "00": [0, 6, 7, 9, 10, 12, 14, 45, 47, 50, 57, 58, 62, 80, 81, 85, 245, 312, 343, 344, 369, 375, 397, 403, 407, 408, 549, 593, 632, 634, 637, 674, 684, 776, 835, 844], "44": [0, 6, 7, 9, 10, 43, 47, 56, 57, 66, 79, 80, 89, 226, 273, 283, 287, 288, 339, 372, 375, 396, 397, 632, 636, 637, 641, 644, 647, 659, 682, 726, 739, 740, 748, 759], "6": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 16, 24, 26, 27, 28, 29, 31, 32, 43, 45, 46, 47, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 64, 66, 67, 69, 70, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 102, 103, 110, 112, 117, 122, 127, 128, 135, 136, 139, 140, 143, 149, 153, 154, 155, 163, 165, 173, 219, 220, 222, 223, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 296, 297, 299, 301, 303, 305, 306, 307, 309, 310, 311, 312, 313, 319, 330, 335, 336, 338, 340, 349, 350, 352, 353, 354, 356, 363, 367, 369, 372, 373, 375, 376, 377, 378, 383, 385, 387, 397, 399, 402, 403, 407, 408, 412, 418, 419, 420, 422, 425, 428, 431, 432, 436, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 468, 470, 474, 475, 479, 480, 483, 484, 489, 490, 492, 493, 496, 499, 500, 510, 512, 513, 515, 520, 522, 523, 524, 525, 527, 529, 531, 532, 538, 540, 541, 544, 545, 546, 552, 553, 560, 561, 562, 577, 591, 592, 593, 594, 595, 597, 601, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 666, 668, 669, 670, 671, 673, 674, 675, 677, 678, 679, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 729, 730, 736, 737, 738, 739, 740, 741, 743, 744, 745, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 776, 791, 812, 816, 819, 823, 825, 827, 828, 829, 831, 834, 839, 844, 847, 849, 851, 852, 853], "kb": [0, 6, 7, 9, 10, 12, 45, 47, 50], "3": [0, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 25, 26, 27, 28, 29, 31, 32, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 126, 127, 128, 132, 134, 136, 137, 139, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 155, 159, 163, 165, 173, 175, 180, 194, 196, 197, 208, 211, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 330, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 392, 394, 395, 396, 397, 399, 402, 403, 404, 407, 408, 412, 413, 414, 417, 418, 419, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 443, 446, 448, 451, 452, 453, 454, 455, 456, 457, 458, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 504, 505, 506, 507, 510, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 572, 576, 577, 590, 591, 592, 593, 597, 600, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 719, 721, 722, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 779, 792, 805, 806, 810, 812, 816, 818, 819, 823, 824, 825, 827, 828, 829, 831, 833, 834, 837, 839, 842, 844, 849, 851, 852, 853, 854, 863, 864, 877], "45": [0, 7, 9, 10, 43, 45, 47, 56, 57, 70, 79, 80, 82, 84, 89, 103, 224, 228, 240, 283, 284, 343, 344, 357, 372, 375, 387, 397, 407, 418, 523, 529, 615, 621, 632, 635, 637, 639, 647, 682, 708, 740, 741, 759, 776], "5": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 23, 24, 26, 27, 28, 29, 31, 32, 43, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 97, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 134, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 153, 154, 155, 159, 163, 165, 173, 175, 180, 197, 206, 211, 214, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 301, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 330, 333, 335, 336, 338, 340, 342, 344, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 383, 385, 387, 394, 395, 396, 397, 399, 400, 402, 403, 404, 407, 408, 412, 413, 414, 417, 418, 419, 420, 422, 425, 428, 429, 431, 432, 434, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 468, 469, 470, 471, 474, 475, 478, 479, 480, 483, 484, 489, 490, 491, 492, 493, 494, 496, 499, 500, 505, 506, 507, 510, 512, 513, 515, 520, 522, 523, 524, 525, 526, 527, 529, 532, 538, 539, 540, 541, 544, 545, 546, 547, 549, 552, 553, 555, 558, 560, 561, 562, 576, 577, 581, 592, 593, 594, 595, 597, 601, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 652, 654, 655, 656, 657, 658, 659, 660, 662, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 691, 692, 693, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 719, 721, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 779, 792, 805, 806, 812, 815, 818, 819, 820, 823, 825, 827, 828, 829, 831, 833, 834, 836, 839, 842, 844, 851, 852, 853, 864, 878], "143": [0, 7, 9, 10, 62, 79, 103, 290, 632, 637, 675, 831], "8": [0, 4, 6, 7, 9, 10, 11, 12, 13, 14, 24, 26, 27, 28, 29, 43, 45, 47, 50, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 77, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 102, 103, 110, 125, 135, 136, 140, 143, 149, 158, 160, 161, 162, 165, 173, 198, 215, 223, 225, 226, 230, 231, 234, 235, 236, 238, 244, 247, 251, 252, 258, 259, 260, 264, 265, 268, 269, 271, 272, 273, 278, 279, 282, 283, 284, 287, 288, 291, 292, 293, 297, 303, 305, 306, 307, 309, 310, 312, 313, 330, 334, 346, 349, 351, 352, 353, 356, 363, 367, 369, 372, 375, 376, 377, 378, 387, 394, 395, 396, 397, 402, 403, 407, 408, 412, 413, 417, 418, 422, 425, 428, 436, 453, 454, 455, 457, 458, 459, 460, 462, 463, 464, 468, 470, 474, 479, 480, 489, 490, 493, 494, 495, 496, 499, 500, 510, 512, 524, 527, 528, 532, 538, 539, 545, 546, 549, 552, 556, 560, 561, 562, 564, 565, 568, 571, 576, 577, 581, 591, 592, 593, 594, 595, 615, 618, 620, 622, 623, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 650, 654, 655, 657, 658, 659, 660, 663, 669, 670, 671, 673, 674, 675, 677, 678, 679, 682, 684, 685, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 703, 710, 711, 713, 719, 726, 730, 738, 739, 740, 741, 743, 748, 749, 751, 753, 754, 756, 758, 759, 761, 763, 765, 766, 776, 779, 792, 819, 827, 828, 831, 844, 848, 852], "7": [0, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 24, 26, 27, 28, 29, 43, 45, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 112, 113, 114, 115, 126, 127, 128, 137, 140, 141, 159, 165, 168, 198, 220, 223, 226, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 246, 247, 250, 251, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 283, 284, 285, 287, 290, 291, 293, 294, 296, 297, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 318, 319, 330, 334, 338, 340, 341, 349, 350, 351, 353, 355, 356, 363, 367, 369, 372, 373, 375, 376, 377, 378, 383, 387, 394, 395, 396, 397, 402, 403, 407, 408, 412, 417, 418, 419, 420, 422, 425, 428, 441, 453, 454, 455, 456, 458, 459, 462, 463, 464, 468, 470, 474, 479, 480, 483, 484, 489, 490, 492, 493, 495, 496, 499, 500, 510, 512, 513, 520, 523, 524, 526, 527, 532, 538, 540, 541, 545, 546, 549, 560, 561, 562, 569, 576, 577, 592, 595, 615, 616, 618, 619, 620, 621, 622, 623, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 655, 657, 658, 659, 660, 666, 668, 669, 670, 671, 673, 674, 675, 677, 679, 682, 684, 685, 687, 688, 689, 691, 692, 693, 696, 697, 698, 699, 702, 703, 708, 710, 711, 713, 718, 719, 726, 730, 737, 738, 739, 740, 741, 743, 748, 749, 751, 753, 754, 756, 757, 758, 759, 761, 763, 765, 766, 776, 819, 820, 825, 827, 828, 831, 837, 840, 844], "9": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 24, 26, 27, 28, 29, 43, 45, 47, 50, 53, 54, 56, 57, 58, 59, 61, 62, 64, 66, 68, 69, 70, 73, 77, 79, 80, 81, 82, 84, 85, 87, 89, 91, 92, 93, 102, 103, 110, 126, 127, 128, 140, 158, 159, 160, 161, 162, 165, 168, 221, 223, 225, 226, 229, 230, 231, 234, 235, 240, 241, 242, 247, 254, 260, 261, 262, 264, 268, 269, 271, 272, 273, 276, 278, 279, 283, 284, 287, 288, 289, 294, 300, 303, 304, 305, 342, 345, 349, 355, 356, 363, 367, 372, 373, 375, 377, 378, 385, 387, 394, 395, 396, 397, 402, 403, 407, 408, 412, 413, 417, 418, 422, 436, 453, 455, 457, 458, 462, 463, 464, 470, 474, 479, 489, 490, 491, 492, 494, 496, 499, 510, 512, 515, 524, 541, 545, 546, 547, 549, 552, 560, 561, 564, 565, 568, 576, 577, 591, 592, 594, 615, 616, 617, 621, 622, 626, 629, 630, 632, 634, 635, 636, 637, 639, 641, 643, 644, 645, 646, 647, 650, 651, 652, 658, 659, 660, 668, 669, 671, 673, 674, 675, 677, 678, 679, 682, 684, 685, 687, 688, 689, 691, 692, 693, 699, 703, 707, 708, 710, 711, 713, 718, 719, 724, 726, 729, 730, 738, 739, 740, 741, 743, 748, 749, 751, 753, 754, 756, 758, 759, 761, 763, 765, 766, 776, 796, 827, 829, 831, 839, 844, 852, 853, 866], "756": [0, 7, 9, 10], "21": [0, 4, 7, 9, 14, 43, 45, 47, 50, 56, 57, 58, 66, 76, 79, 80, 84, 85, 89, 93, 102, 138, 168, 223, 226, 228, 234, 258, 273, 304, 356, 375, 376, 377, 378, 387, 394, 397, 407, 412, 418, 420, 422, 426, 452, 467, 523, 577, 629, 630, 632, 634, 637, 641, 647, 671, 682, 686, 724, 739, 740, 757, 758, 759, 833, 839], "116": [0, 7, 9, 10], "23": [0, 13, 14, 26, 27, 28, 29, 43, 45, 47, 56, 57, 62, 66, 76, 79, 80, 81, 84, 89, 136, 235, 238, 255, 256, 257, 280, 282, 283, 284, 286, 293, 338, 339, 372, 375, 378, 387, 394, 395, 397, 407, 412, 413, 414, 418, 422, 467, 523, 529, 629, 632, 636, 637, 641, 644, 655, 657, 671, 675, 678, 686, 688, 689, 719, 726, 730, 739, 740, 741, 748, 812, 828, 844, 849], "29": [0, 6, 14, 43, 45, 47, 50, 62, 79, 81, 82, 84, 89, 228, 387, 418, 523, 545, 546, 617, 621, 632, 634, 635, 637, 675, 739, 740, 741], "823": 0, "46": [0, 6, 43, 45, 47, 57, 66, 80, 84, 89, 138, 263, 284, 314, 369, 375, 395, 413, 414, 629, 632, 641, 719, 739, 740], "14": [0, 4, 6, 8, 11, 12, 27, 43, 45, 46, 47, 54, 56, 57, 61, 62, 66, 70, 77, 79, 80, 81, 84, 85, 87, 89, 152, 165, 168, 221, 226, 228, 235, 239, 265, 269, 273, 279, 286, 294, 345, 375, 376, 378, 387, 394, 395, 396, 397, 407, 412, 414, 417, 418, 419, 422, 426, 432, 433, 468, 470, 474, 479, 499, 523, 592, 615, 630, 632, 634, 635, 636, 637, 639, 641, 645, 647, 650, 651, 653, 655, 657, 659, 671, 673, 675, 682, 689, 691, 693, 713, 730, 739, 740, 741, 749, 758, 759, 827, 831, 844], "731": [0, 51, 116], "945": 0, "410": 0, "2": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 22, 24, 25, 26, 27, 28, 29, 31, 32, 43, 44, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 100, 102, 103, 110, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 126, 127, 128, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 149, 152, 153, 154, 155, 159, 163, 165, 173, 175, 180, 196, 197, 198, 201, 204, 206, 208, 211, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 319, 320, 321, 328, 330, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 385, 387, 391, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 407, 408, 409, 412, 413, 414, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 441, 443, 446, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 483, 484, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 504, 505, 507, 510, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 572, 574, 576, 577, 581, 590, 591, 592, 593, 594, 595, 597, 601, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 778, 779, 788, 791, 792, 801, 805, 806, 810, 812, 816, 819, 820, 823, 825, 826, 827, 828, 829, 831, 833, 834, 836, 837, 839, 840, 841, 842, 844, 848, 849, 851, 852, 853, 854, 855, 863, 864, 865, 876, 877], "121": 0, "56": [0, 12, 14, 43, 45, 56, 57, 61, 66, 79, 80, 84, 138, 273, 287, 290, 293, 375, 397, 407, 615, 629, 632, 635, 636, 637, 641, 647, 651, 653, 655, 657, 660, 682, 718, 740, 759, 831], "124": [0, 636, 660], "196": [0, 84, 636, 660], "166": [0, 73, 110, 626], "99": [0, 14, 43, 56, 57, 59, 77, 79, 89, 135, 222, 237, 360, 372, 592, 619, 629, 632, 634, 635, 641, 647, 722, 730, 740, 759], "11": [0, 4, 6, 7, 8, 12, 13, 22, 24, 26, 27, 28, 29, 43, 45, 46, 47, 50, 56, 57, 58, 61, 62, 66, 70, 79, 80, 81, 84, 85, 87, 89, 93, 103, 223, 227, 230, 235, 245, 282, 283, 289, 353, 372, 375, 376, 378, 394, 395, 407, 412, 413, 417, 418, 422, 431, 467, 468, 470, 474, 479, 481, 499, 523, 524, 539, 545, 546, 552, 561, 577, 632, 634, 636, 637, 638, 639, 641, 643, 644, 645, 647, 650, 651, 659, 660, 671, 674, 675, 676, 677, 678, 682, 686, 687, 688, 689, 691, 693, 696, 703, 708, 709, 711, 713, 724, 726, 736, 739, 740, 741, 748, 749, 757, 758, 759, 766, 827, 828, 829, 831, 839], "71": [0, 43, 56, 79, 84, 239, 279, 418, 632], "To": [0, 1, 6, 12, 13, 14, 16, 18, 22, 26, 27, 28, 29, 31, 32, 43, 46, 47, 48, 98, 247, 377, 456, 586, 632, 634, 791, 812, 818, 819, 823, 824, 825, 826, 829, 831, 833, 834, 835, 837, 838, 841, 842, 843, 844, 845, 852, 853, 854, 856, 863, 864], "ensur": [0, 1, 12, 13, 16, 18, 26, 27, 28, 29, 57, 58, 80, 81, 375, 376, 412, 413, 414, 447, 562, 634, 771, 812, 815, 818, 819, 820, 824, 829, 830, 831, 833, 835, 836, 838, 840, 841, 842, 843, 844, 845, 856, 870], "begin": [0, 7, 27, 57, 80, 284, 377, 378, 452, 468, 484, 485, 486, 487, 488, 632, 641, 718, 729, 776, 819, 823, 828, 842], "numpi": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 18, 23, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 56, 57, 58, 70, 79, 80, 81, 147, 176, 194, 199, 224, 284, 307, 328, 369, 387, 522, 529, 538, 562, 592, 595, 599, 629, 630, 631, 632, 634, 637, 647, 685, 759, 771, 773, 784, 801, 805, 806, 812, 817, 818, 819, 820, 823, 824, 825, 828, 829, 830, 833, 834, 836, 840, 842, 844, 845, 847, 849, 851, 854, 856, 857, 859, 860, 863, 864, 865, 867, 872, 877], "handl": [0, 4, 8, 43, 45, 51, 55, 56, 57, 73, 74, 78, 79, 80, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 193, 194, 195, 196, 197, 201, 206, 207, 215, 219, 225, 237, 262, 264, 278, 284, 285, 290, 291, 295, 300, 301, 303, 367, 378, 467, 493, 626, 631, 632, 637, 647, 691, 763, 765, 788, 796, 813, 815, 822, 827, 828, 829, 835, 836, 837, 839, 840, 841, 842, 843, 844, 846, 847, 853, 867, 877], "its": [0, 1, 6, 13, 22, 24, 31, 32, 34, 37, 44, 45, 47, 52, 54, 57, 64, 74, 77, 80, 81, 87, 100, 112, 115, 118, 123, 153, 158, 159, 160, 161, 162, 213, 240, 273, 292, 302, 367, 375, 378, 387, 415, 423, 496, 498, 525, 549, 598, 626, 628, 630, 631, 632, 634, 637, 639, 641, 677, 702, 706, 707, 711, 724, 773, 806, 812, 818, 819, 824, 827, 828, 829, 830, 832, 833, 834, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 854, 855, 857, 863, 869, 870, 876], "backend": [0, 4, 6, 7, 9, 10, 13, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 37, 52, 53, 57, 58, 62, 74, 80, 81, 85, 102, 129, 166, 167, 170, 192, 199, 200, 202, 205, 216, 335, 336, 372, 376, 428, 430, 529, 538, 550, 551, 559, 562, 563, 573, 580, 595, 598, 629, 630, 631, 634, 637, 685, 687, 771, 773, 774, 776, 777, 778, 781, 783, 784, 789, 793, 794, 796, 800, 801, 812, 816, 817, 819, 820, 822, 823, 824, 828, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 844, 846, 847, 848, 850, 851, 854, 857, 859, 863, 864, 865, 870, 873, 876, 877], "jax": [0, 3, 6, 12, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 43, 45, 49, 51, 56, 57, 58, 68, 73, 79, 80, 81, 110, 111, 112, 113, 114, 115, 116, 117, 118, 209, 291, 295, 300, 301, 303, 349, 367, 372, 387, 532, 562, 595, 614, 626, 631, 632, 634, 645, 749, 750, 751, 752, 784, 788, 801, 812, 816, 817, 818, 819, 820, 823, 825, 829, 830, 833, 834, 836, 839, 840, 841, 842, 844, 845, 847, 849, 851, 854, 855, 860, 861, 863, 864, 865, 871, 873, 876, 877], "capabl": [0, 6, 20, 28, 32, 844, 847], "optim": [0, 6, 7, 11, 13, 14, 22, 26, 27, 29, 31, 32, 45, 47, 48, 50, 57, 59, 80, 82, 312, 369, 377, 456, 457, 536, 623, 634, 635, 640, 715, 716, 717, 791, 806, 812, 829, 840, 847, 850, 852, 854, 861, 864, 868, 869, 870, 871, 872, 873, 874, 877], "frontend": [0, 14, 579, 634, 773, 774, 777, 781, 784, 812, 817, 820, 822, 828, 829, 833, 834, 839, 843, 844, 847, 848, 850, 857, 864, 870], "xgb_frontend": 0, "access": [0, 1, 28, 31, 32, 74, 812, 818, 819, 820, 828, 829, 835, 840, 841, 856, 864, 870, 872, 874], "compat": [0, 6, 9, 23, 29, 33, 37, 43, 50, 56, 57, 62, 64, 67, 70, 71, 79, 80, 85, 87, 90, 93, 94, 102, 103, 154, 223, 228, 230, 232, 233, 234, 235, 240, 241, 247, 251, 252, 259, 260, 265, 267, 269, 270, 273, 276, 278, 282, 289, 294, 335, 336, 372, 630, 632, 637, 639, 644, 647, 648, 668, 680, 683, 686, 689, 693, 694, 706, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 810, 812, 819, 825, 836, 841, 842, 845, 849, 855, 860], "manner": [0, 24, 32, 34, 44, 52, 75, 641, 730, 819, 829, 830, 832, 837, 841, 845, 852, 855, 859, 866, 868, 876, 877], "sklearn": [0, 14], "model_select": [0, 14], "timeit": [0, 11, 13, 14, 24, 31, 32, 48, 50], "oper": [0, 6, 22, 23, 26, 27, 28, 29, 31, 32, 33, 37, 44, 47, 53, 54, 56, 57, 58, 61, 62, 70, 74, 76, 77, 79, 80, 81, 84, 85, 93, 103, 118, 137, 138, 180, 210, 218, 223, 225, 234, 237, 240, 247, 262, 264, 273, 274, 278, 282, 285, 290, 302, 310, 330, 331, 332, 364, 367, 369, 374, 375, 377, 378, 389, 390, 391, 392, 394, 395, 396, 402, 403, 404, 408, 412, 413, 414, 415, 417, 418, 420, 422, 423, 452, 489, 491, 538, 545, 546, 547, 595, 626, 629, 630, 631, 632, 634, 636, 637, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 663, 678, 689, 691, 761, 763, 765, 776, 779, 792, 806, 810, 812, 818, 819, 822, 823, 824, 827, 829, 830, 831, 832, 833, 837, 840, 841, 844, 847, 849, 852, 853, 857, 859, 863, 866, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877], "xgb": 0, "functool": [0, 14, 45, 833, 841, 851], "higher": [0, 14, 57, 80, 376, 378, 387, 433, 445, 451, 462, 463, 464, 532, 791, 829, 840, 848, 849, 854, 855, 867, 870, 871, 874, 876, 877], "order": [0, 4, 25, 35, 37, 45, 48, 50, 53, 57, 58, 61, 62, 64, 68, 69, 74, 80, 84, 85, 87, 91, 92, 97, 102, 103, 127, 128, 139, 147, 228, 247, 290, 328, 349, 369, 372, 375, 376, 378, 381, 385, 421, 426, 429, 430, 431, 432, 433, 437, 443, 445, 448, 451, 474, 475, 476, 481, 482, 494, 501, 502, 503, 506, 515, 629, 632, 636, 637, 639, 640, 644, 645, 646, 650, 651, 652, 653, 654, 655, 658, 672, 673, 678, 687, 688, 692, 694, 703, 706, 715, 716, 747, 749, 750, 751, 752, 753, 755, 756, 773, 795, 797, 806, 812, 818, 819, 820, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 841, 842, 843, 844, 845, 846, 847, 852, 854, 855, 859, 866, 869, 870, 871, 873, 876], "callabl": [0, 12, 49, 57, 58, 72, 80, 81, 84, 95, 122, 123, 125, 166, 167, 199, 200, 213, 363, 365, 366, 373, 374, 375, 378, 418, 421, 423, 461, 484, 535, 539, 544, 546, 550, 551, 572, 601, 614, 618, 620, 625, 628, 630, 631, 634, 635, 640, 641, 715, 716, 717, 724, 725, 726, 728, 729, 730, 731, 771, 774, 784, 796, 807, 810, 827, 833, 839, 841, 849, 862, 863, 864, 865], "object": [0, 14, 22, 27, 29, 31, 45, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 103, 106, 107, 129, 133, 134, 144, 156, 165, 168, 176, 179, 214, 272, 509, 557, 573, 617, 629, 630, 631, 634, 635, 641, 643, 721, 722, 723, 725, 726, 727, 733, 734, 735, 736, 743, 771, 773, 774, 781, 782, 783, 789, 790, 792, 793, 794, 801, 805, 812, 824, 825, 827, 828, 837, 838, 841, 842, 844, 847, 851, 854, 862, 863, 864, 865, 870, 876], "tqdm_notebook": [0, 14], "tqdm": [0, 6, 7, 14, 26, 27, 28, 29, 45, 47, 812], "progress": [0, 637, 692, 815, 819, 820, 854], "bar": [0, 819, 834], "jupyt": [0, 1, 860, 872], "lai": 0, "groundwork": 0, "preprocess": [0, 4, 12, 14, 31, 32, 45, 48, 863], "step": [0, 1, 2, 6, 7, 17, 18, 19, 30, 31, 32, 43, 45, 46, 47, 57, 59, 76, 80, 82, 126, 137, 375, 378, 421, 423, 478, 615, 616, 619, 621, 622, 623, 629, 635, 640, 715, 716, 717, 796, 810, 812, 818, 819, 820, 821, 824, 825, 827, 828, 829, 830, 831, 834, 839, 841, 844, 849, 852, 853, 854, 861, 870], "np": [0, 4, 5, 6, 7, 8, 9, 10, 11, 13, 16, 18, 23, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 43, 44, 45, 46, 47, 48, 50, 53, 57, 79, 80, 81, 127, 128, 129, 140, 176, 253, 257, 307, 375, 376, 403, 408, 424, 592, 629, 630, 632, 634, 641, 724, 773, 801, 805, 806, 812, 818, 824, 829, 830, 833, 836, 840, 841, 842, 844, 845, 847, 849, 851, 852, 854, 857, 865], "pd": [0, 14, 47], "set_backend": [0, 4, 5, 8, 12, 14, 22, 23, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 44, 46, 47, 48, 56, 58, 72, 79, 81, 167, 176, 194, 195, 199, 209, 211, 216, 224, 538, 562, 630, 631, 634, 637, 640, 685, 716, 717, 801, 812, 823, 825, 829, 830, 837, 838, 839, 849, 851, 854, 863, 864, 865], "config": [0, 5, 6, 7, 8, 11, 13, 14, 25, 28, 31, 32, 45, 46, 48, 74, 641, 731, 812, 819, 823, 826, 828, 835, 842, 852, 863, 871], "updat": [0, 1, 5, 6, 7, 8, 9, 10, 11, 13, 14, 23, 25, 26, 27, 28, 29, 31, 32, 45, 47, 52, 58, 59, 74, 81, 82, 97, 378, 489, 562, 576, 577, 580, 581, 604, 615, 616, 619, 621, 622, 623, 634, 635, 636, 640, 641, 659, 662, 715, 716, 717, 725, 726, 730, 735, 736, 784, 789, 795, 796, 801, 806, 812, 818, 819, 820, 822, 823, 824, 827, 828, 829, 831, 836, 838, 839, 841, 842, 844, 847, 849, 851, 852, 854, 855], "jax_enable_x64": [0, 5, 8, 11, 13, 14, 25, 28, 31, 32, 812], "true": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 25, 26, 28, 29, 31, 32, 36, 37, 38, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 156, 163, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 180, 192, 196, 197, 199, 200, 204, 207, 208, 210, 214, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 340, 342, 350, 351, 356, 357, 358, 359, 360, 361, 362, 363, 369, 372, 373, 375, 376, 377, 378, 381, 387, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 411, 412, 413, 414, 418, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 470, 471, 472, 474, 475, 476, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 514, 515, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 576, 577, 578, 581, 584, 585, 587, 588, 590, 591, 592, 593, 595, 597, 599, 600, 602, 607, 608, 610, 611, 613, 616, 617, 619, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 724, 725, 726, 728, 729, 730, 731, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 777, 778, 779, 781, 792, 793, 794, 795, 796, 798, 801, 803, 805, 806, 810, 812, 816, 819, 825, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 840, 841, 842, 844, 846, 847, 849, 852, 853, 854, 863, 864], "from": [0, 2, 4, 5, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 66, 67, 70, 71, 72, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 89, 90, 93, 94, 95, 97, 98, 100, 103, 126, 128, 131, 133, 134, 135, 136, 139, 140, 143, 147, 149, 155, 173, 179, 180, 196, 201, 206, 212, 213, 239, 247, 248, 275, 279, 280, 287, 291, 312, 313, 319, 322, 328, 330, 331, 332, 339, 342, 346, 347, 349, 350, 362, 366, 369, 372, 374, 375, 376, 377, 378, 382, 387, 399, 400, 401, 415, 420, 421, 440, 447, 452, 453, 457, 467, 470, 479, 484, 490, 492, 493, 495, 496, 498, 499, 508, 509, 510, 511, 512, 523, 524, 544, 552, 553, 555, 575, 586, 597, 614, 616, 617, 621, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 643, 644, 645, 647, 648, 650, 658, 659, 668, 671, 687, 691, 692, 693, 700, 703, 706, 709, 715, 716, 717, 719, 730, 731, 732, 738, 739, 740, 741, 745, 748, 749, 751, 757, 758, 763, 764, 765, 766, 767, 768, 771, 773, 776, 777, 778, 779, 784, 789, 791, 792, 793, 794, 796, 801, 806, 810, 812, 813, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 872, 874, 875, 876, 877], "classification_report": [0, 14], "train_test_split": [0, 14], "usr": [0, 7, 8, 9, 10, 11, 13, 45, 46, 47, 50, 819], "local": [0, 6, 7, 8, 9, 10, 11, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 36, 37, 38, 45, 46, 47, 50, 381, 506, 557, 634, 813, 819, 823, 826, 834, 837, 842, 844], "lib": [0, 7, 8, 9, 10, 14, 26, 27, 28, 29, 45, 46, 47, 50], "python3": [0, 7, 8, 9, 10, 12, 26, 27, 28, 29, 31, 45, 47, 50, 819, 820], "10": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 43, 45, 47, 49, 50, 53, 56, 57, 58, 59, 61, 62, 66, 68, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 126, 136, 137, 138, 222, 230, 231, 234, 235, 238, 245, 250, 252, 258, 260, 262, 273, 279, 286, 287, 292, 301, 334, 335, 336, 339, 343, 344, 346, 348, 349, 351, 352, 353, 355, 356, 360, 363, 372, 375, 378, 387, 394, 395, 396, 397, 407, 412, 413, 417, 418, 419, 420, 422, 452, 464, 467, 470, 474, 479, 489, 490, 499, 520, 523, 524, 527, 529, 532, 545, 546, 547, 549, 552, 553, 555, 560, 561, 569, 577, 581, 586, 592, 594, 606, 609, 621, 629, 632, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 650, 651, 653, 659, 669, 671, 675, 676, 677, 678, 679, 682, 687, 688, 689, 691, 693, 703, 708, 709, 710, 711, 713, 724, 726, 729, 737, 738, 739, 740, 741, 747, 749, 755, 757, 758, 759, 760, 762, 763, 765, 766, 776, 778, 796, 812, 816, 819, 823, 827, 828, 829, 831, 834, 839, 842, 844, 849, 851, 852, 860, 865, 875], "dist": [0, 7, 8, 9, 10, 45, 46, 47, 50], "packag": [0, 2, 4, 7, 8, 9, 10, 12, 13, 16, 26, 27, 28, 29, 32, 45, 46, 47, 50, 804, 816, 819, 828, 841, 855, 856, 870, 872], "except": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29, 46, 47, 50, 57, 58, 64, 66, 71, 74, 80, 81, 85, 89, 94, 154, 335, 336, 341, 360, 372, 378, 382, 387, 468, 492, 496, 509, 528, 529, 544, 562, 579, 595, 601, 630, 634, 637, 639, 643, 644, 648, 683, 700, 702, 710, 739, 740, 741, 747, 767, 768, 771, 774, 778, 812, 820, 821, 822, 823, 824, 828, 829, 830, 832, 834, 836, 840, 841, 845, 846, 847, 851, 855], "py": [0, 6, 7, 8, 9, 10, 12, 13, 23, 26, 27, 28, 29, 45, 47, 50, 93, 376, 447, 759, 801, 805, 812, 818, 819, 820, 823, 825, 828, 829, 830, 832, 833, 834, 835, 836, 837, 841, 842, 844, 845, 849, 851, 853, 854], "383": [0, 7, 9, 10, 23], "userwarn": [0, 7, 8, 9, 10, 12, 13, 23, 26, 27, 28, 29, 50], "current": [0, 7, 9, 10, 13, 22, 23, 26, 27, 28, 29, 31, 32, 45, 46, 52, 57, 58, 74, 80, 103, 122, 166, 167, 170, 187, 188, 189, 190, 191, 192, 198, 199, 200, 201, 206, 208, 376, 378, 428, 429, 484, 492, 550, 551, 554, 557, 559, 563, 574, 575, 595, 628, 630, 631, 634, 637, 641, 672, 718, 728, 729, 773, 777, 793, 794, 801, 802, 806, 809, 810, 812, 814, 818, 819, 820, 823, 825, 827, 828, 829, 830, 833, 834, 835, 837, 840, 841, 842, 843, 844, 847, 849, 854, 855, 861, 863, 870, 876, 877], "39": [0, 4, 5, 7, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 26, 27, 28, 29, 43, 45, 46, 47, 48, 50, 51, 56, 57, 62, 66, 73, 79, 80, 82, 85, 89, 112, 226, 261, 263, 265, 295, 296, 299, 367, 375, 387, 395, 397, 414, 417, 523, 615, 626, 632, 635, 637, 647, 675, 682, 740, 759], "doe": [0, 6, 7, 9, 10, 13, 14, 22, 23, 26, 27, 28, 29, 31, 44, 46, 56, 57, 58, 64, 74, 79, 80, 87, 97, 147, 274, 276, 284, 328, 369, 376, 377, 387, 388, 429, 456, 457, 528, 529, 533, 562, 629, 632, 634, 637, 639, 672, 708, 771, 806, 816, 818, 820, 822, 825, 828, 829, 831, 832, 834, 835, 836, 837, 840, 841, 842, 844, 847, 849, 851, 852, 855, 857, 860, 863, 866, 870, 871, 877], "support": [0, 5, 6, 7, 9, 10, 13, 14, 22, 23, 26, 27, 28, 29, 31, 34, 46, 55, 57, 58, 62, 78, 80, 81, 85, 147, 166, 170, 192, 199, 214, 223, 240, 247, 268, 269, 273, 283, 302, 328, 349, 367, 369, 372, 376, 378, 411, 429, 438, 492, 538, 550, 559, 562, 563, 580, 595, 629, 630, 631, 632, 634, 636, 637, 660, 672, 673, 674, 678, 687, 694, 771, 777, 784, 796, 801, 802, 805, 810, 812, 814, 816, 818, 819, 820, 823, 824, 826, 830, 831, 832, 834, 836, 837, 839, 840, 842, 844, 845, 847, 848, 849, 851, 852, 854, 856, 857, 859, 860, 861, 864, 867, 869, 870, 873, 875, 876, 877], "inplac": [0, 7, 8, 9, 10, 12, 13, 14, 23, 26, 27, 28, 29, 52, 58, 74, 81, 97, 100, 536, 538, 559, 562, 563, 580, 581, 634, 641, 725, 726, 730, 735, 736, 783, 784, 789, 796, 822, 824, 831, 834, 836, 838, 841, 847, 851, 853], "nativ": [0, 4, 5, 6, 7, 9, 10, 13, 22, 23, 26, 27, 28, 29, 31, 32, 52, 53, 54, 55, 58, 75, 78, 81, 102, 106, 140, 150, 151, 157, 158, 159, 160, 161, 162, 176, 179, 194, 195, 196, 197, 207, 215, 219, 562, 564, 568, 575, 580, 598, 629, 630, 631, 634, 773, 784, 789, 801, 812, 816, 818, 829, 830, 833, 834, 837, 838, 840, 841, 842, 844, 849, 851, 852, 857, 863, 864, 865, 868, 877], "would": [0, 6, 7, 8, 9, 10, 13, 14, 23, 25, 26, 27, 28, 29, 31, 32, 35, 37, 39, 47, 53, 55, 57, 76, 78, 80, 87, 113, 117, 128, 214, 375, 378, 403, 408, 462, 463, 470, 472, 474, 475, 476, 483, 487, 499, 626, 631, 702, 703, 704, 706, 708, 709, 711, 713, 778, 788, 792, 812, 813, 816, 818, 819, 820, 821, 822, 823, 824, 825, 827, 828, 829, 831, 832, 834, 836, 838, 840, 841, 842, 844, 845, 847, 848, 849, 851, 853, 854, 855, 856, 860, 863, 870, 876], "quietli": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29], "new": [0, 1, 7, 9, 10, 11, 13, 15, 16, 18, 20, 23, 26, 27, 28, 29, 31, 32, 33, 47, 49, 52, 57, 58, 59, 64, 65, 74, 76, 80, 81, 82, 85, 87, 88, 130, 133, 135, 136, 141, 142, 143, 148, 149, 186, 209, 229, 275, 277, 281, 334, 339, 351, 356, 372, 375, 378, 387, 411, 460, 468, 469, 483, 489, 496, 529, 545, 546, 547, 549, 552, 553, 555, 576, 577, 580, 582, 589, 592, 593, 599, 616, 619, 621, 622, 623, 629, 630, 631, 632, 634, 635, 636, 639, 641, 642, 663, 675, 682, 702, 706, 710, 723, 735, 736, 737, 789, 792, 795, 796, 801, 806, 812, 813, 815, 818, 819, 820, 821, 822, 824, 825, 827, 828, 829, 831, 832, 834, 835, 838, 840, 841, 842, 843, 844, 845, 847, 848, 851, 854, 856, 857, 859, 860, 861, 863, 868, 872, 876, 877], "when": [0, 6, 7, 8, 9, 10, 12, 13, 14, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 46, 48, 52, 53, 54, 56, 57, 62, 63, 66, 67, 70, 74, 76, 77, 79, 80, 85, 86, 89, 90, 93, 103, 141, 152, 223, 240, 245, 247, 263, 273, 291, 292, 300, 335, 336, 367, 372, 375, 376, 377, 381, 382, 387, 398, 411, 423, 430, 434, 445, 451, 452, 457, 501, 503, 509, 529, 532, 562, 578, 586, 593, 629, 630, 632, 634, 636, 637, 638, 639, 641, 643, 644, 647, 649, 661, 663, 680, 685, 696, 697, 698, 706, 729, 730, 739, 740, 741, 744, 745, 747, 748, 760, 762, 764, 766, 776, 779, 791, 792, 793, 794, 795, 801, 810, 812, 813, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 854, 855, 856, 859, 860, 863, 864, 868, 870, 873, 874, 875, 876], "lead": [0, 7, 8, 9, 10, 13, 23, 26, 27, 28, 29, 62, 74, 85, 103, 247, 376, 440, 580, 632, 634, 637, 684, 687, 778, 828, 829, 831, 843, 845, 855, 860, 861], "memori": [0, 4, 6, 7, 8, 9, 10, 13, 23, 26, 27, 28, 29, 53, 57, 64, 76, 80, 87, 128, 139, 195, 207, 213, 215, 219, 378, 387, 462, 463, 470, 472, 474, 475, 476, 483, 499, 529, 575, 580, 604, 629, 631, 634, 636, 639, 661, 662, 702, 703, 704, 706, 708, 709, 711, 713, 806, 810, 828, 829, 830, 840, 841, 847, 849, 855, 863, 870, 872, 873, 874], "overhead": [0, 7, 8, 9, 10, 13, 23, 24, 26, 27, 28, 29, 31, 32, 34, 855, 863, 873], "same": [0, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 23, 24, 26, 27, 28, 29, 31, 34, 36, 38, 43, 44, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 64, 66, 68, 69, 70, 74, 76, 77, 79, 80, 81, 82, 84, 85, 87, 89, 91, 93, 97, 98, 99, 100, 101, 102, 116, 126, 131, 136, 138, 139, 141, 143, 145, 146, 147, 149, 152, 153, 154, 165, 168, 213, 220, 221, 222, 223, 225, 227, 231, 233, 236, 240, 246, 247, 253, 273, 275, 277, 280, 282, 283, 284, 293, 301, 313, 327, 328, 329, 330, 331, 332, 335, 336, 338, 346, 362, 367, 369, 372, 375, 376, 377, 378, 381, 383, 385, 387, 394, 395, 396, 412, 413, 414, 415, 417, 418, 419, 420, 422, 429, 434, 435, 445, 446, 447, 448, 449, 451, 452, 454, 457, 467, 469, 484, 492, 493, 496, 501, 503, 513, 515, 520, 521, 522, 523, 524, 525, 526, 532, 569, 624, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 643, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 663, 666, 667, 668, 669, 671, 672, 673, 674, 676, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 700, 703, 704, 706, 707, 709, 710, 715, 716, 731, 741, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 771, 773, 776, 777, 778, 784, 792, 805, 812, 819, 820, 824, 825, 827, 828, 829, 830, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 851, 853, 854, 855, 859, 861, 863, 865, 867, 869, 876, 877], "appli": [0, 7, 9, 10, 11, 13, 23, 26, 27, 28, 29, 31, 32, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 372, 373, 375, 376, 377, 378, 381, 387, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 411, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 626, 630, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 687, 691, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 724, 727, 730, 731, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 778, 779, 788, 792, 795, 812, 818, 819, 820, 824, 827, 829, 830, 831, 832, 833, 835, 836, 837, 838, 840, 841, 844, 845, 847, 851, 852, 853, 854, 855, 863, 864, 871], "view": [0, 7, 8, 9, 10, 13, 23, 26, 27, 28, 29, 57, 64, 80, 102, 133, 144, 378, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 496, 499, 555, 629, 634, 639, 702, 703, 704, 706, 708, 709, 711, 713, 819, 820, 833, 870], "If": [0, 1, 2, 4, 5, 6, 7, 9, 10, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 46, 49, 50, 52, 53, 54, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 98, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 146, 147, 148, 149, 152, 153, 154, 155, 180, 196, 212, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 328, 329, 331, 334, 335, 336, 337, 338, 340, 341, 342, 346, 350, 351, 356, 357, 359, 361, 362, 363, 369, 372, 373, 375, 376, 377, 378, 381, 382, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 404, 407, 409, 411, 412, 413, 414, 419, 420, 421, 423, 428, 430, 432, 434, 435, 442, 444, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 470, 472, 473, 474, 475, 476, 479, 483, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 568, 569, 576, 577, 581, 591, 592, 593, 595, 597, 599, 600, 613, 614, 617, 619, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 659, 660, 663, 666, 667, 668, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 730, 731, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 791, 792, 794, 795, 801, 806, 810, 812, 813, 814, 815, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 854, 855, 856, 859, 863, 864, 865], "you": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 48, 49, 50, 57, 58, 80, 81, 97, 102, 103, 378, 387, 472, 529, 552, 553, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 663, 788, 789, 791, 792, 794, 795, 796, 797, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 870, 878], "want": [0, 4, 6, 7, 8, 9, 10, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 44, 45, 47, 57, 72, 80, 95, 240, 273, 378, 472, 632, 794, 812, 813, 814, 818, 819, 820, 826, 828, 830, 833, 835, 837, 838, 839, 840, 844, 847, 852, 853, 854, 855, 856, 860, 864], "control": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29, 39, 57, 80, 147, 296, 328, 367, 369, 375, 378, 399, 400, 401, 467, 493, 580, 629, 634, 637, 670, 827, 829, 830, 839, 840, 841, 842, 847, 851, 852, 857, 863, 870, 876], "your": [0, 1, 3, 4, 5, 7, 9, 10, 11, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 43, 45, 47, 49, 812, 813, 815, 816, 817, 818, 819, 821, 823, 825, 826, 828, 832, 834, 835, 839, 841, 843, 845, 847, 852, 853, 855, 856, 860, 861, 863, 864, 870, 878], "manag": [0, 7, 9, 10, 13, 22, 23, 26, 27, 28, 29, 31, 580, 604, 634, 812, 813, 821, 825, 829, 830, 840, 843, 855, 861, 872, 874], "consid": [0, 6, 7, 9, 10, 13, 14, 23, 26, 27, 28, 29, 36, 37, 57, 62, 68, 80, 85, 118, 147, 268, 269, 328, 334, 339, 351, 369, 372, 376, 387, 430, 434, 445, 522, 626, 629, 632, 637, 645, 670, 680, 749, 750, 751, 752, 778, 791, 824, 828, 829, 837, 839, 845, 847, 850, 851, 852, 859, 860, 863, 867, 871, 875, 877], "do": [0, 2, 4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 43, 45, 47, 57, 58, 74, 80, 81, 240, 273, 282, 375, 377, 378, 387, 421, 457, 469, 529, 532, 562, 632, 634, 641, 718, 725, 728, 729, 730, 735, 778, 806, 812, 816, 818, 819, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 845, 847, 849, 851, 852, 853, 854, 855, 857, 861, 871, 876, 877], "set_inplace_mod": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29, 604, 634], "strict": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29, 580, 604, 634], "should": [0, 1, 5, 7, 9, 10, 13, 14, 23, 26, 27, 28, 29, 48, 51, 53, 56, 57, 58, 59, 61, 62, 64, 66, 67, 68, 70, 73, 74, 76, 79, 80, 81, 82, 84, 85, 87, 89, 90, 92, 93, 95, 97, 100, 102, 103, 113, 117, 125, 139, 141, 145, 146, 154, 179, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 302, 313, 329, 335, 336, 348, 352, 353, 354, 355, 359, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 382, 387, 390, 399, 400, 401, 403, 408, 419, 434, 445, 451, 458, 483, 484, 508, 509, 522, 523, 524, 539, 557, 562, 614, 616, 619, 621, 622, 623, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 656, 657, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 689, 691, 693, 694, 706, 722, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 757, 758, 759, 760, 761, 762, 763, 765, 766, 773, 774, 776, 778, 788, 789, 791, 792, 794, 795, 796, 797, 805, 806, 812, 814, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 858, 860, 864, 866, 867, 870, 872, 877], "rais": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29, 46, 47, 53, 57, 58, 66, 68, 71, 74, 76, 80, 81, 87, 89, 91, 94, 128, 154, 243, 278, 335, 336, 346, 372, 375, 377, 378, 382, 387, 409, 420, 457, 462, 463, 470, 472, 474, 475, 476, 483, 492, 499, 509, 528, 529, 538, 562, 580, 582, 593, 595, 601, 605, 630, 632, 634, 637, 639, 643, 644, 645, 647, 648, 677, 679, 693, 702, 703, 704, 706, 708, 709, 710, 711, 713, 739, 740, 741, 747, 752, 760, 762, 767, 768, 771, 778, 796, 812, 820, 823, 825, 829, 830, 833, 840, 841, 845, 846, 849, 851, 856, 860], "error": [0, 7, 9, 10, 13, 14, 23, 26, 27, 28, 29, 37, 48, 50, 56, 57, 61, 74, 79, 80, 84, 110, 242, 290, 335, 336, 343, 344, 372, 376, 377, 378, 387, 388, 445, 451, 453, 455, 492, 529, 533, 580, 626, 632, 634, 636, 637, 647, 666, 685, 688, 760, 762, 778, 796, 809, 813, 817, 818, 819, 820, 823, 824, 825, 828, 829, 830, 831, 835, 836, 841, 844, 845, 846, 851, 855, 861, 870], "whenev": [0, 7, 9, 10, 13, 23, 26, 27, 28, 29, 792, 820, 825, 828, 829, 833, 840, 843, 844, 846, 852], "attempt": [0, 6, 7, 9, 10, 13, 23, 26, 27, 28, 29, 45, 47, 50, 819, 846, 855], "warn": [0, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 23, 26, 27, 28, 29, 45, 46, 47, 50, 809, 819, 820, 846, 863, 864, 865], "first": [0, 4, 5, 7, 8, 9, 12, 16, 22, 24, 25, 26, 28, 31, 32, 34, 35, 36, 45, 48, 49, 50, 53, 56, 57, 62, 64, 66, 67, 68, 70, 76, 79, 80, 81, 85, 87, 89, 91, 93, 97, 98, 102, 103, 122, 123, 137, 138, 147, 178, 186, 196, 223, 228, 230, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 258, 259, 260, 265, 266, 267, 269, 270, 273, 276, 278, 289, 290, 302, 312, 313, 328, 330, 331, 332, 334, 347, 349, 350, 351, 357, 361, 362, 367, 369, 372, 375, 376, 377, 378, 385, 387, 398, 428, 429, 430, 432, 436, 458, 468, 470, 474, 481, 484, 486, 487, 490, 498, 509, 511, 515, 523, 524, 525, 532, 537, 628, 629, 630, 631, 632, 634, 636, 637, 639, 640, 641, 644, 645, 646, 647, 663, 668, 671, 672, 673, 675, 677, 682, 684, 685, 687, 689, 691, 693, 706, 707, 710, 711, 715, 716, 717, 718, 719, 728, 729, 731, 743, 744, 745, 749, 750, 751, 754, 755, 757, 758, 773, 791, 792, 793, 794, 796, 801, 812, 814, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 830, 831, 835, 836, 837, 838, 840, 841, 844, 847, 849, 851, 852, 854, 856, 859, 860, 863, 864, 868, 870, 871, 875], "datafram": [0, 870], "allow": [0, 6, 14, 29, 31, 32, 43, 57, 70, 80, 93, 137, 278, 376, 387, 448, 525, 529, 572, 629, 632, 634, 646, 647, 755, 762, 776, 777, 778, 779, 793, 794, 806, 810, 812, 818, 820, 821, 824, 825, 828, 829, 833, 835, 837, 838, 839, 840, 841, 842, 844, 847, 849, 851, 855, 857, 860, 863, 864, 865, 868, 870, 874, 875], "u": [0, 4, 11, 45, 47, 49, 50, 57, 62, 76, 80, 85, 97, 98, 138, 376, 440, 447, 449, 637, 641, 667, 673, 674, 687, 726, 812, 813, 819, 820, 822, 827, 828, 835, 838, 840, 841, 842, 843, 844, 845, 847, 853, 855, 860], "leverag": [0, 28, 31, 32, 812, 819, 840, 864, 868, 870], "explor": [0, 6, 7, 14, 16, 18, 22, 26, 27, 28, 31, 32, 37, 38, 39, 818, 819, 820, 829, 834, 847, 850, 854, 870, 873], "expect": [0, 4, 8, 11, 13, 24, 28, 31, 32, 34, 47, 48, 50, 57, 62, 63, 80, 86, 179, 247, 291, 375, 377, 398, 420, 457, 536, 630, 632, 634, 636, 638, 661, 682, 696, 791, 792, 812, 819, 820, 823, 829, 830, 833, 835, 838, 840, 842, 844, 847, 855, 856, 861, 863, 864, 865], "contain": [0, 9, 22, 31, 32, 46, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 64, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 163, 165, 166, 167, 168, 171, 172, 173, 175, 177, 180, 197, 199, 200, 201, 206, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 372, 374, 375, 376, 377, 378, 381, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 581, 584, 586, 591, 592, 593, 594, 595, 597, 599, 600, 607, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 725, 726, 727, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 783, 784, 792, 793, 794, 796, 797, 801, 805, 806, 810, 812, 814, 816, 818, 819, 822, 823, 824, 825, 826, 828, 829, 831, 832, 834, 836, 837, 838, 839, 840, 842, 844, 846, 847, 848, 849, 850, 853, 855, 856, 857, 859, 863, 870, 871, 876], "variou": [0, 6, 14, 25, 35, 37, 43, 812, 815, 818, 819, 820, 823, 828, 829, 832, 833, 836, 838, 839, 841, 842, 843, 844, 856, 866, 868, 869, 870, 873, 876], "among": [0, 6, 74, 827, 828, 844, 847, 861, 870], "pattern": [0, 57, 58, 80, 81, 376, 440, 545, 546, 547, 634, 829, 832, 843, 861], "signal": [0, 57, 80, 319, 369, 375, 389, 390, 391, 392, 397, 398, 407, 423, 792, 869, 870], "credit_card_data": 0, "read_csv": [0, 14, 47], "creditcard": 0, "csv": [0, 14, 47], "get": [0, 1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 45, 46, 48, 54, 55, 62, 74, 78, 85, 102, 163, 164, 165, 168, 196, 197, 198, 201, 207, 212, 215, 219, 378, 489, 536, 554, 575, 594, 630, 631, 634, 637, 641, 694, 720, 776, 791, 792, 805, 813, 815, 817, 818, 819, 821, 822, 823, 828, 829, 830, 834, 837, 838, 839, 840, 841, 842, 843, 844, 849, 850, 851, 852, 853, 857, 861, 864, 865, 870, 876], "sens": [0, 823, 829, 831, 841, 843, 851], "re": [0, 14, 20, 23, 24, 25, 31, 32, 33, 34, 35, 36, 37, 38, 45, 47, 48, 50, 57, 58, 67, 80, 90, 100, 213, 319, 369, 376, 378, 450, 485, 486, 545, 631, 634, 637, 639, 644, 689, 707, 746, 748, 813, 814, 818, 819, 820, 821, 822, 823, 826, 829, 834, 839, 840, 841, 842, 843, 845, 847, 851, 854, 855, 858, 859, 860, 870], "work": [0, 1, 6, 29, 31, 32, 43, 44, 46, 50, 52, 57, 80, 97, 387, 532, 637, 641, 688, 725, 726, 730, 735, 736, 812, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 840, 841, 842, 844, 845, 848, 849, 851, 853, 854, 856, 861, 863, 864, 865, 868, 870, 872, 874, 877], "help": [0, 1, 20, 47, 49, 54, 535, 580, 634, 647, 765, 791, 812, 813, 814, 818, 819, 821, 824, 825, 826, 827, 828, 829, 831, 835, 837, 838, 840, 841, 844, 845, 851, 852, 853, 856, 857, 866, 870, 872, 876], "few": [0, 6, 7, 812, 817, 818, 820, 827, 829, 830, 836, 837, 839, 840, 842, 844, 847, 849, 850, 851, 852, 853, 861, 870, 872], "entri": [0, 57, 64, 74, 80, 87, 91, 98, 137, 376, 378, 382, 446, 473, 475, 476, 508, 629, 639, 641, 708, 731, 749, 819, 828, 844, 870], "can": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 44, 45, 46, 47, 50, 53, 54, 57, 58, 62, 64, 66, 68, 76, 77, 80, 81, 85, 87, 89, 91, 97, 98, 112, 115, 127, 128, 138, 140, 155, 194, 211, 212, 213, 302, 319, 367, 369, 375, 376, 377, 378, 381, 382, 385, 387, 398, 411, 435, 442, 444, 449, 457, 469, 496, 501, 509, 510, 515, 522, 569, 580, 614, 617, 626, 629, 630, 631, 634, 635, 636, 637, 639, 643, 663, 671, 677, 687, 691, 706, 710, 739, 740, 741, 749, 773, 776, 777, 778, 779, 784, 806, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 873, 874, 876, 877], "give": [0, 8, 23, 33, 43, 57, 61, 80, 84, 179, 365, 374, 375, 418, 422, 630, 636, 639, 649, 650, 651, 652, 654, 656, 658, 706, 791, 812, 819, 820, 822, 825, 828, 829, 831, 832, 834, 835, 836, 844, 861, 870, 874], "insight": 0, "structur": [0, 14, 32, 74, 77, 103, 165, 168, 542, 634, 641, 722, 731, 812, 818, 820, 821, 824, 827, 837, 842, 843, 844, 845, 852, 853, 869, 870], "type": [0, 5, 11, 16, 18, 22, 28, 31, 32, 37, 45, 46, 47, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 771, 773, 776, 777, 778, 779, 783, 784, 788, 791, 792, 793, 794, 798, 801, 805, 806, 807, 810, 818, 819, 820, 822, 823, 824, 827, 830, 831, 832, 833, 836, 838, 840, 842, 844, 845, 847, 849, 851, 852, 863, 864, 865, 870, 871, 874], "present": [0, 46, 57, 70, 74, 80, 93, 338, 372, 381, 501, 502, 503, 647, 762, 818, 819, 820, 827, 829, 830, 836, 840, 849, 859, 867, 868, 877], "initi": [0, 5, 6, 9, 31, 32, 48, 57, 61, 70, 74, 80, 84, 93, 103, 376, 387, 434, 445, 451, 530, 531, 636, 647, 661, 662, 762, 789, 792, 793, 794, 796, 797, 810, 812, 815, 820, 821, 825, 829, 830, 834, 842, 844, 849, 860, 863, 864, 865, 870, 876, 877], "qualiti": [0, 815, 820], "below": [0, 2, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 36, 37, 38, 43, 46, 47, 48, 53, 57, 62, 80, 85, 93, 145, 146, 147, 247, 257, 280, 328, 329, 338, 369, 372, 378, 492, 629, 632, 637, 671, 691, 766, 813, 816, 818, 819, 822, 823, 827, 828, 829, 830, 831, 833, 834, 837, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 863, 864, 865, 866, 868, 873, 875], "head": [0, 6, 7, 48, 49, 636, 663, 792, 812, 817, 819, 828, 841, 867], "method": [0, 14, 22, 31, 47, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 152, 153, 154, 155, 165, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 372, 375, 376, 377, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 542, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 629, 630, 632, 634, 635, 637, 638, 641, 644, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 687, 688, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 729, 730, 731, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 773, 784, 790, 791, 792, 793, 794, 818, 820, 823, 824, 828, 829, 830, 831, 832, 836, 844, 845, 849, 850, 853, 854, 855, 863, 864, 865, 871, 877], "five": [0, 852], "row": [0, 45, 57, 80, 98, 132, 147, 328, 369, 376, 378, 385, 387, 435, 447, 476, 482, 500, 515, 521, 522, 629, 637, 643, 644, 678, 686, 687, 692, 738, 747, 791], "v1": [0, 853], "v2": [0, 853], "v3": 0, "v4": 0, "v5": 0, "v6": 0, "v7": [0, 870], "v8": 0, "v9": 0, "v21": 0, "v22": 0, "v23": 0, "v24": 0, "v25": 0, "v26": 0, "v27": 0, "v28": 0, "amount": [0, 14, 63, 86, 215, 631, 638, 696, 697, 698, 806, 819, 828, 830, 842], "359807": 0, "072781": 0, "536347": 0, "378155": 0, "338321": 0, "462388": 0, "239599": 0, "098698": 0, "363787": 0, "018307": 0, "277838": 0, "110474": 0, "066928": 0, "128539": 0, "189115": 0, "133558": 0, "021053": 0, "149": [0, 62, 637, 675], "62": [0, 14, 43, 45, 51, 73, 79, 80, 89, 113, 258, 286, 632, 642, 643, 737, 739, 741], "191857": 0, "266151": 0, "166480": 0, "448154": 0, "060018": 0, "082361": 0, "078803": 0, "085102": 0, "255425": 0, "225775": 0, "638672": 0, "101288": 0, "339846": 0, "167170": 0, "125895": 0, "008983": 0, "014724": 0, "69": [0, 24, 43, 50, 56, 82, 89, 221, 263, 375, 397, 407, 619, 632, 635, 637, 678, 679, 740, 844, 852], "358354": 0, "340163": 0, "773209": 0, "379780": 0, "503198": 0, "800499": 0, "791461": 0, "247676": 0, "514654": 0, "247998": 0, "771679": 0, "909412": 0, "689281": 0, "327642": 0, "139097": 0, "055353": 0, "059752": 0, "378": [0, 279, 632], "66": [0, 26, 27, 28, 29, 43, 45, 47, 70, 80, 81, 82, 375, 407, 545, 546, 619, 634, 635, 637, 647, 682, 759], "966272": 0, "185226": 0, "792993": 0, "863291": 0, "010309": 0, "247203": 0, "237609": 0, "377436": 0, "387024": 0, "108300": 0, "005274": 0, "190321": 0, "175575": 0, "647376": 0, "221929": 0, "062723": 0, "061458": 0, "123": [0, 23, 76, 77, 80, 136, 168, 456, 548, 629, 634, 806, 844], "50": [0, 13, 14, 31, 32, 43, 47, 57, 70, 79, 80, 81, 239, 279, 357, 372, 375, 376, 378, 404, 428, 436, 489, 547, 553, 560, 561, 577, 592, 632, 634, 637, 641, 644, 647, 676, 682, 693, 719, 721, 747, 759, 776, 779, 839, 851, 863, 864], "158233": 0, "877737": 0, "548718": 0, "403034": 0, "407193": 0, "095921": 0, "592941": 0, "270533": 0, "817739": 0, "009431": 0, "798278": 0, "137458": 0, "141267": 0, "206010": 0, "502292": 0, "219422": 0, "215153": 0, "31": [0, 14, 26, 27, 28, 29, 43, 45, 46, 50, 51, 56, 57, 79, 80, 81, 84, 89, 113, 118, 138, 234, 265, 273, 375, 378, 387, 396, 397, 467, 523, 540, 626, 629, 632, 634, 740, 741, 852], "column": [0, 14, 47, 57, 62, 80, 85, 97, 98, 132, 147, 328, 369, 376, 378, 385, 387, 429, 435, 447, 468, 473, 475, 476, 480, 482, 515, 521, 522, 629, 637, 672, 673, 678, 684, 686, 687, 692, 776, 791], "It": [0, 1, 4, 7, 13, 14, 23, 26, 27, 28, 29, 31, 32, 33, 34, 43, 44, 45, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 335, 336, 337, 338, 343, 344, 348, 350, 352, 353, 354, 355, 359, 367, 369, 372, 375, 376, 377, 378, 381, 382, 387, 388, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 409, 411, 412, 413, 414, 417, 419, 424, 426, 427, 435, 436, 441, 442, 443, 444, 452, 453, 454, 455, 456, 458, 459, 469, 472, 477, 485, 486, 487, 488, 490, 492, 496, 497, 501, 504, 505, 507, 508, 509, 511, 512, 522, 523, 524, 525, 533, 540, 541, 545, 546, 547, 552, 553, 562, 576, 577, 578, 615, 616, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 686, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 717, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 752, 753, 756, 757, 758, 761, 763, 764, 766, 767, 768, 791, 792, 812, 815, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 838, 840, 841, 842, 843, 844, 845, 846, 847, 849, 851, 852, 853, 862, 865, 868, 870, 871, 873, 874, 875, 876, 877], "just": [0, 6, 11, 13, 14, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 43, 45, 47, 57, 62, 70, 85, 97, 100, 147, 328, 369, 376, 444, 629, 637, 647, 680, 759, 784, 792, 812, 816, 819, 820, 821, 823, 825, 828, 829, 830, 831, 832, 834, 837, 838, 840, 841, 842, 844, 849, 851, 852, 855, 860, 861, 864, 870, 871, 876], "verifi": [0, 6, 9, 10, 14, 28, 325, 326, 369, 818, 829, 830, 841, 844, 845], "consist": [0, 6, 7, 12, 13, 14, 26, 27, 28, 29, 31, 32, 70, 74, 240, 247, 273, 375, 376, 419, 429, 632, 637, 647, 672, 673, 759, 793, 794, 815, 823, 824, 828, 829, 835, 840, 849, 859, 871], "complet": [0, 62, 74, 85, 637, 684, 777, 818, 819, 820, 821, 823, 824, 827, 828, 831, 833, 837, 841, 842, 844, 847, 851, 852, 860, 868], "By": [0, 23, 43, 50, 57, 63, 64, 70, 71, 80, 86, 87, 93, 94, 287, 333, 335, 336, 349, 356, 369, 372, 375, 377, 378, 385, 387, 398, 456, 457, 492, 496, 515, 522, 525, 580, 632, 634, 637, 638, 639, 647, 648, 668, 693, 696, 705, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 819, 825, 829, 831, 833, 837, 839, 840, 841, 849, 853, 854, 863], "tail": [0, 867], "last": [0, 24, 29, 31, 34, 53, 57, 61, 62, 63, 64, 67, 69, 70, 71, 74, 76, 80, 84, 85, 86, 87, 92, 93, 94, 98, 102, 137, 138, 141, 196, 313, 341, 369, 372, 375, 376, 377, 378, 385, 387, 404, 409, 419, 420, 421, 432, 456, 474, 484, 486, 492, 496, 515, 523, 524, 629, 631, 636, 637, 638, 639, 644, 646, 647, 648, 662, 663, 668, 671, 682, 691, 693, 697, 698, 700, 703, 706, 707, 708, 710, 744, 745, 753, 755, 756, 757, 758, 767, 768, 792, 801, 812, 820, 823, 825, 826, 829, 831, 840, 842, 844, 847, 849, 855, 861, 864, 870], "well": [0, 14, 31, 32, 45, 46, 47, 81, 377, 456, 558, 634, 637, 686, 778, 812, 814, 818, 820, 826, 828, 829, 833, 840, 841, 842, 844, 853, 854, 864, 869, 870, 871, 875], "readi": [0, 16, 18, 23, 24, 25, 33, 34, 35, 36, 37, 38, 45, 47, 818, 819], "284802": 0, "172786": 0, "881118": 0, "071785": 0, "834783": 0, "066656": 0, "364473": 0, "606837": 0, "918215": 0, "305334": 0, "914428": 0, "213454": 0, "111864": 0, "014480": 0, "509348": 0, "436807": 0, "250034": 0, "943651": 0, "823731": 0, "77": [0, 7, 14, 43, 47, 81, 593, 637, 647, 682, 759], "284803": 0, "172787": 0, "732789": 0, "055080": 0, "035030": 0, "738589": 0, "868229": 0, "058415": 0, "024330": 0, "294869": 0, "584800": 0, "214205": 0, "924384": 0, "012463": 0, "016226": 0, "606624": 0, "395255": 0, "068472": 0, "053527": 0, "24": [0, 6, 14, 24, 43, 45, 56, 57, 62, 70, 79, 80, 81, 84, 85, 89, 102, 235, 243, 258, 260, 273, 283, 284, 287, 349, 352, 372, 375, 387, 394, 396, 397, 407, 412, 413, 414, 418, 422, 523, 545, 546, 632, 634, 637, 641, 647, 650, 671, 678, 682, 719, 730, 739, 740, 741, 757, 759, 773, 833, 852], "79": [0, 43, 45, 57, 58, 80, 81, 84, 89, 102, 240, 375, 397, 407, 418, 540, 541, 632, 634, 741], "284804": 0, "172788": 0, "919565": 0, "301254": 0, "249640": 0, "557828": 0, "630515": 0, "031260": 0, "296827": 0, "708417": 0, "432454": 0, "232045": 0, "578229": 0, "037501": 0, "640134": 0, "265745": 0, "087371": 0, "004455": 0, "026561": 0, "67": [0, 14, 43, 56, 57, 58, 62, 79, 80, 81, 84, 89, 102, 238, 243, 283, 284, 286, 293, 304, 308, 367, 387, 418, 523, 545, 546, 592, 618, 620, 632, 634, 635, 637, 675, 741], "88": [0, 14, 43, 82, 89, 112, 387, 523, 619, 626, 635, 637, 643, 647, 682, 741, 759], "284805": 0, "240440": 0, "530483": 0, "702510": 0, "689799": 0, "377961": 0, "623708": 0, "686180": 0, "679145": 0, "392087": 0, "265245": 0, "800049": 0, "163298": 0, "123205": 0, "569159": 0, "546668": 0, "108821": 0, "104533": 0, "284806": 0, "172792": 0, "533413": 0, "189733": 0, "703337": 0, "506271": 0, "012546": 0, "649617": 0, "577006": 0, "414650": 0, "486180": 0, "261057": 0, "643078": 0, "376777": 0, "008797": 0, "473649": 0, "818267": 0, "002415": 0, "013649": 0, "217": [0, 45, 833], "understand": [0, 20, 21, 22, 26, 43, 49, 816, 817, 818, 819, 820, 822, 823, 826, 831, 832, 836, 842, 843, 848, 861, 866, 876], "composit": [0, 22, 31, 166, 167, 199, 200, 292, 376, 436, 550, 551, 630, 631, 632, 634, 777, 779, 818, 822, 824, 825, 827, 829, 830, 838, 840, 841, 842, 844, 847, 849, 853, 854, 855, 857, 863, 871], "crucial": [0, 830, 839], "proce": [0, 14, 818, 819], "ani": [0, 1, 6, 7, 8, 12, 16, 18, 20, 21, 22, 23, 24, 33, 34, 37, 43, 44, 45, 46, 47, 49, 50, 52, 53, 55, 56, 57, 58, 62, 71, 72, 76, 78, 79, 80, 81, 94, 95, 97, 102, 103, 122, 123, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 155, 156, 171, 175, 179, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 328, 329, 335, 336, 338, 341, 369, 372, 375, 376, 377, 378, 381, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 420, 421, 430, 435, 452, 473, 484, 492, 496, 501, 502, 503, 522, 525, 528, 529, 530, 534, 544, 545, 546, 547, 548, 552, 556, 558, 560, 564, 566, 567, 585, 591, 593, 600, 601, 608, 614, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 721, 724, 725, 727, 728, 735, 737, 741, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 771, 773, 774, 778, 788, 789, 791, 792, 794, 795, 796, 797, 801, 805, 806, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 871, 873, 876, 877], "info": [0, 45, 809, 810, 812, 826, 832, 835], "concis": 0, "summari": [0, 74, 169, 542, 630, 634, 819, 820, 844], "includ": [0, 1, 6, 14, 20, 24, 34, 39, 53, 56, 57, 58, 62, 67, 70, 71, 74, 76, 79, 80, 81, 85, 90, 93, 94, 126, 127, 128, 137, 138, 140, 147, 220, 244, 248, 249, 250, 253, 255, 258, 266, 274, 287, 292, 314, 317, 318, 319, 322, 328, 331, 333, 335, 336, 340, 341, 342, 345, 346, 347, 348, 350, 352, 353, 355, 356, 357, 358, 361, 362, 369, 372, 375, 378, 387, 394, 395, 396, 426, 429, 431, 475, 476, 478, 481, 483, 485, 488, 510, 512, 513, 521, 525, 527, 528, 530, 531, 532, 558, 613, 629, 632, 634, 636, 637, 641, 643, 644, 647, 648, 661, 672, 692, 694, 718, 741, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 779, 791, 792, 795, 808, 810, 812, 818, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 840, 841, 842, 843, 844, 845, 847, 849, 860, 863, 864, 867, 868, 870, 872, 875, 876, 877], "number": [0, 45, 47, 48, 49, 50, 53, 54, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 70, 71, 74, 76, 77, 79, 80, 81, 84, 85, 86, 87, 89, 90, 91, 93, 94, 97, 98, 100, 102, 103, 106, 126, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 147, 153, 158, 159, 160, 161, 162, 164, 165, 168, 171, 172, 173, 175, 177, 180, 204, 205, 206, 220, 221, 222, 223, 224, 226, 228, 229, 236, 238, 240, 241, 243, 245, 246, 247, 253, 254, 255, 257, 261, 263, 271, 272, 273, 274, 275, 276, 278, 280, 282, 283, 284, 286, 287, 291, 293, 319, 323, 324, 325, 326, 327, 328, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 351, 356, 360, 369, 372, 375, 376, 377, 378, 381, 387, 409, 420, 423, 426, 429, 433, 434, 435, 445, 449, 451, 452, 462, 463, 464, 484, 485, 486, 487, 488, 490, 492, 494, 496, 498, 501, 502, 503, 520, 522, 523, 524, 525, 531, 549, 556, 574, 591, 592, 593, 600, 613, 614, 627, 629, 630, 631, 632, 634, 636, 637, 638, 639, 640, 643, 644, 645, 647, 648, 649, 656, 657, 659, 661, 663, 668, 672, 673, 674, 680, 685, 687, 691, 692, 693, 696, 699, 701, 702, 704, 705, 707, 708, 710, 712, 714, 715, 716, 717, 738, 742, 747, 749, 750, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 784, 791, 792, 795, 806, 810, 812, 819, 820, 827, 828, 829, 830, 831, 838, 839, 840, 844, 845, 846, 847, 849, 852, 858, 859, 863], "presenc": [0, 771, 827, 840], "null": [0, 819, 834], "each": [0, 11, 13, 14, 24, 25, 26, 31, 32, 34, 35, 36, 38, 45, 51, 53, 54, 56, 57, 58, 59, 61, 62, 64, 67, 68, 70, 74, 77, 79, 80, 81, 82, 84, 85, 87, 90, 91, 93, 97, 98, 100, 102, 103, 111, 112, 114, 115, 116, 118, 122, 139, 153, 165, 168, 213, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 295, 297, 298, 303, 305, 306, 307, 309, 310, 311, 316, 327, 330, 331, 332, 338, 346, 350, 354, 359, 362, 367, 369, 372, 375, 376, 378, 381, 382, 385, 387, 394, 395, 396, 399, 400, 401, 404, 412, 413, 414, 415, 418, 420, 421, 422, 429, 430, 435, 444, 445, 449, 451, 462, 463, 464, 468, 469, 470, 475, 476, 478, 479, 481, 483, 484, 487, 489, 498, 499, 506, 508, 515, 520, 521, 522, 523, 524, 525, 534, 537, 545, 552, 553, 569, 594, 614, 616, 617, 619, 621, 622, 623, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 641, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 667, 668, 669, 672, 673, 674, 677, 679, 680, 681, 683, 685, 686, 687, 692, 701, 705, 707, 708, 710, 712, 714, 724, 731, 738, 747, 749, 750, 752, 758, 759, 766, 773, 776, 778, 784, 792, 795, 796, 797, 806, 810, 815, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 854, 855, 859, 860, 861, 863, 864, 866, 867, 871, 873, 876], "invalu": 0, "plan": [0, 812, 856], "right": [0, 46, 57, 62, 74, 80, 85, 103, 120, 121, 232, 234, 287, 350, 372, 375, 376, 378, 410, 440, 446, 447, 449, 475, 545, 628, 632, 634, 637, 646, 687, 692, 755, 776, 813, 818, 819, 820, 822, 823, 831, 834, 847, 852, 863], "format": [0, 1, 28, 29, 31, 32, 43, 45, 46, 47, 55, 58, 61, 70, 73, 74, 75, 78, 84, 100, 118, 163, 197, 375, 376, 386, 417, 450, 518, 545, 626, 630, 631, 634, 636, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 661, 759, 769, 770, 771, 788, 812, 819, 820, 822, 828, 829, 830, 831, 832, 833, 841, 843, 852, 864, 866, 868, 870, 871], "lt": [0, 4, 6, 7, 12, 16, 18, 22, 26, 27, 28, 29, 43, 45, 47, 103], "core": [0, 6, 26, 27, 29, 45, 46, 47, 49, 50, 57, 80, 97, 100, 204, 376, 434, 445, 450, 451, 631, 819, 830, 834, 844, 854, 859, 868, 869, 870, 871, 875, 877], "frame": [0, 47, 57, 80, 319, 369, 375, 423, 860, 870], "gt": [0, 4, 6, 7, 12, 16, 18, 22, 26, 27, 28, 29, 43, 45, 47, 50, 103, 842, 849], "rangeindex": 0, "284807": 0, "total": [0, 45, 47, 57, 70, 74, 80, 93, 103, 134, 215, 330, 331, 332, 340, 369, 372, 377, 452, 629, 631, 644, 647, 747, 764, 766, 806, 812, 813, 819, 820, 829, 830, 831, 844, 847, 852, 853, 855, 861], "non": [0, 7, 24, 34, 54, 56, 57, 62, 66, 67, 70, 71, 77, 79, 80, 85, 89, 90, 93, 94, 134, 152, 170, 179, 248, 268, 269, 274, 335, 336, 340, 347, 360, 372, 375, 376, 378, 387, 419, 430, 434, 440, 463, 464, 525, 528, 629, 630, 632, 637, 641, 643, 644, 647, 648, 668, 669, 678, 680, 687, 689, 693, 694, 731, 740, 744, 745, 746, 747, 760, 761, 762, 763, 764, 766, 767, 768, 776, 791, 793, 794, 796, 824, 827, 831, 849, 863, 864, 865, 870], "count": [0, 49, 57, 64, 68, 71, 76, 80, 87, 91, 94, 134, 206, 340, 372, 378, 387, 492, 496, 498, 520, 525, 629, 631, 637, 639, 645, 648, 668, 693, 700, 703, 749, 750, 767, 768, 826, 827, 831, 852], "dtype": [0, 4, 8, 12, 14, 18, 24, 26, 27, 28, 29, 43, 46, 53, 54, 57, 58, 61, 62, 66, 67, 70, 74, 76, 77, 79, 80, 81, 84, 85, 89, 90, 93, 102, 105, 106, 107, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 208, 235, 239, 271, 272, 274, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 333, 338, 340, 356, 369, 372, 375, 376, 377, 378, 382, 387, 397, 407, 419, 420, 423, 446, 452, 457, 468, 492, 508, 509, 510, 511, 512, 522, 523, 524, 525, 528, 531, 532, 549, 550, 551, 553, 562, 571, 599, 629, 630, 631, 632, 634, 636, 637, 640, 643, 644, 646, 647, 648, 652, 659, 678, 694, 716, 717, 739, 740, 741, 744, 745, 746, 755, 756, 757, 758, 761, 763, 765, 767, 768, 771, 773, 776, 778, 779, 791, 792, 793, 794, 795, 797, 812, 816, 823, 825, 829, 830, 831, 833, 834, 837, 838, 840, 841, 842, 844, 845, 849, 851, 864], "float64": [0, 26, 27, 54, 57, 66, 70, 76, 77, 79, 80, 81, 89, 93, 126, 134, 135, 152, 155, 159, 160, 165, 166, 169, 170, 175, 176, 180, 182, 183, 189, 192, 274, 346, 372, 377, 387, 452, 457, 522, 571, 629, 630, 634, 637, 643, 673, 674, 678, 694, 740, 741, 758, 773, 776, 777, 829, 842, 844], "v10": 0, "v11": 0, "12": [0, 4, 6, 7, 8, 11, 12, 14, 22, 24, 26, 27, 28, 29, 43, 45, 46, 47, 54, 56, 57, 58, 61, 62, 66, 70, 77, 79, 80, 81, 84, 85, 87, 88, 89, 93, 102, 103, 168, 223, 225, 230, 234, 235, 238, 240, 241, 242, 260, 273, 276, 283, 286, 293, 294, 317, 318, 349, 352, 353, 369, 372, 375, 378, 387, 394, 395, 396, 397, 399, 403, 404, 412, 413, 417, 418, 419, 420, 422, 467, 468, 470, 474, 479, 496, 499, 512, 523, 529, 530, 531, 541, 545, 546, 577, 583, 592, 606, 632, 634, 636, 637, 639, 641, 642, 643, 644, 645, 647, 650, 654, 659, 660, 671, 673, 675, 678, 682, 686, 688, 689, 691, 693, 703, 707, 709, 711, 713, 730, 737, 739, 740, 741, 748, 749, 757, 758, 759, 763, 765, 776, 819, 825, 827, 829, 831, 839], "v12": 0, "13": [0, 4, 6, 7, 8, 11, 12, 22, 26, 27, 28, 29, 43, 45, 47, 51, 56, 57, 61, 62, 66, 70, 79, 80, 81, 82, 84, 87, 89, 93, 102, 118, 168, 198, 223, 238, 247, 258, 278, 287, 349, 356, 363, 372, 375, 378, 396, 397, 407, 418, 422, 467, 468, 470, 474, 479, 499, 512, 523, 524, 540, 545, 546, 561, 583, 592, 615, 626, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 644, 645, 647, 650, 651, 659, 660, 671, 675, 682, 686, 688, 691, 713, 717, 730, 739, 740, 741, 748, 749, 757, 758, 759, 827, 829, 831, 841], "v13": 0, "v14": 0, "15": [0, 4, 6, 7, 8, 9, 12, 13, 14, 27, 43, 45, 46, 47, 50, 56, 57, 58, 62, 66, 70, 76, 77, 79, 80, 81, 84, 85, 87, 89, 93, 103, 136, 165, 223, 230, 234, 240, 242, 251, 258, 259, 264, 265, 273, 282, 283, 284, 349, 363, 372, 373, 375, 376, 378, 387, 394, 395, 412, 414, 417, 418, 422, 428, 470, 474, 479, 499, 523, 541, 545, 546, 549, 560, 561, 586, 592, 609, 629, 630, 632, 634, 636, 637, 639, 641, 643, 644, 645, 647, 650, 660, 671, 674, 675, 676, 682, 688, 689, 707, 713, 718, 739, 740, 747, 749, 758, 759, 773, 815, 819, 828, 831, 839, 873], "v15": 0, "v16": 0, "17": [0, 6, 8, 9, 10, 13, 14, 26, 27, 28, 29, 43, 45, 47, 50, 51, 57, 62, 73, 79, 80, 81, 82, 84, 85, 89, 103, 112, 113, 138, 223, 240, 265, 273, 304, 312, 363, 369, 375, 378, 394, 395, 403, 404, 407, 408, 412, 413, 418, 422, 474, 546, 561, 615, 617, 626, 629, 632, 634, 635, 636, 637, 641, 643, 650, 659, 660, 671, 675, 726, 739, 740, 741, 743, 827], "v17": 0, "18": [0, 4, 10, 13, 14, 26, 27, 28, 29, 43, 45, 47, 56, 57, 66, 79, 80, 81, 84, 85, 89, 93, 113, 235, 240, 282, 286, 295, 296, 349, 367, 372, 375, 378, 397, 403, 407, 408, 412, 418, 422, 474, 591, 626, 632, 637, 643, 647, 654, 671, 677, 682, 689, 739, 740, 741, 758, 759, 763, 827, 829, 831], "v18": 0, "19": [0, 4, 13, 26, 27, 28, 29, 43, 45, 46, 47, 50, 56, 57, 66, 79, 80, 84, 85, 89, 226, 235, 263, 273, 290, 375, 376, 378, 387, 396, 397, 408, 412, 418, 422, 428, 433, 474, 523, 632, 637, 641, 643, 646, 671, 678, 691, 729, 739, 740, 741, 756, 831], "v19": 0, "20": [0, 4, 9, 10, 14, 18, 43, 45, 46, 47, 50, 56, 57, 58, 61, 66, 70, 79, 80, 81, 84, 85, 89, 93, 235, 239, 243, 279, 283, 287, 304, 349, 351, 353, 372, 375, 378, 394, 396, 412, 418, 422, 467, 489, 545, 552, 553, 555, 577, 581, 592, 632, 634, 637, 643, 644, 647, 650, 651, 662, 671, 676, 678, 682, 689, 739, 747, 748, 757, 758, 759, 763, 765, 812, 828, 847, 851], "v20": 0, "22": [0, 14, 26, 27, 28, 29, 43, 45, 47, 50, 51, 56, 57, 58, 66, 70, 73, 80, 81, 84, 89, 113, 118, 235, 243, 304, 308, 367, 375, 376, 377, 378, 383, 387, 394, 395, 397, 412, 413, 414, 418, 422, 428, 452, 467, 513, 523, 546, 577, 613, 626, 632, 636, 637, 641, 644, 647, 659, 660, 671, 676, 682, 686, 726, 736, 739, 740, 741, 748, 758, 759, 819, 827, 833], "26": [0, 26, 27, 28, 29, 43, 45, 47, 50, 56, 57, 65, 66, 80, 81, 82, 89, 235, 240, 286, 375, 376, 397, 433, 443, 560, 615, 632, 634, 635, 636, 637, 641, 642, 647, 658, 671, 682, 689, 719, 737, 739, 740, 759], "27": [0, 14, 43, 45, 50, 56, 57, 62, 66, 79, 80, 81, 84, 85, 89, 93, 234, 235, 238, 278, 286, 287, 346, 372, 375, 397, 407, 561, 591, 632, 634, 637, 641, 647, 677, 682, 692, 719, 726, 740, 759, 763, 776, 878], "28": [0, 14, 29, 31, 32, 43, 45, 47, 50, 56, 57, 61, 65, 79, 80, 81, 84, 85, 89, 93, 239, 242, 263, 279, 375, 376, 397, 407, 428, 529, 560, 615, 632, 634, 635, 636, 637, 642, 647, 651, 653, 655, 657, 658, 660, 682, 737, 739, 740, 741, 759, 763, 812], "30": [0, 14, 26, 27, 28, 29, 43, 45, 56, 57, 58, 80, 81, 89, 93, 103, 273, 304, 349, 357, 372, 375, 378, 397, 407, 418, 467, 489, 513, 545, 547, 552, 553, 560, 561, 577, 586, 592, 632, 634, 637, 641, 647, 676, 682, 727, 739, 740, 758, 759, 763, 778, 791, 806, 815, 828], "int64": [0, 8, 57, 66, 67, 69, 70, 77, 89, 90, 92, 93, 142, 155, 161, 164, 166, 168, 172, 173, 177, 184, 316, 369, 385, 387, 515, 523, 524, 629, 630, 644, 646, 647, 739, 744, 745, 746, 755, 757, 758, 763, 765, 776, 777, 829, 841, 844, 849], "proceed": [0, 45], "within": [0, 7, 14, 16, 18, 22, 31, 32, 52, 57, 80, 126, 334, 351, 372, 375, 381, 412, 413, 414, 419, 422, 462, 463, 464, 506, 629, 643, 741, 806, 815, 818, 820, 821, 824, 828, 829, 841, 842, 843, 844, 853, 855, 864, 866, 867, 871], "significantli": [0, 9, 11, 13, 31, 57, 62, 80, 85, 376, 449, 637, 687, 828, 859, 868], "impact": [0, 815, 828, 844, 853, 872], "isnul": 0, "sum": [0, 6, 7, 45, 47, 56, 57, 58, 61, 62, 63, 70, 74, 79, 80, 81, 84, 85, 86, 93, 97, 102, 103, 213, 223, 265, 289, 332, 356, 369, 372, 376, 377, 378, 381, 387, 418, 428, 452, 453, 454, 455, 456, 457, 458, 459, 489, 506, 528, 529, 546, 576, 577, 631, 632, 634, 636, 637, 638, 647, 659, 666, 678, 687, 691, 694, 696, 758, 759, 791, 793, 805, 812, 827, 829, 837, 839, 840, 841, 849, 863, 864, 865, 867], "quickli": [0, 6, 819, 820, 828, 852, 853, 859, 861, 870, 877], "appropri": [0, 6, 11, 22, 26, 27, 29, 31, 32, 58, 67, 72, 90, 95, 223, 240, 247, 273, 334, 351, 372, 632, 644, 744, 812, 818, 819, 820, 833, 838, 844], "either": [0, 14, 26, 27, 36, 37, 38, 39, 43, 49, 56, 57, 58, 61, 70, 74, 79, 80, 81, 84, 85, 112, 115, 118, 123, 133, 134, 144, 220, 221, 222, 223, 228, 238, 240, 241, 243, 245, 247, 254, 255, 261, 262, 263, 264, 265, 273, 282, 284, 285, 287, 290, 291, 337, 359, 372, 375, 381, 387, 397, 407, 417, 418, 422, 506, 523, 524, 544, 564, 572, 573, 581, 601, 626, 628, 629, 632, 634, 636, 637, 640, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 677, 682, 685, 689, 715, 716, 717, 757, 758, 763, 765, 778, 792, 793, 794, 801, 814, 818, 819, 820, 825, 826, 827, 829, 830, 831, 832, 833, 835, 837, 840, 841, 842, 843, 844, 847, 849, 852, 855, 856, 864, 870], "imput": [0, 57, 80, 376, 434, 445, 451], "remov": [0, 6, 9, 14, 20, 21, 24, 29, 31, 32, 34, 62, 74, 85, 637, 639, 640, 641, 671, 677, 691, 709, 715, 716, 732, 806, 809, 812, 818, 825, 826, 828, 829, 832, 837, 843, 844, 847, 854, 863, 864, 870], "maintain": [0, 69, 92, 646, 753, 756, 812, 819, 820, 823, 835, 840, 842, 843, 844, 859, 869], "integr": [0, 4, 5, 6, 16, 18, 25, 32, 35, 54, 56, 57, 77, 79, 80, 152, 292, 355, 372, 387, 525, 630, 632, 812, 817, 819, 821, 822, 838, 864, 868, 870, 872, 873, 874], "check": [0, 4, 5, 11, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 43, 48, 50, 52, 54, 58, 62, 74, 77, 81, 85, 118, 156, 157, 166, 167, 170, 172, 173, 174, 177, 192, 199, 200, 207, 219, 538, 548, 550, 551, 558, 564, 565, 566, 567, 568, 584, 595, 607, 613, 626, 630, 631, 634, 637, 641, 673, 674, 680, 718, 728, 729, 730, 771, 778, 805, 806, 812, 813, 814, 817, 818, 819, 820, 821, 823, 827, 828, 830, 831, 833, 838, 840, 841, 842, 843, 844, 845, 846, 848, 849, 851, 852, 853, 856, 863], "A": [0, 6, 31, 32, 46, 53, 54, 57, 58, 64, 66, 70, 71, 74, 77, 79, 80, 81, 84, 85, 87, 89, 91, 94, 97, 98, 103, 122, 123, 125, 132, 140, 147, 153, 194, 213, 275, 277, 281, 313, 324, 328, 330, 331, 332, 334, 348, 351, 355, 356, 369, 372, 375, 376, 377, 378, 381, 382, 387, 390, 404, 418, 421, 423, 430, 438, 443, 446, 454, 458, 469, 472, 490, 494, 495, 501, 502, 503, 504, 508, 509, 510, 511, 512, 520, 529, 532, 537, 539, 548, 557, 560, 561, 592, 593, 594, 597, 625, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 641, 643, 647, 648, 659, 663, 671, 673, 676, 681, 682, 686, 687, 699, 702, 704, 708, 710, 718, 721, 723, 725, 726, 727, 728, 729, 733, 734, 735, 736, 738, 739, 740, 741, 743, 749, 759, 767, 768, 771, 773, 774, 776, 777, 778, 779, 784, 791, 806, 810, 812, 817, 818, 819, 822, 827, 829, 830, 833, 836, 837, 841, 842, 844, 849, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 870, 871], "critic": [0, 6, 26, 27, 29, 31, 32, 810, 870, 876], "grasp": [0, 841], "imbal": 0, "common": [0, 22, 25, 31, 35, 56, 57, 74, 79, 179, 250, 258, 339, 346, 372, 630, 632, 813, 816, 818, 819, 826, 829, 830, 831, 837, 838, 841, 845, 847, 855, 859, 867, 870, 877], "scenario": [0, 28, 829, 839], "call": [0, 4, 6, 11, 16, 18, 22, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 37, 38, 45, 49, 57, 72, 77, 80, 95, 97, 103, 122, 172, 173, 213, 376, 387, 443, 529, 580, 586, 601, 617, 618, 620, 628, 631, 634, 635, 637, 641, 685, 718, 724, 728, 729, 773, 784, 792, 793, 794, 796, 801, 806, 810, 812, 818, 819, 820, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 844, 845, 847, 849, 851, 852, 853, 854, 855, 860, 863, 864, 865, 870, 871, 874], "value_count": 0, "see": [0, 4, 5, 6, 7, 9, 10, 11, 13, 14, 23, 24, 29, 31, 32, 33, 34, 38, 43, 44, 50, 51, 54, 56, 57, 62, 67, 68, 70, 71, 73, 79, 80, 85, 90, 93, 94, 97, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 133, 137, 144, 147, 154, 173, 180, 223, 228, 230, 232, 233, 234, 235, 240, 241, 245, 247, 251, 252, 259, 260, 263, 265, 267, 269, 270, 273, 276, 278, 282, 289, 291, 294, 295, 300, 301, 303, 328, 335, 336, 367, 369, 372, 376, 377, 378, 426, 454, 492, 626, 629, 630, 632, 637, 644, 645, 647, 648, 668, 680, 683, 686, 693, 694, 745, 749, 750, 751, 752, 760, 761, 762, 763, 764, 765, 766, 767, 768, 788, 812, 813, 816, 818, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 834, 835, 836, 837, 841, 842, 844, 847, 849, 851, 852, 855, 859, 866, 878], "instanc": [0, 6, 14, 22, 28, 31, 32, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 165, 168, 171, 172, 173, 175, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 372, 375, 376, 377, 378, 381, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 412, 413, 414, 418, 419, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 587, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 629, 630, 632, 634, 635, 636, 637, 638, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 784, 789, 810, 818, 819, 820, 823, 824, 825, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 844, 852, 853, 854, 857, 863, 871], "typic": [0, 6, 57, 80, 334, 351, 372, 387, 522, 646, 755, 792, 823, 837, 869, 877], "repres": [0, 53, 56, 57, 61, 62, 79, 80, 84, 85, 100, 125, 139, 141, 164, 222, 223, 226, 229, 238, 240, 247, 273, 286, 290, 291, 316, 330, 331, 332, 349, 366, 369, 372, 374, 375, 376, 377, 378, 381, 382, 385, 418, 422, 436, 450, 452, 457, 484, 495, 501, 502, 503, 508, 514, 521, 557, 628, 629, 630, 632, 634, 636, 637, 659, 660, 661, 675, 682, 685, 686, 778, 791, 795, 806, 819, 824, 829, 847, 851, 867, 868, 871], "ones": [0, 6, 22, 29, 31, 43, 49, 53, 57, 59, 61, 66, 74, 76, 80, 84, 89, 132, 136, 141, 143, 149, 199, 200, 236, 313, 369, 387, 531, 615, 629, 631, 632, 635, 636, 654, 655, 739, 740, 741, 777, 812, 818, 824, 828, 831, 836, 837, 843, 844, 851, 852, 870], "how": [0, 3, 4, 5, 6, 8, 11, 13, 16, 18, 20, 21, 22, 23, 24, 26, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 43, 46, 49, 50, 51, 56, 57, 73, 79, 80, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 240, 273, 291, 295, 300, 301, 303, 367, 377, 378, 452, 467, 492, 493, 626, 632, 788, 791, 792, 793, 794, 812, 813, 814, 816, 817, 819, 820, 822, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 838, 839, 840, 841, 842, 845, 846, 847, 848, 850, 851, 852, 853, 854, 855, 859, 861, 866, 870], "approach": [0, 36, 816, 818, 819, 820, 824, 827, 829, 830, 834, 837, 841, 844, 845, 847, 851, 852, 855, 867, 874, 876], "legit": 0, "284315": 0, "492": 0, "name": [0, 1, 6, 9, 11, 31, 32, 43, 45, 46, 47, 57, 62, 68, 72, 80, 85, 91, 95, 247, 375, 376, 378, 423, 429, 438, 494, 498, 535, 536, 632, 634, 637, 645, 672, 673, 684, 685, 687, 688, 692, 749, 750, 751, 773, 777, 784, 794, 801, 802, 804, 810, 818, 819, 820, 825, 826, 827, 828, 831, 832, 833, 836, 841, 842, 844, 845, 846, 847, 849, 852, 854, 870, 878], "highli": [0, 46, 812, 818, 870], "imbalanc": 0, "normal": [0, 2, 4, 6, 7, 9, 12, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 57, 65, 66, 80, 88, 89, 97, 98, 359, 372, 375, 381, 387, 397, 398, 403, 404, 407, 408, 409, 419, 420, 501, 502, 503, 504, 505, 506, 507, 522, 525, 639, 642, 643, 700, 710, 737, 738, 740, 791, 792, 795, 812, 818, 840, 841, 847, 852, 863, 865, 868], "unifi": [0, 20, 21, 22, 24, 25, 31, 34, 35, 39, 46, 74, 213, 631, 821, 822, 823, 824, 828, 829, 833, 838, 839, 841, 847, 849, 855, 858, 860, 862, 864, 866, 867, 868, 870, 874, 877], "write": [0, 20, 21, 31, 32, 43, 47, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 329, 333, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 358, 359, 360, 367, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 417, 419, 420, 423, 424, 426, 427, 435, 436, 438, 441, 442, 443, 444, 450, 453, 454, 455, 456, 458, 459, 468, 469, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 541, 545, 546, 547, 552, 553, 562, 576, 577, 615, 616, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 737, 738, 739, 740, 741, 743, 745, 746, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 774, 812, 817, 818, 820, 822, 823, 825, 826, 828, 829, 831, 832, 833, 837, 840, 842, 845, 849, 851, 854, 861, 870, 877], "code": [0, 1, 5, 6, 11, 12, 13, 20, 21, 28, 29, 31, 33, 34, 35, 36, 37, 38, 45, 46, 55, 56, 74, 78, 79, 103, 214, 260, 387, 529, 538, 546, 547, 562, 576, 580, 595, 631, 634, 636, 637, 639, 658, 679, 680, 681, 710, 810, 812, 815, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 836, 837, 838, 840, 841, 842, 844, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 863, 864, 865, 866, 868, 869, 870, 871, 873, 874, 875, 876, 877], "agnost": [0, 20, 21, 22, 23, 31, 32, 33, 37, 43, 812, 824, 829, 836, 849, 851, 854, 855, 876, 877], "underli": [0, 22, 31, 32, 43, 57, 64, 80, 87, 100, 230, 233, 235, 270, 377, 378, 457, 474, 632, 637, 639, 685, 706, 827, 840, 847, 863, 870], "deep": [0, 6, 22, 29, 31, 43, 74, 545, 634, 812, 813, 814, 817, 818, 820, 823, 826, 827, 829, 835, 839, 842, 848, 851, 852, 859, 868, 870, 873, 874, 876, 877], "develop": [0, 6, 7, 16, 30, 31, 32, 812, 813, 814, 815, 816, 817, 818, 819, 820, 823, 826, 828, 834, 843, 845, 855, 857, 859, 860, 861, 863, 864, 868, 869, 870, 871, 872, 875, 876, 877], "ar": [0, 1, 2, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 48, 49, 52, 53, 56, 57, 58, 61, 62, 64, 66, 67, 68, 74, 76, 79, 80, 81, 84, 85, 87, 89, 90, 91, 97, 98, 102, 103, 126, 136, 138, 141, 147, 201, 206, 208, 213, 237, 239, 240, 243, 247, 268, 269, 273, 278, 279, 283, 285, 290, 291, 292, 328, 330, 331, 332, 334, 337, 339, 340, 341, 345, 346, 351, 356, 359, 363, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 384, 387, 391, 392, 398, 399, 400, 401, 404, 409, 411, 419, 420, 429, 430, 434, 444, 445, 447, 451, 452, 453, 457, 458, 462, 463, 464, 474, 475, 476, 478, 484, 487, 491, 492, 501, 503, 508, 509, 510, 511, 512, 522, 527, 528, 529, 530, 531, 532, 534, 537, 538, 539, 548, 554, 559, 563, 574, 575, 584, 595, 607, 617, 629, 631, 632, 634, 635, 636, 637, 639, 641, 643, 644, 645, 659, 660, 661, 663, 666, 668, 672, 673, 674, 677, 678, 680, 683, 684, 687, 688, 692, 693, 694, 699, 700, 703, 707, 709, 719, 724, 729, 730, 731, 739, 740, 741, 744, 745, 746, 747, 749, 751, 771, 773, 776, 777, 778, 779, 784, 791, 794, 797, 798, 805, 806, 809, 810, 812, 813, 814, 815, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 870, 871, 872, 873, 874, 875, 876, 877, 878], "tensorflow": [0, 3, 9, 10, 13, 15, 16, 20, 22, 23, 26, 27, 28, 29, 31, 32, 33, 36, 37, 38, 43, 49, 56, 57, 58, 79, 80, 147, 194, 209, 224, 328, 369, 376, 430, 595, 629, 631, 634, 771, 784, 801, 812, 816, 817, 818, 819, 820, 823, 828, 829, 830, 834, 836, 840, 841, 842, 844, 845, 847, 849, 854, 855, 857, 860, 861, 864, 865, 867, 868, 871, 873, 874, 876, 877], "pytorch": [0, 3, 4, 5, 8, 9, 11, 12, 15, 17, 18, 20, 21, 29, 31, 32, 43, 50, 283, 335, 336, 372, 632, 796, 812, 817, 818, 824, 829, 830, 833, 836, 837, 840, 841, 842, 847, 849, 854, 855, 857, 860, 861, 863, 864, 867, 871, 873, 874, 876, 877], "flexibl": [0, 812, 827, 829, 836, 839, 845, 847, 870], "particularli": [0, 820, 852, 855, 863, 868], "research": [0, 6, 31, 32, 45, 812, 859, 864, 870, 877], "where": [0, 1, 11, 24, 28, 34, 35, 39, 47, 53, 56, 57, 58, 62, 64, 66, 67, 70, 71, 74, 76, 79, 80, 81, 85, 87, 89, 90, 93, 94, 97, 98, 135, 136, 139, 141, 147, 228, 238, 240, 243, 245, 247, 248, 257, 262, 263, 264, 271, 272, 273, 278, 280, 284, 286, 290, 300, 302, 328, 330, 331, 332, 347, 351, 358, 367, 369, 372, 375, 376, 377, 378, 381, 382, 387, 389, 390, 391, 392, 398, 403, 404, 408, 423, 429, 430, 434, 435, 437, 438, 445, 451, 452, 453, 462, 463, 464, 478, 484, 501, 502, 503, 506, 508, 509, 511, 512, 522, 530, 531, 532, 562, 576, 614, 629, 632, 634, 636, 637, 639, 641, 643, 644, 647, 648, 661, 663, 668, 672, 673, 678, 680, 682, 683, 684, 687, 688, 691, 693, 699, 701, 702, 704, 710, 714, 722, 729, 738, 739, 740, 741, 746, 747, 762, 764, 766, 767, 768, 776, 791, 795, 806, 810, 812, 813, 816, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 832, 833, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 852, 853, 854, 855, 856, 859, 860, 861, 863, 868, 877], "abil": [0, 819, 847, 850, 855, 870], "switch": [0, 31, 43, 784, 825, 833, 837, 838, 877], "differ": [0, 4, 5, 6, 9, 11, 13, 14, 16, 20, 21, 25, 26, 27, 31, 32, 35, 36, 37, 38, 56, 57, 58, 62, 70, 74, 80, 81, 93, 102, 103, 112, 115, 165, 223, 240, 247, 248, 273, 289, 334, 341, 346, 347, 351, 372, 375, 376, 378, 387, 409, 420, 445, 451, 468, 475, 476, 490, 523, 524, 532, 552, 553, 626, 630, 632, 634, 636, 637, 639, 647, 659, 660, 675, 685, 700, 710, 757, 758, 763, 765, 766, 771, 776, 784, 793, 794, 812, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 859, 860, 861, 863, 864, 865, 867, 868, 869, 870, 873, 876, 877], "without": [0, 1, 4, 14, 34, 43, 47, 50, 68, 74, 100, 586, 601, 634, 639, 641, 645, 706, 719, 749, 750, 751, 752, 776, 779, 805, 819, 820, 824, 825, 827, 828, 829, 830, 831, 833, 836, 837, 841, 844, 845, 847, 851, 852, 853, 855, 863, 867, 870, 871, 872, 876], "chang": [0, 4, 5, 14, 22, 32, 45, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 100, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 372, 375, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 626, 632, 639, 641, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 685, 687, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 719, 730, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 773, 812, 818, 819, 820, 821, 823, 825, 826, 827, 828, 829, 831, 832, 834, 835, 841, 842, 843, 844, 845, 846, 847, 849, 853, 855, 856, 861, 863, 873, 876], "codebas": [0, 6, 31, 32, 211, 212, 631, 813, 815, 822, 829, 835, 840, 841, 843, 844, 845, 848, 861], "signific": [0, 14, 57, 377, 457, 846, 855, 859, 860, 870], "advantag": [0, 6, 29, 31, 32, 812, 819, 820, 829, 840, 841, 856, 864, 870], "effect": [0, 6, 37, 53, 57, 59, 70, 80, 82, 93, 139, 377, 411, 456, 615, 623, 629, 635, 636, 647, 663, 764, 766, 776, 779, 818, 824, 827, 828, 832, 836, 840, 842, 847, 855, 860], "analyz": [0, 818, 857], "done": [0, 45, 47, 50, 637, 674, 817, 818, 819, 820, 823, 826, 828, 830, 831, 834, 835, 840, 841, 844, 852, 863, 864, 870], "two": [0, 25, 35, 37, 43, 53, 57, 62, 68, 80, 81, 85, 102, 103, 123, 126, 132, 139, 145, 146, 147, 178, 186, 234, 248, 249, 283, 328, 329, 334, 347, 348, 350, 351, 353, 355, 362, 369, 372, 375, 376, 377, 378, 387, 404, 427, 428, 429, 438, 443, 452, 454, 458, 463, 484, 490, 494, 522, 532, 537, 628, 629, 630, 632, 634, 636, 637, 639, 645, 661, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 711, 749, 750, 751, 752, 776, 778, 784, 792, 818, 819, 823, 824, 829, 830, 831, 832, 837, 841, 842, 844, 847, 848, 852, 854, 861, 867, 875], "distinct": [0, 57, 68, 80, 330, 331, 332, 369, 645, 749, 750, 751, 752, 815, 819, 827, 832, 839, 840, 841, 848, 860, 870], "one": [0, 4, 6, 11, 13, 16, 18, 20, 21, 24, 25, 28, 29, 31, 32, 34, 35, 47, 48, 49, 53, 57, 58, 61, 62, 64, 67, 68, 70, 74, 76, 79, 80, 81, 82, 84, 85, 87, 88, 90, 91, 92, 93, 97, 126, 129, 139, 141, 142, 143, 153, 155, 213, 234, 240, 247, 248, 265, 271, 272, 273, 292, 302, 312, 315, 316, 334, 340, 343, 344, 347, 348, 351, 352, 353, 355, 356, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 387, 397, 399, 403, 404, 407, 408, 411, 419, 424, 426, 435, 444, 458, 462, 463, 464, 468, 474, 475, 476, 481, 483, 488, 491, 501, 502, 503, 508, 513, 523, 524, 527, 528, 529, 530, 531, 532, 534, 572, 576, 577, 579, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 629, 630, 631, 632, 634, 635, 636, 637, 639, 642, 644, 645, 647, 650, 651, 652, 653, 654, 655, 658, 675, 677, 678, 682, 684, 693, 694, 702, 703, 704, 707, 709, 713, 737, 744, 747, 749, 750, 751, 752, 757, 759, 776, 778, 795, 798, 801, 806, 809, 812, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 846, 847, 848, 851, 852, 854, 855, 856, 857, 860, 861, 864, 870, 871, 873, 876], "anoth": [0, 4, 22, 24, 25, 28, 29, 31, 32, 34, 35, 47, 48, 133, 153, 155, 629, 630, 812, 818, 819, 820, 825, 827, 829, 830, 833, 835, 837, 840, 841, 844, 849, 851, 854, 857, 860, 862, 863, 864, 870, 876], "characterist": [0, 826], "clear": [0, 14, 195, 631, 818, 820, 825, 829, 830, 831, 841, 847, 849, 851, 859, 860, 861, 870], "print": [0, 4, 5, 6, 7, 9, 10, 11, 12, 14, 16, 18, 22, 23, 25, 29, 31, 32, 33, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 110, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 155, 157, 163, 164, 165, 166, 167, 170, 172, 173, 175, 180, 192, 193, 197, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 214, 215, 216, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 309, 310, 311, 313, 320, 321, 328, 330, 334, 335, 336, 338, 353, 354, 359, 363, 367, 369, 372, 375, 376, 377, 378, 381, 387, 394, 395, 396, 397, 399, 400, 402, 404, 407, 409, 412, 413, 414, 417, 419, 420, 425, 428, 430, 432, 433, 443, 450, 453, 454, 455, 456, 457, 458, 459, 465, 467, 469, 480, 484, 489, 490, 492, 493, 494, 496, 500, 504, 505, 507, 522, 523, 524, 525, 532, 534, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 572, 573, 575, 576, 577, 581, 582, 583, 586, 589, 590, 591, 592, 593, 595, 597, 599, 600, 601, 605, 606, 609, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 801, 805, 806, 810, 812, 819, 820, 827, 829, 831, 842, 844, 846, 849, 851, 852, 853, 863, 865], "shape": [0, 4, 5, 8, 9, 14, 16, 18, 24, 25, 26, 27, 31, 32, 37, 43, 45, 46, 47, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 101, 102, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 208, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 327, 328, 329, 335, 336, 337, 338, 339, 341, 343, 344, 346, 348, 350, 352, 353, 354, 355, 359, 360, 362, 367, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 409, 411, 412, 413, 414, 417, 419, 420, 421, 424, 425, 426, 427, 429, 430, 431, 434, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 464, 465, 467, 469, 472, 477, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 521, 522, 523, 524, 525, 540, 541, 545, 546, 547, 549, 552, 553, 556, 562, 569, 576, 577, 587, 596, 598, 610, 614, 615, 616, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 753, 754, 756, 757, 758, 759, 761, 763, 764, 766, 767, 768, 773, 776, 778, 791, 792, 795, 805, 810, 812, 820, 821, 827, 829, 830, 831, 832, 833, 834, 836, 840, 841, 842, 844, 845, 846, 849, 851, 852, 853, 854, 863, 864], "gain": [0, 14, 791, 820, 821, 823, 848, 853, 870], "descript": [0, 1, 2, 40, 41, 42, 47, 50, 53, 56, 57, 62, 79, 80, 85, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 329, 335, 336, 338, 341, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 484, 492, 496, 522, 525, 552, 556, 558, 560, 591, 600, 624, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 818, 820, 832, 839, 840], "describ": [0, 7, 57, 70, 80, 98, 223, 240, 241, 273, 276, 278, 377, 382, 385, 457, 512, 515, 632, 636, 647, 663, 759, 763, 765, 814, 815, 818, 819, 820, 826, 828, 840, 841, 844, 849, 854, 870], "obtain": [0, 31, 32, 50, 57, 80, 319, 369, 375, 415, 636, 663, 778, 841, 863], "mean": [0, 4, 6, 7, 11, 12, 13, 14, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 46, 47, 57, 58, 61, 63, 64, 66, 70, 72, 74, 76, 80, 81, 84, 86, 87, 89, 93, 95, 97, 134, 213, 330, 340, 369, 372, 375, 376, 377, 378, 381, 382, 387, 404, 409, 427, 440, 452, 453, 454, 455, 456, 457, 458, 459, 469, 474, 484, 501, 503, 509, 528, 529, 546, 617, 618, 620, 625, 629, 631, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 651, 653, 654, 655, 657, 658, 659, 670, 696, 697, 698, 706, 715, 716, 717, 724, 739, 740, 776, 778, 779, 791, 792, 795, 812, 819, 820, 822, 823, 825, 827, 829, 830, 831, 837, 839, 840, 841, 844, 845, 847, 849, 851, 852, 853, 854, 855, 857, 864, 865, 867, 870], "deviat": [0, 65, 66, 70, 88, 89, 93, 642, 643, 647, 737, 740, 764, 778, 791, 795, 823, 861], "minimum": [0, 45, 56, 57, 58, 64, 67, 70, 79, 80, 81, 87, 90, 93, 220, 248, 275, 299, 331, 335, 336, 346, 367, 369, 372, 378, 387, 484, 520, 524, 530, 582, 583, 592, 593, 605, 606, 632, 634, 639, 644, 647, 699, 745, 760, 762, 776, 778, 779, 784, 829, 846, 867, 873, 877], "maximum": [0, 56, 57, 58, 59, 64, 67, 70, 74, 79, 80, 81, 82, 87, 90, 93, 103, 213, 299, 335, 336, 347, 360, 367, 372, 375, 376, 378, 387, 391, 392, 402, 445, 448, 451, 484, 523, 525, 530, 540, 541, 549, 557, 621, 631, 632, 634, 635, 637, 639, 644, 647, 678, 699, 744, 745, 760, 762, 776, 778, 779, 784, 806, 820, 829, 831, 840, 852, 867, 877], "quartil": 0, "overview": [0, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 812, 826, 828, 842, 844, 848], "instrument": 0, "unusu": 0, "might": [0, 6, 7, 12, 37, 58, 98, 179, 544, 630, 634, 816, 818, 819, 820, 828, 829, 831, 834, 835, 838, 841, 844, 845, 847, 849, 851, 852, 857], "indic": [0, 4, 12, 53, 57, 58, 61, 62, 64, 65, 67, 68, 69, 74, 76, 77, 80, 81, 84, 85, 87, 88, 90, 91, 92, 97, 100, 127, 128, 141, 145, 147, 168, 172, 173, 284, 328, 329, 330, 349, 369, 372, 375, 376, 377, 378, 383, 385, 394, 395, 396, 398, 402, 403, 404, 408, 409, 412, 413, 414, 415, 419, 420, 430, 451, 454, 462, 463, 464, 467, 470, 472, 474, 475, 476, 479, 483, 489, 490, 492, 493, 494, 496, 498, 499, 513, 514, 515, 537, 552, 553, 555, 576, 577, 581, 614, 617, 618, 629, 632, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 650, 652, 653, 654, 655, 658, 663, 680, 694, 702, 703, 704, 706, 707, 708, 709, 711, 713, 718, 721, 723, 725, 726, 727, 729, 733, 734, 735, 736, 737, 738, 744, 745, 746, 747, 749, 751, 753, 755, 756, 773, 774, 776, 778, 792, 798, 805, 806, 808, 819, 828, 836, 839, 841, 854, 863], "000000": 0, "291022": 0, "std": [0, 4, 6, 7, 11, 12, 13, 14, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 46, 61, 66, 70, 84, 89, 93, 382, 509, 636, 643, 647, 651, 653, 654, 655, 657, 658, 739, 740, 812, 831, 865, 867], "250": 0, "105092": 0, "min": [0, 43, 47, 54, 57, 58, 62, 70, 77, 80, 81, 85, 93, 145, 147, 165, 168, 272, 328, 331, 336, 369, 372, 376, 378, 430, 489, 530, 546, 576, 577, 592, 629, 630, 632, 634, 637, 647, 678, 684, 687, 688, 694, 812, 867], "650000": 0, "75": [0, 4, 7, 8, 43, 56, 57, 79, 80, 81, 84, 89, 119, 137, 226, 228, 240, 242, 253, 315, 348, 349, 369, 372, 418, 532, 547, 560, 592, 626, 629, 632, 634, 637, 641, 643, 650, 676, 682, 726, 741], "050000": 0, "max": [0, 43, 45, 54, 57, 58, 62, 70, 77, 80, 81, 85, 93, 165, 168, 271, 335, 372, 375, 376, 377, 378, 394, 395, 396, 412, 413, 414, 415, 417, 419, 430, 452, 489, 491, 492, 540, 541, 546, 562, 576, 577, 630, 632, 634, 637, 647, 678, 680, 683, 776, 792, 796, 828, 841, 867], "25691": 0, "160000": 0, "reveal": 0, "outlier": [0, 844], "receiv": [0, 6, 45, 49, 97, 536, 572, 634, 640, 715, 716, 717, 792, 810, 815, 819, 820, 829, 830, 844, 847], "anomali": 0, "financi": 0, "behavior": [0, 4, 8, 57, 68, 240, 247, 273, 282, 388, 533, 580, 604, 632, 634, 645, 749, 750, 751, 752, 818, 826, 827, 828, 829, 840, 841, 842, 844, 847, 849, 855, 867], "associ": [0, 12, 57, 62, 80, 85, 223, 273, 378, 387, 461, 525, 632, 637, 680, 683, 695, 773, 820, 829, 837, 838, 841, 842, 844, 855], "122": [0, 13, 54, 168, 238, 632], "211321": 0, "256": [0, 4, 8, 12, 56, 81, 283, 284, 593, 636, 651, 653, 776], "683288": 0, "250000": 0, "105": [0, 62, 84, 636, 637, 659, 660, 675, 682], "890000": 0, "2125": 0, "870000": 0, "deepen": 0, "averag": [0, 6, 7, 45, 47, 57, 59, 63, 80, 82, 86, 375, 377, 381, 387, 389, 390, 394, 395, 396, 454, 455, 456, 457, 458, 459, 506, 522, 615, 616, 621, 635, 636, 638, 640, 663, 696, 715, 716, 791, 792], "across": [0, 1, 12, 13, 14, 26, 27, 28, 29, 43, 57, 67, 74, 80, 81, 90, 102, 211, 212, 240, 247, 273, 291, 377, 381, 452, 503, 506, 537, 558, 594, 631, 632, 634, 636, 641, 644, 659, 663, 724, 744, 745, 792, 818, 823, 829, 831, 833, 836, 837, 839, 844, 847, 868, 870, 875], "all": [0, 1, 2, 4, 5, 6, 7, 8, 12, 13, 16, 17, 18, 19, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 44, 45, 47, 48, 50, 52, 53, 57, 58, 61, 62, 64, 66, 71, 72, 74, 75, 76, 79, 80, 81, 84, 85, 87, 89, 94, 95, 97, 98, 126, 134, 141, 145, 146, 147, 201, 208, 240, 244, 272, 273, 328, 329, 341, 360, 369, 372, 375, 376, 377, 378, 387, 409, 418, 420, 421, 422, 430, 435, 445, 446, 448, 451, 452, 473, 484, 492, 498, 528, 534, 537, 554, 574, 575, 592, 599, 600, 614, 617, 629, 631, 632, 634, 635, 636, 637, 639, 640, 641, 643, 644, 648, 659, 662, 663, 668, 680, 685, 686, 689, 694, 703, 707, 709, 715, 716, 717, 718, 719, 720, 729, 730, 731, 732, 738, 741, 746, 771, 773, 776, 777, 778, 779, 791, 792, 798, 801, 806, 808, 810, 812, 813, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 873, 876, 877, 878], "group": [0, 6, 57, 80, 378, 381, 498, 502, 636, 641, 649, 656, 657, 720, 810, 821, 823, 827, 829, 837, 841, 842, 866, 869, 875], "calcul": [0, 4, 14, 45, 56, 57, 58, 63, 70, 74, 79, 80, 81, 85, 86, 93, 103, 220, 221, 222, 223, 224, 225, 226, 227, 228, 237, 238, 240, 243, 244, 245, 261, 262, 263, 264, 265, 266, 271, 272, 273, 278, 285, 286, 287, 289, 290, 291, 297, 307, 335, 336, 349, 359, 372, 375, 376, 377, 378, 381, 387, 394, 395, 396, 430, 452, 457, 484, 501, 503, 529, 569, 632, 634, 637, 638, 647, 674, 682, 685, 696, 697, 698, 760, 761, 762, 763, 764, 765, 766, 776, 778, 791, 792, 795, 818, 832, 849, 860, 863], "pictur": [0, 47, 812, 818, 849, 859], "vital": [0, 854, 859], "select": [0, 22, 31, 36, 49, 57, 70, 80, 93, 376, 378, 387, 430, 443, 492, 493, 496, 523, 524, 647, 757, 758, 818, 819, 820, 828, 834, 840, 844, 849, 851, 854, 855, 870, 873, 874], "guid": [0, 16, 29, 812, 813, 818, 819, 820, 826, 835, 841, 843, 876], "recogn": [0, 47, 815, 821], "both": [0, 6, 9, 11, 12, 13, 14, 16, 18, 26, 28, 31, 32, 36, 37, 44, 46, 53, 56, 57, 58, 61, 62, 76, 79, 80, 81, 84, 85, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 155, 171, 175, 178, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 329, 335, 336, 338, 339, 341, 346, 351, 369, 372, 375, 376, 378, 382, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 478, 484, 492, 495, 496, 508, 522, 525, 552, 556, 558, 560, 569, 591, 600, 624, 625, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 792, 812, 816, 818, 820, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 840, 841, 844, 847, 849, 851, 852, 853, 854, 855, 863, 864, 870, 873, 875, 876, 877], "groupbi": 0, "94838": 0, "202258": 0, "008258": 0, "006271": 0, "012171": 0, "007860": 0, "005453": 0, "002419": 0, "009637": 0, "000987": 0, "004467": 0, "000644": 0, "001235": [0, 47], "000024": 0, "000070": 0, "000182": 0, "000072": 0, "000089": 0, "000295": 0, "000131": 0, "80746": 0, "806911": 0, "771948": 0, "623778": 0, "033281": 0, "542029": 0, "151225": 0, "397737": 0, "568731": 0, "570636": 0, "581123": 0, "372319": 0, "713588": 0, "014049": 0, "040308": 0, "105130": 0, "041449": 0, "051648": 0, "170575": 0, "075667": 0, "In": [0, 3, 4, 5, 6, 16, 18, 20, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 43, 45, 50, 55, 57, 58, 64, 78, 80, 81, 87, 97, 98, 207, 214, 215, 219, 223, 240, 241, 247, 255, 256, 273, 276, 282, 284, 375, 378, 381, 399, 400, 401, 421, 462, 463, 464, 470, 472, 474, 475, 476, 477, 479, 483, 489, 490, 499, 501, 503, 535, 555, 562, 580, 631, 632, 634, 637, 639, 643, 685, 702, 703, 704, 706, 708, 709, 711, 713, 741, 812, 818, 819, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 846, 847, 851, 852, 853, 854, 855, 859, 861, 863, 864, 865, 866, 868, 870, 871, 873, 876], "outnumb": 0, "address": [0, 31, 32, 57, 58, 80, 378, 492, 599, 634, 818, 820, 823, 824, 836, 843, 849, 861, 866, 868, 870, 876], "fair": 0, "dure": [0, 11, 13, 24, 26, 31, 34, 36, 37, 55, 59, 70, 74, 78, 82, 93, 214, 375, 399, 400, 401, 580, 601, 615, 616, 621, 631, 634, 635, 636, 637, 640, 647, 659, 677, 715, 716, 717, 764, 766, 784, 795, 796, 810, 819, 827, 829, 830, 833, 837, 838, 840, 841, 842, 843, 844, 847, 855, 863, 870, 871, 876], "similar": [0, 1, 6, 22, 31, 32, 57, 282, 377, 452, 632, 636, 663, 792, 816, 818, 819, 827, 828, 829, 830, 833, 834, 835, 837, 838, 839, 841, 842, 844, 845, 852, 855, 859, 864, 866, 867, 868, 869, 876], "here": [0, 2, 4, 6, 7, 9, 14, 17, 19, 22, 27, 30, 31, 32, 43, 45, 46, 47, 48, 50, 80, 283, 459, 632, 812, 816, 817, 818, 819, 820, 823, 825, 826, 827, 828, 829, 831, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 849, 850, 851, 852, 853, 854, 855, 863, 864, 865, 870, 871, 878], "take": [0, 4, 6, 12, 22, 29, 31, 32, 37, 43, 45, 48, 57, 62, 64, 70, 80, 87, 97, 122, 123, 125, 141, 280, 287, 302, 367, 375, 376, 378, 395, 403, 408, 413, 423, 432, 446, 467, 474, 493, 523, 524, 628, 629, 632, 636, 637, 639, 640, 663, 677, 681, 706, 717, 757, 776, 784, 791, 792, 805, 810, 812, 813, 818, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 837, 840, 841, 842, 844, 847, 849, 851, 853, 854, 855, 856, 861, 863, 864, 867, 868, 876], "random": [0, 6, 9, 11, 13, 16, 18, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 36, 37, 38, 45, 47, 48, 57, 61, 74, 80, 84, 323, 324, 325, 326, 327, 369, 376, 377, 434, 445, 451, 457, 508, 509, 510, 511, 512, 636, 659, 738, 739, 740, 741, 742, 743, 776, 778, 791, 805, 806, 812, 818, 830, 842, 844, 845, 854, 864, 865, 870], "match": [0, 1, 54, 57, 74, 77, 80, 152, 247, 282, 339, 341, 372, 375, 377, 378, 420, 452, 467, 489, 493, 572, 630, 632, 634, 637, 673, 674, 678, 694, 771, 816, 818, 824, 826, 827, 831, 834, 842, 871, 876], "prevent": [0, 57, 59, 70, 80, 82, 93, 377, 457, 557, 615, 616, 621, 634, 635, 636, 647, 659, 761, 765, 791, 796, 818, 820, 828, 829, 833, 840, 841, 845], "being": [0, 6, 7, 9, 31, 32, 43, 57, 74, 80, 95, 102, 106, 126, 376, 378, 440, 468, 484, 586, 629, 634, 636, 637, 661, 674, 773, 779, 791, 812, 819, 820, 823, 824, 825, 827, 829, 830, 831, 834, 836, 838, 840, 841, 842, 844, 845, 847, 849, 852, 855, 860, 861, 866, 868, 869, 870, 871, 876, 877], "bias": [0, 636, 661], "toward": [0, 57, 64, 80, 87, 247, 294, 345, 357, 372, 378, 387, 490, 525, 632, 639, 707, 812, 816, 818, 819, 834, 849, 866, 870], "legit_sampl": 0, "n": [0, 14, 43, 46, 47, 48, 50, 53, 56, 57, 61, 62, 64, 66, 67, 70, 71, 79, 80, 84, 85, 87, 89, 90, 93, 94, 97, 102, 139, 145, 146, 147, 220, 290, 292, 328, 329, 341, 369, 372, 375, 376, 377, 378, 381, 382, 385, 387, 389, 390, 391, 392, 397, 398, 403, 404, 407, 408, 409, 417, 418, 419, 420, 422, 430, 431, 438, 442, 444, 446, 451, 452, 464, 470, 473, 477, 479, 490, 499, 501, 502, 503, 506, 508, 509, 510, 511, 512, 515, 522, 532, 629, 632, 636, 637, 639, 641, 643, 644, 647, 648, 649, 650, 651, 652, 654, 656, 658, 663, 668, 671, 675, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 691, 692, 693, 694, 701, 702, 704, 710, 714, 726, 739, 740, 741, 747, 761, 763, 764, 765, 766, 767, 768, 792, 795, 805, 812, 822, 826, 828, 844, 856, 864], "after": [0, 4, 5, 8, 9, 11, 12, 13, 31, 32, 46, 57, 58, 59, 61, 65, 74, 80, 81, 82, 84, 88, 186, 287, 304, 308, 357, 367, 372, 375, 376, 378, 398, 399, 400, 401, 418, 422, 443, 473, 484, 562, 616, 619, 621, 622, 623, 630, 632, 634, 635, 636, 641, 642, 649, 650, 651, 652, 654, 656, 658, 659, 729, 737, 796, 801, 812, 818, 819, 820, 823, 825, 826, 828, 829, 831, 833, 836, 839, 842, 844, 848, 856, 863, 864, 870], "combin": [0, 14, 37, 57, 74, 80, 103, 375, 387, 409, 420, 522, 550, 551, 634, 637, 668, 677, 820, 824, 827, 828, 829, 831, 833, 837, 844, 854, 870], "them": [0, 3, 4, 11, 13, 16, 18, 20, 31, 32, 37, 376, 446, 539, 575, 634, 776, 792, 812, 814, 818, 820, 821, 823, 824, 825, 826, 827, 828, 829, 833, 835, 838, 840, 841, 842, 844, 846, 849, 851, 852, 853, 855, 857, 858, 859, 860, 861, 862, 863, 864, 865, 867, 868, 870, 872, 876], "achiev": [0, 11, 13, 14, 31, 812, 813, 815, 821, 828, 829, 837, 838, 844, 847, 852, 854, 857], "concaten": [0, 43, 57, 58, 64, 80, 85, 378, 469, 545, 549, 634, 636, 639, 663, 682, 700, 776, 842, 847, 849, 852], "along": [0, 46, 51, 53, 56, 57, 58, 62, 63, 64, 66, 67, 69, 70, 71, 73, 74, 76, 79, 80, 81, 85, 86, 87, 89, 90, 92, 93, 94, 97, 98, 100, 113, 117, 122, 137, 138, 213, 287, 290, 292, 330, 331, 332, 335, 336, 340, 341, 356, 363, 369, 372, 373, 375, 376, 377, 378, 381, 387, 397, 403, 404, 407, 408, 409, 419, 420, 445, 456, 469, 470, 471, 473, 475, 476, 484, 489, 492, 494, 496, 504, 505, 506, 507, 523, 524, 525, 527, 528, 529, 530, 531, 532, 545, 552, 628, 629, 631, 632, 634, 637, 638, 639, 640, 643, 644, 646, 647, 648, 668, 682, 691, 693, 694, 696, 697, 698, 700, 703, 704, 705, 707, 708, 710, 712, 713, 715, 716, 717, 743, 744, 745, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 792, 812, 818, 821, 822, 831, 840, 843, 845, 847, 849, 870], "axi": [0, 4, 6, 7, 8, 14, 46, 47, 48, 51, 53, 56, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 113, 117, 137, 138, 141, 213, 287, 292, 335, 336, 340, 341, 349, 356, 372, 375, 377, 378, 381, 385, 387, 397, 398, 404, 407, 409, 419, 420, 456, 461, 469, 470, 471, 474, 475, 476, 479, 484, 489, 490, 492, 493, 494, 496, 498, 499, 504, 505, 507, 515, 520, 523, 524, 525, 527, 528, 529, 530, 531, 532, 545, 552, 614, 626, 629, 631, 632, 634, 636, 637, 638, 639, 640, 643, 644, 645, 646, 647, 648, 658, 668, 671, 678, 691, 693, 694, 696, 697, 698, 700, 701, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 743, 744, 745, 749, 751, 753, 754, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 778, 788, 792, 793, 798, 827, 829, 831, 833, 836, 837, 840, 841, 844, 847, 849, 851, 854], "result": [0, 1, 4, 8, 9, 11, 12, 13, 14, 16, 18, 26, 27, 28, 29, 31, 32, 43, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 179, 180, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 322, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 432, 433, 435, 436, 440, 441, 442, 443, 444, 446, 450, 453, 454, 455, 456, 458, 459, 461, 468, 469, 472, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 540, 541, 545, 546, 547, 552, 553, 557, 562, 569, 576, 577, 615, 616, 617, 619, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 721, 724, 725, 727, 731, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 778, 784, 798, 806, 810, 812, 816, 818, 820, 823, 824, 826, 827, 828, 829, 831, 832, 834, 836, 837, 839, 840, 841, 842, 844, 845, 849, 852, 855, 863, 864, 865, 871, 873], "new_dataset": 0, "now": [0, 1, 5, 6, 7, 9, 11, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 47, 792, 793, 794, 812, 819, 823, 824, 825, 826, 827, 828, 829, 830, 834, 836, 838, 841, 842, 844, 845, 847, 851, 852, 854, 855, 861, 863, 864, 865, 870], "equal": [0, 5, 53, 54, 56, 57, 58, 62, 63, 64, 66, 68, 69, 70, 74, 77, 79, 80, 81, 85, 86, 87, 89, 92, 98, 102, 103, 132, 134, 135, 136, 142, 143, 152, 232, 234, 238, 243, 245, 254, 255, 276, 278, 283, 286, 287, 291, 330, 331, 332, 334, 351, 369, 372, 375, 376, 378, 381, 387, 398, 419, 446, 470, 479, 492, 496, 499, 504, 505, 507, 525, 534, 537, 614, 629, 630, 632, 634, 637, 638, 639, 643, 644, 645, 646, 647, 671, 679, 680, 683, 685, 691, 696, 699, 701, 706, 708, 714, 741, 747, 749, 750, 751, 752, 753, 756, 761, 763, 764, 765, 766, 784, 791, 792, 826, 827, 829, 831, 833, 842, 844, 867], "unbias": [0, 57, 70, 80, 93, 387, 522, 647, 766], "concat": [0, 8, 43, 48, 58, 64, 74, 87, 213, 549, 631, 634, 639, 714, 842, 847, 849, 863], "65908": 0, "51801": 0, "519205": 0, "852437": 0, "191664": 0, "749435": 0, "639186": 0, "666758": 0, "310037": 0, "116659": 0, "554879": 0, "207139": 0, "748058": 0, "229554": 0, "272256": 0, "304838": 0, "251128": 0, "131252": 0, "036799": 0, "195557": 0, "131120": 0, "102139": 0, "442451": 0, "887016": 0, "579461": 0, "325601": 0, "615304": 0, "621226": 0, "291374": 0, "236204": 0, "557458": 0, "159454": 0, "710631": 0, "429388": 0, "234335": 0, "787399": 0, "300106": 0, "108052": 0, "614": 0, "53744": 0, "46126": 0, "823696": 0, "028978": 0, "698815": 0, "498501": 0, "813862": 0, "788743": 0, "279106": 0, "488737": 0, "885320": 0, "300256": 0, "715811": 0, "186151": 0, "132502": 0, "385279": 0, "634010": 0, "231485": 0, "096003": 0, "98": [0, 43, 51, 57, 59, 66, 73, 79, 82, 89, 113, 238, 286, 360, 372, 619, 626, 635, 637, 641, 644, 647, 682, 719, 730, 739, 741, 748, 759, 878], "224892": 0, "144011": 0, "802980": 0, "264517": 0, "123151": 0, "302386": 0, "758015": 0, "307608": 0, "405042": 0, "111496": 0, "265297": 0, "260045": 0, "499437": 0, "056524": 0, "534144": 0, "206880": 0, "386490": 0, "001905": 0, "026937": 0, "172": [0, 279, 632], "03": [0, 6, 14, 27, 46, 53, 56, 58, 59, 79, 80, 82, 89, 138, 238, 263, 343, 344, 592, 593, 616, 621, 629, 632, 634, 635, 637, 676, 740], "55713": 0, "47085": 0, "738160": 0, "575518": 0, "551978": 0, "894729": 0, "839781": 0, "083335": 0, "779428": 0, "083990": 0, "568542": 0, "554234": 0, "707282": 0, "924631": 0, "076400": 0, "157681": 0, "914957": 0, "266566": 0, "168184": 0, "1025": [0, 776], "279863": 0, "169142": 0, "927883": 0, "125653": 0, "518331": 0, "749293": 0, "566487": 0, "010494": 0, "882850": 0, "697211": 0, "064945": 0, "778584": 0, "319189": 0, "639419": 0, "294885": 0, "537503": 0, "788395": 0, "292680": 0, "147968": 0, "390": [0, 13, 26, 27, 28, 29], "280143": 0, "169347": 0, "378559": 0, "289381": 0, "004247": 0, "411850": 0, "442581": 0, "326536": 0, "413170": 0, "248525": 0, "127396": 0, "370612": 0, "028234": 0, "145640": 0, "081049": 0, "521875": 0, "739467": 0, "389152": 0, "186637": 0, "76": [0, 14, 24, 43, 56, 57, 70, 77, 79, 80, 89, 168, 222, 238, 286, 322, 369, 407, 630, 632, 637, 641, 647, 689, 726, 740, 759], "280149": 0, "169351": 0, "676143": 0, "126366": 0, "213700": 0, "468308": 0, "120541": 0, "003346": 0, "234739": 0, "210158": 0, "652250": 0, "751826": 0, "834108": 0, "190944": 0, "032070": 0, "739695": 0, "471111": 0, "385107": 0, "194361": 0, "89": [0, 5, 14, 43, 56, 66, 77, 79, 80, 89, 103, 168, 235, 630, 637, 647, 689, 740, 741, 765], "281144": 0, "169966": 0, "113832": 0, "585864": 0, "399730": 0, "817092": 0, "840618": 0, "943548": 0, "208002": 0, "058733": 0, "632333": 0, "583276": 0, "269209": 0, "456108": 0, "183659": 0, "328168": 0, "606116": 0, "884876": 0, "253700": 0, "245": [0, 56, 84, 228, 636, 659, 660], "281674": 0, "170348": 0, "991976": 0, "158476": 0, "583441": 0, "408670": 0, "151147": 0, "096695": 0, "223050": 0, "068384": 0, "577829": 0, "164350": 0, "295135": 0, "072173": 0, "450261": 0, "313267": 0, "289617": 0, "002988": 0, "015309": 0, "42": [0, 11, 13, 14, 24, 25, 29, 31, 32, 43, 45, 46, 51, 66, 73, 82, 89, 118, 234, 375, 397, 407, 615, 619, 626, 632, 635, 637, 642, 643, 647, 678, 682, 737, 738, 739, 740, 741, 742, 759, 812, 849, 854, 864], "53": [0, 10, 14, 26, 43, 62, 66, 79, 84, 159, 215, 245, 418, 618, 620, 630, 631, 635, 637, 642, 675, 737, 741], "93007": 0, "762195": 0, "000285": 0, "013777": 0, "014009": 0, "039620": 0, "140964": 0, "011996": 0, "076337": 0, "031293": 0, "076897": 0, "029911": 0, "043784": 0, "053381": 0, "010626": 0, "066434": 0, "007150": 0, "021923": 0, "030825": 0, "041431": 0, "632297": 0, "final": [0, 9, 11, 13, 16, 18, 20, 28, 31, 32, 37, 43, 44, 53, 57, 58, 80, 81, 97, 125, 137, 138, 322, 369, 375, 420, 549, 628, 629, 634, 636, 661, 662, 663, 806, 818, 820, 821, 823, 824, 826, 828, 829, 831, 832, 837, 839, 840, 841, 843, 847, 848, 852, 863, 864, 866, 876], "predictor": [0, 855], "label": [0, 6, 7, 14, 45, 46, 47, 57, 63, 80, 86, 377, 452, 453, 455, 456, 457, 458, 459, 638, 696, 697, 698, 812, 818, 823, 841, 848, 849, 850, 854, 856, 870], "whether": [0, 20, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 98, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 125, 127, 128, 134, 136, 141, 143, 149, 152, 153, 155, 158, 159, 160, 161, 162, 163, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 180, 192, 196, 197, 199, 200, 202, 204, 207, 208, 210, 213, 214, 216, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 329, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 369, 372, 375, 376, 377, 378, 387, 394, 395, 396, 398, 399, 400, 401, 417, 419, 421, 423, 438, 440, 446, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 468, 469, 470, 472, 474, 475, 476, 479, 483, 490, 492, 493, 494, 496, 499, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 572, 576, 577, 578, 579, 581, 584, 585, 587, 588, 590, 591, 592, 593, 595, 597, 599, 600, 607, 608, 611, 613, 616, 617, 619, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 647, 648, 650, 651, 652, 653, 659, 660, 661, 662, 663, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 686, 691, 696, 697, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 724, 725, 726, 728, 729, 730, 731, 735, 736, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 771, 773, 776, 788, 789, 792, 793, 794, 795, 796, 805, 812, 813, 818, 819, 824, 827, 829, 831, 836, 840, 841, 844, 846, 847, 863, 864], "x": [0, 4, 8, 9, 10, 14, 16, 18, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 47, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 172, 173, 175, 180, 196, 197, 199, 201, 206, 207, 208, 212, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 328, 329, 333, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 385, 386, 387, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 426, 427, 429, 431, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 445, 446, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 465, 466, 468, 469, 471, 472, 474, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 494, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 581, 582, 583, 586, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 613, 614, 616, 617, 618, 620, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 721, 724, 725, 726, 727, 728, 729, 730, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 792, 795, 798, 801, 805, 810, 812, 816, 818, 822, 824, 825, 827, 829, 830, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 844, 845, 847, 849, 851, 852, 853, 854, 863, 864, 865], "y": [0, 14, 31, 32, 43, 44, 46, 47, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 129, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 149, 152, 153, 154, 163, 165, 168, 180, 193, 197, 201, 206, 207, 208, 212, 214, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 334, 335, 336, 342, 350, 351, 352, 353, 354, 359, 361, 363, 367, 369, 372, 375, 376, 377, 378, 381, 387, 395, 397, 399, 400, 404, 407, 409, 413, 419, 426, 430, 436, 443, 450, 452, 453, 455, 456, 457, 458, 459, 469, 471, 480, 484, 492, 493, 494, 496, 500, 504, 505, 507, 515, 521, 522, 523, 524, 525, 528, 530, 531, 532, 534, 537, 540, 541, 544, 545, 547, 548, 549, 552, 553, 554, 558, 560, 561, 562, 564, 565, 568, 569, 574, 581, 582, 583, 586, 589, 590, 592, 593, 595, 597, 599, 600, 601, 605, 606, 609, 612, 613, 614, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 651, 653, 655, 657, 658, 659, 660, 667, 668, 669, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 685, 687, 688, 689, 691, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 721, 724, 725, 727, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 810, 812, 825, 827, 830, 831, 839, 841, 842, 844, 845, 847, 849, 851, 863], "upcom": [0, 850], "phase": [0, 844, 855, 870], "drop": [0, 14, 47, 57, 80, 331, 369, 377, 378, 456, 493, 791, 792, 819, 855], "015162": 0, "655442": 0, "367897": 0, "290904": 0, "902524": 0, "252967": 0, "226138": 0, "247968": 0, "306271": 0, "017652": 0, "984": [0, 291, 632], "length": [0, 6, 12, 45, 46, 53, 57, 63, 64, 74, 80, 86, 87, 97, 98, 103, 126, 134, 139, 314, 317, 318, 333, 341, 369, 372, 375, 376, 378, 382, 385, 397, 398, 403, 404, 407, 408, 409, 419, 420, 421, 423, 435, 444, 484, 493, 510, 515, 614, 629, 634, 636, 637, 638, 639, 645, 663, 687, 688, 696, 706, 749, 776, 792, 844, 852], "valid": [0, 8, 45, 47, 57, 61, 71, 80, 84, 94, 97, 98, 157, 375, 376, 394, 395, 396, 412, 413, 414, 415, 417, 418, 422, 443, 451, 565, 630, 634, 636, 639, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 702, 710, 767, 768, 776, 777, 792, 805, 819, 825, 829, 831, 835, 839, 842, 844, 863, 871], "gener": [0, 1, 7, 8, 20, 24, 29, 31, 32, 34, 37, 45, 47, 49, 50, 53, 56, 57, 61, 66, 72, 76, 79, 80, 84, 89, 95, 98, 126, 137, 138, 147, 155, 240, 243, 253, 254, 269, 273, 282, 312, 315, 319, 320, 321, 323, 324, 325, 326, 327, 328, 335, 336, 369, 372, 375, 376, 378, 382, 387, 419, 425, 447, 492, 510, 522, 629, 630, 632, 636, 637, 639, 643, 647, 659, 685, 686, 689, 692, 714, 738, 739, 741, 742, 764, 776, 779, 784, 796, 805, 812, 818, 819, 820, 822, 823, 824, 826, 829, 830, 831, 832, 833, 836, 837, 840, 841, 842, 845, 848, 849, 851, 853, 854, 855, 857, 868, 869, 870, 871, 872, 873, 874, 875, 876], "partit": 0, "have": [0, 1, 2, 4, 5, 6, 7, 8, 11, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 35, 43, 45, 47, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 165, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 335, 336, 337, 338, 343, 344, 348, 350, 352, 353, 354, 355, 359, 362, 367, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 409, 411, 412, 413, 414, 417, 419, 420, 424, 426, 427, 429, 430, 435, 436, 441, 442, 443, 444, 449, 453, 454, 455, 456, 457, 458, 459, 463, 464, 469, 470, 472, 477, 485, 486, 487, 488, 490, 492, 494, 496, 497, 504, 505, 507, 508, 509, 511, 512, 513, 515, 522, 523, 524, 525, 529, 533, 540, 541, 545, 546, 547, 552, 553, 562, 576, 577, 580, 615, 616, 619, 621, 622, 623, 624, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 788, 789, 791, 792, 794, 795, 796, 797, 805, 806, 812, 814, 815, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 865, 866, 867, 868, 869, 870, 872, 876, 877, 878], "stratifi": 0, "paramet": [0, 6, 7, 14, 18, 29, 31, 32, 45, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 580, 581, 582, 583, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 632, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 777, 778, 779, 784, 789, 791, 792, 793, 794, 795, 796, 797, 801, 802, 805, 806, 808, 810, 812, 818, 824, 832, 833, 836, 841, 842, 844, 845, 849, 851, 852, 863, 864, 865, 871], "test_siz": [0, 14, 45], "specifi": [0, 28, 29, 31, 32, 36, 37, 38, 49, 51, 53, 54, 56, 57, 58, 61, 62, 63, 64, 66, 67, 68, 70, 71, 73, 74, 77, 79, 80, 81, 84, 85, 86, 87, 89, 90, 93, 94, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 130, 135, 137, 142, 145, 146, 148, 152, 154, 201, 206, 208, 212, 213, 214, 282, 291, 295, 300, 301, 303, 329, 334, 351, 356, 367, 369, 372, 375, 376, 377, 378, 382, 387, 394, 395, 396, 398, 404, 409, 419, 420, 421, 422, 430, 442, 444, 449, 452, 456, 457, 458, 460, 474, 477, 486, 487, 489, 490, 492, 496, 509, 520, 522, 523, 524, 527, 528, 532, 535, 552, 553, 555, 557, 558, 571, 573, 581, 614, 626, 629, 630, 631, 632, 634, 636, 637, 638, 639, 641, 643, 644, 645, 646, 647, 648, 661, 663, 666, 668, 670, 671, 673, 674, 678, 686, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 707, 709, 710, 713, 714, 722, 723, 725, 726, 733, 734, 735, 736, 739, 740, 741, 743, 744, 745, 747, 750, 751, 752, 753, 757, 758, 759, 761, 763, 765, 767, 768, 776, 779, 788, 792, 793, 794, 806, 810, 819, 822, 826, 829, 830, 836, 837, 838, 840, 841, 842, 844, 849, 852, 853, 863, 864, 865, 876], "reserv": [0, 818], "x_train": [0, 14], "x_test": [0, 14], "y_train": [0, 14, 47], "y_test": [0, 14], "random_st": [0, 14, 376, 434], "With": [0, 4, 6, 24, 34, 43, 51, 53, 54, 56, 57, 58, 59, 61, 62, 64, 67, 70, 76, 77, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 152, 153, 154, 155, 157, 163, 164, 165, 168, 175, 180, 181, 182, 183, 184, 194, 197, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 335, 336, 338, 340, 343, 344, 348, 351, 352, 353, 355, 356, 359, 367, 369, 372, 375, 376, 377, 378, 387, 397, 399, 400, 407, 419, 426, 427, 428, 430, 431, 432, 443, 446, 458, 474, 475, 476, 478, 481, 483, 484, 490, 492, 494, 496, 498, 513, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 538, 539, 540, 541, 544, 545, 546, 547, 548, 552, 553, 556, 558, 560, 561, 562, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 666, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 689, 691, 692, 693, 696, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 819, 829, 831, 841, 844, 847, 849, 860, 861, 863, 870, 873], "next": [0, 1, 6, 7, 8, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 45, 47, 57, 80, 165, 348, 352, 357, 361, 372, 630, 791, 796, 812, 818, 819, 820, 825, 829, 831, 832, 834, 835, 838, 850, 851, 852, 861, 870, 872], "convers": [0, 56, 57, 80, 239, 279, 578, 588, 634, 793, 794, 818, 848, 850, 854, 855, 857, 861, 869, 876], "becaus": [0, 26, 34, 36, 46, 57, 375, 398, 771, 819, 820, 823, 824, 825, 826, 827, 829, 830, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 847, 849, 853, 854, 855, 870, 873, 876], "own": [0, 6, 7, 10, 16, 18, 22, 31, 32, 37, 812, 819, 823, 828, 829, 832, 833, 840, 841, 845, 849, 855, 857, 860, 861, 866, 869, 870, 875, 876], "confirm": [0, 4, 46, 815, 818], "been": [0, 6, 7, 13, 16, 18, 26, 28, 31, 32, 57, 58, 66, 80, 81, 89, 196, 283, 378, 491, 545, 546, 547, 631, 632, 634, 643, 738, 805, 806, 818, 820, 823, 825, 827, 828, 829, 830, 832, 833, 836, 837, 840, 844, 849, 851, 855, 856, 863, 870, 877], "correctli": [0, 1, 28, 31, 32, 45, 57, 62, 67, 80, 85, 90, 340, 372, 387, 528, 529, 530, 531, 532, 637, 644, 678, 744, 818, 819, 820, 824, 827, 829, 831, 833, 835, 836, 842, 844, 847, 853, 855, 863, 864], "size": [0, 8, 14, 16, 18, 23, 26, 27, 33, 34, 36, 37, 38, 45, 47, 50, 57, 58, 61, 62, 64, 66, 67, 74, 80, 81, 84, 85, 87, 89, 90, 97, 98, 102, 103, 134, 137, 211, 212, 213, 312, 315, 319, 330, 331, 332, 333, 340, 356, 363, 369, 372, 373, 375, 376, 377, 378, 381, 382, 385, 387, 389, 390, 391, 392, 393, 394, 395, 411, 412, 413, 415, 416, 422, 423, 430, 433, 445, 451, 452, 454, 468, 470, 482, 492, 494, 496, 502, 503, 506, 510, 515, 527, 528, 529, 530, 531, 532, 571, 576, 629, 631, 634, 636, 637, 639, 643, 644, 648, 661, 663, 666, 668, 671, 675, 678, 682, 684, 687, 693, 702, 707, 708, 709, 738, 744, 747, 767, 768, 776, 778, 779, 792, 806, 812, 840, 842, 844, 847, 852, 863, 865], "correct": [0, 11, 16, 18, 27, 37, 43, 45, 47, 70, 93, 186, 376, 447, 630, 639, 647, 699, 764, 766, 773, 776, 812, 816, 818, 820, 822, 827, 828, 829, 830, 833, 834, 836, 837, 840, 842, 844, 864], "787": 0, "197": [0, 56, 228, 632], "success": [0, 637, 647, 691, 763, 765, 815, 819, 828, 860], "prepare_data": [0, 14], "list": [0, 1, 5, 8, 11, 12, 14, 47, 52, 53, 54, 56, 57, 58, 61, 64, 65, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 134, 136, 139, 140, 141, 143, 149, 153, 155, 168, 172, 173, 180, 196, 213, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 337, 338, 340, 341, 342, 345, 346, 349, 350, 351, 357, 358, 359, 361, 362, 363, 372, 375, 376, 378, 385, 394, 395, 396, 398, 399, 400, 401, 412, 413, 414, 415, 419, 421, 425, 430, 434, 437, 444, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 468, 469, 470, 479, 490, 492, 493, 494, 496, 499, 501, 503, 504, 505, 507, 509, 514, 522, 523, 524, 525, 534, 536, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 554, 556, 558, 560, 561, 562, 564, 565, 568, 572, 576, 577, 591, 592, 593, 595, 597, 598, 599, 600, 601, 613, 614, 619, 624, 629, 630, 631, 632, 634, 636, 637, 639, 641, 642, 645, 646, 650, 651, 652, 653, 654, 655, 658, 659, 660, 663, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 689, 691, 696, 697, 698, 699, 700, 703, 706, 707, 708, 709, 710, 713, 714, 718, 719, 720, 721, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 754, 755, 757, 758, 761, 763, 764, 766, 767, 768, 771, 773, 776, 777, 778, 779, 784, 789, 792, 798, 805, 806, 810, 812, 815, 817, 818, 819, 821, 823, 824, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 837, 840, 841, 842, 844, 845, 849, 852, 853, 854, 855, 863, 870, 871, 876, 878], "tupl": [0, 14, 49, 52, 53, 54, 56, 57, 58, 61, 62, 64, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 100, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 127, 128, 134, 136, 140, 141, 143, 147, 149, 153, 154, 155, 166, 167, 168, 172, 173, 179, 180, 186, 196, 199, 200, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 316, 321, 325, 328, 334, 335, 336, 337, 338, 340, 341, 342, 345, 346, 348, 349, 350, 351, 355, 356, 357, 358, 359, 361, 362, 363, 364, 369, 372, 374, 375, 376, 378, 381, 382, 383, 385, 387, 394, 395, 396, 398, 399, 400, 401, 403, 408, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 429, 430, 434, 438, 440, 445, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 468, 469, 479, 484, 490, 492, 493, 494, 496, 498, 501, 503, 504, 505, 506, 507, 509, 510, 512, 513, 514, 522, 523, 524, 525, 527, 528, 529, 530, 531, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 581, 591, 592, 593, 594, 595, 597, 598, 599, 600, 613, 614, 615, 616, 617, 619, 621, 624, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 666, 667, 668, 672, 673, 674, 675, 676, 677, 678, 680, 682, 683, 684, 685, 687, 689, 690, 691, 694, 696, 697, 698, 699, 700, 701, 703, 704, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 718, 719, 721, 722, 723, 725, 726, 727, 729, 730, 733, 734, 735, 736, 738, 739, 740, 741, 743, 746, 747, 749, 750, 751, 752, 753, 754, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 791, 792, 794, 805, 806, 824, 829, 836, 837, 840, 842, 844, 849, 852, 853, 855, 863, 864, 865], "thei": [0, 1, 14, 38, 43, 48, 57, 62, 66, 68, 74, 85, 89, 91, 178, 292, 346, 372, 630, 632, 636, 637, 640, 643, 645, 661, 692, 715, 716, 738, 749, 771, 797, 812, 817, 818, 819, 822, 823, 825, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 840, 841, 844, 845, 847, 849, 851, 852, 853, 854, 855, 863, 867, 870, 872, 873, 876, 877], "dimension": [0, 53, 56, 57, 62, 64, 67, 70, 71, 74, 76, 79, 80, 85, 87, 93, 94, 102, 126, 132, 134, 139, 147, 292, 328, 335, 336, 369, 372, 375, 376, 378, 387, 403, 404, 408, 409, 419, 420, 427, 462, 463, 464, 468, 473, 474, 520, 532, 629, 632, 637, 639, 644, 647, 648, 668, 669, 675, 677, 680, 682, 683, 693, 694, 708, 744, 745, 747, 760, 761, 762, 763, 764, 765, 766, 767, 768, 837, 839, 844, 847, 849, 867, 870, 877], "reshap": [0, 4, 31, 32, 47, 48, 57, 61, 62, 64, 74, 80, 84, 85, 87, 360, 372, 375, 376, 378, 394, 395, 396, 399, 412, 413, 414, 417, 426, 443, 468, 474, 614, 634, 636, 637, 639, 652, 654, 658, 678, 694, 812, 840, 841, 844, 847, 849, 851, 854, 867], "float32": [0, 4, 8, 12, 14, 16, 18, 23, 24, 43, 45, 46, 47, 53, 54, 57, 58, 61, 76, 77, 80, 81, 84, 93, 138, 141, 143, 149, 150, 151, 155, 159, 160, 163, 164, 165, 166, 169, 172, 173, 175, 180, 183, 189, 239, 253, 280, 333, 346, 369, 372, 375, 376, 377, 387, 397, 407, 420, 446, 452, 457, 525, 562, 599, 629, 630, 632, 634, 636, 637, 640, 652, 654, 655, 658, 685, 687, 688, 694, 716, 717, 773, 776, 777, 812, 829, 831, 842, 844, 845, 864, 865], "def": [0, 4, 8, 11, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 49, 56, 79, 122, 224, 539, 628, 634, 640, 641, 716, 717, 724, 805, 812, 816, 818, 819, 823, 824, 827, 829, 830, 831, 833, 834, 836, 837, 839, 840, 841, 842, 844, 845, 847, 849, 851, 852, 853, 854, 863, 864, 865], "isinst": [0, 8, 14, 29, 31, 32, 833, 841, 844, 845, 853, 854], "rang": [0, 4, 6, 7, 9, 10, 14, 31, 32, 43, 44, 45, 47, 53, 57, 70, 76, 80, 126, 137, 138, 287, 299, 307, 319, 367, 369, 376, 378, 387, 430, 442, 477, 485, 487, 492, 497, 523, 524, 525, 545, 614, 629, 632, 634, 645, 647, 749, 757, 758, 763, 765, 776, 778, 779, 791, 812, 815, 818, 829, 833, 837, 844, 849, 852, 853, 854, 870, 876], "len": [0, 6, 7, 8, 14, 45, 47, 53, 57, 62, 80, 85, 139, 316, 325, 326, 369, 375, 376, 387, 409, 420, 432, 435, 445, 451, 532, 629, 637, 673, 692, 812, 827, 828, 833, 840, 841, 844, 851, 854, 863], "expand_dim": [0, 6, 14, 28, 31, 32, 47, 49, 64, 87, 636, 639, 658, 812, 841, 849, 852, 864], "astyp": [0, 14, 16, 18, 23, 45, 46, 47, 54, 61, 77, 84, 630, 636, 652, 654, 655, 658, 812, 829, 840, 841, 847, 865], "els": [0, 5, 6, 7, 8, 11, 14, 46, 47, 49, 50, 57, 58, 66, 79, 80, 89, 158, 159, 160, 161, 162, 174, 280, 284, 375, 376, 382, 421, 434, 445, 449, 451, 509, 544, 548, 630, 632, 634, 636, 641, 643, 662, 728, 731, 739, 740, 741, 771, 805, 806, 812, 818, 819, 820, 823, 825, 829, 830, 833, 837, 840, 841, 842, 844, 845, 847, 849, 851, 853, 854, 855, 871], "return": [0, 4, 8, 9, 11, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 102, 103, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 777, 778, 779, 783, 784, 789, 791, 792, 794, 796, 801, 802, 805, 806, 807, 808, 809, 810, 812, 819, 820, 824, 827, 829, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 863, 864, 865, 871], "defin": [0, 23, 29, 31, 32, 33, 53, 57, 58, 62, 76, 80, 81, 85, 100, 116, 141, 145, 146, 147, 223, 240, 247, 273, 274, 282, 284, 287, 300, 304, 308, 314, 317, 318, 319, 328, 329, 330, 331, 332, 335, 336, 338, 367, 369, 372, 375, 376, 378, 387, 411, 428, 484, 490, 525, 560, 561, 581, 626, 629, 632, 634, 636, 637, 647, 661, 668, 673, 674, 686, 760, 761, 762, 764, 812, 818, 819, 824, 825, 828, 829, 832, 836, 839, 841, 842, 844, 845, 851, 853, 855, 857, 865, 867, 868, 869, 870, 871, 874, 876, 877], "proper": [0, 812, 818, 841, 864], "adjust": [0, 45, 70, 93, 376, 447, 647, 764, 766, 801, 810], "comput": [0, 6, 28, 29, 31, 32, 38, 39, 44, 45, 47, 51, 56, 57, 58, 59, 61, 62, 63, 68, 70, 73, 74, 79, 80, 81, 82, 84, 85, 86, 93, 97, 98, 100, 113, 117, 213, 223, 230, 233, 235, 240, 241, 242, 247, 248, 249, 251, 252, 258, 259, 260, 267, 268, 269, 270, 272, 273, 276, 281, 282, 300, 304, 308, 314, 317, 318, 330, 331, 332, 335, 336, 338, 342, 344, 347, 349, 350, 354, 356, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 385, 387, 394, 395, 396, 397, 398, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 420, 423, 424, 426, 428, 429, 430, 431, 433, 434, 436, 438, 441, 443, 445, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 478, 481, 494, 501, 503, 514, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 540, 541, 585, 608, 615, 617, 618, 620, 624, 625, 631, 632, 634, 635, 636, 637, 638, 639, 641, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 667, 668, 672, 673, 674, 677, 678, 680, 682, 684, 686, 687, 689, 691, 693, 694, 696, 697, 698, 702, 724, 749, 750, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 773, 778, 792, 795, 806, 812, 819, 827, 828, 829, 837, 839, 841, 844, 846, 847, 849, 852, 855, 857, 860, 861, 863, 864, 866, 868, 870, 871, 873, 874, 876], "most": [0, 6, 14, 22, 31, 32, 74, 76, 97, 100, 141, 376, 429, 585, 608, 629, 634, 637, 672, 673, 809, 812, 817, 818, 819, 824, 827, 828, 829, 830, 834, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 855, 860, 870, 871, 873, 874, 876, 877], "avail": [0, 2, 4, 6, 8, 12, 26, 27, 29, 31, 32, 47, 58, 81, 196, 202, 204, 205, 216, 546, 631, 634, 637, 688, 777, 810, 812, 819, 820, 827, 828, 829, 830, 832, 833, 841, 844, 847, 855, 856, 859, 863, 864, 865, 875, 876], "cpu": [0, 6, 7, 8, 9, 10, 11, 13, 26, 27, 28, 29, 31, 45, 46, 47, 49, 50, 53, 55, 57, 66, 76, 78, 80, 89, 126, 132, 135, 137, 138, 141, 142, 143, 149, 193, 194, 196, 197, 198, 199, 204, 207, 209, 211, 214, 215, 217, 219, 376, 382, 438, 508, 509, 511, 512, 629, 631, 643, 738, 739, 740, 741, 773, 791, 792, 793, 794, 795, 796, 797, 810, 812, 816, 819, 820, 826, 829, 830, 834, 841, 844, 855, 868, 870, 873, 875], "gpu": [0, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 45, 47, 49, 50, 196, 198, 199, 202, 205, 207, 209, 211, 212, 215, 217, 219, 631, 810, 812, 819, 820, 828, 830, 851, 856, 868, 870, 873, 874, 875], "tpu": [0, 45, 194, 200, 209, 211, 216, 631, 810, 830, 870, 873], "explicitli": [0, 637, 673, 674, 689, 773, 792, 793, 794, 816, 823, 824, 825, 827, 829, 832, 833, 834, 837, 838, 839, 840, 842, 844, 849, 855, 864, 870], "hardwar": [0, 4, 45, 102, 106, 819, 847, 860, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876], "mai": [0, 1, 6, 55, 56, 57, 62, 68, 69, 78, 79, 85, 92, 102, 103, 126, 133, 144, 214, 240, 241, 247, 252, 260, 268, 269, 273, 274, 276, 291, 335, 336, 372, 404, 544, 580, 629, 631, 632, 634, 637, 645, 646, 647, 685, 694, 749, 750, 751, 752, 753, 756, 760, 761, 762, 764, 776, 806, 817, 818, 819, 820, 823, 827, 828, 829, 833, 834, 837, 838, 839, 841, 842, 844, 847, 850, 851, 853, 861, 877], "vari": [0, 57, 68, 97, 98, 291, 404, 545, 632, 634, 637, 645, 684, 750, 751, 752, 806, 827, 831, 841, 844, 851], "known": [0, 57, 80, 284, 376, 448, 450, 632, 791, 823, 828, 829, 841, 844], "advanc": [0, 20, 43, 819, 821, 869], "set_soft_device_mod": [0, 4, 14, 18, 218, 631, 830], "section": [0, 1, 2, 6, 7, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 51, 57, 68, 80, 112, 375, 378, 409, 420, 470, 479, 499, 645, 749, 750, 751, 752, 812, 813, 816, 817, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 848, 852, 853, 865, 866, 873, 876], "binari": [0, 6, 14, 26, 27, 29, 57, 58, 61, 63, 80, 84, 86, 230, 233, 235, 270, 290, 375, 377, 421, 456, 459, 632, 636, 638, 659, 663, 696], "logist": [0, 14], "gblinear": [0, 14], "booster": [0, 14], "linear": [0, 4, 12, 18, 30, 31, 32, 43, 44, 45, 47, 50, 57, 58, 61, 73, 80, 81, 84, 110, 112, 114, 115, 118, 295, 299, 303, 305, 306, 307, 311, 353, 367, 372, 375, 378, 387, 411, 446, 484, 532, 549, 572, 626, 634, 636, 641, 663, 686, 725, 776, 778, 779, 791, 792, 812, 827, 832, 837, 838, 840, 841, 844, 847, 849, 852, 853, 854, 864, 868, 869, 870, 873], "estim": [0, 57, 80, 349, 372, 387, 522, 810], "rate": [0, 57, 59, 80, 82, 375, 382, 417, 512, 616, 619, 621, 622, 623, 635, 636, 640, 661, 715, 716, 717, 796, 828], "fine": [0, 16, 18, 31, 32, 819, 820, 829, 831, 841, 851, 854, 876], "tune": [0, 16, 18, 31, 32, 875, 876], "regular": [0, 46, 80, 376, 387, 438, 443, 526, 819, 841, 870], "term": [0, 6, 57, 80, 312, 319, 322, 369, 377, 456, 457, 636, 661, 662, 792, 806, 812, 820, 827, 849, 857, 859, 870], "reg_lambda": [0, 14], "reg_alpha": [0, 14], "overfit": [0, 636, 659], "compil": [0, 6, 9, 10, 11, 12, 13, 14, 26, 27, 29, 31, 32, 35, 48, 50, 291, 632, 784, 819, 841, 845, 849, 855, 857, 864, 866, 869, 870, 871, 874, 877], "param": [0, 11, 13, 14, 31, 45, 46, 47, 49, 74, 80, 81, 103, 535, 552, 553, 634, 798, 812, 854, 864], "n_estim": [0, 14], "100": [0, 6, 7, 9, 11, 12, 13, 14, 43, 45, 47, 53, 56, 57, 76, 79, 80, 81, 84, 101, 138, 147, 234, 274, 287, 328, 351, 360, 369, 372, 375, 376, 378, 399, 400, 445, 451, 489, 553, 561, 577, 629, 632, 634, 637, 641, 676, 724, 812, 828, 829, 844, 852, 853, 854, 855, 860, 861, 863], "learning_r": [0, 7, 14], "base_margin": [0, 14], "none": [0, 4, 6, 8, 11, 13, 14, 31, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 101, 102, 103, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 168, 170, 171, 172, 173, 175, 177, 180, 192, 195, 196, 208, 209, 210, 211, 212, 213, 214, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 568, 573, 576, 577, 578, 579, 580, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 619, 621, 622, 623, 624, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 722, 723, 724, 725, 729, 730, 731, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 784, 788, 789, 791, 792, 793, 794, 795, 796, 797, 800, 801, 804, 806, 810, 812, 816, 819, 823, 824, 825, 827, 828, 829, 830, 831, 833, 834, 836, 837, 840, 841, 842, 844, 845, 847, 849, 851, 853, 854, 863, 864, 865], "xgb_cl": [0, 14], "better": [0, 11, 14, 34, 43, 49, 50, 818, 822, 841, 842, 845, 847, 848, 851, 852, 853, 861, 873], "ivy_cl": [0, 14], "effici": [0, 8, 11, 12, 13, 20, 21, 23, 24, 31, 32, 33, 34, 57, 62, 80, 85, 376, 377, 440, 456, 585, 608, 634, 637, 680, 812, 819, 820, 827, 837, 838, 840, 844, 846, 849, 852, 855, 864, 870, 872, 873], "fit": [0, 14, 64, 87, 639, 705, 818, 841, 849, 866, 867, 870], "magic": [0, 828], "durat": 0, "70": [0, 14, 43, 45, 57, 80, 81, 375, 397, 407, 553, 577, 637, 647, 682, 759, 860], "m": [0, 11, 12, 13, 14, 31, 44, 46, 48, 50, 53, 57, 62, 66, 79, 80, 85, 89, 102, 139, 145, 146, 147, 267, 328, 329, 369, 375, 376, 377, 378, 382, 398, 429, 434, 435, 437, 438, 453, 464, 475, 476, 490, 508, 509, 510, 511, 512, 629, 637, 641, 643, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 726, 739, 740, 741, 812, 819, 820, 822, 828, 849], "per": [0, 11, 13, 14, 24, 45, 47, 57, 61, 80, 84, 319, 369, 375, 376, 378, 394, 395, 396, 412, 413, 414, 415, 444, 491, 636, 650, 652, 653, 654, 655, 658, 663, 792, 820, 828, 838, 841, 852], "loop": [0, 6, 7, 11, 13, 14, 24, 39, 72, 80, 95, 122, 125, 375, 421, 628, 640, 715, 716, 717, 812, 825, 855, 863], "dev": [0, 4, 11, 12, 13, 14, 24, 45, 47, 50, 55, 74, 78, 201, 208, 631, 819, 830, 834, 837, 851, 853], "run": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 45, 47, 48, 49, 57, 59, 80, 82, 381, 501, 503, 615, 616, 621, 635, 636, 640, 661, 715, 716, 717, 773, 774, 792, 793, 794, 795, 805, 812, 814, 818, 819, 822, 824, 825, 828, 830, 831, 833, 835, 836, 838, 841, 842, 849, 850, 851, 852, 853, 854, 855, 856, 863, 864, 865, 868, 870, 871, 872, 873, 875, 876, 877], "59": [0, 7, 43, 56, 235, 387, 523], "04": [0, 6, 45, 46, 53, 59, 73, 77, 80, 82, 112, 113, 138, 165, 245, 582, 615, 616, 621, 626, 629, 630, 632, 634, 635, 776, 819, 844], "slowest": [0, 34, 57, 64, 80, 87, 378, 474, 639, 706], "took": [0, 11, 79, 280], "87": [0, 14, 43, 82, 84, 234, 263, 387, 418, 523, 615, 632, 635, 776, 834], "longer": [0, 14, 819, 829, 840, 844, 870], "than": [0, 7, 9, 10, 14, 31, 32, 34, 37, 56, 57, 58, 61, 62, 64, 66, 67, 68, 70, 74, 79, 80, 81, 84, 85, 87, 89, 90, 91, 93, 102, 103, 126, 134, 165, 213, 221, 222, 225, 226, 228, 229, 232, 234, 236, 240, 246, 247, 261, 262, 263, 264, 271, 273, 278, 282, 284, 286, 287, 291, 292, 293, 302, 312, 334, 337, 351, 358, 369, 372, 375, 376, 377, 378, 387, 397, 398, 403, 404, 407, 408, 409, 419, 420, 424, 426, 445, 451, 452, 475, 476, 523, 524, 525, 564, 565, 568, 585, 608, 629, 630, 631, 632, 634, 636, 637, 639, 643, 644, 645, 647, 661, 666, 668, 677, 678, 679, 680, 683, 694, 699, 703, 709, 741, 747, 750, 751, 752, 757, 758, 763, 764, 765, 766, 792, 806, 816, 818, 820, 823, 827, 828, 829, 831, 833, 834, 840, 841, 842, 844, 845, 846, 847, 849, 852, 853, 854, 855, 856, 860, 867, 868, 869, 870, 876, 877], "fastest": [0, 34, 57, 64, 80, 87, 376, 378, 443, 474, 639, 706], "could": [0, 6, 13, 31, 32, 37, 68, 645, 749, 750, 751, 752, 818, 819, 820, 823, 828, 829, 831, 838, 840, 841, 842, 844, 849, 851, 852, 853, 860, 861, 870, 875, 876], "intermedi": [0, 44, 868, 869, 870, 871, 876], "cach": [0, 7, 12, 13, 26, 27, 28, 29, 45, 47, 50, 195, 539, 631, 634, 781, 801, 835, 837, 840, 844], "400": [0, 14, 81, 84, 375, 399, 400, 553, 577, 634, 637, 676], "\u00b5": [0, 11, 13, 14, 24], "487": [0, 279, 632, 636, 660], "make": [0, 1, 4, 8, 11, 12, 13, 14, 23, 31, 32, 33, 45, 49, 57, 80, 375, 419, 801, 812, 815, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 851, 852, 854, 856, 860, 861, 864, 868, 870, 871, 872, 873, 876, 877], "out": [0, 4, 6, 8, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 43, 46, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 154, 163, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 367, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 417, 419, 420, 423, 424, 425, 426, 427, 428, 429, 432, 433, 435, 436, 437, 438, 439, 441, 442, 443, 444, 446, 450, 453, 454, 455, 456, 458, 459, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 540, 541, 545, 546, 547, 549, 552, 553, 562, 572, 576, 577, 615, 616, 619, 621, 622, 623, 624, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 784, 788, 789, 791, 792, 794, 795, 796, 797, 812, 813, 816, 817, 818, 819, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 837, 839, 841, 842, 843, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 856, 859, 860, 861, 863, 864, 870, 877], "respect": [0, 53, 56, 57, 59, 62, 79, 80, 82, 85, 97, 139, 220, 223, 228, 230, 232, 233, 234, 235, 240, 241, 247, 251, 252, 259, 260, 265, 267, 269, 270, 273, 276, 282, 286, 289, 290, 300, 349, 364, 367, 372, 374, 376, 378, 381, 432, 449, 461, 501, 503, 557, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 629, 632, 634, 635, 636, 637, 640, 649, 656, 657, 663, 668, 684, 687, 715, 716, 717, 773, 776, 791, 806, 817, 818, 819, 820, 824, 825, 827, 828, 829, 830, 831, 836, 837, 839, 840, 841, 844, 845, 846, 866, 876], "kei": [0, 6, 7, 11, 24, 25, 31, 32, 47, 49, 52, 57, 61, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 136, 141, 143, 149, 153, 155, 168, 172, 173, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 385, 399, 400, 401, 419, 452, 453, 454, 455, 456, 457, 458, 459, 468, 469, 490, 492, 494, 496, 501, 503, 504, 505, 507, 509, 515, 522, 523, 524, 525, 534, 535, 537, 538, 540, 541, 542, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 634, 636, 640, 641, 650, 651, 652, 653, 659, 660, 663, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 715, 716, 721, 727, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 776, 777, 783, 789, 792, 796, 812, 815, 826, 827, 828, 837, 840, 841, 842, 844, 852, 864, 870, 873, 877], "precis": [0, 14, 57, 62, 80, 85, 165, 253, 273, 280, 287, 346, 372, 376, 387, 430, 522, 585, 608, 630, 632, 634, 637, 673, 674, 678, 685, 687, 688, 694, 784, 828, 841, 846, 847, 874], "recal": [0, 14], "f1": [0, 14, 829], "score": [0, 14, 61, 84, 377, 459, 636, 664, 666, 812], "ivy_pr": [0, 14], "xgb_pred": [0, 14], "nxgbclassifi": [0, 14], "86": [0, 14, 43, 66, 80, 89, 375, 387, 407, 523, 615, 635, 740, 741], "93": [0, 14, 43, 57, 79, 81, 89, 198, 287, 360, 372, 545, 546, 631, 634, 740, 741], "84": [0, 43, 61, 70, 79, 89, 168, 198, 263, 630, 631, 637, 642, 647, 660, 682, 737, 740, 741, 759], "91": [0, 43, 57, 84, 89, 360, 372, 418, 636, 637, 643, 647, 660, 682, 740, 759], "accuraci": [0, 6, 14, 45, 47, 50, 375, 419, 829], "92": [0, 14, 43, 47, 57, 58, 89, 360, 372, 613, 623, 635, 637, 669, 740, 741], "macro": [0, 14], "avg": [0, 14, 375, 394, 396, 417], "weight": [0, 4, 6, 14, 16, 18, 31, 32, 45, 46, 57, 59, 61, 63, 80, 82, 84, 86, 97, 98, 315, 319, 353, 369, 372, 375, 376, 387, 402, 435, 520, 522, 525, 615, 616, 619, 621, 622, 623, 635, 636, 638, 640, 660, 661, 662, 663, 666, 696, 717, 778, 791, 792, 794, 796, 810, 812, 827, 837, 844, 849, 853, 854, 869], "90": [0, 14, 43, 45, 47, 56, 57, 79, 80, 239, 279, 283, 360, 372, 378, 387, 490, 523, 632, 637, 647, 682, 759, 806, 860], "summar": [0, 31, 32, 97, 844], "perfect": [0, 812], "fals": [0, 6, 7, 8, 11, 12, 13, 18, 22, 23, 31, 34, 45, 46, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 196, 197, 202, 204, 207, 208, 210, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 340, 342, 350, 351, 356, 357, 358, 359, 360, 361, 362, 363, 369, 372, 373, 375, 376, 377, 378, 381, 387, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 411, 412, 413, 414, 417, 418, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 509, 514, 515, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 572, 576, 577, 578, 581, 584, 585, 587, 588, 590, 591, 592, 593, 595, 597, 599, 600, 602, 607, 608, 610, 611, 613, 616, 617, 619, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 724, 728, 729, 730, 731, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 774, 776, 777, 778, 779, 784, 788, 789, 792, 793, 794, 796, 798, 801, 805, 806, 807, 810, 812, 816, 819, 823, 825, 828, 829, 830, 831, 833, 834, 840, 841, 842, 844, 846, 847, 849, 852, 853, 854, 863, 864], "posit": [0, 47, 49, 52, 56, 57, 58, 62, 63, 64, 79, 80, 81, 85, 86, 87, 97, 132, 134, 147, 165, 220, 221, 222, 226, 229, 240, 247, 254, 255, 261, 263, 273, 274, 281, 282, 286, 287, 291, 313, 328, 334, 339, 351, 369, 372, 376, 378, 427, 447, 458, 483, 492, 539, 549, 614, 627, 629, 630, 632, 634, 637, 638, 639, 643, 644, 648, 667, 670, 691, 696, 702, 707, 742, 747, 767, 768, 773, 776, 784, 789, 793, 794, 806, 812, 818, 820, 823, 827, 841, 844, 845, 852, 863, 872], "excel": [0, 6, 877], "high": [0, 6, 22, 31, 32, 50, 57, 61, 66, 80, 84, 89, 375, 418, 422, 585, 634, 636, 643, 649, 650, 651, 652, 654, 656, 658, 739, 741, 778, 815, 818, 833, 839, 841, 852, 857, 861, 866, 867, 868, 869, 870, 874, 876, 877], "show": [0, 3, 4, 5, 6, 7, 12, 20, 26, 31, 32, 33, 34, 36, 43, 45, 47, 48, 579, 588, 611, 634, 812, 818, 819, 820, 826, 828, 831, 835, 840, 841, 844, 846, 855, 863, 870], "trade": [0, 863], "off": [0, 24, 34, 61, 62, 84, 85, 399, 400, 401, 636, 637, 659, 671, 691, 791, 792, 819, 834, 848, 861, 863, 876], "wa": [0, 9, 31, 32, 37, 46, 57, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 100, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 136, 141, 143, 149, 153, 155, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 358, 359, 361, 362, 363, 369, 372, 376, 399, 400, 401, 419, 450, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 490, 492, 493, 494, 496, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 601, 613, 619, 624, 632, 634, 641, 647, 648, 650, 651, 652, 653, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 801, 812, 814, 820, 823, 825, 826, 828, 831, 837, 839, 841, 849, 851, 860, 863, 864, 869, 870, 872], "overal": [0, 636, 659, 806, 827, 829, 830, 832, 854, 863, 866, 868, 869, 870], "slightli": [0, 14, 312, 369, 827, 841, 844, 849, 853], "lower": [0, 14, 47, 53, 56, 57, 62, 66, 79, 80, 85, 89, 132, 145, 271, 307, 313, 319, 328, 329, 367, 369, 387, 525, 526, 532, 629, 632, 637, 643, 667, 673, 674, 680, 741, 778, 791, 820, 829, 831, 841, 844, 849, 855, 857, 866, 867, 868, 870, 871, 876, 877], "good": [0, 22, 31, 32, 817, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 842, 844, 845, 847, 849, 850, 853], "due": [0, 24, 31, 32, 34, 48, 50, 273, 283, 378, 492, 632, 819, 823, 828, 833, 840, 841, 860, 863, 864, 870], "97": [0, 12, 14, 43, 57, 59, 79, 82, 89, 226, 360, 372, 619, 632, 635, 740], "suggest": [0, 1, 6, 818, 819, 820, 826, 829, 835, 839, 841, 844, 845, 846, 856], "slight": [0, 31, 32, 829, 844, 853], "edg": [0, 49, 57, 64, 80, 87, 319, 369, 375, 378, 387, 411, 484, 525, 639, 699, 701, 714, 779, 823, 844, 864, 870, 872, 876], "ivy_report": 0, "output_dict": 0, "xgb_report": 0, "block": [0, 6, 11, 31, 32, 35, 36, 37, 38, 376, 436, 812, 820, 827, 829, 833, 837, 844, 848, 850, 854, 855, 857, 864, 875, 877], "design": [0, 1, 6, 14, 22, 31, 80, 247, 312, 317, 318, 369, 632, 812, 815, 822, 826, 828, 829, 840, 841, 842, 843, 847, 849, 851, 855, 859, 860, 866, 868, 870, 873, 874, 875], "heatmap": 0, "seaborn": [0, 47], "aesthet": 0, "appeal": 0, "eas": [0, 839, 870], "plot_classification_report": 0, "argument": [0, 6, 9, 26, 28, 29, 31, 32, 34, 36, 37, 38, 43, 45, 47, 49, 52, 53, 56, 57, 58, 62, 74, 75, 79, 80, 81, 97, 98, 103, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 155, 171, 175, 180, 209, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 328, 329, 335, 336, 338, 341, 343, 344, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 407, 408, 409, 412, 413, 414, 419, 421, 423, 430, 484, 492, 496, 522, 525, 529, 535, 536, 538, 539, 544, 546, 547, 552, 556, 558, 560, 562, 572, 576, 577, 591, 595, 600, 601, 614, 624, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 661, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 717, 724, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 777, 784, 789, 792, 793, 794, 801, 805, 808, 812, 818, 822, 823, 824, 825, 826, 827, 831, 832, 835, 837, 842, 844, 845, 847, 849, 851, 852, 857, 859, 863, 864, 865, 870], "plot": [0, 6, 7, 14, 46, 870], "color": [0, 46, 74, 103, 811], "represent": [0, 49, 57, 58, 74, 80, 81, 103, 150, 151, 165, 168, 193, 194, 220, 223, 230, 233, 235, 240, 247, 270, 273, 275, 290, 316, 348, 352, 357, 361, 369, 372, 535, 597, 627, 630, 631, 632, 634, 776, 778, 779, 792, 829, 868, 869, 871, 875, 876], "easi": [0, 1, 31, 32, 45, 819, 820, 824, 825, 827, 837, 839, 842, 844, 847, 860, 868, 870, 876, 877], "assess": [0, 24, 34, 818, 847], "side": [0, 69, 92, 350, 372, 376, 446, 646, 755, 776, 792, 805, 806, 819, 820, 826], "pyplot": [0, 6, 7, 14, 45, 46, 47, 50], "plt": [0, 6, 7, 14, 45, 46, 47, 50], "sn": 0, "model_nam": [0, 6, 47], "ax": [0, 46, 51, 57, 62, 64, 67, 70, 71, 73, 80, 85, 87, 90, 93, 94, 102, 106, 113, 117, 213, 335, 336, 340, 341, 356, 363, 372, 373, 375, 376, 378, 381, 387, 404, 409, 420, 446, 483, 484, 490, 504, 527, 528, 529, 530, 531, 532, 545, 614, 631, 634, 637, 639, 644, 647, 648, 668, 678, 686, 689, 690, 694, 701, 703, 704, 707, 709, 711, 714, 744, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 778, 792, 829, 831, 844, 845, 849, 851], "iloc": 0, "t": [0, 1, 5, 6, 7, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 43, 45, 46, 47, 57, 61, 72, 80, 84, 95, 97, 98, 102, 349, 364, 372, 374, 376, 430, 562, 580, 595, 617, 634, 635, 636, 641, 660, 662, 726, 771, 792, 812, 814, 815, 818, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 834, 835, 837, 838, 839, 840, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 860, 861, 863, 864, 865, 868, 870, 872], "annot": [0, 836], "fmt": 0, "2f": [0, 5, 11], "cmap": 0, "blue": 0, "set_titl": [0, 46, 47], "f": [0, 4, 5, 6, 7, 9, 10, 11, 12, 31, 32, 44, 45, 47, 57, 64, 80, 87, 302, 319, 367, 369, 378, 474, 495, 639, 641, 706, 721, 725, 726, 727, 730, 735, 736, 812, 813, 820, 822, 827, 828, 833, 845, 849, 851, 852, 861, 866], "figur": [0, 46, 846], "fig": [0, 46, 47], "ax1": [0, 47], "ax2": [0, 47], "subplot": [0, 46, 47], "figsiz": [0, 46, 47], "tight_layout": [0, 47], "observ": [0, 14, 57, 80, 387, 521, 522, 820, 829, 833, 849, 863, 872], "exhibit": [0, 34, 876], "strong": [0, 778, 855, 860, 870], "commend": 0, "impli": [0, 68, 645, 749, 750, 751, 752, 844], "neg": [0, 51, 56, 57, 62, 64, 66, 71, 73, 79, 80, 85, 87, 89, 94, 97, 112, 115, 118, 126, 132, 134, 147, 240, 247, 254, 255, 273, 274, 282, 287, 295, 313, 328, 331, 367, 369, 376, 377, 378, 382, 427, 434, 440, 457, 492, 496, 512, 626, 629, 632, 637, 639, 643, 648, 668, 670, 687, 691, 693, 694, 700, 702, 703, 707, 740, 767, 768, 776, 778, 788, 827, 840], "depend": [0, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 36, 53, 54, 57, 58, 62, 68, 69, 77, 80, 85, 92, 93, 123, 129, 152, 220, 221, 222, 225, 226, 227, 228, 237, 238, 240, 243, 245, 261, 262, 263, 264, 273, 275, 278, 285, 286, 290, 291, 359, 372, 375, 376, 421, 429, 447, 595, 628, 629, 630, 632, 634, 636, 637, 644, 646, 661, 672, 673, 684, 685, 686, 687, 748, 753, 756, 766, 814, 816, 818, 819, 820, 826, 829, 830, 832, 834, 838, 840, 841, 842, 843, 844, 847, 849, 855, 856, 860, 863, 868, 870, 871], "applic": [0, 6, 18, 20, 45, 47, 50, 57, 61, 80, 84, 100, 376, 451, 636, 637, 641, 647, 663, 666, 691, 724, 725, 726, 730, 731, 763, 765, 812, 819, 828, 829, 830, 838, 853, 867, 868, 870, 872, 874, 876], "conclus": 0, "appear": [0, 378, 475, 476, 614, 634, 819, 820, 823, 841, 847, 863], "outperform": [0, 14], "especi": [0, 7, 819, 825, 835, 859, 870], "increas": [0, 11, 13, 14, 24, 31, 34, 57, 62, 64, 80, 85, 87, 100, 378, 387, 484, 525, 637, 639, 692, 701, 714, 778, 829, 833, 841, 845, 847, 859, 863, 870], "context": [0, 325, 369, 573, 634, 818, 819, 820, 825, 829, 830, 831], "specif": [0, 6, 7, 22, 23, 28, 29, 31, 32, 33, 35, 37, 45, 55, 57, 58, 78, 80, 81, 180, 211, 214, 247, 268, 269, 278, 322, 335, 336, 369, 372, 378, 382, 492, 512, 545, 546, 547, 573, 630, 631, 632, 634, 637, 639, 640, 643, 646, 647, 673, 674, 689, 710, 715, 716, 717, 738, 755, 760, 761, 762, 764, 771, 773, 793, 794, 801, 802, 808, 810, 812, 815, 816, 818, 819, 820, 823, 824, 825, 826, 827, 829, 830, 833, 835, 836, 837, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 853, 854, 855, 856, 857, 859, 863, 864, 865, 866, 868, 869, 871, 872, 873, 877], "problem": [0, 7, 812, 815, 818, 820, 823, 824, 830, 841, 851, 860, 866, 872, 876], "domain": [0, 221, 222, 225, 226, 227, 228, 237, 238, 243, 245, 261, 262, 264, 285, 286, 287, 290, 291, 359, 372, 632, 832, 868, 870], "repo": [1, 16, 45, 817, 820, 823, 826, 828, 829, 834, 842, 844, 859], "hold": [1, 57, 58, 62, 70, 80, 85, 93, 97, 98, 334, 351, 356, 372, 387, 470, 499, 523, 524, 529, 576, 577, 634, 637, 647, 678, 758, 774, 821, 852, 871], "exampl": [1, 6, 7, 9, 11, 13, 22, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 330, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 394, 395, 396, 397, 399, 400, 402, 403, 404, 407, 408, 409, 412, 413, 414, 417, 418, 419, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 436, 441, 443, 446, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 483, 484, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 504, 505, 507, 510, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 721, 722, 724, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 784, 801, 805, 806, 810, 812, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 837, 838, 840, 841, 845, 849, 851, 852, 853, 854, 855, 861, 867, 868, 871, 873, 876, 877], "tab": [1, 818, 819, 828, 834, 852], "ivi": [1, 2, 3, 6, 7, 9, 10, 11, 13, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 814, 815, 816, 817, 819, 822, 823, 825, 827, 829, 830, 832, 834, 835, 836, 837, 838, 840, 847, 848, 855, 857, 860, 861, 862, 866, 877, 878], "web": 1, "relev": [1, 53, 76, 138, 629, 796, 812, 818, 819, 820, 824, 827, 828, 829, 831, 834, 838, 839, 842, 843, 844, 852, 856, 860, 868, 875, 876], "link": [1, 22, 31, 32, 46, 812, 818, 819, 820, 826, 828, 829, 835, 841, 864, 866, 868], "open": [1, 4, 6, 7, 8, 11, 12, 13, 28, 31, 32, 45, 46, 47, 48, 58, 66, 89, 126, 629, 643, 739, 741, 812, 813, 814, 815, 819, 820, 821, 826, 829, 832, 834, 841, 842, 847, 856, 859, 860, 861, 863, 864, 868, 869, 870, 872, 873], "avil": 1, "discuss": [1, 818, 820, 826, 829, 830, 840, 841, 843, 844, 847, 850, 851, 852, 855, 861, 866, 871], "comprehens": [1, 20, 812, 820, 823, 843], "possibl": [1, 4, 37, 53, 57, 76, 80, 87, 97, 128, 247, 290, 312, 335, 336, 369, 372, 375, 377, 378, 398, 453, 462, 463, 464, 470, 472, 474, 475, 476, 483, 499, 572, 632, 634, 636, 647, 659, 702, 703, 704, 706, 708, 709, 711, 713, 760, 762, 776, 792, 806, 809, 812, 813, 816, 818, 819, 820, 823, 826, 827, 829, 831, 832, 834, 835, 837, 839, 840, 841, 842, 844, 847, 849, 852, 855, 860, 868, 870, 876], "us": [1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 43, 45, 46, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 64, 66, 67, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 89, 90, 93, 95, 97, 98, 100, 103, 110, 138, 141, 152, 164, 166, 167, 178, 179, 199, 200, 202, 207, 211, 212, 213, 214, 216, 219, 225, 233, 261, 262, 264, 265, 267, 268, 269, 271, 272, 274, 283, 287, 292, 312, 314, 315, 317, 318, 319, 327, 349, 352, 353, 356, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 387, 394, 395, 396, 398, 399, 400, 401, 402, 404, 409, 411, 412, 413, 414, 417, 419, 420, 421, 423, 428, 430, 434, 440, 442, 444, 445, 447, 448, 449, 451, 452, 457, 474, 478, 482, 484, 492, 496, 501, 503, 507, 508, 509, 510, 511, 512, 513, 514, 515, 522, 529, 532, 550, 551, 560, 561, 572, 573, 580, 582, 583, 585, 592, 593, 605, 606, 608, 615, 616, 621, 622, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 645, 647, 660, 661, 663, 666, 671, 673, 680, 684, 688, 691, 694, 696, 705, 706, 707, 711, 715, 716, 717, 718, 720, 721, 727, 728, 729, 731, 738, 739, 740, 741, 743, 744, 745, 746, 749, 751, 759, 761, 774, 776, 777, 778, 779, 784, 788, 789, 791, 792, 793, 794, 795, 796, 801, 805, 806, 810, 813, 815, 817, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 853, 854, 855, 857, 861, 865, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877], "attract": 1, "visual": [1, 6, 7, 14, 49, 810, 812, 819, 834, 841, 844, 855, 870, 872, 875], "graph": [1, 4, 6, 7, 8, 12, 14, 20, 21, 24, 26, 28, 29, 32, 38, 39, 44, 49, 50, 68, 645, 749, 750, 751, 752, 784, 812, 827, 837, 841, 843, 847, 849, 854, 855, 857, 861, 862, 863, 864, 865, 866, 870, 873], "nice": [1, 844, 861, 870], "etc": [1, 34, 39, 46, 53, 57, 66, 68, 72, 76, 80, 89, 95, 129, 137, 138, 141, 375, 382, 404, 409, 420, 508, 509, 511, 512, 629, 643, 645, 738, 739, 740, 741, 749, 750, 751, 752, 776, 779, 791, 792, 793, 794, 795, 796, 797, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 831, 833, 836, 841, 842, 844, 845, 849, 851, 852, 855, 857, 861, 863, 868, 870, 876], "tone": [1, 5], "feel": [1, 6, 7, 46, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 812, 814, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 848, 856, 863], "free": [1, 6, 7, 8, 45, 46, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 812, 814, 816, 817, 818, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 848, 856, 863, 871, 873], "emoji": [1, 818], "don": [1, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 45, 47, 72, 95, 812, 818, 819, 820, 828, 829, 830, 835, 839, 844, 847, 853, 855, 856, 861, 863], "keep": [1, 2, 16, 18, 22, 28, 29, 31, 57, 64, 74, 80, 87, 97, 100, 360, 376, 451, 639, 713, 817, 818, 819, 820, 823, 826, 827, 828, 833, 840, 841, 844, 845, 847, 852, 854, 856, 864], "thing": [1, 7, 29, 43, 45, 805, 817, 818, 819, 820, 825, 841, 844, 847, 851, 852, 859, 860, 861, 870], "super": [1, 4, 8, 16, 18, 31, 32, 45, 57, 80, 376, 430, 812, 833, 849, 852, 853, 854, 864], "seriou": 1, "given": [1, 4, 7, 22, 31, 44, 57, 58, 63, 64, 66, 74, 80, 81, 82, 86, 87, 89, 97, 98, 100, 102, 103, 126, 130, 137, 138, 158, 159, 160, 161, 162, 174, 179, 198, 207, 211, 212, 213, 215, 219, 292, 322, 331, 334, 340, 341, 349, 350, 351, 353, 356, 369, 372, 375, 376, 377, 378, 381, 382, 387, 394, 395, 396, 397, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 420, 430, 435, 450, 454, 455, 456, 458, 459, 460, 461, 471, 472, 473, 480, 482, 494, 500, 504, 505, 506, 507, 508, 509, 510, 511, 512, 522, 523, 524, 525, 531, 553, 557, 576, 577, 587, 615, 616, 619, 621, 622, 623, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 695, 696, 697, 698, 699, 702, 703, 704, 705, 707, 708, 712, 713, 725, 726, 735, 736, 739, 740, 741, 743, 755, 756, 757, 758, 771, 776, 777, 778, 779, 784, 788, 789, 791, 792, 794, 795, 796, 797, 798, 805, 806, 812, 815, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 850, 851, 853, 860, 861, 867, 872, 873, 876, 877], "intern": [1, 14, 74, 105, 106, 107, 641, 718, 728, 729, 791, 792, 793, 794, 795, 797, 821, 824, 827, 830, 832, 840, 842, 844, 846], "releas": [1, 6, 46, 818, 819, 829, 845, 847, 855, 861, 870, 876], "tracer": [1, 4, 8, 12, 13, 23, 26, 27, 28, 29, 32, 48, 50, 841, 848, 850, 855, 857, 864, 865, 866], "around": [1, 15, 16, 18, 20, 57, 74, 80, 103, 378, 484, 492, 818, 820, 823, 824, 826, 830, 836, 837, 841, 844, 845, 851, 855, 857, 863, 867, 868, 870, 877], "corner": [1, 57, 80, 375, 411, 819, 820, 834, 841], "anybodi": 1, "abl": [1, 4, 6, 7, 8, 33, 37, 48, 50, 74, 97, 819, 820, 821, 823, 829, 834, 837, 840, 841, 845, 849, 854, 863, 873, 876], "start": [1, 2, 6, 7, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 46, 47, 53, 57, 74, 76, 80, 84, 126, 134, 137, 138, 353, 363, 372, 373, 375, 378, 387, 418, 474, 477, 485, 487, 497, 531, 629, 778, 805, 810, 813, 818, 819, 820, 821, 822, 828, 829, 831, 832, 834, 835, 836, 841, 844, 847, 848, 849, 851, 852, 853, 855, 863, 864, 870, 876], "shortli": 1, "so": [1, 2, 7, 8, 11, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 43, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 100, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 372, 375, 378, 385, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 636, 641, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 685, 687, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 729, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 806, 812, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 850, 851, 852, 853, 854, 855, 859, 860, 863, 864, 865, 870, 871, 872, 874], "worri": [1, 31, 32, 818, 819, 835], "about": [1, 20, 21, 22, 25, 27, 29, 31, 32, 35, 46, 47, 54, 77, 165, 168, 630, 810, 812, 814, 817, 818, 819, 820, 821, 822, 823, 826, 828, 829, 830, 835, 836, 840, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 861, 865, 871, 872, 875], "transpil": [1, 9, 10, 11, 12, 13, 15, 20, 21, 23, 24, 34, 783, 784, 812, 818, 819, 833, 834, 841, 848, 849, 850, 857, 862, 863, 865, 870, 876, 877], "style": [1, 14, 45, 47, 378, 484, 644, 747, 820, 835, 870], "stori": 1, "anyon": [1, 812, 813, 820, 828, 855, 860, 876], "ha": [1, 4, 6, 8, 10, 12, 13, 14, 16, 18, 22, 24, 28, 31, 32, 34, 37, 39, 43, 50, 53, 57, 62, 64, 68, 70, 74, 77, 80, 81, 85, 87, 91, 93, 97, 139, 196, 220, 240, 243, 245, 247, 257, 273, 275, 280, 283, 285, 286, 290, 330, 331, 332, 369, 376, 377, 378, 387, 411, 446, 456, 467, 491, 493, 498, 521, 523, 524, 526, 558, 629, 631, 632, 636, 637, 639, 644, 645, 647, 662, 663, 677, 678, 686, 687, 689, 691, 694, 702, 709, 747, 750, 751, 752, 757, 758, 761, 763, 764, 765, 766, 773, 776, 779, 801, 818, 820, 823, 825, 826, 827, 828, 829, 830, 831, 832, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 853, 854, 855, 856, 859, 860, 861, 863, 865, 866, 869, 870, 872, 873, 876], "question": [1, 6, 7, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 812, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 859, 860, 861], "ping": 1, "me": [1, 820], "guillermo": 1, "commun": [1, 6, 7, 46, 813, 818, 819, 820, 821, 855, 860, 869, 870, 872], "ux": 1, "team": [1, 812, 813, 815, 818, 819, 820, 821, 841, 856, 872], "discord": [1, 6, 7, 46, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 812, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 856, 859, 860, 861], "channel": [1, 29, 47, 57, 58, 61, 80, 81, 84, 102, 103, 375, 381, 399, 400, 401, 411, 501, 502, 503, 506, 545, 549, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 788, 789, 791, 792, 794, 795, 796, 797, 820, 826, 834, 843], "templat": [1, 812, 826, 832, 844], "locat": [1, 47, 141, 387, 523, 629, 641, 643, 646, 722, 738, 755, 806, 818, 820, 825, 826, 830, 841, 842, 844, 845, 856, 868], "asset": [1, 857], "01_templat": 1, "ipynb": 1, "pleas": [1, 37, 46, 50, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 812, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 856, 859, 860, 861], "copi": [1, 47, 50, 53, 54, 55, 56, 57, 58, 64, 74, 76, 77, 78, 79, 80, 81, 87, 97, 101, 127, 128, 129, 133, 144, 152, 214, 274, 378, 460, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 499, 555, 581, 592, 599, 600, 629, 630, 631, 632, 634, 639, 641, 646, 702, 703, 704, 706, 708, 709, 711, 713, 719, 754, 756, 784, 806, 819, 820, 823, 825, 828, 829, 832, 841, 842, 849, 855, 863, 864, 865], "firstli": [1, 23, 24, 27, 33, 34, 38, 43, 824, 829, 831, 832, 833, 837, 838, 840, 847, 852, 866, 876], "file": [1, 6, 7, 45, 46, 47, 58, 74, 589, 612, 634, 794, 810, 814, 818, 819, 820, 823, 824, 825, 826, 827, 828, 830, 832, 833, 834, 835, 837, 841, 842, 843, 844, 845, 849, 852, 856, 866, 869, 870, 871], "topic": [1, 20, 23, 24, 25, 33, 34, 35, 36, 37, 38, 838, 851, 870], "Then": [1, 50, 636, 663, 814, 818, 819, 820, 825, 826, 828, 834, 835, 838, 840, 844, 845, 855], "place": [1, 7, 12, 13, 26, 27, 28, 29, 45, 52, 53, 56, 57, 58, 62, 64, 74, 76, 78, 79, 80, 81, 85, 87, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 155, 171, 175, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 312, 313, 316, 328, 329, 334, 335, 336, 338, 341, 342, 343, 344, 348, 350, 351, 352, 353, 355, 356, 357, 361, 362, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 474, 484, 489, 492, 496, 509, 522, 525, 529, 538, 546, 547, 552, 556, 558, 560, 561, 562, 576, 580, 591, 595, 600, 604, 624, 629, 630, 631, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 796, 812, 816, 817, 820, 822, 823, 826, 827, 828, 830, 831, 832, 834, 836, 837, 841, 842, 844, 845, 847, 854, 857, 872], "folder": [1, 12, 13, 26, 27, 28, 29, 47, 812, 819, 820, 823, 826, 828, 834, 837, 841, 844, 845, 846], "edit": [1, 818, 819, 820, 835], "titl": [1, 14, 17, 19, 30, 46, 49, 812, 818, 820, 826], "accordingli": [1, 57, 62, 67, 68, 70, 71, 80, 85, 90, 93, 94, 139, 240, 245, 247, 263, 273, 287, 335, 336, 372, 629, 632, 637, 644, 645, 647, 648, 694, 745, 749, 750, 751, 752, 760, 761, 762, 763, 764, 765, 766, 767, 768, 841, 849, 856], "render": [1, 826, 832], "webpag": [1, 20], "content": [1, 2, 17, 19, 30, 31, 46, 47, 57, 74, 80, 387, 529, 818, 820, 826, 830, 840, 843, 849, 852, 856], "behind": [1, 22, 31, 812, 822, 836, 844, 848, 850], "exist": [1, 22, 31, 32, 45, 46, 47, 50, 53, 57, 58, 74, 76, 80, 81, 87, 128, 378, 462, 463, 469, 470, 472, 474, 475, 476, 483, 499, 544, 580, 634, 639, 700, 702, 703, 704, 706, 708, 709, 711, 713, 796, 798, 810, 812, 818, 819, 823, 825, 830, 831, 832, 837, 838, 840, 841, 844, 847, 849, 855, 857, 859, 860, 868, 870, 873, 876], "cell": [1, 2, 4, 5, 8, 12, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 46, 61, 84, 636, 661, 662, 792, 828, 849], "h2": [1, 2, 17, 19, 30], "tag": [1, 2, 17, 19, 30, 819, 820], "h3": [1, 2, 17, 19, 30], "subsect": [1, 2, 17, 19, 30, 818, 819, 820, 823, 828], "explan": [1, 2, 17, 19, 30, 818, 819, 820, 827, 832, 836, 841, 845, 851], "go": [1, 5, 6, 7, 16, 18, 22, 29, 32, 37, 52, 57, 80, 84, 375, 418, 422, 641, 729, 730, 812, 813, 816, 818, 819, 820, 822, 825, 826, 829, 831, 834, 835, 841, 842, 844, 845, 848, 852, 855, 866, 870, 871, 875, 877], "default": [1, 4, 6, 8, 31, 32, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 100, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 172, 173, 178, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 196, 197, 199, 200, 204, 207, 208, 209, 211, 212, 213, 214, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 586, 590, 591, 592, 593, 595, 597, 599, 600, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 724, 725, 726, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 777, 778, 779, 784, 788, 789, 791, 792, 793, 794, 795, 796, 797, 805, 806, 810, 818, 819, 820, 825, 826, 829, 830, 831, 832, 833, 836, 837, 841, 844, 847, 849, 853, 857, 863, 870], "text": [1, 5, 6, 12, 14, 45, 57, 58, 376, 377, 444, 452, 818, 820, 826, 831, 832], "paragraph": [1, 2, 17, 19, 30, 826], "p": [1, 2, 17, 19, 30, 43, 57, 58, 62, 80, 81, 85, 98, 139, 244, 376, 381, 426, 439, 507, 540, 541, 629, 632, 634, 637, 641, 678, 694, 726, 792, 812, 819, 820, 822], "path": [1, 12, 13, 14, 26, 27, 28, 29, 46, 47, 773, 784, 800, 819, 826, 840, 841, 842, 856, 870], "correspond": [1, 4, 11, 13, 18, 31, 32, 46, 54, 56, 57, 58, 61, 64, 67, 68, 70, 74, 77, 79, 80, 84, 87, 93, 97, 100, 103, 153, 165, 168, 228, 278, 292, 331, 345, 346, 369, 372, 375, 376, 378, 381, 387, 398, 404, 415, 420, 426, 429, 430, 431, 450, 475, 476, 496, 501, 502, 503, 506, 523, 524, 592, 614, 630, 632, 634, 636, 637, 639, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 663, 668, 672, 673, 678, 685, 686, 706, 707, 738, 744, 745, 749, 750, 751, 752, 757, 758, 763, 764, 765, 766, 773, 776, 778, 805, 810, 812, 818, 820, 824, 825, 827, 828, 829, 831, 832, 833, 836, 837, 839, 841, 844, 847, 849, 863, 864, 865, 870], "toctre": [1, 826], "index": [1, 45, 46, 47, 50, 53, 57, 58, 64, 67, 68, 69, 74, 76, 80, 81, 87, 90, 91, 92, 132, 139, 313, 320, 321, 330, 331, 332, 369, 375, 376, 378, 383, 385, 387, 398, 404, 435, 437, 444, 467, 474, 477, 485, 487, 489, 492, 493, 496, 497, 513, 514, 523, 532, 535, 553, 555, 576, 577, 581, 627, 629, 634, 639, 641, 644, 645, 646, 706, 710, 720, 721, 722, 725, 726, 727, 733, 735, 744, 745, 747, 749, 750, 751, 753, 755, 777, 792, 806, 808, 827, 828, 833, 837, 838, 839, 840, 842, 844, 851, 870], "rst": [1, 837], "left": [1, 24, 34, 45, 46, 57, 62, 67, 69, 80, 85, 90, 92, 120, 121, 232, 247, 340, 356, 363, 372, 373, 375, 376, 378, 387, 410, 429, 434, 440, 447, 449, 475, 485, 527, 528, 529, 530, 531, 532, 545, 628, 632, 634, 637, 644, 646, 672, 673, 678, 687, 692, 744, 755, 776, 819, 820, 823, 826, 828, 829, 831, 834], "add": [1, 24, 34, 47, 49, 56, 57, 65, 72, 74, 79, 80, 88, 95, 102, 103, 363, 373, 375, 377, 418, 457, 572, 601, 632, 634, 636, 637, 642, 647, 663, 691, 737, 765, 773, 784, 792, 795, 810, 812, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 838, 840, 841, 844, 845, 847, 849, 851, 855, 856, 866, 867, 868, 870], "grid": [1, 47, 53, 139, 316, 369, 629, 831, 844], "item": [1, 5, 6, 7, 31, 32, 43, 45, 47, 52, 58, 72, 74, 76, 79, 80, 81, 134, 159, 196, 250, 266, 274, 341, 345, 358, 542, 552, 553, 557, 592, 593, 629, 630, 631, 634, 641, 648, 723, 724, 725, 726, 730, 735, 736, 770, 812, 818, 827, 829, 849, 851, 852, 854, 863], "card": [1, 57, 80, 360, 372, 875], "refer": [1, 8, 57, 64, 70, 71, 80, 82, 87, 93, 94, 132, 147, 245, 263, 313, 328, 358, 369, 372, 375, 376, 378, 404, 409, 420, 427, 451, 474, 615, 616, 629, 632, 635, 637, 639, 647, 648, 668, 670, 693, 706, 764, 766, 767, 768, 792, 812, 817, 818, 819, 820, 823, 824, 826, 828, 829, 836, 837, 838, 839, 840, 841, 842, 843, 844, 855, 856, 857, 870], "also": [1, 4, 5, 6, 7, 10, 11, 13, 14, 16, 18, 22, 24, 26, 27, 29, 31, 32, 34, 36, 37, 38, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 168, 171, 172, 173, 175, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 372, 375, 376, 378, 385, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 629, 630, 632, 634, 635, 636, 637, 639, 640, 641, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 728, 729, 730, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 791, 792, 801, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 847, 849, 852, 853, 854, 855, 856, 859, 860, 863, 864, 866, 867, 868, 869, 870, 871, 873, 875, 876, 877], "look": [1, 6, 7, 8, 22, 31, 32, 45, 47, 50, 812, 816, 818, 819, 820, 825, 826, 827, 829, 830, 831, 833, 834, 835, 836, 837, 841, 842, 844, 845, 846, 847, 849, 851, 853, 854, 856, 859, 863, 866, 870], "document": [1, 6, 7, 22, 31, 64, 247, 335, 336, 372, 614, 632, 634, 710, 813, 814, 817, 820, 826, 828, 829, 831, 840, 841, 842, 844, 852, 854], "sphinx": [1, 814, 826], "websit": [1, 49, 819, 823, 860], "alreadi": [2, 6, 13, 23, 26, 27, 28, 29, 31, 32, 37, 45, 47, 50, 57, 62, 74, 80, 85, 236, 246, 273, 283, 293, 378, 387, 463, 464, 484, 520, 529, 632, 637, 675, 682, 805, 806, 812, 818, 819, 820, 825, 827, 829, 830, 836, 840, 841, 847, 855, 856, 870, 872, 877], "instal": [2, 7, 8, 9, 10, 11, 13, 14, 16, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 45, 47, 48, 49, 50, 814, 819, 820, 825, 826, 834, 835], "skip": [2, 5, 47, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 136, 141, 143, 149, 153, 155, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 376, 378, 399, 400, 401, 419, 435, 437, 444, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 485, 488, 490, 492, 493, 494, 496, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 641, 650, 651, 652, 653, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 777, 805, 826, 837, 844], "colab": [2, 5, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 45, 47, 49, 50], "manual": [2, 6, 7, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 641, 718, 728, 729, 818, 819, 820, 829, 835, 844, 853, 856], "mind": [2, 16, 18, 22, 28, 31, 35, 818, 819, 824, 827, 844, 856, 864], "click": [2, 4, 47, 818, 819, 820, 828, 832, 834, 835, 850], "runtim": [2, 4, 5, 8, 11, 12, 13, 24, 31, 34, 45, 46, 822, 837, 844, 847, 870], "restart": [2, 4, 5, 8, 12, 45, 46, 819, 834], "git": [2, 4, 5, 8, 12, 31, 45, 46, 47, 48, 812, 814, 817, 819, 820, 823, 826, 828, 834, 835, 844, 856], "clone": [2, 4, 8, 12, 31, 45, 47, 48, 812, 814, 820, 834, 856], "http": [2, 4, 5, 6, 7, 8, 11, 12, 13, 18, 26, 27, 28, 29, 31, 32, 45, 46, 47, 48, 49, 50, 56, 57, 79, 80, 82, 147, 155, 243, 253, 254, 269, 328, 335, 336, 369, 372, 375, 378, 387, 419, 492, 522, 615, 616, 629, 630, 632, 635, 637, 639, 647, 685, 686, 714, 764, 812, 814, 819, 820, 823, 826, 828, 829, 832, 834, 856, 864], "github": [2, 4, 5, 8, 11, 12, 13, 31, 45, 46, 47, 48, 49, 812, 814, 815, 817, 820, 821, 823, 826, 828, 829, 831, 832, 834, 835, 843, 844, 856, 859, 878], "com": [2, 4, 5, 6, 7, 8, 11, 12, 13, 18, 31, 45, 46, 47, 48, 49, 812, 814, 819, 820, 823, 826, 828, 829, 834, 856], "unifyai": [2, 4, 8, 12, 31, 45, 46, 47, 48, 49, 812, 814, 819, 820, 826, 834, 856], "model": [2, 3, 4, 9, 14, 15, 20, 21, 22, 48, 50, 240, 273, 377, 453, 632, 789, 793, 794, 810, 812, 852, 853, 857, 863, 864, 868, 869, 870, 871, 872, 873, 874, 876, 877], "depth": [2, 4, 6, 8, 12, 46, 53, 57, 61, 76, 80, 84, 141, 375, 378, 411, 471, 545, 557, 629, 634, 636, 654, 655, 820, 828, 852, 853, 854, 856], "repositori": [2, 4, 8, 12, 814, 818, 819, 820, 822, 823, 826, 834, 843, 861], "cd": [2, 4, 8, 12, 31, 48, 812, 814, 819, 820, 834, 856], "resnet": [3, 6, 13, 20, 31, 863, 864], "imag": [3, 4, 6, 7, 11, 13, 16, 20, 28, 31, 32, 45, 46, 47, 48, 49, 50, 57, 61, 79, 80, 84, 102, 220, 221, 222, 223, 226, 229, 238, 241, 243, 245, 254, 255, 256, 261, 263, 276, 283, 284, 286, 287, 291, 375, 394, 395, 411, 412, 413, 415, 545, 632, 634, 636, 649, 650, 651, 652, 653, 656, 657, 658, 792, 812, 819, 834, 847, 849, 850, 852, 854, 856, 863, 864, 870], "classif": [3, 4, 12, 14, 20, 45, 812, 870], "acceler": [3, 20, 812, 829, 841, 868, 872, 873, 874, 875], "convert": [3, 8, 9, 11, 13, 14, 16, 18, 20, 21, 23, 25, 28, 29, 31, 32, 33, 35, 37, 45, 48, 50, 52, 53, 56, 74, 75, 76, 79, 97, 127, 128, 140, 150, 151, 193, 194, 195, 196, 207, 215, 219, 239, 279, 378, 383, 462, 463, 464, 513, 578, 596, 598, 599, 600, 602, 629, 630, 631, 632, 634, 637, 641, 695, 719, 730, 731, 773, 801, 805, 812, 818, 824, 825, 838, 839, 841, 844, 846, 849, 855, 857, 861, 864, 868, 869, 876], "faster": [3, 4, 9, 11, 13, 14, 20, 31, 32, 48, 50, 57, 62, 80, 85, 376, 449, 637, 687, 814, 817, 826, 857, 872, 875], "infer": [3, 6, 7, 9, 11, 13, 14, 20, 24, 34, 36, 37, 46, 48, 50, 53, 57, 58, 61, 64, 76, 80, 81, 84, 87, 126, 128, 131, 135, 136, 140, 143, 149, 158, 159, 160, 161, 162, 312, 313, 375, 378, 382, 411, 496, 510, 556, 590, 591, 629, 630, 634, 636, 639, 659, 706, 801, 802, 822, 825, 829, 830, 844, 849, 854, 864, 868, 869, 872, 874], "mmpretrain": [3, 20], "segment": [3, 20, 57, 80, 330, 331, 332, 369, 826, 831], "unet": [3, 20], "alexnet": [3, 20], "written": [3, 4, 5, 6, 20, 22, 31, 32, 45, 58, 378, 473, 819, 823, 824, 832, 835, 836, 840, 841, 845, 849, 851, 854, 855, 859, 864, 868, 870, 874, 876, 877], "xgboost": [3, 20], "paddlepaddl": [3, 20, 335, 336, 372, 819], "dinov2": [3, 7, 20], "project": [3, 12, 13, 20, 25, 26, 27, 28, 29, 31, 32, 35, 98, 636, 663, 792, 812, 814, 815, 818, 819, 820, 821, 824, 825, 826, 844, 853, 855, 859, 860, 861, 864, 866, 868, 870, 873, 877, 878], "convnext": [3, 6, 11, 20], "video": [4, 8, 11, 12, 13, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 812, 813, 818, 819, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 856, 868], "tutori": [4, 6, 7, 8, 11, 12, 13, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 812, 820, 841, 856], "three": [4, 5, 20, 26, 36, 37, 47, 57, 139, 312, 369, 378, 464, 629, 819, 820, 827, 828, 829, 831, 841, 844, 847, 848, 849, 871, 876], "major": [4, 5, 644, 747, 829, 830, 842, 844, 855, 860, 867, 870], "ml": [4, 5, 6, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 45, 47, 50, 812, 813, 817, 841, 848, 849, 850, 852, 853, 854, 858, 860, 861, 864, 866, 867, 868, 869, 870, 873, 875, 877], "framework": [4, 5, 7, 9, 16, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 38, 45, 47, 49, 52, 58, 170, 192, 202, 205, 216, 543, 559, 563, 595, 598, 630, 631, 634, 641, 720, 771, 773, 777, 784, 789, 796, 801, 802, 812, 815, 816, 818, 819, 822, 823, 824, 825, 826, 828, 829, 830, 831, 833, 834, 836, 837, 838, 840, 841, 844, 845, 847, 848, 849, 851, 854, 855, 856, 857, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 874], "sinc": [4, 8, 12, 28, 29, 31, 32, 45, 47, 57, 80, 98, 372, 812, 814, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 833, 840, 841, 855, 860, 870, 876], "automat": [4, 8, 9, 12, 29, 31, 32, 37, 818, 819, 820, 822, 825, 826, 828, 829, 835, 837, 840, 844, 847, 848, 850, 853, 854, 856, 857, 861, 870, 873, 877], "sure": [4, 8, 11, 12, 13, 14, 31, 45, 815, 818, 819, 820, 823, 828, 833, 834, 841, 842, 844, 847, 856], "enabl": [4, 5, 6, 8, 11, 12, 13, 14, 26, 27, 29, 46, 57, 62, 74, 85, 103, 375, 377, 398, 456, 580, 634, 637, 680, 794, 810, 812, 819, 820, 821, 824, 827, 829, 837, 838, 839, 840, 841, 844, 845, 848, 850, 852, 854, 855, 857, 860, 863, 868, 869, 870, 871, 872, 873, 876, 877], "dm": [4, 5, 8, 11, 13, 31, 32, 43, 45], "haiku": [4, 5, 8, 11, 13, 29, 31, 32, 43, 45, 49, 789, 812, 854, 861, 864, 870], "exit": [4, 8, 12, 31, 32, 830], "download": [4, 6, 7, 12, 16, 18, 31, 32, 46, 47, 50, 814, 819, 826, 844, 863, 864], "imagenet": [4, 6, 18, 46, 48, 812], "class": [4, 6, 7, 8, 12, 14, 16, 18, 22, 31, 32, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 134, 143, 149, 165, 168, 181, 183, 184, 243, 280, 338, 360, 372, 386, 387, 395, 396, 429, 528, 529, 536, 545, 549, 562, 572, 595, 629, 630, 631, 632, 634, 636, 637, 638, 641, 642, 657, 662, 666, 672, 682, 686, 687, 689, 696, 712, 719, 730, 737, 752, 759, 763, 764, 773, 774, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 805, 810, 812, 818, 825, 826, 827, 829, 830, 831, 832, 836, 838, 839, 842, 843, 844, 847, 849, 850, 852, 853, 854, 857, 863, 864, 868, 870, 871, 877], "wget": [4, 6, 8, 12, 45, 46, 49, 819], "raw": [4, 6, 7, 8, 11, 12, 13, 28, 31, 32, 45, 48, 49, 74, 812, 832, 864, 871], "githubusercont": [4, 6, 8, 12, 45, 49], "hub": [4, 6, 8, 12, 45, 48, 50], "master": [4, 8, 12, 23, 24, 25, 33, 34, 35, 36, 37, 38, 45, 47, 48, 49, 815, 828, 870, 878], "imagenet_class": [4, 12], "categori": [4, 6, 12, 818, 823, 824, 827, 829, 833, 841, 845, 848], "strip": [4, 12, 24, 34, 860], "readlin": [4, 12, 46], "cat": [4, 7, 12, 46, 842, 847, 849, 854, 863, 864], "jpg": [4, 6, 7, 8, 11, 12, 13, 28, 31, 32, 47, 48, 812, 864], "filenam": [4, 8, 12, 31, 32, 45, 47, 50, 58, 794, 800, 852], "import": [4, 6, 7, 9, 10, 11, 13, 16, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 45, 46, 48, 49, 50, 57, 68, 72, 76, 80, 95, 194, 195, 199, 211, 307, 387, 522, 557, 573, 631, 634, 640, 645, 716, 717, 752, 784, 801, 802, 812, 817, 818, 819, 820, 821, 823, 824, 825, 826, 827, 829, 830, 831, 832, 835, 838, 839, 840, 841, 842, 843, 844, 845, 849, 851, 852, 854, 855, 856, 860, 863, 864, 865, 866, 868, 870, 873, 874, 876], "devic": [4, 6, 7, 8, 9, 11, 12, 13, 46, 47, 50, 53, 57, 66, 74, 76, 80, 89, 102, 105, 106, 107, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 149, 193, 194, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 211, 212, 213, 214, 215, 217, 219, 312, 313, 328, 329, 369, 382, 472, 508, 509, 511, 512, 536, 550, 551, 629, 634, 643, 738, 739, 740, 741, 771, 773, 774, 789, 791, 792, 793, 794, 795, 796, 797, 798, 810, 812, 820, 822, 825, 829, 833, 837, 838, 842, 844, 845, 847, 849, 854, 855, 856, 857, 860, 869, 870, 872, 873, 874, 875], "torchvis": [4, 6, 11, 12, 45, 861], "transform": [4, 5, 6, 7, 11, 12, 13, 28, 31, 32, 45, 46, 48, 57, 61, 80, 84, 375, 376, 397, 398, 403, 404, 407, 408, 409, 419, 420, 423, 440, 636, 660, 776, 779, 792, 812, 838, 844, 854, 857, 863, 864, 868, 870, 871, 872], "pil": [4, 6, 7, 8, 11, 12, 13, 28, 31, 32, 46, 47, 48, 812, 864], "time": [4, 5, 6, 7, 9, 10, 11, 13, 29, 31, 32, 37, 45, 47, 48, 49, 57, 59, 62, 68, 80, 82, 91, 97, 98, 134, 341, 372, 375, 376, 378, 387, 404, 409, 421, 423, 444, 451, 484, 490, 522, 616, 621, 629, 635, 636, 637, 639, 640, 644, 645, 659, 662, 677, 712, 715, 716, 717, 744, 745, 749, 750, 792, 793, 794, 810, 818, 819, 820, 823, 825, 827, 828, 829, 831, 834, 836, 837, 838, 840, 841, 844, 845, 849, 852, 854, 855, 856, 859, 860, 861, 863, 864, 868, 870, 871, 874, 875, 876], "filterwarn": [4, 5], "ignor": [4, 5, 44, 52, 53, 57, 74, 80, 139, 375, 376, 378, 387, 399, 400, 401, 430, 438, 446, 486, 487, 491, 530, 629, 636, 641, 663, 729, 730, 796, 819, 826, 828, 831, 844, 855, 876], "compos": [4, 6, 7, 11, 12, 31, 32, 45, 57, 80, 375, 389, 390, 391, 392, 819, 827, 841, 844, 863, 865, 870, 877], "resiz": [4, 6, 7, 8, 11, 12, 45, 46, 57, 80, 375, 411, 847], "centercrop": [4, 12], "224": [4, 6, 7, 12, 16, 18, 31, 32, 45, 46, 48, 812, 864], "totensor": [4, 6, 7, 11, 12, 45], "485": [4, 12, 45], "456": [4, 12, 45, 844], "406": [4, 12, 45, 57, 80, 397, 540, 634], "229": [4, 12, 45, 279, 632], "225": [4, 12, 45, 47, 234, 632], "torch_img": [4, 8, 12], "unsqueez": [4, 8, 11, 12], "img": [4, 8, 12, 28, 31, 32, 45, 46, 47, 49, 812, 852, 864], "ipython": [4, 8, 12, 26, 27, 28, 29, 31, 32, 50], "displai": [4, 8, 12, 28, 31, 32, 45, 46, 47, 49, 50, 819, 826, 828, 833, 844, 852], "end": [4, 8, 45, 46, 57, 80, 126, 228, 284, 353, 372, 375, 377, 378, 423, 452, 474, 484, 486, 487, 629, 632, 806, 812, 819, 820, 825, 828, 834, 840, 845, 847, 848, 855, 868, 873], "set_default_devic": [4, 5, 6, 8, 11, 12, 13, 217, 631, 830], "ivy_model": [4, 5, 8, 12, 48], "ivy_alexnet": 4, "quick": [4, 20, 32, 820, 822, 842, 853], "trace_graph": [4, 5, 8, 12, 24, 25, 26, 27, 31, 32, 34, 35, 36, 37, 38, 39, 48, 794, 812, 849, 854, 862], "moment": [4, 57, 59, 80, 82, 376, 433, 615, 616, 621, 635, 796, 810, 818, 825, 855, 863, 864], "cost": [4, 59, 82, 615, 616, 619, 621, 622, 623, 635, 640, 715, 716, 717, 806, 829, 847, 868], "arg": [4, 6, 8, 9, 10, 11, 12, 16, 18, 26, 27, 29, 31, 32, 36, 37, 38, 49, 52, 74, 96, 106, 122, 203, 213, 601, 628, 629, 631, 634, 771, 773, 788, 789, 792, 793, 794, 798, 801, 805, 810, 812, 824, 829, 830, 833, 839, 840, 841, 847, 849, 853, 863, 864, 865], "asarrai": [4, 5, 8, 11, 12, 46, 53, 57, 58, 69, 76, 80, 81, 92, 127, 385, 514, 515, 545, 556, 560, 561, 591, 592, 593, 629, 634, 636, 645, 646, 650, 750, 754, 833, 838, 841, 842], "cuda": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 22, 31, 46, 47, 50, 53, 57, 66, 76, 80, 89, 137, 138, 141, 193, 194, 195, 211, 382, 508, 509, 511, 512, 629, 631, 637, 643, 688, 738, 739, 740, 741, 791, 792, 793, 794, 795, 796, 797, 810, 849, 855, 857, 875], "output": [4, 5, 7, 8, 9, 10, 12, 22, 28, 29, 31, 32, 44, 45, 46, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 179, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 322, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 372, 374, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 417, 419, 420, 421, 423, 424, 426, 427, 428, 430, 432, 435, 436, 438, 441, 442, 443, 444, 446, 447, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 467, 468, 469, 472, 474, 475, 476, 477, 478, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 539, 540, 541, 545, 546, 547, 549, 553, 562, 569, 576, 577, 578, 602, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 731, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 776, 791, 792, 805, 806, 812, 814, 819, 820, 822, 823, 824, 826, 827, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 849, 851, 853, 854, 855, 857, 863, 864, 871], "softmax": [4, 6, 7, 12, 16, 29, 31, 32, 47, 51, 61, 72, 73, 84, 377, 454, 626, 636, 663, 666, 788, 812], "pass": [4, 6, 7, 8, 11, 12, 13, 14, 16, 18, 22, 29, 31, 32, 38, 44, 45, 47, 49, 50, 56, 57, 72, 74, 79, 80, 95, 103, 122, 123, 125, 157, 179, 194, 213, 228, 274, 375, 377, 378, 381, 382, 387, 421, 454, 474, 501, 503, 508, 528, 529, 562, 628, 630, 631, 632, 634, 640, 715, 716, 771, 773, 777, 784, 789, 793, 794, 796, 797, 801, 805, 810, 812, 816, 818, 820, 823, 824, 825, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 847, 855, 863, 864, 865, 868], "argsort": [4, 12, 69, 92, 646, 755, 841], "descend": [4, 12, 69, 92, 637, 646, 687, 688, 753, 756], "top": [4, 12, 15, 20, 29, 31, 32, 45, 46, 57, 64, 80, 319, 369, 377, 378, 452, 494, 545, 634, 700, 812, 819, 820, 829, 834, 841, 843, 844, 847, 852, 853, 870, 874], "logit": [4, 5, 6, 7, 8, 12, 45, 46, 47, 48, 57, 63, 80, 86, 367, 382, 508, 511, 638, 696, 698, 788, 812, 863], "gather": [4, 12, 45, 57, 58, 80, 81, 330, 331, 332, 369, 553, 555, 634, 877], "to_list": [4, 12, 58, 81, 634], "arrai": [4, 5, 6, 7, 9, 10, 12, 13, 14, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 103, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 168, 169, 171, 172, 173, 175, 177, 178, 179, 180, 186, 196, 197, 201, 206, 208, 210, 213, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 574, 575, 576, 577, 578, 580, 581, 587, 588, 590, 591, 592, 593, 594, 595, 597, 598, 599, 600, 601, 602, 610, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 778, 784, 791, 792, 793, 794, 797, 801, 805, 806, 808, 812, 816, 818, 819, 820, 822, 825, 826, 827, 829, 830, 831, 832, 833, 834, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 857, 864, 865, 868, 869, 870, 872, 876, 877], "282": [4, 12], "281": [4, 12, 45, 47], "285": [4, 12, 80], "64773697": 4, "29496649": 4, "04526037": 4, "tiger": [4, 12], "tabbi": [4, 7, 12], "egyptian": [4, 12], "torch_alexnet": 4, "alexnet_weight": 4, "imagenet1k_v1": [4, 12], "dropout": [4, 61, 84, 375, 399, 400, 401, 636, 661, 663, 666, 792, 852], "torch_output": [4, 8, 9, 12], "dim": [4, 12, 47, 57, 74, 76, 80, 141, 313, 369, 375, 378, 393, 403, 404, 405, 408, 416, 474, 496, 629, 636, 649, 656, 657, 662, 778, 792, 812, 829, 841, 842, 847], "torch_class": [4, 12], "torch_logit": [4, 12], "tensor": [4, 5, 6, 9, 11, 12, 13, 16, 18, 22, 23, 26, 27, 29, 31, 32, 33, 37, 43, 45, 53, 56, 57, 58, 61, 62, 63, 64, 66, 70, 74, 76, 79, 80, 81, 84, 85, 86, 87, 89, 93, 96, 129, 137, 138, 141, 147, 163, 179, 271, 272, 302, 319, 323, 324, 325, 326, 327, 328, 337, 360, 367, 369, 372, 375, 376, 377, 378, 387, 388, 394, 395, 398, 402, 411, 412, 413, 414, 421, 423, 425, 432, 433, 434, 435, 438, 440, 442, 444, 445, 448, 450, 451, 452, 454, 457, 458, 474, 477, 482, 485, 486, 487, 488, 491, 496, 497, 528, 533, 576, 577, 629, 630, 632, 634, 636, 637, 638, 639, 643, 647, 659, 662, 663, 678, 689, 696, 706, 708, 738, 761, 792, 801, 806, 810, 812, 824, 825, 829, 830, 834, 836, 837, 840, 841, 842, 844, 845, 847, 849, 851, 852, 854, 855, 857, 859, 863, 864, 865, 867, 868, 871, 873, 874, 877], "6477": 4, "2950": 4, "0453": 4, "grad_fn": [4, 12, 29, 43, 618, 625, 635, 852], "takebackward0": [4, 12], "great": [4, 7, 8, 812, 820, 844, 849, 851, 860, 861, 876], "simpl": [4, 7, 16, 20, 21, 23, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 43, 45, 47, 50, 57, 80, 387, 522, 778, 792, 806, 812, 818, 819, 820, 824, 826, 827, 829, 830, 831, 832, 837, 840, 841, 844, 845, 847, 851, 853, 854, 855, 857, 859, 863, 864, 869, 870, 871, 872], "let": [4, 5, 6, 7, 8, 9, 11, 13, 14, 16, 18, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 43, 45, 46, 48, 50, 58, 70, 81, 220, 221, 222, 223, 226, 229, 238, 241, 243, 245, 254, 255, 256, 261, 263, 276, 284, 286, 287, 291, 552, 553, 632, 634, 637, 647, 691, 761, 763, 764, 765, 766, 812, 818, 821, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 861, 863, 864, 877], "ll": [4, 6, 7, 8, 9, 11, 13, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 46, 812, 813, 815, 816, 818, 819, 820, 821, 826, 831, 834, 835, 839, 840, 852, 856, 861, 863, 864], "try": [4, 6, 7, 23, 33, 43, 46, 50, 74, 601, 634, 791, 801, 812, 818, 819, 820, 823, 824, 827, 828, 829, 833, 835, 840, 842, 849, 851, 855, 858, 860, 861, 865], "tf": [4, 6, 8, 9, 10, 13, 16, 18, 23, 26, 27, 29, 31, 32, 33, 34, 36, 38, 43, 48, 49, 789, 812, 824, 829, 830, 836, 840, 841, 844, 845, 847, 849, 854, 855, 857, 863, 864, 865, 870], "onc": [4, 6, 8, 31, 32, 43, 45, 62, 66, 85, 89, 213, 376, 429, 631, 637, 643, 672, 673, 674, 687, 738, 812, 818, 819, 820, 827, 828, 829, 830, 831, 834, 835, 840, 841, 844, 847, 849, 852, 855, 856, 861, 863], "set": [4, 7, 9, 16, 18, 24, 31, 32, 34, 37, 45, 46, 47, 48, 49, 52, 57, 58, 61, 62, 67, 69, 70, 74, 80, 81, 84, 85, 90, 92, 93, 115, 118, 125, 145, 147, 181, 182, 183, 184, 185, 196, 209, 210, 211, 212, 213, 228, 328, 340, 356, 358, 363, 369, 372, 373, 375, 376, 377, 378, 387, 398, 419, 423, 427, 431, 434, 452, 457, 458, 474, 484, 487, 494, 522, 527, 528, 529, 530, 531, 532, 534, 538, 545, 557, 562, 578, 579, 580, 582, 583, 584, 585, 586, 587, 588, 589, 595, 603, 626, 628, 629, 630, 631, 632, 634, 636, 637, 641, 643, 644, 646, 647, 659, 666, 668, 678, 680, 683, 686, 687, 718, 725, 728, 729, 730, 735, 736, 742, 744, 745, 749, 751, 752, 753, 756, 764, 766, 773, 776, 777, 778, 779, 784, 791, 792, 794, 796, 801, 806, 809, 810, 812, 813, 820, 822, 823, 824, 826, 827, 828, 829, 830, 831, 833, 835, 837, 838, 840, 841, 842, 844, 845, 847, 849, 851, 852, 859, 862, 863, 864, 868, 869, 870, 871, 872, 874, 877], "post": [4, 6, 8, 45, 65, 88, 642, 737, 819, 834, 839, 854, 856], "process": [4, 6, 8, 26, 31, 32, 36, 45, 207, 219, 631, 813, 819, 820, 826, 827, 828, 834, 835, 837, 839, 841, 842, 843, 844, 847, 849, 854, 860, 861, 863, 868, 869, 870, 873, 874, 876, 877], "st": [4, 5, 11, 776, 823, 842, 844], "perf_count": [4, 9, 10, 11], "raw_logit": 4, "latenc": [4, 11], "nn": [4, 6, 7, 8, 10, 18, 29, 31, 32, 45, 49, 139, 629, 812, 837, 842, 847, 854, 864, 871], "direct": [4, 57, 80, 341, 348, 352, 357, 361, 372, 375, 378, 409, 420, 475, 476, 490, 646, 756, 818, 824, 826, 841, 847, 853, 854, 866, 870, 871, 874], "tolist": 4, "652289830999962": 4, "int32": [4, 43, 45, 54, 57, 58, 66, 67, 70, 77, 80, 81, 89, 90, 132, 137, 141, 143, 149, 152, 155, 157, 159, 161, 163, 166, 168, 169, 173, 176, 180, 184, 188, 190, 208, 235, 271, 272, 383, 387, 513, 523, 524, 525, 553, 562, 599, 629, 630, 631, 632, 634, 643, 644, 647, 739, 740, 741, 745, 757, 758, 763, 765, 776, 777, 829, 841, 844, 849], "6477362": 4, "29496726": 4, "04526032": 4, "As": [4, 6, 7, 8, 11, 13, 14, 16, 18, 24, 28, 29, 31, 32, 34, 37, 43, 44, 68, 72, 95, 637, 645, 685, 749, 750, 751, 752, 812, 816, 818, 819, 820, 821, 824, 826, 827, 828, 829, 830, 833, 834, 835, 836, 837, 840, 841, 842, 843, 844, 847, 851, 852, 853, 855, 859, 863, 864, 865, 870, 875], "ident": [4, 6, 9, 14, 29, 46, 48, 62, 74, 132, 201, 555, 581, 629, 631, 634, 637, 641, 675, 679, 731, 792, 827, 837, 838, 841, 842, 845, 847, 851, 852, 855, 857, 859, 861], "had": [4, 827, 828, 840, 845, 849, 870, 871], "postprocess": 4, "routin": [4, 828, 840, 841, 847, 855, 870], "feed": [4, 213, 631, 863, 870, 871], "carefulli": [4, 278, 632, 791, 841, 868, 873], "rewrit": 4, "easili": [4, 28, 31, 32, 43, 812, 819, 824, 828, 834, 841, 844, 847, 852, 853, 854, 855, 860, 870, 876, 877], "quickest": 4, "particular": [4, 31, 32, 268, 632, 777, 819, 820, 823, 825, 828, 829, 831, 838, 840, 841, 844, 845, 866, 870, 876], "again": [4, 8, 25, 26, 34, 35, 36, 37, 637, 685, 820, 824, 825, 826, 827, 831, 833, 835, 840, 841, 844, 845, 847, 852, 854, 855, 860, 861, 875, 876], "speed": [4, 11, 13, 14, 31, 32, 45, 50, 58, 81, 569, 634, 844, 859, 873], "repeat": [4, 5, 25, 35, 57, 58, 64, 80, 81, 87, 375, 378, 387, 404, 409, 473, 522, 547, 634, 639, 640, 712, 716, 717, 805, 820, 824, 825, 831, 832, 840, 844], "previou": [4, 14, 24, 25, 26, 28, 34, 35, 36, 38, 59, 80, 82, 187, 188, 189, 190, 191, 364, 374, 375, 421, 602, 604, 605, 606, 607, 609, 610, 612, 616, 621, 630, 634, 635, 791, 809, 819, 820, 823, 825, 828, 830, 836, 841, 844, 847, 854, 855, 873], "trace": [4, 5, 6, 8, 11, 12, 13, 20, 21, 25, 28, 31, 34, 36, 37, 49, 58, 62, 74, 81, 85, 564, 565, 568, 579, 588, 603, 611, 634, 637, 773, 784, 794, 796, 810, 812, 823, 827, 829, 841, 846, 847, 849, 854, 855, 862, 863, 864, 871, 876], "026875037000081647": 4, "overrid": [4, 8, 37, 46, 53, 57, 76, 80, 141, 387, 522, 629, 824, 826], "prealloc": [4, 8], "temporari": [4, 8, 589, 612, 634, 806, 829, 846], "fix": [4, 8, 47, 57, 80, 97, 98, 372, 375, 376, 421, 451, 636, 663, 812, 816, 819, 820, 823, 829, 835, 844, 845], "until": [4, 8, 806, 820, 840, 849, 855, 860, 863, 877], "o": [4, 8, 44, 45, 46, 47, 49, 572, 634, 636, 663, 812, 819, 822, 828, 849, 856], "environ": [4, 8, 13, 26, 27, 28, 29, 46, 49, 812, 813, 820, 856, 870, 872], "xla_python_client_alloc": [4, 8], "platform": [4, 6, 8, 14, 26, 27, 29, 814, 817, 819, 826, 868, 872, 874], "jit": [4, 11, 13, 31, 34, 849, 855, 863, 870], "img_jax": [4, 8], "device_put": [4, 11], "warm": 4, "_": [4, 9, 10, 11, 13, 14, 31, 44, 45, 56, 57, 74, 79, 80, 82, 98, 155, 243, 245, 253, 254, 269, 335, 336, 372, 375, 378, 387, 419, 448, 451, 492, 522, 545, 615, 616, 630, 632, 634, 635, 637, 639, 641, 647, 685, 686, 688, 714, 725, 764, 812, 820, 828, 829, 832, 840, 844, 852], "0022192720000475674": 4, "64773613": 4, "29496723": 4, "exact": [4, 57, 73, 74, 110, 375, 377, 411, 416, 456, 457, 645, 749, 751, 778, 788, 819, 820, 823, 831, 849], "note": [4, 6, 8, 14, 27, 31, 32, 37, 46, 47, 48, 57, 58, 62, 64, 68, 80, 85, 87, 97, 134, 147, 179, 247, 282, 283, 290, 328, 329, 349, 369, 372, 375, 376, 378, 398, 429, 434, 444, 445, 451, 474, 492, 630, 632, 636, 637, 639, 645, 647, 663, 672, 673, 684, 685, 687, 706, 710, 750, 752, 761, 792, 806, 810, 816, 818, 819, 820, 824, 829, 831, 832, 835, 840, 841, 842, 844, 845, 847], "were": [4, 8, 48, 74, 77, 168, 172, 173, 247, 632, 636, 663, 818, 819, 820, 829, 833, 835, 839, 840, 842, 844, 845, 847, 849, 863, 870, 871, 876], "function": [4, 6, 7, 9, 10, 14, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 155, 165, 166, 167, 168, 171, 172, 173, 175, 179, 180, 197, 199, 200, 209, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 384, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 421, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 572, 575, 576, 577, 580, 581, 584, 586, 588, 591, 592, 593, 594, 595, 597, 599, 600, 601, 607, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 722, 724, 725, 726, 728, 729, 730, 731, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 774, 776, 777, 778, 779, 784, 788, 791, 794, 801, 802, 808, 810, 812, 816, 819, 820, 822, 823, 824, 825, 826, 828, 831, 832, 834, 840, 843, 848, 850, 851, 852, 853, 857, 859, 863, 865, 867, 868, 869, 870, 871, 876, 877], "dog": 4, "006431100999861883": 4, "258": [4, 636, 651, 653], "104": [4, 70, 637, 647, 682, 759], "259": 4, "72447652": 4, "13937832": 4, "05874982": 4, "samoi": 4, "wallabi": 4, "pomeranian": 4, "incorrect": [4, 828], "predict": [4, 6, 7, 8, 12, 14, 45, 46, 47, 48, 57, 63, 80, 86, 377, 453, 456, 459, 638, 696, 697, 698, 812, 829], "down": [4, 24, 34, 48, 57, 80, 375, 378, 411, 476, 812, 819, 844, 857, 870, 876], "itself": [4, 7, 26, 36, 56, 97, 274, 535, 601, 632, 634, 641, 730, 806, 816, 819, 820, 823, 826, 827, 828, 829, 830, 833, 834, 835, 840, 841, 853, 855, 859, 863, 869, 870, 871, 876], "version": [4, 6, 9, 14, 28, 29, 34, 45, 46, 47, 50, 51, 57, 80, 97, 110, 291, 340, 342, 372, 387, 527, 532, 614, 632, 634, 637, 673, 674, 773, 801, 802, 812, 819, 820, 826, 828, 829, 832, 840, 842, 849, 859, 860, 861, 864, 876, 877], "004749261999904775": 4, "7245": 4, "1394": 4, "0587": 4, "promis": [4, 7, 860], "sourc": [4, 7, 9, 10, 12, 18, 23, 24, 25, 26, 27, 28, 29, 31, 32, 37, 38, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 776, 777, 778, 780, 781, 782, 783, 784, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 818, 819, 820, 823, 824, 826, 827, 828, 841, 843, 859, 860, 861, 862, 864, 865, 869, 870, 871, 872, 873], "modul": [4, 6, 8, 11, 13, 16, 18, 20, 21, 22, 26, 27, 28, 29, 31, 32, 33, 37, 43, 44, 45, 47, 48, 49, 72, 74, 95, 103, 368, 370, 371, 379, 380, 384, 573, 634, 648, 769, 773, 788, 789, 790, 792, 793, 795, 797, 800, 801, 810, 812, 814, 819, 824, 825, 826, 833, 837, 840, 841, 843, 844, 849, 850, 852, 854, 855, 861, 863, 865, 870, 871, 873], "__init__": [4, 8, 16, 18, 31, 32, 43, 44, 45, 47, 74, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 774, 781, 782, 783, 788, 791, 792, 793, 794, 795, 796, 797, 800, 801, 805, 807, 810, 812, 818, 824, 825, 829, 833, 841, 845, 849, 851, 852, 853, 854, 864], "self": [4, 6, 7, 8, 16, 18, 31, 32, 43, 44, 45, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 163, 165, 168, 171, 172, 173, 175, 177, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 636, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 796, 805, 812, 820, 824, 827, 833, 841, 842, 849, 851, 852, 853, 854, 864], "num_class": [4, 16, 18, 31, 32, 45, 47, 49, 812, 854, 864], "1000": [4, 6, 9, 10, 11, 12, 16, 31, 32, 45, 46, 47, 48, 50, 53, 76, 138, 629, 812, 852, 864], "v": [4, 5, 8, 20, 21, 24, 31, 32, 34, 37, 38, 43, 46, 47, 57, 61, 69, 76, 80, 84, 92, 138, 238, 243, 245, 286, 376, 378, 430, 440, 447, 448, 473, 632, 636, 640, 646, 663, 666, 716, 717, 755, 773, 792, 793, 794, 795, 796, 797, 812, 814, 819, 820, 822, 826, 834, 849, 852, 853, 854, 878], "_build": [4, 8, 793, 794, 812], "kwarg": [4, 5, 7, 8, 13, 14, 31, 45, 49, 52, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 103, 106, 203, 378, 484, 572, 601, 629, 631, 634, 771, 773, 788, 789, 792, 793, 794, 801, 810, 812, 824, 829, 830, 833, 837, 840, 841, 847, 849, 853, 863, 864, 865], "featur": [4, 7, 13, 14, 16, 18, 20, 22, 31, 32, 45, 49, 57, 80, 375, 389, 391, 392, 399, 400, 401, 791, 792, 810, 812, 818, 819, 820, 824, 825, 828, 829, 836, 845, 847, 852, 855, 864, 870, 871, 872, 876], "sequenti": [4, 8, 9, 12, 29, 31, 32, 47, 812, 826, 827, 853, 864], "conv2d": [4, 8, 12, 29, 31, 32, 47, 50, 61, 84, 636, 653, 792, 812], "64": [4, 8, 12, 43, 45, 46, 47, 50, 56, 57, 61, 79, 80, 81, 84, 85, 89, 93, 103, 164, 234, 244, 278, 287, 288, 346, 372, 375, 397, 407, 545, 546, 593, 621, 630, 632, 634, 635, 636, 637, 641, 647, 651, 653, 655, 657, 658, 679, 682, 692, 726, 730, 740, 759, 763, 819, 829, 852, 853, 867, 875], "data_format": [4, 47, 57, 61, 80, 84, 375, 381, 390, 394, 395, 396, 399, 400, 401, 412, 413, 414, 415, 417, 501, 502, 503, 506, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 776, 792, 795, 812], "nchw": [4, 47, 57, 61, 80, 84, 375, 381, 390, 395, 400, 413, 417, 506, 636, 649, 652, 653, 656, 657, 658, 792, 812], "relu": [4, 8, 12, 29, 31, 32, 43, 50, 51, 57, 72, 73, 80, 112, 302, 303, 311, 367, 626, 788, 812, 842, 852, 853], "maxpool2d": [4, 8, 12, 45, 792, 812], "192": [4, 47, 776, 805], "384": [4, 82, 615, 635, 641, 718], "avgpool": [4, 12], "adaptiveavgpool2d": [4, 12, 792], "classifi": [4, 7, 14, 16, 18, 31, 32, 45, 47, 48, 812, 818, 863, 864], "prob": [4, 6, 7, 47, 57, 61, 80, 84, 89, 375, 382, 399, 400, 401, 508, 636, 643, 659, 738, 792, 812], "4096": 4, "_forward": [4, 8, 11, 13, 31, 32, 43, 44, 47, 812, 832, 849, 852, 853], "bidirect": [5, 636, 661], "encod": [5, 16, 18, 31, 32, 45, 47, 58, 63, 81, 86, 549, 634, 638, 696, 812, 852, 860, 864], "mlm": 5, "googl": [5, 26, 27, 28, 29, 45, 46, 47, 49, 828, 860], "choos": [5, 45, 47, 55, 67, 68, 78, 214, 240, 247, 268, 269, 273, 335, 336, 372, 378, 631, 632, 644, 645, 647, 748, 749, 750, 751, 752, 760, 761, 762, 764, 776, 812, 818, 819, 820, 838, 844, 850, 854, 863], "librari": [5, 6, 7, 11, 13, 20, 21, 27, 29, 43, 45, 55, 68, 78, 214, 245, 247, 263, 268, 269, 291, 335, 336, 372, 631, 632, 637, 645, 647, 673, 674, 749, 750, 751, 752, 760, 761, 762, 764, 810, 812, 818, 819, 823, 829, 854, 855, 859, 860, 861, 863, 866, 867, 868, 870, 874, 877], "pretrain": [5, 11, 16, 17, 18, 31, 32, 50, 812, 864], "save": [5, 6, 12, 45, 57, 74, 80, 387, 529, 589, 612, 631, 634, 648, 794, 810, 819, 828, 835, 844, 855, 861, 869], "some": [5, 8, 9, 10, 13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 36, 37, 43, 47, 48, 74, 82, 245, 247, 263, 375, 399, 400, 401, 615, 616, 619, 621, 622, 623, 631, 632, 635, 641, 729, 792, 812, 816, 818, 819, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 851, 852, 853, 855, 856, 857, 860, 861, 863, 864, 866, 867, 869, 870, 871, 876, 877], "mohame54": 5, "automodel": [5, 13, 31], "autotoken": 5, "load": [5, 6, 7, 11, 13, 28, 31, 45, 46, 47, 48, 49, 50, 74, 376, 447, 648, 794, 812, 844, 855, 869, 876], "token": [5, 47, 821], "bert_bas": 5, "from_pretrain": [5, 7, 13, 31, 48, 863, 864], "base": [5, 7, 14, 45, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 101, 102, 103, 105, 107, 138, 147, 179, 243, 244, 261, 262, 263, 264, 278, 319, 328, 330, 337, 340, 346, 353, 369, 372, 375, 376, 377, 385, 418, 422, 447, 452, 514, 582, 593, 605, 629, 630, 632, 634, 637, 639, 645, 647, 678, 702, 749, 750, 751, 752, 759, 774, 777, 778, 781, 782, 783, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 800, 801, 806, 807, 810, 812, 819, 820, 821, 823, 827, 828, 829, 833, 836, 838, 839, 840, 842, 843, 844, 845, 846, 847, 849, 870, 875, 877, 878], "uncas": 5, "eval": [5, 6, 8, 12, 18, 26, 27, 28, 29, 636, 661, 794], "evalu": [5, 56, 57, 74, 79, 80, 243, 245, 261, 262, 263, 264, 268, 275, 277, 284, 288, 322, 354, 365, 366, 369, 374, 376, 377, 378, 443, 452, 457, 481, 625, 632, 635, 641, 648, 728, 729, 767, 768, 793, 794, 820, 827, 829, 837, 838, 870], "bert_token": 5, "sampl": [5, 6, 7, 11, 13, 16, 18, 28, 31, 32, 46, 53, 56, 57, 66, 70, 76, 79, 80, 89, 93, 137, 138, 292, 319, 369, 375, 377, 378, 382, 399, 400, 401, 411, 421, 423, 452, 457, 487, 508, 509, 510, 511, 512, 629, 632, 643, 647, 738, 739, 740, 741, 764, 766, 792, 842, 844], "test": [5, 7, 23, 24, 26, 27, 33, 34, 36, 37, 38, 46, 47, 56, 58, 71, 79, 81, 94, 125, 171, 175, 254, 255, 256, 257, 280, 375, 399, 400, 401, 569, 628, 630, 632, 634, 648, 767, 768, 771, 774, 777, 806, 812, 814, 816, 817, 822, 826, 829, 831, 833, 835, 838, 841, 843, 845, 855, 856, 861, 863, 864, 865, 870], "did": [5, 45, 818, 826, 854, 860, 876], "realli": [5, 43, 819, 827, 834, 855, 863, 875, 876], "like": [5, 6, 7, 11, 13, 23, 24, 25, 31, 33, 34, 35, 36, 37, 38, 48, 50, 53, 56, 57, 64, 76, 79, 80, 84, 87, 92, 138, 156, 179, 224, 244, 250, 253, 266, 284, 341, 346, 358, 372, 375, 376, 377, 378, 385, 387, 418, 420, 429, 454, 463, 464, 473, 474, 514, 515, 532, 629, 630, 632, 637, 639, 643, 646, 672, 706, 741, 754, 806, 812, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 848, 849, 851, 852, 853, 854, 855, 860, 863, 864, 870, 875], "input": [5, 6, 7, 8, 9, 10, 13, 16, 18, 28, 29, 31, 36, 37, 45, 46, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 194, 196, 197, 210, 213, 214, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 322, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 443, 444, 445, 446, 447, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 555, 556, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 571, 576, 577, 578, 584, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 727, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 777, 784, 788, 791, 792, 793, 794, 795, 805, 806, 810, 823, 824, 825, 827, 829, 830, 831, 832, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 863, 864, 871, 874], "pad": [5, 12, 45, 47, 57, 61, 64, 80, 84, 87, 98, 100, 375, 378, 394, 395, 396, 397, 398, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 549, 634, 636, 639, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 701, 714, 778, 792, 812], "longest": 5, "return_tensor": [5, 7, 13, 31, 48, 863, 864], "pt": [5, 7, 13, 31, 863], "max_length": [5, 74], "512": [5, 8, 12, 45, 47, 85, 636, 651, 692, 812], "input_id": 5, "101": [5, 14, 46, 636, 637, 641, 660, 676, 724], "1045": 5, "2106": 5, "1005": 5, "1056": 5, "2428": 5, "2066": 5, "2115": 5, "4309": 5, "1012": 5, "102": [5, 14, 57, 80, 89, 397, 739], "token_type_id": 5, "attention_mask": [5, 61, 84, 636, 663], "pooler": 5, "compar": [5, 9, 10, 11, 13, 31, 44, 48, 50, 57, 58, 68, 69, 70, 74, 80, 81, 92, 93, 334, 351, 372, 387, 530, 534, 537, 634, 636, 645, 646, 647, 661, 749, 750, 751, 752, 753, 756, 762, 773, 812, 825, 831, 833, 842, 844, 847, 852, 866, 868, 870, 876, 877], "no_grad": [5, 45, 863], "bert_output": 5, "pooler_output": 5, "ivy_bert": 5, "bert_base_uncas": 5, "ivy_input": 5, "k": [5, 11, 44, 47, 53, 57, 58, 61, 62, 66, 76, 79, 80, 84, 85, 89, 97, 98, 122, 132, 145, 146, 147, 267, 313, 328, 329, 369, 376, 378, 382, 385, 387, 427, 442, 446, 448, 450, 490, 494, 508, 509, 510, 511, 512, 515, 525, 537, 628, 629, 634, 636, 637, 641, 643, 644, 663, 666, 670, 677, 678, 684, 686, 687, 688, 691, 726, 739, 740, 741, 747, 822, 823, 841, 842, 849, 863, 866, 870], "ivy_output": [5, 48], "logits_clos": 5, "allclos": [5, 6, 7, 9, 10, 11, 13, 16, 18, 31, 48, 50, 57, 80, 372], "detach": [5, 6, 7, 9, 10, 11, 13, 16, 18, 31, 839], "rtol": [5, 7, 16, 18, 57, 62, 80, 85, 334, 351, 372, 637, 680, 683, 771, 773, 816, 834, 842], "005": [5, 12, 57, 80, 334, 351, 372, 453], "atol": [5, 7, 9, 10, 11, 13, 31, 57, 62, 80, 85, 334, 351, 372, 637, 680, 771, 773, 816, 834, 842], "768": 5, "fn": [5, 48, 50, 57, 74, 77, 80, 106, 166, 167, 199, 200, 203, 378, 461, 535, 550, 551, 601, 630, 631, 634, 641, 724, 725, 726, 728, 729, 730, 771, 773, 798, 801, 807, 808, 810, 830, 833, 840, 841, 849, 863], "finish": [5, 7, 20, 31, 32, 43, 46, 812, 813, 818, 819, 822], "sec": 5, "43": [5, 14, 43, 45, 47, 57, 80, 89, 103, 234, 375, 376, 387, 396, 428, 523, 632, 643, 644, 740, 741, 748], "procedur": [5, 826, 828, 831, 842], "60": [5, 43, 47, 56, 70, 79, 81, 89, 93, 224, 258, 378, 489, 553, 561, 577, 592, 614, 632, 634, 637, 641, 647, 682, 721, 739, 757, 759, 763, 806, 828], "big": [5, 791, 813, 855, 870], "jnp": [5, 23, 28, 31, 32, 33, 34, 37, 43, 45, 49, 812, 829, 830, 833, 836, 840, 845, 849, 854, 864, 865], "ref": [5, 8, 11, 13, 81, 85, 259, 273, 276, 282, 289, 632, 639, 710, 819, 840], "fast": [5, 26, 36, 57, 375, 398, 870], "valu": [5, 14, 43, 44, 46, 47, 53, 54, 56, 57, 58, 59, 61, 62, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 91, 92, 93, 100, 102, 103, 105, 118, 122, 123, 125, 126, 132, 135, 136, 137, 138, 141, 147, 152, 169, 173, 179, 212, 213, 220, 221, 222, 223, 225, 227, 228, 229, 236, 240, 241, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 302, 307, 310, 311, 313, 320, 322, 328, 330, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 354, 357, 359, 360, 361, 362, 363, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 386, 387, 398, 411, 418, 419, 421, 423, 427, 430, 434, 440, 445, 447, 449, 451, 452, 453, 455, 456, 457, 458, 467, 473, 478, 484, 489, 491, 492, 493, 494, 496, 498, 501, 503, 508, 509, 511, 512, 518, 520, 523, 524, 525, 528, 529, 530, 531, 532, 538, 540, 541, 542, 544, 549, 552, 553, 555, 560, 561, 562, 569, 576, 577, 581, 582, 583, 586, 595, 600, 605, 606, 609, 612, 613, 614, 615, 616, 617, 621, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 666, 670, 673, 674, 678, 679, 680, 683, 684, 685, 686, 687, 688, 691, 694, 699, 700, 701, 705, 706, 714, 715, 716, 720, 722, 723, 724, 725, 726, 731, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 771, 773, 776, 777, 778, 779, 781, 783, 788, 791, 792, 793, 794, 795, 796, 810, 816, 819, 820, 823, 826, 827, 829, 830, 831, 832, 833, 834, 836, 837, 840, 841, 844, 846, 847, 849, 851, 855, 863, 870, 871], "emerg": [6, 870], "popular": [6, 7, 812, 823, 870], "Its": [6, 57, 377, 452, 870], "python": [6, 7, 12, 16, 22, 34, 39, 43, 45, 46, 47, 49, 50, 57, 66, 80, 89, 126, 207, 219, 247, 282, 375, 382, 421, 508, 509, 510, 511, 512, 614, 629, 631, 632, 634, 643, 738, 739, 740, 741, 743, 801, 805, 806, 810, 817, 819, 820, 823, 826, 827, 828, 833, 834, 841, 843, 844, 849, 851, 852, 855, 857, 858, 859, 860, 863, 867, 870, 871, 872, 876, 877], "superior": 6, "eager": [6, 20, 21, 24, 27, 29, 34, 37, 38, 49, 810, 827, 855, 870], "execut": [6, 11, 13, 22, 23, 24, 26, 27, 28, 29, 31, 32, 34, 36, 39, 46, 48, 50, 123, 125, 601, 628, 631, 634, 819, 820, 826, 827, 828, 829, 830, 831, 833, 837, 838, 840, 844, 847, 849, 851, 854, 855, 857, 863, 866, 870, 871, 872, 873, 874, 876], "mode": [6, 7, 8, 37, 49, 57, 62, 74, 80, 85, 96, 97, 98, 99, 100, 101, 210, 213, 218, 223, 240, 273, 327, 365, 366, 369, 374, 375, 376, 378, 406, 411, 419, 420, 432, 434, 442, 444, 445, 451, 467, 477, 482, 484, 485, 487, 489, 492, 493, 497, 578, 579, 580, 584, 585, 587, 588, 602, 603, 607, 608, 610, 611, 631, 632, 634, 636, 637, 661, 684, 784, 792, 793, 794, 809, 810, 819, 820, 822, 827, 830, 831, 834, 847, 855, 870, 873], "made": [6, 11, 13, 31, 57, 64, 80, 376, 378, 436, 462, 463, 464, 710, 818, 820, 821, 823, 824, 827, 828, 833, 835, 837, 839, 840, 841, 845, 847, 849, 851, 860, 870], "favorit": [6, 812], "increasingli": [6, 831, 863], "span": [6, 820, 868, 876], "industri": [6, 860, 870, 872], "still": [6, 14, 25, 27, 28, 31, 32, 34, 35, 38, 62, 74, 85, 637, 687, 776, 818, 819, 820, 824, 825, 829, 832, 833, 835, 837, 840, 841, 844, 847, 853, 855, 860, 863, 864, 867, 870, 876], "practition": [6, 7, 870, 874, 875, 876], "larg": [6, 46, 56, 57, 79, 80, 223, 240, 247, 273, 274, 378, 387, 492, 522, 632, 637, 685, 814, 819, 820, 826, 828, 834, 852, 863, 870], "unabl": [6, 13, 820, 847], "rich": 6, "ecosystem": [6, 870], "state": [6, 19, 30, 45, 61, 80, 84, 100, 187, 188, 189, 190, 191, 273, 375, 421, 602, 604, 607, 609, 610, 630, 632, 634, 636, 661, 662, 774, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 812, 816, 819, 826, 829, 830, 832, 833, 834, 835, 836, 841, 844, 848, 849, 850, 852, 860, 864, 876, 877], "art": 6, "sota": [6, 7], "inaccur": 6, "dynam": [6, 9, 38, 639, 706, 794, 801, 822, 828, 829, 830, 840, 841, 846, 849, 863, 870, 874], "connect": [6, 12, 45, 792, 812, 814, 819, 826, 843, 853, 854, 860, 868], "layer": [6, 7, 9, 10, 16, 18, 22, 28, 29, 31, 32, 43, 48, 57, 65, 80, 88, 642, 661, 662, 663, 737, 789, 791, 793, 794, 795, 796, 797, 812, 832, 841, 845, 847, 849, 850, 853, 859, 864, 868, 870, 874, 877], "togeth": [6, 57, 74, 80, 334, 351, 372, 376, 430, 797, 812, 821, 824, 827, 829, 840, 841, 844, 845, 847, 853, 854, 855, 860, 868, 870, 871, 876], "For": [6, 11, 12, 13, 14, 22, 24, 31, 32, 34, 37, 39, 53, 57, 62, 68, 80, 85, 126, 139, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 245, 246, 247, 254, 255, 256, 261, 262, 263, 264, 265, 268, 273, 275, 276, 278, 282, 283, 284, 285, 286, 287, 290, 291, 293, 330, 331, 332, 335, 336, 338, 359, 369, 372, 376, 378, 442, 444, 464, 484, 487, 629, 632, 637, 639, 645, 647, 685, 687, 691, 699, 710, 749, 750, 751, 752, 760, 762, 763, 765, 777, 789, 812, 818, 819, 820, 822, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 859, 860, 861, 863, 867, 868, 871, 876, 877], "user": [6, 7, 13, 20, 26, 27, 28, 29, 31, 46, 47, 49, 274, 291, 378, 484, 580, 632, 634, 792, 793, 794, 805, 812, 819, 820, 822, 824, 825, 827, 828, 829, 830, 833, 838, 839, 840, 841, 844, 846, 847, 848, 849, 855, 856, 859, 860, 868, 870, 876, 877], "seamless": [6, 812], "wai": [6, 14, 20, 21, 22, 25, 27, 31, 35, 37, 43, 97, 100, 812, 814, 817, 818, 819, 823, 824, 825, 826, 828, 829, 830, 840, 841, 842, 844, 847, 851, 852, 853, 854, 855, 856, 859, 860, 865, 872, 876, 877], "introduc": [6, 31, 32, 247, 632, 639, 645, 707, 749, 818, 827, 828, 829, 838, 842, 844, 847, 852, 859], "pipelin": [6, 7, 812, 814, 822, 823, 824, 842, 845, 854, 857, 859, 864, 870, 871, 876], "blog": [6, 7, 820], "through": [6, 7, 32, 37, 45, 57, 80, 100, 228, 387, 528, 529, 632, 641, 721, 727, 794, 805, 812, 813, 816, 817, 818, 820, 821, 822, 825, 826, 827, 828, 830, 831, 833, 834, 835, 837, 838, 840, 841, 842, 844, 846, 847, 848, 849, 852, 853, 854, 863, 868, 870, 871, 872], "train": [6, 7, 16, 18, 29, 31, 32, 48, 57, 59, 61, 80, 82, 84, 100, 375, 376, 381, 399, 400, 401, 448, 501, 503, 615, 616, 621, 635, 636, 659, 661, 663, 666, 791, 792, 793, 794, 795, 812, 827, 830, 837, 852, 853, 854, 855, 861, 864, 868, 869, 874, 876, 877], "illustr": [6, 24, 34, 825, 849], "workflow": [6, 25, 35, 46, 818, 820, 821, 825, 829, 839, 841, 852, 857, 861, 869, 876, 877], "pre": [6, 31, 32, 816, 818, 843, 844, 854, 855, 856, 870], "belong": [6, 74, 818, 823, 853], "convolut": [6, 29, 57, 61, 80, 84, 375, 396, 414, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 778, 792, 810, 864, 868, 870], "neural": [6, 636, 788, 792, 812, 864, 866, 868, 869, 870, 874, 876, 877], "network": [6, 22, 29, 31, 32, 43, 45, 50, 636, 660, 788, 791, 792, 812, 827, 837, 849, 853, 860, 864, 866, 868, 869, 870, 874, 876, 877], "cnn": [6, 31, 32, 870], "architectur": [6, 48, 812, 819, 854, 855, 868, 869, 870, 873, 874, 875], "inspir": [6, 824], "vision": [6, 7, 31, 32, 50, 866, 876], "perform": [6, 8, 10, 14, 24, 26, 27, 28, 29, 31, 32, 34, 36, 43, 45, 53, 57, 61, 62, 70, 71, 76, 80, 81, 84, 85, 93, 94, 113, 117, 137, 138, 210, 218, 240, 273, 294, 341, 363, 372, 373, 375, 376, 378, 385, 387, 398, 399, 400, 401, 403, 404, 408, 409, 417, 419, 445, 461, 515, 523, 524, 545, 546, 547, 560, 561, 562, 578, 588, 626, 629, 631, 632, 634, 636, 637, 640, 641, 647, 648, 659, 662, 678, 687, 689, 694, 715, 716, 717, 725, 726, 757, 758, 761, 767, 768, 771, 788, 792, 806, 810, 823, 824, 825, 827, 829, 830, 831, 836, 837, 838, 840, 841, 842, 844, 845, 847, 849, 852, 855, 861, 863, 864, 867, 870, 871, 872, 873, 874, 875, 877], "strength": 6, "wise": [6, 31, 51, 56, 57, 62, 73, 79, 80, 85, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 220, 221, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 239, 240, 241, 242, 244, 247, 248, 249, 250, 251, 252, 258, 259, 260, 265, 266, 267, 268, 269, 270, 271, 272, 273, 276, 278, 279, 281, 282, 289, 294, 295, 296, 297, 298, 299, 301, 303, 305, 306, 307, 309, 310, 311, 334, 337, 342, 345, 346, 347, 350, 351, 352, 353, 357, 358, 361, 362, 367, 372, 375, 376, 378, 399, 400, 401, 428, 435, 471, 478, 480, 481, 500, 626, 632, 639, 668, 699, 796, 847], "supervis": [6, 7, 57, 377, 452], "convent": [6, 287, 632, 637, 647, 677, 759, 820, 825, 836, 845, 859, 876], "demonstr": [6, 7, 14, 28, 31, 32, 46, 812, 821, 829, 831, 833, 851], "improv": [6, 11, 13, 14, 31, 34, 815, 820, 829, 836, 837, 847, 849, 857, 861, 863, 868, 870, 872, 873], "scalabl": [6, 849, 859, 875, 876], "sometim": [6, 818, 819, 820, 823, 829, 837, 841, 844, 847], "rival": 6, "even": [6, 11, 28, 31, 32, 57, 80, 97, 240, 273, 278, 283, 378, 387, 484, 522, 632, 819, 820, 821, 823, 825, 828, 829, 830, 832, 836, 837, 840, 841, 842, 847, 851, 852, 853, 854, 855, 860, 861, 876], "downsampl": [6, 12, 57, 80, 411], "detial": 6, "outsid": [6, 639, 699, 710, 829, 830, 837, 851, 875], "scope": [6, 825, 871, 875], "demo": [6, 7, 8, 11, 12, 13, 14, 32, 39, 43, 47, 812], "interest": [6, 7, 29, 31, 43, 240, 273, 632, 818, 820], "reader": [6, 7], "paper": [6, 636, 663, 812, 861], "mostli": [6, 830, 840, 844], "kera": [6, 9, 10, 15, 16, 18, 20, 21, 29, 31, 32, 48, 49, 789, 812, 861, 864, 876], "wrapper": [6, 20, 21, 24, 57, 80, 298, 784, 824, 826, 827, 829, 833, 837, 840, 841, 844, 851, 857, 866, 870], "prepar": [6, 32, 45, 47, 50, 812, 828], "data": [6, 7, 18, 26, 27, 28, 29, 32, 37, 45, 47, 50, 51, 53, 56, 57, 58, 61, 62, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 79, 80, 81, 84, 85, 87, 89, 90, 91, 92, 93, 94, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 157, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 183, 184, 186, 192, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 300, 301, 302, 303, 312, 313, 314, 315, 316, 317, 318, 329, 330, 331, 332, 333, 335, 336, 337, 354, 359, 367, 369, 372, 375, 376, 378, 382, 386, 387, 390, 399, 400, 401, 417, 419, 421, 427, 429, 449, 467, 489, 492, 493, 495, 496, 508, 509, 510, 511, 512, 518, 522, 523, 524, 528, 531, 532, 549, 562, 564, 565, 568, 595, 626, 629, 631, 632, 634, 636, 637, 639, 641, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 667, 668, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 700, 703, 704, 706, 707, 709, 710, 714, 722, 739, 740, 741, 743, 744, 745, 747, 748, 753, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 774, 776, 777, 778, 779, 784, 788, 791, 792, 793, 794, 798, 806, 810, 812, 819, 822, 823, 824, 825, 826, 827, 830, 832, 836, 837, 838, 840, 842, 845, 847, 849, 851, 857, 858, 860, 870, 871, 872, 874, 875, 876], "request": [6, 7, 11, 12, 13, 26, 27, 28, 29, 31, 32, 45, 48, 57, 204, 382, 512, 631, 810, 812, 813, 815, 818, 831, 835, 845, 847, 861, 864], "experiment": [6, 10, 810, 816, 820, 829, 841, 845, 849, 870], "set_memory_growth": 6, "list_physical_devic": 6, "manual_se": [6, 7, 29], "set_se": 6, "2024": 6, "51": [6, 14, 43, 47, 56, 57, 79, 80, 81, 89, 235, 273, 286, 376, 397, 451, 632, 741, 776], "38": [6, 13, 14, 27, 43, 45, 47, 50, 54, 57, 79, 80, 89, 165, 290, 357, 372, 375, 387, 395, 414, 417, 418, 523, 630, 632, 637, 679, 776, 831], "926817": 6, "e": [6, 13, 31, 48, 49, 53, 57, 62, 66, 68, 69, 70, 72, 79, 80, 85, 89, 92, 93, 95, 97, 98, 102, 129, 138, 139, 142, 143, 147, 151, 180, 193, 220, 221, 222, 226, 228, 229, 232, 234, 236, 240, 241, 243, 246, 247, 253, 254, 261, 262, 263, 264, 271, 272, 273, 274, 276, 280, 282, 283, 286, 287, 291, 301, 328, 335, 336, 369, 372, 375, 376, 377, 378, 382, 387, 388, 394, 395, 398, 412, 413, 414, 415, 419, 432, 435, 443, 457, 492, 496, 508, 509, 510, 511, 512, 523, 524, 533, 627, 629, 630, 631, 632, 636, 637, 639, 641, 643, 645, 646, 647, 663, 668, 673, 674, 677, 678, 680, 683, 686, 687, 688, 691, 694, 702, 710, 721, 725, 726, 727, 730, 735, 736, 739, 740, 741, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 792, 805, 806, 810, 812, 813, 816, 818, 819, 820, 822, 823, 825, 827, 829, 833, 834, 839, 841, 844, 849, 852, 855, 856, 857, 860, 861, 863, 866, 878], "extern": [6, 827, 836, 841, 844, 845], "local_xla": 6, "xla": [6, 13, 841, 855, 857, 870], "stream_executor": [6, 13], "cuda_dnn": [6, 13], "cc": [6, 13, 26, 27, 29, 46, 834], "9261": 6, "regist": [6, 13, 794, 820, 856, 863], "cudnn": [6, 13], "factori": [6, 13, 57, 377, 456, 457, 806], "plugin": [6, 13, 819], "926873": 6, "cuda_fft": [6, 13], "607": 6, "cufft": [6, 13], "928224": 6, "cuda_bla": [6, 13], "1515": 6, "cubla": [6, 13], "936743": 6, "cpu_feature_guard": [6, 26, 27, 29], "182": [6, 26, 27, 29, 80], "instruct": [6, 26, 27, 29, 74, 103, 812, 818, 819, 823, 833, 835, 842, 844, 856, 868, 871, 874, 876], "avx2": [6, 26, 27, 29], "fma": [6, 26, 27, 29], "rebuild": [6, 26, 27, 29, 74, 103], "flag": [6, 26, 27, 29, 74, 196, 377, 387, 454, 522, 631, 636, 663, 773, 784, 795, 820, 829, 830, 840, 841, 842, 844, 863, 864], "40": [6, 9, 14, 43, 45, 47, 57, 58, 79, 80, 81, 89, 93, 103, 234, 238, 258, 287, 349, 372, 375, 378, 395, 397, 407, 413, 489, 545, 547, 552, 553, 577, 592, 614, 617, 632, 634, 635, 637, 641, 647, 676, 682, 727, 740, 759, 763, 812, 828], "071672": 6, "w": [6, 8, 13, 46, 47, 57, 58, 59, 61, 74, 79, 80, 81, 82, 84, 97, 267, 349, 364, 372, 374, 375, 376, 381, 394, 395, 396, 398, 412, 413, 414, 415, 431, 451, 506, 521, 545, 547, 592, 615, 616, 617, 619, 621, 622, 623, 634, 635, 636, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 724, 822, 839, 849, 852, 853, 864, 878], "tf2tensorrt": [6, 13], "py_util": [6, 13], "trt": [6, 13], "find": [6, 13, 20, 46, 47, 50, 62, 68, 74, 85, 637, 641, 645, 680, 720, 749, 750, 751, 752, 805, 806, 812, 813, 814, 815, 817, 818, 819, 820, 823, 826, 828, 834, 839, 844, 847, 849, 852, 856, 857, 859, 863], "tensorrt": [6, 13], "map": [6, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 96, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 136, 141, 143, 149, 153, 155, 168, 172, 173, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 372, 375, 399, 400, 401, 419, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 490, 492, 493, 494, 496, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 614, 619, 624, 634, 641, 650, 651, 652, 653, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 725, 726, 730, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 806, 824, 827, 829, 836, 837, 841, 844, 845, 852, 855, 857, 864, 871], "dataset": [6, 7, 14, 31, 74, 812, 852, 863, 864], "gist": 6, "yrevar": 6, "942d3a0ac09ec9e5eb3a": 6, "238f720ff059c1f82f368259d1ca4ffa5dd8f9f5": 6, "imagenet1000_clsidx_to_label": 6, "idx2label": 6, "read": [6, 45, 47, 57, 64, 74, 76, 80, 87, 134, 378, 474, 629, 639, 706, 818, 819, 826, 828, 834, 844, 846, 847, 870], "resolv": [6, 12, 45, 47, 57, 70, 247, 387, 523, 524, 632, 639, 647, 702, 757, 758, 763, 765, 820, 826, 829, 835, 849], "185": [6, 12, 45, 73], "199": [6, 12, 45, 226, 632], "108": [6, 12, 14, 26, 27, 28, 29, 45, 636, 647, 660, 759], "133": [6, 12, 45, 61, 660], "109": [6, 12, 45, 62, 637, 675], "111": [6, 12, 45, 641, 736], "443": [6, 12, 45, 285, 632], "sent": [6, 12, 45], "await": [6, 12, 45], "respons": [6, 12, 45, 381, 506, 820, 828, 829], "200": [6, 12, 14, 45, 81, 84, 234, 375, 399, 400, 553, 577, 632, 634, 805, 852], "ok": [6, 12, 45, 819], "30564": 6, "30k": 6, "plain": [6, 12, 45], "imagenet1000_clsidx": 6, "85k": 6, "003": 6, "is_avail": [6, 14], "url": [6, 7, 11, 13, 28, 31, 32, 45, 48, 812, 864], "cocodataset": [6, 7, 11, 13, 28, 31, 32, 48, 812, 864], "org": [6, 7, 11, 12, 13, 28, 31, 32, 45, 47, 48, 50, 56, 57, 79, 80, 82, 147, 155, 243, 253, 254, 269, 328, 335, 336, 369, 372, 375, 378, 387, 419, 492, 522, 615, 616, 629, 630, 632, 635, 637, 639, 647, 685, 686, 714, 764, 812, 832, 864], "val2017": [6, 7, 11, 13, 31, 48], "000000039769": [6, 7, 11, 13, 31, 48], "stream": [6, 7, 11, 13, 28, 31, 32, 45, 48, 55, 78, 214, 631, 812, 864, 874], "initialis": [6, 823, 841, 844], "api": [6, 7, 19, 24, 29, 30, 34, 47, 49, 56, 57, 62, 79, 80, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 146, 148, 149, 155, 165, 168, 178, 180, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 335, 336, 338, 372, 375, 378, 387, 419, 492, 496, 522, 629, 630, 632, 637, 639, 644, 645, 646, 647, 648, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 700, 702, 703, 704, 706, 707, 709, 710, 714, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 812, 816, 819, 820, 822, 824, 826, 829, 830, 831, 832, 833, 834, 836, 838, 840, 841, 842, 844, 847, 848, 850, 852, 855, 857, 858, 859, 866, 868, 870, 872, 875, 877], "convnextxlarg": 6, "while": [6, 7, 14, 31, 32, 39, 57, 61, 74, 80, 84, 97, 98, 103, 125, 141, 179, 247, 248, 268, 269, 347, 372, 375, 376, 378, 420, 421, 443, 486, 487, 521, 628, 629, 630, 632, 636, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 749, 761, 764, 774, 816, 818, 819, 820, 824, 825, 826, 828, 829, 830, 831, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 847, 851, 853, 854, 855, 856, 859, 860, 863, 870, 876, 877], "arbitrari": [6, 24, 34, 53, 54, 57, 74, 77, 80, 139, 153, 180, 322, 377, 454, 462, 463, 464, 617, 629, 630, 635, 836, 837, 839, 840, 841, 844, 853, 855, 863, 865, 871, 876], "regardless": [6, 31, 32, 43, 74, 813, 829, 833, 851, 854, 861], "host": [6, 810, 814, 828, 855, 860, 875], "convnext_xlarg": 6, "include_top": [6, 18, 812], "include_preprocess": 6, "input_tensor": [6, 57, 80, 376, 377, 448, 452, 457, 841], "input_shap": [6, 11, 18, 29, 31, 32, 812], "pool": [6, 57, 80, 84, 375, 389, 390, 391, 392, 394, 395, 396, 412, 413, 414, 415, 418, 792, 819], "classifier_activ": 6, "936026": 6, "common_runtim": [6, 46], "gpu_devic": 6, "1929": 6, "creat": [6, 7, 8, 9, 10, 13, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 45, 46, 47, 49, 50, 53, 56, 57, 66, 74, 76, 79, 80, 85, 89, 98, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 147, 148, 149, 274, 312, 313, 323, 325, 327, 328, 369, 375, 376, 378, 382, 394, 395, 396, 417, 434, 445, 451, 460, 468, 484, 489, 508, 509, 510, 511, 512, 580, 597, 614, 625, 629, 632, 634, 635, 643, 682, 738, 739, 740, 741, 743, 773, 784, 789, 791, 792, 793, 794, 795, 796, 797, 813, 815, 819, 820, 821, 824, 825, 826, 828, 829, 830, 833, 837, 838, 840, 841, 842, 844, 847, 849, 850, 853, 856, 857, 860, 863, 864, 865, 870, 871, 876], "job": [6, 31, 32, 812, 826, 828, 864], "localhost": 6, "replica": 6, "14791": 6, "tesla": 6, "v100": [6, 11], "pcie": [6, 860], "16gb": 6, "pci": 6, "bu": [6, 85, 860], "id": [6, 14, 46, 57, 80, 196, 330, 331, 332, 369, 557, 631, 634, 812, 817, 819, 824, 826, 827, 835, 839, 844, 856, 878], "0001": [6, 56, 57, 80, 283, 284, 376, 445, 451, 776, 779, 796], "over": [6, 7, 9, 22, 29, 32, 34, 45, 57, 62, 70, 71, 72, 77, 80, 84, 85, 93, 94, 95, 97, 122, 320, 321, 335, 336, 349, 356, 369, 372, 375, 376, 377, 378, 385, 387, 389, 390, 391, 392, 395, 404, 409, 413, 417, 418, 419, 420, 421, 422, 444, 452, 461, 474, 489, 492, 493, 496, 515, 525, 531, 580, 614, 628, 634, 637, 642, 643, 647, 648, 668, 678, 689, 691, 693, 694, 737, 741, 760, 761, 762, 763, 764, 765, 766, 767, 768, 792, 795, 801, 805, 812, 819, 820, 825, 831, 832, 839, 840, 842, 845, 849, 851, 855, 859, 861, 868, 870], "wonder": [6, 851, 859, 861], "why": [6, 22, 812, 820, 840, 851, 858, 860], "One": [6, 7, 47, 57, 58, 64, 66, 80, 81, 87, 89, 100, 378, 462, 463, 464, 467, 484, 493, 496, 546, 634, 639, 643, 706, 739, 824, 827, 829, 831, 837, 842, 844, 849, 851, 852], "reason": [6, 282, 291, 632, 818, 820, 823, 824, 827, 828, 829, 831, 837, 840, 841, 844, 845, 847, 849, 851, 860, 876], "highlight": [6, 820, 828, 831, 841, 843], "directli": [6, 16, 18, 22, 25, 29, 31, 32, 35, 375, 376, 411, 435, 641, 730, 812, 818, 819, 820, 821, 823, 824, 827, 828, 829, 830, 832, 835, 837, 838, 840, 841, 842, 845, 846, 849, 851, 853, 854, 855, 856, 861, 863, 864, 865, 874, 875, 876], "much": [6, 11, 13, 14, 22, 23, 29, 31, 32, 33, 34, 45, 100, 334, 351, 372, 791, 818, 819, 820, 824, 827, 829, 837, 840, 841, 842, 845, 846, 847, 849, 851, 852, 860, 868, 870, 876, 877], "more": [6, 7, 16, 19, 20, 22, 23, 24, 27, 29, 31, 32, 33, 34, 43, 45, 46, 47, 51, 56, 57, 62, 64, 68, 73, 79, 80, 85, 87, 91, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 153, 245, 247, 263, 278, 291, 295, 300, 301, 303, 363, 367, 373, 376, 377, 378, 424, 426, 438, 440, 443, 456, 462, 463, 464, 469, 490, 580, 626, 629, 630, 632, 634, 637, 639, 645, 671, 677, 680, 683, 685, 687, 694, 703, 710, 749, 750, 751, 752, 778, 788, 806, 812, 814, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 833, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 864, 865, 868, 869, 870, 871, 872, 873, 876, 877], "There": [6, 22, 29, 32, 37, 97, 368, 370, 371, 379, 380, 384, 778, 818, 819, 820, 823, 824, 826, 827, 829, 830, 831, 833, 835, 837, 839, 841, 842, 846, 849, 852, 855, 859, 863, 871, 872, 876, 877], "deeper": [6, 20, 22, 32, 52, 641, 729, 730, 812, 820, 822, 844, 848, 859], "what": [6, 11, 13, 20, 25, 31, 32, 35, 36, 39, 44, 45, 375, 409, 420, 778, 806, 812, 818, 820, 822, 827, 828, 831, 832, 835, 836, 838, 839, 840, 841, 842, 844, 848, 849, 851, 852, 853, 854, 855, 860, 861, 866, 871, 872, 875], "offer": [6, 841, 853, 861, 870, 876, 877], "limit": [6, 74, 103, 165, 168, 540, 541, 557, 630, 634, 639, 699, 776, 778, 779, 791, 798, 806, 812, 819, 820, 826, 828, 831, 833, 841, 844, 847, 852, 855, 869, 870, 871], "soon": [6, 818, 820, 828, 829, 855, 863], "detail": [6, 7, 24, 34, 47, 51, 56, 57, 62, 64, 68, 73, 79, 80, 81, 85, 87, 91, 110, 111, 112, 113, 114, 115, 116, 117, 118, 133, 144, 291, 295, 300, 301, 303, 367, 376, 426, 469, 548, 626, 629, 632, 645, 671, 677, 683, 687, 710, 749, 750, 751, 752, 788, 812, 818, 820, 823, 825, 826, 827, 828, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 849, 851, 852, 853, 872, 876], "comparison": [6, 10, 12, 57, 80, 241, 276, 337, 372, 377, 456, 457, 632, 637, 688, 771, 833], "separ": [6, 46, 57, 58, 80, 381, 502, 549, 634, 636, 663, 773, 784, 819, 820, 824, 827, 828, 831, 842, 843, 844, 849, 851, 852, 871, 875], "stai": [6, 812, 828], "origin": [6, 7, 9, 10, 11, 13, 14, 29, 31, 32, 33, 34, 35, 37, 44, 45, 46, 50, 57, 62, 64, 70, 74, 80, 85, 87, 93, 97, 100, 102, 103, 228, 253, 280, 319, 369, 375, 376, 378, 387, 419, 445, 477, 483, 485, 488, 523, 524, 528, 529, 530, 531, 532, 632, 637, 639, 647, 678, 706, 707, 758, 773, 778, 801, 802, 812, 814, 818, 819, 820, 825, 826, 828, 829, 834, 838, 840, 841, 842, 849, 861, 863, 864, 870, 871], "convert_to_tensor": 6, "tmp": [6, 45, 47, 589, 612, 634], "ipykernel_65585": 6, "3221769294": 6, "_eagertensorbas": 6, "op": [6, 16, 22, 43, 788, 801, 810, 845, 849, 855], "deprec": [6, 50], "futur": [6, 9, 22, 29, 31, 45, 637, 673, 674, 812, 819, 820, 821, 828, 829, 844, 845, 847, 851, 855, 859, 861, 876], "instead": [6, 13, 16, 18, 22, 26, 27, 28, 29, 31, 38, 45, 50, 56, 57, 62, 79, 80, 85, 98, 194, 282, 316, 369, 375, 387, 412, 413, 414, 522, 525, 631, 632, 637, 680, 776, 818, 819, 820, 823, 826, 828, 829, 831, 832, 833, 836, 837, 838, 840, 841, 842, 844, 847, 849, 851, 852, 855, 863, 864, 865, 868, 870, 876, 877], "logits_np": [6, 7], "class_id": 6, "int": [6, 7, 8, 45, 48, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 100, 102, 106, 113, 117, 118, 127, 128, 132, 134, 135, 136, 137, 138, 141, 145, 146, 147, 154, 161, 164, 165, 168, 175, 190, 204, 205, 206, 213, 214, 223, 230, 231, 232, 233, 234, 235, 247, 250, 274, 278, 283, 289, 292, 300, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 340, 341, 345, 349, 356, 358, 360, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 426, 430, 432, 433, 434, 435, 437, 442, 444, 445, 448, 449, 451, 456, 460, 461, 465, 469, 470, 473, 474, 477, 479, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 496, 497, 498, 499, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 515, 520, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 535, 545, 546, 547, 549, 552, 553, 556, 557, 571, 574, 576, 591, 592, 593, 594, 598, 614, 615, 616, 617, 618, 621, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 663, 668, 670, 671, 678, 679, 684, 689, 691, 692, 693, 694, 696, 697, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 724, 725, 727, 729, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 749, 751, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 779, 788, 791, 792, 805, 806, 810, 827, 829, 830, 831, 833, 836, 837, 840, 842, 844, 845, 847, 849, 854, 863], "argmax": [6, 7, 8, 46, 47, 48, 67, 90, 378, 489, 644, 812, 841, 863, 867], "57": [6, 12, 14, 43, 45, 56, 57, 79, 80, 198, 221, 222, 225, 226, 228, 238, 239, 279, 295, 296, 367, 631, 632], "342029": 6, "local_tsl": 6, "tsl": 6, "subprocess": 6, "304": 6, "cannot": [6, 9, 45, 46, 47, 50, 57, 290, 462, 463, 464, 632, 820, 823, 825, 829, 841, 849, 854, 876], "spawn": [6, 573, 634], "child": 6, "No": [6, 31, 32, 45, 57, 63, 80, 86, 377, 454, 455, 456, 458, 459, 638, 696, 820, 828, 829, 870], "directori": [6, 45, 46, 47, 50, 589, 612, 631, 634, 810, 814, 818, 819, 820, 826, 828, 834, 841, 844, 856], "906376": 6, "454": 6, "8904": 6, "993553": 6, "58": [6, 7, 10, 43, 264, 540, 632, 634], "578886": 6, "servic": [6, 872], "168": [6, 47, 540, 634, 641, 718], "0x558ecdd86830": 6, "guarante": [6, 645, 749, 751, 810, 824, 829, 840, 855, 861], "578915": 6, "176": [6, 540, 634], "streamexecutor": 6, "log": [6, 53, 56, 57, 62, 76, 79, 80, 85, 118, 138, 263, 265, 278, 300, 301, 354, 361, 367, 372, 377, 382, 454, 456, 457, 508, 626, 629, 632, 685, 776, 778, 779, 788, 820, 827, 828, 831, 837, 840, 841, 842, 844, 846, 847, 849, 852], "messag": [6, 798, 807, 811, 819, 820, 828, 831, 833, 835, 841, 849, 851, 860], "absl": [6, 45], "initializelog": 6, "stderr": 6, "i0000": 6, "1710255118": 6, "868823": 6, "65585": 6, "device_compil": 6, "h": [6, 8, 57, 58, 61, 80, 81, 84, 375, 381, 395, 396, 413, 414, 506, 545, 547, 634, 636, 641, 649, 652, 653, 654, 655, 656, 657, 658, 721, 725, 727, 730, 735, 813, 822, 826, 827, 828, 864, 866], "186": 6, "cluster": [6, 57, 80, 376, 430, 855, 870], "line": [6, 11, 13, 14, 20, 21, 24, 25, 28, 31, 32, 34, 35, 46, 47, 290, 632, 810, 812, 819, 823, 824, 828, 830, 831, 833, 841, 844, 847, 850, 851, 852, 853, 861, 864, 873], "lifetim": 6, "grei": 6, "fox": 6, "grai": 6, "urocyon": 6, "cinereoargenteu": 6, "eagerli": [6, 26, 27, 31, 32, 36, 37, 38, 45, 812, 863, 864, 865], "explain": [6, 7, 37, 57, 80, 375, 409, 420, 812, 818, 819, 820, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 844, 845, 847, 849, 850, 851, 852, 853, 854, 866, 873, 876], "doc": [6, 13, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 32, 46, 47, 80, 147, 328, 335, 336, 369, 372, 524, 629, 812, 813, 817, 818, 822, 831, 832, 835, 836, 844, 849, 852, 853, 863, 864, 865], "involv": [6, 16, 19, 20, 27, 29, 54, 77, 180, 223, 240, 247, 273, 278, 630, 632, 806, 813, 821, 822, 828, 829, 831, 842, 847, 854, 860, 870, 876], "dummi": [6, 26, 27, 36, 37, 38, 44, 820], "transpiled_model": [6, 7], "backend_compil": [6, 31, 32], "root": [6, 7, 9, 12, 13, 26, 27, 28, 29, 45, 46, 47, 50, 56, 79, 287, 632, 814, 818, 819, 820, 826, 834, 841, 852], "placement": [6, 13, 818], "case": [6, 16, 18, 24, 26, 31, 32, 34, 35, 36, 37, 45, 52, 53, 57, 58, 64, 70, 74, 76, 80, 81, 87, 97, 98, 103, 128, 139, 166, 167, 194, 199, 200, 207, 215, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 245, 246, 247, 248, 254, 255, 256, 261, 262, 263, 264, 265, 268, 273, 276, 278, 282, 283, 284, 285, 286, 287, 290, 291, 293, 335, 336, 347, 349, 359, 372, 375, 377, 378, 381, 382, 388, 399, 400, 401, 421, 452, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 489, 490, 496, 499, 501, 503, 510, 533, 550, 551, 555, 562, 576, 577, 578, 629, 630, 631, 632, 634, 637, 639, 641, 647, 685, 691, 702, 703, 704, 706, 708, 709, 711, 713, 721, 727, 760, 761, 762, 763, 764, 765, 766, 776, 777, 796, 806, 812, 816, 818, 819, 820, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 844, 845, 847, 849, 851, 853, 854, 855, 860, 863, 864, 865, 869, 873], "ad": [6, 12, 13, 14, 26, 27, 28, 29, 57, 64, 80, 87, 95, 240, 273, 334, 351, 372, 381, 501, 502, 503, 592, 593, 632, 634, 636, 637, 639, 663, 673, 674, 702, 792, 797, 812, 816, 817, 818, 819, 820, 823, 824, 826, 827, 828, 829, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 845, 847, 849, 853, 855, 860, 863, 869, 870], "logits_transpil": 6, "logits_transpiled_np": 6, "class_id_transpil": 6, "But": [6, 7, 31, 32, 778, 827, 828, 832, 835, 838, 847, 854], "produc": [6, 7, 9, 44, 57, 58, 61, 80, 84, 302, 312, 315, 367, 369, 375, 423, 636, 666, 776, 806, 818, 829, 834, 835, 840, 842, 844, 845, 863, 871, 873], "granular": [6, 7], "level": [6, 7, 22, 31, 32, 34, 57, 80, 81, 376, 448, 537, 806, 810, 812, 813, 818, 819, 820, 821, 827, 829, 833, 837, 839, 840, 841, 843, 846, 847, 848, 849, 852, 853, 854, 855, 857, 861, 866, 867, 868, 869, 870, 871, 872, 874, 875, 876, 877, 878], "close": [6, 7, 47, 62, 245, 263, 283, 312, 369, 632, 637, 639, 687, 702, 815, 816, 818, 819, 820, 821, 829, 832, 834, 841, 847, 870], "inde": [6, 7, 836, 847, 855, 868], "benefit": [6, 7, 32, 812, 819, 824, 827, 840, 847, 851, 852, 855, 860, 861, 868, 872, 875], "trainabl": [6, 7, 16, 18, 22, 28, 29, 31, 32, 49, 789, 793, 794, 797, 812, 832, 850, 852, 853, 864, 865], "further": [6, 7, 22, 74, 103, 778, 812, 820, 823, 824, 828, 831, 833, 836, 837, 840, 841, 843, 844, 848, 849, 852, 853, 860, 861, 875, 876], "cifar": [6, 7], "dataload": [6, 7, 852], "cifar10": [6, 7], "batch_siz": [6, 7, 45, 47, 50, 57, 61, 66, 80, 84, 89, 375, 377, 394, 395, 396, 412, 413, 414, 415, 459, 636, 643, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 661, 663, 738, 812, 852], "shuffl": [6, 7, 47, 57, 66, 74, 80, 89, 510, 643], "drop_last": [6, 7], "num_work": [6, 7], "opt": [6, 7, 26, 27, 28, 29, 49, 819, 825, 829, 840, 844, 847], "sgd": [6, 7, 45, 796, 870], "lr": [6, 45, 59, 82, 536, 616, 619, 621, 622, 623, 634, 635, 796, 852, 853], "1e": [6, 7, 9, 10, 11, 12, 13, 16, 18, 31, 43, 47, 54, 57, 59, 62, 63, 65, 77, 80, 82, 85, 86, 88, 101, 165, 334, 351, 372, 377, 381, 457, 501, 502, 503, 582, 583, 592, 605, 606, 615, 616, 621, 623, 630, 634, 635, 637, 638, 642, 687, 696, 697, 698, 737, 771, 773, 793, 795, 796, 812, 816, 827, 834, 837, 840, 842, 853, 854], "loss_fn": [6, 31, 32, 43, 45, 47, 812, 852, 853, 854], "crossentropyloss": [6, 45, 793], "epoch": [6, 7, 31, 32, 45, 47, 812], "loss_epoch_arr": [6, 7], "loss_arr": [6, 7], "enumer": [6, 7, 8, 45, 47, 781], "permut": [6, 8, 12, 45, 64, 87, 102, 385, 514, 639, 704, 711, 864], "loss": [6, 7, 31, 32, 45, 47, 57, 80, 97, 452, 453, 454, 455, 456, 457, 458, 459, 585, 608, 634, 696, 697, 698, 812, 828, 829, 837, 841, 845, 846, 852, 853, 854, 870, 877], "backward": [6, 7, 45, 57, 71, 80, 94, 282, 375, 398, 403, 404, 408, 409, 419, 420, 632, 637, 648, 668, 693, 767, 768, 792, 810, 845, 855], "append": [6, 7, 14, 46, 47, 57, 62, 74, 80, 232, 341, 372, 632, 637, 639, 671, 677, 702, 806, 812, 828, 844, 849, 852, 867], "avg_loss": [6, 7, 45], "02": [6, 12, 13, 45, 53, 58, 59, 65, 66, 79, 82, 89, 138, 225, 226, 265, 375, 397, 407, 408, 592, 593, 615, 616, 621, 629, 632, 634, 635, 642, 643, 737, 740, 741, 842], "94": [6, 14, 43, 56, 57, 59, 66, 79, 80, 82, 89, 207, 283, 284, 360, 372, 407, 619, 631, 635, 741], "ve": [6, 7, 8, 9, 14, 20, 29, 31, 66, 89, 643, 738, 818, 819, 820, 821, 834, 844, 847, 848, 851, 857], "And": [6, 7, 11, 13, 14, 16, 18, 23, 26, 31, 32, 33, 46, 77, 365, 366, 374, 812, 823, 826, 835, 837, 844, 863], "successfulli": [6, 7, 45, 47, 50, 794, 815, 819, 824], "plug": 6, "seen": [6, 16, 18, 23, 29, 31, 376, 382, 435, 510, 557, 634, 801, 828, 829, 831, 833, 841, 844, 849, 851, 852, 859, 860, 876], "d": [6, 7, 46, 57, 58, 61, 62, 64, 76, 80, 81, 84, 85, 87, 100, 116, 138, 147, 180, 223, 240, 241, 273, 276, 328, 369, 375, 376, 378, 381, 382, 385, 394, 395, 396, 403, 408, 412, 413, 414, 415, 417, 421, 427, 443, 464, 470, 472, 475, 479, 493, 495, 499, 506, 508, 514, 537, 548, 626, 629, 630, 632, 636, 637, 639, 641, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 670, 671, 675, 678, 682, 691, 692, 708, 721, 725, 726, 727, 730, 735, 736, 777, 806, 812, 813, 819, 822, 825, 826, 827, 834, 839, 844, 847, 852, 860, 861, 866], "sign": [6, 7, 56, 57, 62, 68, 70, 79, 80, 85, 97, 126, 220, 221, 222, 223, 226, 228, 229, 234, 238, 240, 243, 245, 247, 273, 275, 282, 286, 287, 291, 339, 372, 376, 378, 387, 447, 491, 492, 523, 524, 629, 632, 637, 645, 647, 685, 749, 750, 751, 752, 757, 758, 763, 765, 812, 819, 821, 829, 849, 854, 860], "ask": [6, 7, 812, 818, 819, 831, 849, 851, 855, 856, 861], "server": [6, 7, 45, 812, 819, 820, 826, 834, 856, 870], "forward": [6, 7, 8, 12, 18, 31, 32, 45, 47, 57, 80, 365, 374, 375, 398, 403, 404, 408, 409, 419, 420, 789, 791, 792, 794, 796, 810, 812, 819, 825, 832, 839, 844, 845, 847, 854, 855, 863, 870, 871], "come": [7, 22, 45, 815, 818, 819, 820, 824, 828, 841, 846, 847, 853, 857, 870], "onto": [7, 641, 724, 730, 858, 859, 870], "scene": [7, 812, 822, 848, 850, 858, 859, 870], "almost": [7, 45, 817, 827, 842, 850, 852, 859], "alwai": [7, 53, 54, 57, 58, 64, 76, 77, 80, 87, 110, 128, 152, 223, 273, 346, 372, 376, 378, 447, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 499, 555, 562, 626, 630, 632, 634, 639, 702, 703, 704, 706, 708, 709, 711, 713, 778, 812, 818, 819, 820, 824, 825, 827, 829, 832, 835, 836, 837, 840, 841, 842, 843, 844, 845, 847, 849, 855, 863], "huggingfac": [7, 45, 863, 864], "implement": [7, 14, 22, 23, 31, 33, 37, 45, 48, 54, 55, 57, 68, 69, 77, 78, 80, 85, 92, 97, 152, 166, 167, 180, 199, 200, 214, 220, 221, 222, 225, 226, 227, 228, 237, 238, 240, 243, 245, 247, 261, 262, 263, 264, 273, 275, 278, 282, 285, 286, 290, 291, 335, 336, 359, 372, 376, 387, 428, 429, 528, 529, 550, 551, 630, 631, 632, 634, 636, 637, 645, 646, 647, 663, 672, 673, 674, 682, 691, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 777, 779, 801, 812, 816, 818, 822, 823, 824, 825, 827, 829, 830, 832, 833, 834, 836, 837, 838, 840, 842, 844, 845, 847, 849, 851, 852, 853, 854, 855, 857, 867, 868, 869, 870, 873, 876, 877], "conveni": [7, 25, 35, 818, 829, 830, 836, 842, 850, 852, 853, 857, 876], "who": [7, 20, 812, 815, 821, 822, 833, 848, 855, 870, 872, 878], "must": [7, 37, 45, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 100, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 213, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 325, 326, 329, 330, 331, 332, 335, 336, 337, 338, 339, 341, 343, 344, 346, 348, 350, 352, 353, 354, 355, 359, 362, 367, 369, 372, 375, 376, 377, 378, 381, 382, 385, 387, 389, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 417, 419, 420, 422, 424, 426, 427, 429, 435, 436, 441, 442, 443, 444, 449, 453, 454, 455, 456, 458, 459, 462, 463, 464, 469, 470, 472, 474, 475, 476, 477, 479, 483, 485, 486, 487, 488, 490, 492, 493, 494, 496, 497, 499, 504, 505, 507, 508, 509, 511, 512, 515, 522, 523, 524, 525, 532, 540, 541, 545, 546, 547, 552, 553, 555, 562, 576, 577, 614, 615, 616, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 791, 792, 796, 798, 817, 818, 819, 820, 823, 824, 828, 829, 830, 831, 832, 833, 836, 837, 838, 840, 841, 844, 845, 846, 847, 849, 853, 854, 859, 861, 864, 865, 871, 877], "reimplement": 7, "choic": [7, 14, 32, 49, 57, 70, 80, 93, 376, 378, 447, 467, 647, 764, 766, 812, 819, 828, 840, 841, 852, 861, 864, 870, 877], "veri": [7, 16, 24, 31, 32, 34, 56, 79, 274, 334, 351, 372, 632, 637, 685, 778, 817, 818, 819, 820, 826, 827, 829, 830, 831, 833, 834, 836, 837, 840, 841, 842, 844, 845, 847, 850, 852, 853, 854, 855, 859, 860, 866, 867, 868, 870, 871, 872, 875, 876, 877], "thousand": [7, 855], "china": 7, "howev": [7, 14, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 62, 85, 247, 290, 291, 378, 381, 492, 501, 503, 580, 632, 634, 637, 685, 687, 801, 818, 819, 823, 824, 825, 827, 829, 830, 831, 832, 833, 835, 836, 837, 840, 841, 842, 844, 847, 849, 851, 852, 853, 854, 855, 860, 863, 869, 870, 876], "suffer": 7, "abov": [7, 22, 27, 31, 32, 37, 38, 53, 56, 57, 62, 66, 73, 79, 80, 85, 89, 98, 118, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 311, 313, 328, 329, 335, 336, 338, 341, 367, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 409, 412, 413, 414, 419, 420, 421, 429, 430, 484, 492, 496, 522, 525, 552, 556, 558, 560, 562, 591, 600, 624, 626, 629, 630, 632, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 739, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 812, 816, 818, 819, 820, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 836, 837, 839, 840, 841, 842, 844, 847, 849, 851, 852, 853, 854, 870, 875], "second": [7, 9, 56, 57, 59, 62, 64, 68, 79, 80, 81, 82, 85, 87, 91, 98, 102, 103, 123, 147, 178, 186, 223, 228, 230, 232, 233, 234, 235, 241, 247, 248, 249, 250, 251, 252, 258, 259, 260, 265, 266, 267, 269, 270, 273, 276, 278, 289, 319, 328, 334, 347, 349, 350, 351, 357, 361, 362, 369, 372, 376, 377, 378, 385, 387, 428, 429, 430, 432, 436, 458, 490, 498, 509, 511, 515, 522, 525, 537, 586, 609, 615, 616, 621, 628, 629, 630, 632, 634, 635, 637, 639, 640, 641, 645, 668, 671, 672, 673, 675, 677, 682, 684, 685, 687, 689, 691, 693, 710, 711, 716, 719, 749, 750, 751, 796, 819, 823, 826, 829, 831, 835, 840, 841, 844, 846, 851, 861, 875], "iter": [7, 45, 47, 52, 57, 58, 64, 72, 74, 80, 81, 87, 95, 100, 103, 122, 213, 320, 321, 369, 375, 376, 378, 421, 434, 445, 451, 468, 484, 534, 572, 628, 631, 634, 639, 641, 701, 705, 712, 714, 719, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 733, 734, 736, 805, 806, 810, 823, 825, 827, 849, 852, 861, 863], "dino": 7, "meta": [7, 45, 715, 716, 717, 824, 845, 870], "vit": 7, "purpos": [7, 24, 31, 32, 34, 45, 47, 147, 245, 263, 328, 369, 629, 632, 637, 685, 820, 822, 824, 827, 828, 830, 831, 833, 836, 837, 838, 841, 843, 844, 847, 848, 851, 857, 869, 871, 874, 875, 876], "abund": [7, 861], "literatur": 7, "mainli": [7, 812, 818, 822, 839, 841, 844, 850, 852, 857, 870], "focus": [7, 812, 829, 845, 868, 869, 870, 876, 877], "rather": [7, 37, 58, 74, 81, 126, 213, 564, 565, 568, 629, 631, 634, 636, 661, 816, 820, 823, 827, 829, 832, 834, 841, 842, 844, 845, 854, 855, 860, 866, 869, 870], "65": [7, 14, 43, 45, 47, 50, 79, 82, 89, 234, 273, 560, 615, 632, 634, 635, 637, 647, 682, 740, 741, 759, 828], "749": 7, "env": [7, 26, 27, 28, 29], "flags_fraction_of_gpu_memory_to_us": 7, "auto_growth": 7, "paddl": [7, 26, 27, 28, 29, 209, 335, 336, 372, 631, 789, 801, 818, 819, 829, 834], "autoimageprocessor": [7, 863, 864], "automodelforimageclassif": 7, "device_count": 7, "seed": [7, 23, 26, 27, 47, 48, 57, 61, 66, 68, 74, 80, 84, 89, 323, 324, 325, 326, 327, 369, 376, 382, 434, 445, 451, 508, 509, 510, 511, 512, 636, 643, 645, 659, 738, 739, 740, 741, 743, 749, 784, 789, 791, 806, 838, 842, 844], "libpaddl": 7, "0x7c8738e15470": 7, "processor": [7, 875], "facebook": [7, 48], "imagenet1k": 7, "id2label": [7, 48, 863], "predicted_class_idx": [7, 48], "paddle_input": 7, "pixel_valu": 7, "to_tensor": [7, 96, 97, 98, 99, 100, 101], "stop_gradi": [7, 59, 82, 213, 536, 616, 619, 621, 622, 623, 631, 634, 635, 640, 715, 716, 717, 796, 853], "logits_np_transpil": 7, "4th": 7, "decim": [7, 56, 79, 283, 632, 846], "io": [7, 13, 26, 27, 28, 29, 46, 49, 819, 828], "to_rgb": 7, "cv2": [7, 45, 47, 49, 852], "tar": [7, 45, 46, 47, 50], "gz": [7, 45, 46, 47, 50], "found": [7, 45, 47, 48, 50, 62, 64, 68, 74, 80, 85, 87, 91, 103, 201, 387, 469, 523, 631, 641, 671, 677, 710, 729, 749, 806, 815, 818, 819, 820, 824, 825, 826, 827, 829, 830, 832, 835, 838, 840, 841, 856, 872], "bj": [7, 223, 240, 273, 338, 372, 632], "bcebo": 7, "41626": 7, "2m": 7, "cross_entropi": [7, 47, 63, 86, 638, 698, 812, 827, 837, 840], "01": [7, 12, 26, 27, 29, 47, 53, 57, 58, 59, 62, 80, 81, 82, 85, 89, 138, 265, 283, 284, 312, 318, 343, 344, 351, 369, 375, 397, 407, 408, 549, 592, 593, 615, 616, 621, 629, 632, 634, 635, 637, 640, 643, 674, 684, 716, 717, 740, 741, 776, 825, 854], "33": [7, 14, 43, 45, 46, 56, 66, 70, 79, 80, 81, 82, 84, 226, 227, 234, 283, 375, 376, 378, 387, 395, 417, 418, 448, 467, 523, 541, 592, 619, 632, 634, 635, 636, 637, 641, 647, 659, 660, 682, 736, 739, 759, 766, 776, 779], "bring": [7, 31, 32, 823, 843, 844, 849, 850, 857, 860], "hope": [7, 43, 855, 860, 876, 878], "milesi": 8, "blob": [8, 45, 47, 812], "2f62e6b1c8e98022a6418d31a76f6abd800e5ae7": 8, "data_load": 8, "l65": 8, "mask_valu": 8, "pil_img": 8, "scale": [8, 11, 45, 57, 61, 65, 80, 82, 84, 88, 112, 211, 212, 304, 305, 308, 319, 349, 367, 369, 372, 375, 376, 381, 393, 399, 400, 401, 409, 411, 416, 420, 436, 501, 502, 503, 622, 626, 631, 635, 636, 642, 659, 663, 666, 737, 776, 778, 779, 791, 792, 796, 806, 870, 872], "is_mask": 8, "neww": 8, "newh": 8, "assert": [8, 14, 46, 48, 50, 74, 538, 634, 784, 816, 822, 823, 834, 837, 840, 841, 842, 844, 845, 851, 852], "too": [8, 57, 80, 223, 240, 247, 273, 378, 492, 632, 791, 818, 819, 820, 823, 829, 833, 845, 855], "small": [8, 14, 47, 56, 57, 62, 65, 79, 80, 85, 88, 240, 247, 273, 274, 334, 351, 372, 376, 377, 381, 440, 457, 501, 502, 503, 632, 637, 642, 680, 683, 685, 737, 791, 795, 812, 819, 828, 831, 837, 842, 847, 849, 853, 855, 863, 864, 871], "pixel": [8, 45, 57, 80, 375, 411], "resampl": 8, "nearest": [8, 57, 80, 223, 240, 273, 283, 345, 372, 375, 387, 411, 532, 632, 847], "bicub": [8, 57, 80, 375, 411, 847], "zero": [8, 45, 53, 54, 56, 57, 58, 59, 61, 62, 64, 67, 68, 70, 71, 76, 77, 79, 80, 82, 84, 85, 89, 90, 93, 94, 98, 112, 114, 115, 116, 118, 129, 130, 132, 134, 139, 141, 142, 143, 145, 146, 149, 152, 153, 221, 222, 223, 225, 226, 227, 228, 229, 232, 234, 235, 237, 238, 239, 240, 242, 245, 246, 247, 254, 255, 256, 257, 263, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 285, 286, 287, 288, 290, 291, 293, 294, 296, 298, 299, 303, 305, 311, 313, 322, 329, 335, 336, 339, 340, 341, 345, 353, 356, 358, 359, 360, 361, 367, 369, 372, 375, 376, 378, 385, 387, 397, 398, 399, 400, 401, 403, 404, 407, 408, 409, 418, 419, 420, 421, 422, 423, 428, 430, 438, 443, 446, 468, 478, 483, 484, 495, 496, 514, 523, 524, 541, 545, 552, 572, 577, 615, 616, 621, 622, 623, 624, 626, 629, 630, 632, 634, 635, 636, 637, 639, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 663, 666, 667, 669, 673, 674, 676, 677, 678, 679, 680, 681, 683, 685, 691, 693, 694, 701, 702, 703, 704, 706, 707, 714, 737, 739, 740, 741, 744, 745, 746, 747, 749, 750, 751, 752, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 791, 792, 796, 810, 824, 827, 829, 830, 831, 836, 838, 839, 842, 849, 852, 853, 861, 869], "ndim": [8, 57, 62, 67, 80, 85, 90, 102, 106, 376, 378, 444, 445, 451, 462, 463, 464, 477, 485, 487, 497, 614, 634, 637, 644, 684, 687, 747, 827, 837, 844], "newaxi": [8, 627], "transpos": [8, 28, 31, 32, 49, 57, 61, 62, 74, 80, 84, 85, 102, 376, 424, 442, 444, 446, 521, 636, 637, 649, 651, 653, 655, 656, 657, 661, 677, 681, 683, 689, 778, 792, 812, 834, 840, 851, 854, 864], "255": [8, 28, 31, 32, 45, 46, 47, 49, 61, 80, 84, 234, 632, 658, 812, 864], "car": 8, "full_img": 8, "from_numpi": [8, 9, 852], "img_numpi": 8, "torch_unet": 8, "unet_carvana": 8, "ivy_unet": 8, "n_channel": 8, "n_class": 8, "l62": 8, "mask_to_imag": 8, "ndarrai": [8, 53, 57, 58, 76, 80, 98, 127, 128, 140, 375, 376, 378, 387, 420, 445, 489, 528, 529, 599, 629, 634, 801, 805, 818, 824, 829, 830, 833, 836, 840, 841, 842, 845, 847, 849, 851, 854, 857], "uint8": [8, 28, 31, 32, 47, 155, 162, 166, 177, 180, 185, 191, 630, 776, 777, 829, 844], "elif": [8, 11, 828, 833, 840, 841, 842], "bool": [8, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 127, 128, 129, 134, 135, 136, 137, 138, 139, 141, 143, 149, 152, 153, 155, 156, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 188, 192, 196, 197, 199, 200, 202, 204, 207, 208, 213, 214, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 323, 324, 325, 326, 327, 329, 334, 335, 336, 337, 338, 340, 342, 350, 351, 356, 357, 359, 361, 362, 363, 369, 372, 373, 375, 376, 377, 378, 381, 387, 394, 395, 396, 398, 399, 400, 401, 411, 412, 413, 414, 417, 419, 421, 423, 430, 434, 437, 438, 442, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 462, 463, 464, 468, 469, 470, 472, 473, 474, 475, 476, 479, 483, 487, 490, 492, 493, 494, 496, 499, 501, 503, 504, 505, 506, 507, 509, 521, 522, 523, 524, 525, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 576, 577, 581, 590, 591, 592, 593, 595, 597, 599, 600, 613, 616, 617, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 659, 660, 661, 662, 663, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 685, 686, 687, 691, 692, 694, 696, 697, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 717, 718, 719, 724, 725, 726, 728, 729, 730, 735, 736, 738, 739, 740, 741, 743, 744, 745, 746, 747, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 774, 776, 777, 778, 788, 792, 795, 796, 805, 806, 810, 829, 831, 833, 840, 841, 844, 845, 847, 849, 854, 863, 864], "fromarrai": [8, 28, 31, 32, 47], "interpol": [8, 45, 57, 80, 353, 372, 375, 387, 532, 636, 663, 847, 870], "bilinear": [8, 57, 80, 375, 411, 847], "torch_mask": 8, "squeez": [8, 45, 64, 87, 639, 870], "torch_result": 8, "to_numpi": [8, 14, 31, 32, 43, 46, 47, 50, 58, 81, 634, 812, 834, 842, 852, 867], "img_tf": 8, "math": [8, 48, 98, 290, 632, 829, 840, 841, 842, 854, 868], "lot": [8, 828, 829, 838, 844, 855, 860, 861, 869], "far": [8, 31, 32, 641, 718, 729, 806, 830, 831, 850, 875, 876], "space": [8, 53, 56, 57, 58, 76, 79, 80, 81, 126, 137, 138, 292, 349, 372, 377, 454, 545, 549, 629, 632, 634, 847, 860], "del": [8, 828], "empty_cach": 8, "permute_dim": [8, 64, 87, 639, 834], "func_wrapp": [8, 51, 56, 57, 73, 79, 80, 110, 111, 112, 113, 114, 115, 116, 117, 118, 291, 295, 300, 301, 303, 367, 626, 632, 788, 830, 841, 846], "242": [8, 80], "mani": [8, 31, 32, 35, 64, 74, 87, 147, 328, 369, 629, 639, 708, 812, 818, 819, 820, 824, 825, 827, 828, 829, 830, 831, 832, 836, 837, 838, 840, 841, 842, 844, 847, 849, 851, 852, 855, 859, 860, 861, 866, 870, 873, 876, 877], "factor": [8, 14, 57, 59, 61, 62, 80, 82, 84, 85, 96, 97, 98, 99, 100, 211, 212, 213, 375, 376, 381, 409, 420, 434, 435, 445, 448, 450, 451, 506, 615, 616, 621, 622, 631, 635, 636, 637, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 667, 776, 778, 779, 791, 792, 796, 833, 860], "inc": 8, "unetdoubleconv": 8, "down1": 8, "unetdown": 8, "128": [8, 12, 31, 32, 45, 54, 56, 61, 77, 79, 84, 103, 168, 244, 375, 397, 407, 545, 555, 630, 632, 634, 636, 637, 651, 653, 658, 682, 812], "down2": 8, "down3": 8, "down4": 8, "1024": [8, 12, 45, 46, 812], "up1": 8, "unetup": 8, "up2": 8, "up3": 8, "up4": 8, "outc": 8, "unetoutconv": 8, "x1": [8, 22, 31, 32, 50, 54, 56, 57, 58, 62, 67, 77, 79, 80, 81, 85, 90, 92, 102, 103, 107, 153, 163, 179, 186, 206, 223, 228, 230, 232, 233, 234, 235, 240, 241, 247, 248, 249, 250, 251, 252, 258, 259, 260, 265, 266, 267, 269, 270, 271, 272, 273, 276, 278, 282, 289, 294, 313, 334, 339, 346, 347, 348, 350, 352, 357, 361, 369, 372, 376, 378, 387, 446, 478, 522, 534, 537, 630, 631, 632, 634, 637, 644, 646, 668, 675, 677, 682, 686, 689, 690, 693, 748, 755, 773, 798, 812, 823, 829, 831, 833, 836, 840, 841, 864, 865], "x2": [8, 22, 31, 32, 54, 56, 57, 58, 62, 67, 77, 79, 80, 81, 85, 90, 102, 103, 107, 153, 179, 186, 206, 223, 228, 230, 232, 233, 234, 235, 240, 241, 247, 248, 249, 250, 251, 252, 258, 259, 260, 265, 266, 267, 269, 270, 271, 272, 273, 276, 278, 282, 289, 294, 334, 339, 346, 347, 348, 350, 352, 357, 361, 372, 376, 378, 387, 432, 446, 478, 522, 534, 537, 630, 631, 632, 634, 637, 644, 668, 675, 677, 682, 686, 689, 690, 693, 748, 773, 798, 823, 829, 831, 833, 836, 840, 841], "x3": [8, 54, 58, 153, 534, 630, 634], "x4": 8, "x5": 8, "in_channel": 8, "out_channel": 8, "mid_channel": 8, "double_conv": 8, "with_bia": [8, 792, 812, 853, 864], "batchnorm2d": [8, 12, 795], "downscal": [8, 58, 81, 540, 541, 562, 634], "maxpool": [8, 12], "doubl": 8, "conv": [8, 636, 792, 847], "maxpool_conv": 8, "upscal": 8, "scale_factor": [8, 57, 80, 375, 411, 847], "align_corn": [8, 57, 80, 375, 411, 847], "conv2dtranspos": [8, 792], "bhwc": 8, "diff_h": 8, "diff_w": 8, "pad_width": [8, 57, 64, 80, 87, 378, 484, 639, 701, 714], "constant_pad": [8, 64, 87, 639], "via": [9, 34, 37, 247, 376, 378, 445, 448, 451, 492, 632, 641, 728, 729, 820, 823, 827, 829, 830, 840, 845, 847, 849, 851, 852, 870], "alongsid": [9, 20, 21, 22, 23, 33, 636, 663, 860], "basic": [9, 16, 18, 22, 25, 29, 31, 32, 35, 38, 378, 491, 812, 813, 818, 831, 844], "singl": [9, 24, 34, 43, 48, 56, 66, 74, 79, 89, 98, 292, 351, 372, 376, 382, 443, 509, 600, 613, 617, 632, 634, 635, 636, 643, 645, 663, 739, 740, 741, 749, 776, 792, 810, 812, 818, 819, 820, 823, 828, 831, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 852, 853, 854, 855, 861], "lstm": [9, 10, 636, 662, 792, 849, 870], "sample_input": 9, "uniform": [9, 23, 24, 25, 26, 27, 31, 32, 33, 34, 36, 37, 38, 45, 57, 66, 80, 89, 387, 525, 643, 738, 739, 741, 791, 812, 843, 853, 864, 865, 877], "tf_lstm": [9, 10], "torch_lstm": [9, 10], "physicaldevic": 9, "physical_devic": 9, "device_typ": 9, "alloc": [9, 53, 54, 57, 77, 145, 146, 152, 329, 369, 629, 630, 810, 818, 820, 855], "physic": [9, 204, 631], "modifi": [9, 47, 57, 74, 80, 97, 378, 387, 481, 484, 489, 529, 776, 806, 818, 819, 820, 823, 825, 826, 829, 830, 832, 834, 835, 837, 840, 842, 844, 845, 849], "164": 9, "state_upd": [9, 29], "properti": [9, 29, 74, 97, 98, 99, 100, 101, 102, 106, 794, 796, 823, 827, 837, 842, 844, 851, 852, 853, 876], "_transpil": [9, 29], "those": [9, 20, 44, 45, 62, 64, 74, 80, 85, 87, 126, 179, 240, 273, 493, 614, 629, 630, 632, 634, 637, 639, 641, 644, 684, 687, 699, 720, 747, 815, 818, 819, 820, 821, 824, 827, 828, 829, 838, 840, 841, 842, 844, 847, 859, 867], "torch_input": 9, "rand": [9, 10, 29, 31, 32, 47, 805, 806, 812, 863], "tf_input": [9, 864], "constant": [9, 10, 16, 18, 23, 26, 27, 33, 36, 38, 43, 57, 64, 65, 80, 87, 88, 97, 98, 322, 369, 375, 377, 378, 421, 456, 457, 484, 639, 641, 642, 701, 724, 737, 791, 795, 812, 837, 842, 845, 853, 854, 855, 863, 865], "tf_output": 9, "toler": [9, 10, 57, 62, 80, 85, 334, 351, 372, 376, 430, 445, 451, 637, 680, 683, 771, 773, 823, 842, 870], "benchmark": [9, 10, 872], "n_run": [9, 10], "tf_time": 9, "round": [9, 56, 57, 79, 80, 97, 99, 100, 101, 223, 236, 240, 246, 247, 273, 287, 293, 294, 345, 372, 632, 816, 818, 819, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 859, 860, 861, 867], "torch_tim": 9, "cpu_speedup": 9, "gpu_speedup": 9, "ntranspil": 9, "5017": 9, "1101": 9, "7519": 9, "901": 9, "607x": 9, "944x": 9, "32": [10, 14, 29, 31, 32, 43, 45, 46, 47, 56, 57, 66, 79, 80, 84, 85, 89, 102, 103, 112, 164, 222, 234, 235, 244, 258, 264, 280, 283, 284, 338, 372, 375, 376, 378, 387, 395, 396, 397, 407, 417, 418, 428, 432, 467, 523, 545, 561, 626, 630, 632, 634, 636, 637, 643, 644, 647, 651, 653, 654, 658, 660, 677, 682, 693, 739, 740, 741, 748, 759, 776, 779, 812, 828, 829, 839, 852, 875], "original_output": 10, "transpiled_output": 10, "original_torch_tim": 10, "autograph": 10, "do_not_convert": 10, "compiled_tf_lstm": 10, "transpiled_tf_tim": 10, "original_tf_lstm": 10, "time_major": [10, 80, 375, 421, 636, 662], "return_sequ": [10, 792], "original_tf_tim": 10, "slower": [10, 24, 841], "480074623755541x": 10, "362692848996253x": 10, "openmim": 11, "mim": 11, "0rc8": 11, "get_model": 11, "list_model": 11, "mmengin": 11, "configdict": 11, "saniti": [11, 13, 14, 31, 841], "checkpoint": [11, 12, 48, 855], "against": [11, 54, 57, 58, 62, 67, 77, 79, 80, 81, 85, 90, 153, 272, 291, 334, 337, 340, 351, 372, 387, 528, 529, 530, 531, 532, 569, 630, 632, 634, 637, 644, 677, 678, 680, 683, 744, 844, 849, 855, 859, 870], "zoo": 11, "checkpoint_nam": [11, 13, 31], "tiny_32xb128": 11, "noema_in1k": 11, "openmmlab": 11, "get_scal": 11, "cfg": [11, 835], "_config": 11, "train_pipelin": 11, "tensor_imag": 11, "transpiled_graph": [11, 13, 31], "issu": [11, 13, 377, 454, 791, 813, 814, 815, 816, 817, 819, 821, 823, 825, 826, 828, 829, 830, 831, 833, 834, 841, 844, 845, 847, 849, 853, 855, 861, 863], "107960": [11, 13], "export": [11, 13, 46, 828, 869, 876], "lc_all": [11, 13], "en_u": [11, 13], "utf": [11, 13], "ld_library_path": [11, 13], "lib64": [11, 13], "nvidia": [11, 13, 26, 27, 28, 29, 45, 47, 50, 874, 875], "library_path": [11, 13], "stub": [11, 13, 826], "ldconfig": [11, 13], "_f": [11, 13, 31], "comp_model": [11, 13, 31], "equival": [11, 13, 31, 62, 85, 97, 98, 126, 234, 247, 268, 269, 282, 283, 378, 468, 492, 498, 629, 632, 637, 680, 683, 686, 694, 801, 840, 841, 847, 852, 854, 856, 864], "np_imag": [11, 28, 31, 32], "jax_imag": 11, "hk": [11, 13, 31, 45, 49, 812, 854, 864], "rng_kei": [11, 13, 31, 812, 864], "prngkei": [11, 13, 24, 25, 31, 32, 45, 812, 854, 864], "jax_mlp_forward": 11, "init": [11, 13, 31, 45, 47, 57, 80, 376, 434, 445, 451, 812, 823, 854, 864], "rng": [11, 13, 31, 45, 812, 854, 864], "06": [11, 14, 26, 47, 54, 66, 79, 82, 101, 110, 165, 222, 238, 375, 397, 407, 621, 626, 630, 635, 741, 771, 773, 844, 852], "block_until_readi": 11, "08": [11, 57, 70, 80, 89, 226, 334, 351, 372, 375, 377, 397, 407, 457, 632, 740, 741, 766, 771, 776, 835], "3x": 11, "train2017": [11, 13, 28, 31, 32, 812, 864], "000000283921": [11, 13, 31], "out_torch": [11, 13, 31], "et": [11, 636, 637, 663, 687], "out_jax": [11, 13, 31], "66m": 11, "53m": 11, "That": [11, 13, 16, 18, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 45, 282, 377, 456, 632, 805, 819, 820, 824, 844, 851, 852, 853, 871], "pretti": [11, 13, 31, 32, 45, 816, 834, 852, 876], "solid": [11, 13, 31], "2023": [12, 13, 26, 27, 28, 29, 45], "52": [12, 14, 43, 56, 79, 81, 82, 89, 228, 238, 240, 387, 523, 545, 546, 561, 615, 632, 634, 635, 636, 637, 647, 660, 682, 741, 759, 805], "110": [12, 45], "10472": 12, "10k": 12, "tx": 12, "23k": 12, "634575": 12, "620k": 12, "jpeg": [12, 46, 47], "619": 12, "70k": 12, "113": 12, "resnet34_weight": 12, "torch_resnet_34": 12, "conv1": 12, "kernel_s": [12, 29, 31, 32, 47, 57, 80, 375, 394, 395, 396, 415, 422, 792, 798], "stride": [12, 57, 61, 80, 81, 84, 102, 375, 378, 394, 395, 396, 412, 413, 414, 415, 417, 418, 422, 460, 634, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 792, 840, 845, 870], "bia": [12, 57, 61, 80, 84, 88, 381, 387, 506, 522, 572, 634, 636, 642, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 663, 737, 792, 837, 844, 849, 853], "bn1": 12, "ep": [12, 57, 62, 65, 80, 85, 88, 165, 300, 367, 376, 377, 381, 430, 457, 501, 502, 503, 630, 637, 642, 680, 683, 737, 788, 795], "05": [12, 14, 47, 53, 56, 57, 59, 65, 79, 80, 82, 88, 138, 265, 318, 334, 343, 344, 351, 369, 372, 381, 501, 502, 503, 560, 582, 605, 615, 616, 621, 629, 632, 634, 635, 637, 642, 678, 737, 771, 776, 791, 795, 842, 844], "momentum": [12, 45, 57, 80, 381, 501, 503, 795, 860], "affin": [12, 795], "track_running_stat": [12, 795], "dilat": [12, 49, 57, 61, 80, 84, 375, 378, 412, 413, 414, 417, 418, 422, 484, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 792], "ceil_mod": [12, 57, 80, 375, 394, 395, 396, 412, 413, 414, 417, 792], "layer1": 12, "basicblock": 12, "conv2": 12, "bn2": 12, "layer2": 12, "layer3": 12, "layer4": 12, "output_s": [12, 57, 80, 375, 389, 390, 391, 392, 636, 665, 792, 812, 864], "fc": [12, 18, 45, 812, 853, 864], "in_featur": [12, 61, 84, 636, 660, 844], "out_featur": [12, 61, 84, 636, 660, 844], "resnet_34": 12, "ivy_resnet_34": 12, "34": [12, 14, 43, 45, 79, 80, 81, 89, 168, 238, 265, 286, 375, 387, 418, 529, 545, 546, 630, 632, 634, 636, 637, 643, 660, 679, 740, 741, 830], "333f7ec4": 12, "pth": 12, "83": [12, 14, 43, 62, 84, 89, 287, 375, 387, 397, 407, 418, 523, 632, 636, 637, 660, 675, 740], "3m": 12, "4mb": 12, "preserv": [12, 13, 26, 27, 28, 29, 57, 58, 59, 74, 80, 81, 82, 103, 375, 376, 378, 387, 411, 445, 462, 463, 464, 475, 476, 495, 529, 562, 624, 634, 635, 639, 703, 776, 843, 844, 854, 855, 864], "multipl": [12, 13, 22, 26, 27, 28, 29, 31, 56, 57, 62, 65, 70, 71, 74, 79, 80, 81, 82, 85, 87, 88, 93, 94, 134, 234, 258, 265, 271, 272, 273, 275, 335, 336, 372, 375, 376, 378, 381, 385, 397, 404, 407, 409, 443, 470, 479, 496, 499, 506, 515, 534, 541, 572, 615, 616, 619, 621, 622, 623, 624, 629, 632, 634, 635, 636, 637, 639, 642, 644, 647, 648, 651, 652, 653, 654, 667, 676, 677, 678, 691, 699, 702, 707, 708, 737, 744, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 792, 806, 810, 812, 818, 820, 824, 825, 827, 831, 833, 835, 837, 840, 841, 842, 844, 847, 849, 855, 861, 863, 868, 869, 870, 877], "rel": [12, 13, 26, 27, 28, 29, 57, 59, 62, 64, 69, 76, 80, 82, 85, 87, 92, 102, 136, 334, 351, 372, 377, 387, 456, 457, 522, 616, 619, 621, 622, 623, 635, 637, 639, 646, 671, 680, 683, 691, 703, 707, 753, 756, 771, 773, 820, 828, 842, 847, 870, 872], "home": [12, 13, 26, 27, 28, 29, 828], "workspac": [12, 13, 23, 26, 27, 28, 29, 819, 834], "95": [12, 14, 43, 57, 59, 62, 66, 73, 82, 84, 89, 110, 360, 372, 418, 615, 619, 623, 626, 635, 637, 643, 675, 740, 741], "builtin": [12, 819, 851, 853], "track": [12, 22, 31, 32, 44, 45, 810, 819, 820, 823, 839, 840, 863, 870], "properli": [12, 819, 822, 833, 835, 841, 844], "_trace_graph": 12, "shown": [12, 29, 31, 72, 74, 95, 257, 280, 338, 372, 632, 818, 819, 820, 823, 826, 828, 829, 831, 833, 835, 836, 841, 842, 844, 845, 846, 849, 851, 855], "8507": 12, "1351": 12, "0069": 12, "85072625": 12, "13506091": 12, "00688289": 12, "resnet50_weight": 12, "torch_resnet_50": 12, "imagenet1k_v2": 12, "11ad3fa6": 12, "8m": 12, "8mb": 12, "bottleneck": [12, 859], "conv3": 12, "bn3": 12, "2048": [12, 593, 634], "resnet_50": 12, "ivy_resnet_50": 12, "3429": 12, "0408": 12, "0121": 12, "34288204": 12, "04077014": 12, "01212029": 12, "yet": [13, 14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 47, 368, 370, 371, 379, 380, 384, 818, 819, 834, 855, 856, 863, 864, 865], "broken": [13, 26, 27, 28, 29, 866, 870], "permiss": [13, 26, 27, 28, 29, 819, 828], "conflict": [13, 26, 27, 28, 29, 37, 819, 820, 828, 841, 852], "behaviour": [13, 26, 27, 28, 29, 112, 115, 274, 626, 632, 817, 820, 822, 823, 824, 827, 829, 830, 832, 833, 836, 837, 838, 840, 841, 844, 845, 851], "system": [13, 26, 27, 28, 29, 47, 376, 446, 637, 686, 776, 812, 819, 820, 821, 825, 828, 829, 855, 864, 868, 870, 873, 875, 877], "recommend": [13, 26, 27, 28, 29, 268, 269, 282, 377, 454, 632, 647, 761, 764, 814, 819, 825, 826, 835, 838, 839, 863], "virtual": [13, 26, 27, 28, 29, 820, 841, 860, 873, 874], "pypa": [13, 26, 27, 28, 29], "venv": [13, 26, 27, 28, 29], "autofeatureextractor": [13, 31], "extractor": [13, 16, 18, 31, 47, 812], "hug": [13, 31, 863], "face": [13, 31, 813, 819, 823, 834, 835, 839, 847, 849, 863, 870, 876], "arch_nam": [13, 31], "microsoft": [13, 31, 860, 863, 864, 870, 875, 877], "feature_extractor": [13, 31], "980130": 13, "9342": 13, "980177": 13, "609": 13, "980207": 13, "1518": 13, "351203": 13, "inputs_jax": [13, 31], "last_hidden_st": [13, 31], "jax_forward": [13, 31], "jit_appli": 13, "63": [13, 14, 43, 47, 56, 73, 79, 84, 85, 118, 279, 286, 287, 375, 387, 397, 407, 418, 523, 632, 637, 641, 647, 667, 682, 719, 730, 759], "134": [13, 61, 637, 660, 679], "2x": [13, 31], "ipytest": 14, "load_breast_canc": 14, "autoconfig": 14, "sole": [14, 43, 836, 845, 869, 870, 871], "test_jax_gpu": 14, "xla_bridg": [14, 45], "get_backend": [14, 837], "test_torch_gpu": 14, "test_xgboost_gpu": 14, "capsi": 14, "load_diabet": 14, "target": [14, 16, 18, 24, 26, 27, 29, 31, 32, 34, 35, 36, 37, 38, 47, 57, 80, 195, 377, 452, 453, 454, 455, 456, 457, 458, 459, 631, 771, 792, 794, 800, 812, 816, 819, 822, 825, 834, 835, 842, 843, 848, 852, 853, 854, 864, 865, 866, 868, 869, 870, 873, 875, 876], "xgb_model": 14, "xgbregressor": 14, "tree_method": 14, "caus": [14, 377, 454, 819, 820, 823, 825, 827, 828, 829, 831, 840, 842, 844, 855], "consol": [14, 575, 634, 812, 820, 835, 844, 851, 856], "gpu_hist": 14, "captur": [14, 839, 844, 854, 871], "readouterr": 14, "err": 14, "tabular": 14, "pulsar": 14, "standard": [14, 56, 62, 65, 66, 70, 79, 88, 89, 93, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 146, 148, 149, 155, 165, 168, 180, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 335, 336, 338, 372, 375, 376, 378, 387, 419, 449, 492, 496, 522, 614, 629, 630, 632, 634, 637, 639, 642, 643, 644, 645, 646, 647, 648, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 700, 702, 703, 704, 706, 707, 709, 710, 714, 737, 740, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 778, 791, 795, 805, 806, 812, 815, 822, 823, 824, 827, 829, 832, 836, 840, 843, 844, 845, 855, 858, 864, 866, 868, 869, 872, 873, 875], "extra": [14, 32, 74, 103, 122, 614, 628, 634, 824, 829, 831, 838, 840, 841, 842, 847, 849, 863, 864, 867, 872], "dimens": [14, 53, 57, 58, 61, 62, 63, 64, 66, 67, 68, 70, 71, 74, 76, 80, 81, 84, 85, 86, 87, 89, 90, 91, 93, 94, 100, 102, 103, 106, 113, 117, 141, 145, 146, 316, 327, 329, 330, 331, 332, 335, 336, 340, 341, 349, 356, 363, 369, 372, 373, 375, 376, 377, 378, 381, 382, 385, 387, 389, 391, 392, 394, 395, 396, 398, 403, 404, 408, 412, 413, 414, 415, 418, 419, 421, 422, 424, 426, 429, 438, 447, 452, 456, 462, 463, 464, 468, 474, 485, 486, 487, 488, 490, 492, 496, 501, 502, 503, 506, 510, 512, 515, 525, 527, 528, 529, 530, 531, 532, 545, 546, 547, 549, 556, 590, 594, 614, 626, 629, 634, 636, 637, 638, 639, 640, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 663, 667, 668, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 694, 697, 698, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 713, 715, 716, 717, 743, 744, 745, 747, 749, 750, 751, 752, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 778, 788, 792, 795, 831, 833, 839, 841, 842, 844, 847, 849, 852], "load_data": 14, "standardscal": 14, "df": [14, 47], "delimit": [14, 852], "sc": 14, "fit_transform": 14, "117564": 14, "navig": [14, 816, 819, 820, 822, 834], "rerun": [14, 45], "436": 14, "48": [14, 43, 47, 56, 57, 79, 80, 81, 82, 89, 112, 222, 245, 287, 375, 395, 396, 397, 407, 413, 414, 417, 560, 615, 619, 626, 632, 634, 635, 637, 641, 647, 682, 719, 740, 759], "t4": 14, "tier": [14, 821], "reduc": [14, 57, 58, 62, 67, 70, 71, 74, 80, 81, 85, 90, 93, 94, 213, 335, 336, 356, 372, 373, 387, 527, 528, 529, 530, 531, 532, 546, 631, 634, 637, 644, 647, 648, 684, 744, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 805, 806, 828, 833, 841, 847, 849, 851, 863, 868, 872, 873, 874], "although": [14, 637, 685, 814, 824, 826, 827, 841, 847, 868, 870], "experi": [14, 20, 47, 812, 819, 833, 844, 850, 852, 855], "substanti": [14, 815, 820, 824, 829, 844, 860, 870], "stuff": 14, "201": [14, 79, 80, 225, 397, 632], "20x": 14, "ivyclassifi": 14, "106597": 14, "10967": 14, "96": [14, 43, 57, 59, 79, 80, 81, 89, 237, 258, 290, 360, 372, 375, 397, 545, 546, 619, 632, 634, 635, 637, 647, 682, 741, 759], "73": [14, 43, 56, 85, 287, 387, 523, 637, 643, 667, 740, 844], "852": [14, 636, 660], "449": 14, "47": [14, 43, 47, 56, 57, 62, 66, 79, 80, 81, 82, 84, 89, 229, 287, 375, 387, 395, 413, 414, 523, 545, 546, 619, 632, 634, 635, 636, 637, 643, 660, 675, 740, 741], "82": [14, 43, 45, 50, 51, 56, 82, 89, 113, 226, 387, 523, 615, 635, 740, 741, 816, 834], "68": [14, 43, 47, 50, 56, 89, 113, 135, 228, 375, 397, 407, 626, 629, 632, 637, 642, 693, 737, 740, 741], "nevertheless": 14, "fall": [14, 45, 796, 818, 829, 848], "short": [14, 43, 57, 80, 423, 636, 661, 662, 818, 820, 829, 849, 853], "blaze": 14, "36": [14, 43, 47, 56, 57, 61, 70, 80, 81, 85, 228, 283, 284, 349, 372, 375, 376, 387, 397, 407, 433, 523, 545, 546, 593, 632, 634, 637, 641, 647, 660, 679, 682, 692, 729, 759], "35": [14, 43, 51, 61, 62, 73, 79, 80, 84, 85, 89, 113, 228, 287, 375, 397, 407, 632, 636, 637, 644, 647, 660, 668, 675, 740, 748, 759], "37": [14, 26, 27, 28, 29, 43, 51, 56, 57, 73, 79, 80, 84, 102, 113, 226, 234, 283, 286, 290, 383, 418, 513, 632, 636, 637, 641, 643, 660, 679, 726, 740, 828], "surpass": 14, "remark": [14, 855], "artifici": 14, "simpli": [14, 22, 31, 32, 34, 43, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 375, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 632, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 685, 687, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 812, 818, 819, 820, 824, 825, 826, 828, 829, 830, 831, 832, 834, 836, 837, 840, 841, 842, 844, 847, 849, 853, 854, 855, 857, 871, 876], "stack": [14, 24, 26, 27, 28, 29, 34, 43, 47, 57, 62, 64, 74, 80, 85, 87, 102, 145, 146, 329, 369, 376, 378, 429, 468, 469, 471, 480, 500, 579, 588, 611, 629, 634, 637, 639, 641, 669, 671, 672, 673, 674, 676, 677, 679, 680, 681, 683, 684, 685, 687, 688, 691, 718, 728, 729, 792, 812, 817, 823, 840, 849, 866, 868, 875, 876], "x_doubl": 14, "vstack": [14, 57, 80, 378, 480], "y_doubl": 14, "235128": 14, "41": [14, 26, 27, 28, 29, 43, 45, 50, 56, 57, 62, 79, 80, 81, 84, 85, 113, 227, 235, 242, 273, 287, 375, 376, 383, 387, 395, 413, 418, 440, 513, 523, 540, 626, 632, 634, 637, 647, 667, 675, 765], "315": [14, 279, 632], "879": 14, "380": 14, "seem": [14, 818, 819, 847, 853, 854, 855, 870], "examin": 14, "600": [14, 47, 81, 84, 375, 399, 400, 553, 828], "conduct": [14, 874], "num_boosting_round": 14, "300": [14, 79, 81, 84, 283, 375, 399, 400, 553, 577, 632, 634, 637, 676, 844], "500": [14, 57, 80, 81, 84, 375, 376, 399, 400, 451, 553, 634], "ivy_elapsed_tim": 14, "xgb_elapsed_tim": 14, "ivy_tim": 14, "partial": [14, 57, 74, 80, 166, 167, 199, 200, 349, 372, 375, 376, 378, 387, 423, 438, 445, 485, 486, 487, 488, 529, 550, 551, 620, 630, 631, 634, 635, 777, 779, 793, 794, 820, 826, 847], "xgb_time": 14, "fivethirtyeight": 14, "legend": [14, 47, 818], "loc": [14, 867], "best": [14, 45, 572, 634, 806, 810, 812, 813, 816, 817, 818, 819, 820, 822, 828, 829, 833, 834, 843, 844, 845, 856, 873, 874], "xlabel": 14, "ylabel": 14, "obviou": [14, 852, 870], "trend": 14, "gap": 14, "train_siz": [14, 45], "widen": 14, "impress": 14, "outcom": [14, 57, 80, 337, 349, 372, 806], "tend": 14, "95933": 14, "9874": 14, "105807": 14, "wrap": [14, 22, 24, 31, 32, 34, 45, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 375, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 588, 591, 592, 593, 594, 595, 597, 599, 600, 611, 613, 615, 616, 619, 621, 622, 623, 624, 634, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 685, 687, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 773, 812, 822, 823, 824, 825, 827, 828, 829, 830, 832, 833, 836, 837, 840, 841, 844, 849, 851, 854, 855, 857, 863, 864, 866, 870, 871, 876, 877], "balanc": 14, "breast": 14, "cancer": 14, "return_x_i": 14, "171": [14, 62, 637, 675, 776], "perfectli": [14, 778, 861], "align": [14, 57, 74, 80, 375, 376, 411, 427, 636, 665, 806, 815, 819, 828, 841, 843, 849, 851, 857, 876], "timm": [15, 16, 20, 31, 32, 812, 864], "focu": [16, 29, 818, 839, 868, 869, 872, 877], "usual": [16, 18, 48, 240, 273, 632, 805, 819, 823, 829, 841, 844, 847], "mlp": 16, "mixer": 16, "onli": [16, 18, 31, 32, 37, 43, 45, 47, 49, 52, 53, 56, 57, 62, 64, 66, 74, 76, 79, 80, 85, 87, 89, 97, 100, 102, 118, 138, 178, 179, 208, 268, 269, 274, 280, 312, 342, 349, 369, 372, 375, 376, 378, 382, 387, 398, 411, 421, 430, 435, 449, 451, 462, 463, 464, 474, 508, 509, 525, 539, 626, 629, 630, 631, 632, 634, 636, 637, 639, 641, 643, 644, 646, 647, 663, 677, 684, 687, 688, 703, 706, 718, 719, 725, 726, 728, 729, 730, 735, 736, 739, 740, 741, 744, 745, 755, 761, 764, 774, 776, 777, 779, 792, 796, 805, 810, 812, 813, 814, 818, 819, 820, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 849, 851, 852, 853, 854, 855, 859, 863, 864, 869, 870, 871, 876, 877], "retriev": [16, 18, 22, 535, 557, 582, 634, 820, 841], "mlp_encod": [16, 31, 32, 812, 864], "create_model": [16, 31, 32, 812, 864], "mixer_b16_224": [16, 31, 32, 812, 864], "nois": [16, 18, 31, 32, 812, 863, 864], "randn": [16, 18, 31, 32, 378, 496, 812, 864], "tf_mlp_encod": [16, 31, 32], "output_torch": [16, 18], "output_tf": [16, 18], "output_dens": [16, 31, 32, 812], "dens": [16, 29, 31, 32, 316, 369, 792, 812], "unit": [16, 31, 32, 57, 73, 80, 97, 98, 110, 112, 113, 114, 115, 116, 117, 118, 295, 296, 299, 303, 305, 306, 309, 310, 311, 367, 504, 505, 626, 812, 819, 823, 829, 841, 842, 844, 855, 871, 874], "mention": [16, 18, 31, 32, 37, 818, 819, 820, 824, 831, 836, 837, 840, 841, 844, 847, 860, 865, 870], "fulli": [16, 18, 20, 21, 24, 29, 31, 32, 45, 57, 80, 387, 529, 792, 812, 824, 829, 836, 839, 847, 849, 850, 851, 852, 853, 854, 855, 861, 865, 868, 869, 870, 876, 877], "ground": [16, 18, 377, 453, 771, 773, 784, 816, 834, 841, 844, 859], "ret": [16, 18, 31, 32, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 436, 438, 441, 443, 446, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 724, 725, 726, 727, 728, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 777, 778, 779, 789, 794, 796, 801, 806, 808, 812, 829, 830, 832, 833, 839, 840, 841, 842, 845, 849, 854, 864], "eagertensor": [16, 22, 43, 801, 842], "deepmind": [17, 861], "perceiverio": [17, 861], "backbon": [17, 45, 812, 849, 852], "TO": [17, 19, 30], "replac": [17, 19, 30, 46, 56, 57, 58, 64, 66, 74, 79, 80, 81, 87, 89, 132, 274, 310, 313, 367, 369, 378, 489, 492, 496, 576, 577, 581, 629, 632, 634, 639, 643, 699, 738, 776, 820, 826, 827, 829, 830, 838, 841, 844, 851, 854, 855, 860, 864, 877], "efficientnet": 18, "eff_encod": [18, 812], "efficientnet_v2": [18, 812], "efficientnetv2b0": [18, 812], "storag": [18, 45, 46, 852, 860], "googleapi": [18, 45, 46], "efficientnetv2": 18, "b0_notop": 18, "h5": [18, 74], "24274472": 18, "0u": 18, "torch_eff_encod": [18, 812], "modes_to_trac": 18, "1280": [18, 545, 634, 812], "welcom": [20, 46, 812, 813, 819, 820, 821, 843], "varieti": [20, 823, 828, 829, 830, 844, 846, 866, 868, 872, 873, 876, 877], "organ": [20, 824, 827, 837, 841, 843, 845, 857, 860], "main": [20, 32, 53, 57, 62, 80, 85, 132, 145, 146, 147, 313, 328, 329, 369, 376, 378, 427, 473, 629, 637, 670, 671, 691, 812, 815, 818, 819, 820, 821, 823, 826, 827, 834, 838, 840, 868, 870, 871, 876], "exactli": [20, 24, 34, 43, 44, 48, 290, 632, 818, 827, 828, 829, 830, 831, 833, 844, 847, 859, 861], "rush": [20, 861], "jump": [20, 842], "straight": [20, 812, 828, 841, 844, 851], "quickstart": [20, 812], "introduct": [20, 22, 29, 31, 32, 870], "point": [20, 29, 54, 56, 57, 62, 66, 68, 70, 77, 79, 80, 85, 89, 93, 126, 127, 128, 130, 132, 135, 142, 143, 148, 152, 165, 169, 173, 180, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 245, 246, 247, 253, 254, 255, 256, 261, 262, 263, 264, 265, 273, 275, 276, 278, 280, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 312, 313, 315, 335, 336, 353, 354, 357, 359, 369, 372, 375, 376, 377, 382, 387, 390, 399, 400, 401, 419, 429, 449, 453, 508, 509, 510, 511, 512, 522, 523, 524, 532, 627, 629, 630, 632, 637, 643, 644, 645, 646, 647, 667, 669, 672, 673, 674, 676, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 691, 694, 740, 741, 747, 749, 750, 751, 752, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 801, 802, 810, 816, 818, 819, 820, 823, 824, 826, 828, 829, 831, 832, 834, 836, 840, 841, 844, 845, 847, 849, 851, 852, 861, 863, 876], "showcas": [20, 812], "real": [20, 28, 56, 57, 70, 79, 80, 93, 102, 112, 115, 118, 142, 143, 220, 221, 222, 223, 225, 226, 227, 228, 229, 238, 240, 241, 243, 245, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 270, 273, 275, 276, 278, 282, 283, 284, 286, 287, 288, 289, 290, 291, 293, 294, 335, 336, 342, 343, 344, 354, 372, 375, 376, 398, 419, 420, 429, 430, 626, 629, 632, 637, 644, 647, 672, 673, 674, 678, 685, 687, 688, 691, 694, 747, 760, 762, 763, 764, 765, 827, 872], "world": [20, 28, 820, 872], "beginn": [20, 813, 870], "got": [20, 43, 833], "cover": [20, 31, 57, 80, 375, 412, 413, 414, 818, 823, 824, 826, 829, 831, 832, 837, 838, 844, 847, 848], "familiar": [20, 21, 22, 818, 819], "concept": [20, 21, 22], "turn": [20, 21, 24, 34, 61, 84, 97, 98, 399, 400, 401, 636, 659, 792, 819, 826, 827, 830, 831, 841, 844, 861], "unus": [20, 21, 24, 831, 840], "part": [20, 21, 24, 53, 56, 57, 79, 80, 85, 102, 112, 115, 118, 145, 146, 147, 253, 257, 280, 328, 329, 355, 369, 372, 375, 376, 378, 387, 419, 430, 484, 532, 626, 629, 632, 637, 673, 674, 773, 812, 818, 819, 820, 821, 823, 826, 829, 835, 837, 840, 841, 844, 845, 847, 849, 850, 854, 855, 863, 864, 865, 868, 870, 875, 876, 877], "lazi": [20, 21, 24, 27, 34, 37, 38, 49], "decor": [20, 21, 26, 28, 29, 37, 49, 539, 634, 776, 778, 784, 816, 823, 824, 827, 829, 830, 834, 837, 840, 841, 842, 847], "kornia": [20, 21, 28, 31, 32, 45, 49, 812, 864], "roundup": 22, "indep": [22, 31], "proof": [22, 31], "delv": [22, 32, 812], "theori": [22, 814, 826], "esenti": [22, 31], "abstract": [22, 31, 32, 791, 796, 812, 827, 829, 840, 841, 844, 847, 853, 859, 868, 870, 872, 873, 877], "quirk": [22, 31], "perk": [22, 31, 812, 824, 827], "under": [22, 31, 32, 57, 377, 456, 457, 805, 812, 818, 819, 822, 823, 830, 831, 832, 835, 841, 842, 844, 847, 848, 849, 852, 854, 855, 863, 864, 870, 873, 877], "hood": [22, 31, 32, 812, 822, 830, 831, 835, 841, 844, 847, 848, 849, 852, 854, 863, 864, 877], "appropi": 22, "string": [22, 31, 32, 47, 57, 58, 61, 74, 80, 84, 150, 151, 163, 170, 192, 193, 194, 195, 196, 198, 207, 214, 215, 219, 375, 376, 378, 418, 422, 430, 484, 495, 524, 543, 630, 631, 634, 636, 637, 649, 650, 651, 652, 654, 656, 658, 674, 771, 773, 777, 805, 806, 825, 826, 828, 829, 830, 833, 841, 849, 852], "simplest": [22, 819, 831, 844, 847], "interact": [22, 31, 46, 49, 818, 869, 870, 875], "submodul": [22, 31, 45, 47, 102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 818, 819, 820, 823, 826, 828, 830, 834, 837, 838, 844, 848, 849, 853, 857], "likewis": [22, 27, 31, 38, 812, 820, 827, 829, 832, 836, 837, 841, 847, 852, 863, 864, 876], "nativearrai": [22, 31, 32, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 68, 70, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 127, 128, 129, 131, 136, 137, 138, 139, 140, 141, 143, 145, 146, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 168, 171, 172, 173, 175, 177, 179, 180, 186, 196, 197, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 317, 318, 322, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 470, 472, 473, 474, 475, 476, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 522, 523, 524, 525, 526, 534, 537, 538, 540, 541, 545, 546, 547, 549, 552, 553, 554, 555, 556, 558, 560, 561, 562, 565, 568, 569, 571, 576, 577, 578, 581, 590, 591, 592, 593, 594, 595, 597, 599, 600, 602, 613, 615, 616, 617, 619, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 719, 720, 721, 725, 726, 727, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 797, 824, 827, 831, 833, 836, 837, 838, 840, 841, 845, 846, 849, 851, 857], "alia": [22, 31, 335, 336, 372, 627, 818, 841, 862, 865], "lastli": [22, 31, 824], "subclass": [22, 31, 32, 838, 841, 847, 864], "dict": [22, 31, 32, 45, 49, 52, 58, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 134, 136, 141, 143, 149, 153, 155, 166, 167, 168, 172, 173, 180, 196, 199, 200, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 325, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 369, 378, 398, 399, 400, 401, 419, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 484, 490, 492, 493, 494, 496, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 535, 537, 538, 540, 541, 545, 546, 547, 548, 549, 550, 551, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 572, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 624, 628, 630, 631, 634, 641, 650, 651, 652, 653, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 718, 719, 721, 724, 725, 726, 727, 729, 730, 731, 735, 736, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 773, 774, 789, 792, 794, 801, 806, 824, 827, 852, 853, 857, 863, 864, 865], "recurs": [22, 31, 32, 45, 47, 52, 74, 75, 166, 167, 199, 200, 376, 448, 550, 551, 557, 630, 631, 634, 641, 718, 719, 722, 728, 729, 730, 771, 819, 823, 826, 827, 834, 837, 840, 853, 855], "fashion": [22, 778, 844, 864], "native_arrai": [22, 31, 32, 53, 54, 56, 76, 78, 79, 80, 81, 85, 92, 110, 113, 136, 139, 141, 143, 149, 152, 153, 154, 155, 163, 168, 175, 197, 206, 214, 230, 234, 239, 240, 241, 243, 247, 251, 259, 260, 268, 273, 276, 279, 282, 287, 335, 336, 363, 372, 377, 378, 458, 484, 490, 494, 534, 537, 564, 565, 568, 599, 626, 629, 630, 631, 632, 634, 636, 637, 638, 639, 643, 644, 647, 648, 650, 651, 658, 666, 669, 673, 674, 679, 680, 684, 688, 689, 691, 694, 696, 698, 699, 706, 738, 747, 756, 762, 765, 767, 773, 783, 801, 816, 834, 842, 844], "data_class": [22, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 395, 396, 545, 549, 687, 712], "low": [22, 31, 34, 50, 57, 61, 66, 80, 84, 89, 375, 418, 422, 636, 643, 649, 650, 651, 652, 654, 656, 658, 739, 741, 778, 827, 833, 840, 841, 847, 849, 866, 868, 870, 871, 872, 874, 876], "c": [22, 31, 37, 46, 47, 53, 57, 58, 59, 61, 64, 70, 76, 77, 79, 80, 81, 82, 84, 85, 87, 91, 93, 97, 98, 116, 127, 128, 138, 141, 165, 168, 223, 234, 240, 241, 261, 262, 264, 273, 276, 284, 291, 375, 376, 378, 381, 387, 389, 390, 391, 392, 403, 408, 424, 426, 428, 429, 431, 443, 462, 463, 464, 474, 492, 496, 501, 502, 503, 506, 524, 537, 545, 546, 547, 548, 556, 560, 561, 591, 600, 615, 616, 619, 621, 622, 623, 626, 629, 630, 632, 634, 635, 636, 637, 639, 641, 644, 645, 647, 650, 651, 652, 653, 654, 655, 657, 672, 674, 676, 706, 710, 718, 721, 725, 726, 727, 729, 730, 735, 736, 747, 752, 758, 759, 764, 766, 795, 805, 806, 813, 819, 822, 825, 826, 827, 831, 837, 839, 848, 849, 850, 852, 855, 857, 858, 860, 861, 864, 866, 870, 874, 875, 877], "fundament": [22, 31, 828, 841, 847, 849, 859, 870], "signatur": [22, 31, 378, 387, 484, 522, 829, 830, 831, 832, 836, 840, 844, 845, 847, 860, 867, 876], "matmul": [22, 31, 32, 48, 62, 85, 376, 446, 614, 634, 637, 687, 825, 844, 845, 849], "to_n": [22, 31, 32, 43, 52, 75, 849], "jaxlib": [22, 28, 46, 801, 819, 824, 829, 830, 836, 845, 849, 851], "xla_extens": [22, 28, 801, 824, 829, 830, 836, 845, 849, 851], "arrayimpl": [22, 28, 801], "disabl": [22, 31, 57, 80, 378, 492, 794, 810, 826], "array_mod": [22, 31, 578, 602, 634, 846], "set_array_mod": [22, 31, 602, 634, 846], "ultim": [22, 31, 863], "sigmoid": [22, 31, 32, 43, 51, 57, 73, 80, 301, 367, 382, 508, 626, 788, 849, 852, 853], "z": [22, 31, 32, 44, 45, 53, 56, 57, 58, 62, 63, 66, 68, 70, 76, 79, 80, 81, 85, 86, 87, 89, 93, 102, 103, 137, 138, 140, 141, 201, 223, 224, 228, 230, 233, 235, 240, 251, 252, 255, 256, 257, 259, 260, 265, 267, 269, 270, 271, 272, 280, 289, 300, 301, 335, 336, 338, 367, 372, 377, 387, 453, 455, 456, 457, 458, 459, 465, 469, 480, 521, 522, 525, 532, 537, 549, 552, 553, 560, 561, 577, 590, 592, 593, 601, 614, 629, 631, 632, 634, 637, 638, 639, 641, 643, 644, 645, 647, 668, 677, 682, 683, 687, 694, 696, 697, 698, 699, 721, 725, 727, 735, 739, 740, 741, 744, 749, 759, 760, 762, 763, 764, 791, 812, 825, 827, 830, 831, 849, 851, 863], "divid": [22, 27, 31, 32, 48, 56, 57, 58, 64, 74, 79, 80, 87, 102, 103, 247, 381, 454, 501, 502, 503, 506, 592, 632, 634, 639, 708, 824, 827, 831, 835, 844], "exp": [22, 31, 32, 56, 57, 79, 80, 116, 118, 245, 265, 278, 301, 367, 375, 377, 403, 408, 457, 626, 632, 637, 685, 839, 841], "entir": [22, 31, 32, 34, 47, 57, 70, 71, 74, 80, 81, 93, 94, 213, 243, 245, 285, 286, 335, 336, 372, 375, 378, 387, 399, 400, 401, 484, 525, 558, 631, 632, 647, 648, 760, 761, 762, 763, 764, 765, 766, 767, 768, 792, 806, 818, 819, 820, 823, 824, 827, 829, 831, 833, 840, 841, 842, 844, 847, 849, 852, 853, 854, 855, 860, 861, 864, 870, 876, 877], "congratul": [22, 28], "independ": [22, 32, 57, 66, 80, 89, 223, 240, 273, 283, 381, 382, 506, 508, 632, 637, 643, 668, 686, 738, 812, 823, 829, 831, 838, 849, 854, 864, 868], "div": [23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 865], "sub": [23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 36, 37, 38, 57, 62, 64, 74, 75, 79, 80, 81, 85, 87, 103, 272, 376, 378, 387, 430, 470, 479, 499, 528, 529, 557, 634, 637, 639, 640, 671, 691, 708, 715, 716, 717, 818, 820, 822, 827, 833, 841, 842, 844, 851, 852, 853, 865, 866], "with_numpi": 23, "reproduc": [23, 48, 61, 84, 636, 659, 776, 777, 778, 779, 784, 816, 823, 834], "x_": [23, 33, 98, 284, 632, 865], "66391283": 23, "12516928": 23, "38367081": 23, "03102401": 23, "76419425": 23, "52797794": 23, "90346956": 23, "61316347": 23, "27585283": 23, "66309303": 23, "ivy_repo": 23, "sever": [23, 24, 33, 34, 36, 37, 38, 57, 80, 97, 375, 376, 389, 390, 391, 392, 444, 776, 819, 820, 845, 855, 868, 874], "pro": [23, 24, 25, 33, 34, 35, 36, 37, 38], "pick": [24, 34, 791], "trigger": [24, 34, 794, 818, 835], "unif": [24, 26, 27, 34, 36, 813, 851, 860, 866, 876], "55563945": 24, "65538704": 24, "14150524": 24, "46951997": 24, "30220294": 24, "14739668": 24, "57017946": 24, "91962677": 24, "51029003": 24, "59644395": 24, "constitu": [24, 34, 74, 854], "5556394": 24, "655387": 24, "1415051": 24, "4695197": 24, "3022028": 24, "1473966": 24, "5701794": 24, "91962665": 24, "51028997": 24, "5964439": 24, "985": 24, "000": [24, 79, 274, 776, 816, 828, 834], "On": [24, 31, 32, 819, 829, 830, 835, 841, 844, 847, 850, 854], "hand": [24, 56, 376, 446, 776, 812, 823, 829, 830, 835, 837, 844, 855], "learnt": [25, 35], "ivy_norm": 25, "jax_norm": [25, 31, 32], "wider": [25, 35, 585, 608, 634, 829, 846, 876], "avoid": [25, 35, 37, 57, 64, 80, 240, 245, 247, 263, 273, 377, 378, 381, 454, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 499, 501, 502, 503, 539, 555, 557, 580, 585, 608, 632, 634, 639, 702, 703, 704, 706, 708, 709, 711, 713, 778, 779, 819, 820, 825, 826, 827, 828, 829, 833, 838, 841, 844, 845, 846, 847, 870], "act": [25, 35, 57, 80, 298, 363, 373, 820, 831, 846, 855, 877], "shorthand": [25, 35, 37, 844], "pair": [25, 35, 45, 57, 61, 80, 84, 228, 247, 320, 362, 369, 372, 375, 409, 418, 420, 422, 632, 636, 637, 649, 650, 651, 652, 654, 656, 658, 666, 668, 806], "93968587": 25, "26075466": 25, "22723222": 25, "06276492": 25, "47426987": 25, "72835908": 25, "71737559": 25, "50411096": 25, "65419174": 25, "15576624": 25, "implic": [25, 35, 36, 39, 827], "satisfi": [26, 27, 28, 29, 45, 47, 50, 57, 375, 376, 398, 430, 829, 831], "fw": [26, 27, 28, 29, 61, 84, 387, 522, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 773, 819, 844], "mxnet": [26, 27, 28, 29, 209, 631, 801, 818, 819, 860, 877], "einop": [26, 27, 28, 29, 45, 47, 50, 58, 81, 545, 546, 547, 634, 829, 860], "miniconda": [26, 27, 28, 29], "multienv": [26, 27, 28, 29], "site": [26, 27, 28, 29, 871], "psutil": [26, 27, 28, 29, 45, 47, 50], "termcolor": [26, 27, 28, 29, 45, 47, 50, 74, 103], "colorama": [26, 27, 28, 29, 45, 47], "535": [26, 27, 28, 29, 51, 73, 118, 626, 833], "diskcach": [26, 27, 28, 29, 45], "auth": [26, 27, 28, 29], "urllib3": [26, 27, 28, 29, 45], "pyvi": [26, 27, 28, 29, 31, 32], "dill": [26, 27, 28, 29, 45], "astunpars": [26, 27, 28, 29], "cloudpickl": [26, 27, 28, 29], "gast": [26, 27, 28, 29], "wheel": [26, 27, 28, 29, 45, 47, 50, 859], "six": [26, 27, 28, 29, 45, 50, 819, 847], "cachetool": [26, 27, 28, 29], "pyasn1": [26, 27, 28, 29], "rsa": [26, 27, 28, 29], "jinja2": [26, 27, 28, 29], "jsonpickl": [26, 27, 28, 29], "networkx": [26, 27, 28, 29, 50], "charset": [26, 27, 28, 29, 45], "idna": [26, 27, 28, 29, 45], "certifi": [26, 27, 28, 29, 45], "2017": [26, 27, 28, 29, 45, 636, 663], "jedi": [26, 27, 28, 29], "inlin": [26, 27, 28, 29, 826], "prompt": [26, 27, 28, 29, 818, 820], "toolkit": [26, 27, 28, 29, 870, 871, 877], "pygment": [26, 27, 28, 29], "traitlet": [26, 27, 28, 29], "exceptiongroup": [26, 27, 28, 29], "pexpect": [26, 27, 28, 29], "markupsaf": [26, 27, 28, 29], "parso": [26, 27, 28, 29], "ptyprocess": [26, 27, 28, 29], "wcwidth": [26, 27, 28, 29], "asttoken": [26, 27, 28, 29], "pure": [26, 27, 28, 29, 37, 47, 812, 832, 836, 841, 847, 851, 854, 855, 870, 876, 877], "lazili": [26, 27, 28, 31, 32, 36, 38, 49, 812, 863, 864, 865], "actual": [26, 36, 816, 820, 822, 828, 834, 837, 838, 840, 841, 842, 844, 847, 848, 853, 855, 871, 876], "occur": [26, 31, 32, 36, 49, 54, 56, 68, 77, 79, 91, 155, 274, 290, 630, 632, 644, 645, 744, 745, 749, 750, 751, 752, 823, 828, 830, 833, 846], "altern": [26, 36, 46, 57, 80, 85, 97, 98, 334, 342, 343, 344, 348, 350, 351, 352, 353, 355, 356, 357, 361, 362, 372, 818, 819, 826, 840, 852, 873], "assum": [26, 27, 36, 37, 38, 53, 56, 57, 58, 61, 62, 63, 79, 80, 81, 84, 85, 86, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 313, 329, 335, 336, 338, 341, 359, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 444, 446, 484, 492, 496, 522, 525, 552, 556, 558, 560, 569, 591, 600, 624, 629, 630, 632, 634, 635, 636, 637, 638, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 696, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 792, 805, 812, 819, 823, 825, 828, 829, 832, 842, 844, 847, 851, 852, 855], "201733": 26, "slowli": [26, 36], "norm": [26, 36, 37, 57, 58, 62, 80, 81, 85, 96, 97, 375, 376, 397, 398, 402, 403, 404, 407, 408, 409, 419, 420, 426, 430, 504, 505, 507, 540, 541, 562, 634, 637, 678, 694, 737, 792, 796, 845], "slow": [26, 36, 814, 819, 826], "34431235": [26, 27], "51129461": [26, 27], "06686894": [26, 27], "36452447": [26, 27], "98795534": [26, 27], "15493582": [26, 27], "91630631": [26, 27], "41939619": [26, 27], "78909753": [26, 27], "19475674": [26, 27], "norm_trac": 26, "norm_tran": [26, 36], "know": [26, 27, 36, 37, 38, 68, 645, 749, 750, 751, 752, 812, 814, 818, 820, 830, 838, 842, 844, 847, 861, 865, 871], "07": [27, 45, 47, 59, 63, 79, 82, 86, 89, 228, 261, 264, 265, 284, 375, 407, 605, 615, 616, 618, 619, 620, 621, 632, 634, 635, 638, 697, 698, 740, 793, 796, 853], "981554": 27, "happen": [27, 31, 32, 292, 632, 812, 819, 820, 821, 830, 840, 844, 852, 861, 863, 864], "wherea": [27, 38, 80, 375, 421, 820, 824, 827, 829, 830, 831, 836, 837, 844, 854, 867], "subtract": [27, 31, 32, 56, 79, 102, 103, 134, 378, 484, 629, 632, 824, 827, 831], "filelock": [28, 45], "extens": [28, 45, 56, 62, 79, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 146, 148, 149, 155, 165, 168, 180, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 335, 336, 338, 372, 375, 378, 387, 419, 492, 496, 522, 629, 630, 632, 637, 639, 644, 645, 646, 647, 648, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 700, 702, 703, 704, 706, 707, 709, 710, 714, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 817, 819, 820, 832, 834, 835, 844, 867, 870, 877], "sympi": [28, 860], "fsspec": [28, 45], "mpmath": 28, "often": [28, 57, 377, 452, 817, 823, 833, 836, 837, 841, 844, 855, 861, 871, 874, 877], "fortun": [28, 29, 823], "everyth": [28, 46, 805, 812, 818, 819, 820, 821, 822, 828, 831, 840, 841, 842, 844, 850, 855, 856, 861], "practic": [28, 820, 825, 828, 841, 843, 873], "everi": [28, 31, 32, 37, 45, 53, 57, 58, 80, 81, 135, 136, 301, 335, 336, 349, 367, 372, 375, 378, 412, 413, 414, 421, 498, 534, 629, 634, 818, 820, 823, 825, 826, 828, 829, 831, 835, 836, 837, 838, 840, 841, 842, 844, 849, 851, 853, 863, 864, 865, 870], "jax_kornia": [28, 31, 32, 812, 864], "though": [28, 817, 818, 820, 829, 830, 832, 837, 840, 841, 847, 852, 855], "000000000034": [28, 31, 32, 812, 864], "raw_img": [28, 31, 32, 812, 864], "sharp": [28, 31, 32, 812], "prefer": [28, 31, 32, 247, 632, 819, 827, 833, 834, 838, 841, 856, 870], "whole": [29, 57, 80, 378, 381, 491, 504, 505, 507, 820, 826, 835], "full": [29, 57, 62, 80, 84, 85, 97, 98, 100, 165, 252, 260, 323, 324, 325, 326, 327, 369, 376, 377, 378, 449, 450, 456, 457, 485, 488, 579, 588, 603, 611, 629, 630, 632, 634, 636, 637, 651, 653, 654, 655, 657, 680, 684, 686, 687, 777, 784, 812, 819, 820, 826, 829, 832, 833, 836, 837, 841, 844, 847, 849, 855, 860, 861, 868, 870, 876], "complex": [29, 31, 32, 45, 51, 56, 57, 62, 70, 73, 77, 79, 80, 85, 93, 110, 111, 112, 113, 114, 115, 116, 117, 118, 142, 143, 158, 172, 181, 187, 220, 221, 222, 223, 224, 225, 226, 229, 237, 238, 240, 241, 243, 245, 253, 254, 255, 256, 257, 261, 262, 263, 264, 273, 275, 276, 278, 280, 283, 284, 285, 286, 287, 290, 291, 295, 300, 301, 303, 338, 343, 344, 367, 372, 375, 376, 387, 398, 409, 419, 420, 424, 429, 430, 431, 442, 444, 530, 531, 592, 593, 626, 629, 630, 632, 634, 637, 644, 647, 672, 673, 674, 678, 685, 687, 689, 691, 694, 747, 762, 763, 765, 777, 788, 806, 815, 818, 821, 826, 829, 831, 838, 841, 844, 845, 847, 852, 853, 854, 855, 857, 864, 866, 868, 870, 872, 876, 877], "neccessari": 29, "set_random_se": [29, 48], "301436": 29, "_c": 29, "0x7f252c392390": 29, "flatten": [29, 31, 32, 45, 47, 50, 57, 58, 62, 64, 67, 68, 80, 81, 85, 87, 90, 91, 340, 356, 372, 376, 378, 387, 427, 473, 483, 487, 492, 493, 496, 498, 520, 527, 528, 529, 530, 531, 532, 545, 549, 634, 637, 639, 644, 645, 675, 682, 694, 700, 705, 707, 744, 745, 749, 750, 751, 752, 771, 773, 812, 840, 847], "keyword": [29, 31, 32, 47, 49, 52, 53, 57, 74, 80, 103, 139, 274, 375, 378, 387, 423, 484, 522, 536, 539, 572, 601, 629, 632, 634, 637, 641, 647, 688, 724, 765, 771, 773, 777, 793, 794, 805, 818, 824, 827, 829, 830, 838, 840, 841, 842, 844, 845, 847, 852, 863, 864, 865], "input_arrai": [29, 31, 32, 840], "torch_model": [29, 31, 32, 49], "159": [29, 73, 110, 626, 636, 660], "thank": [29, 852, 860], "fledg": [29, 819, 849, 850], "output_arrai": [29, 31, 32, 57, 454], "0893": 29, "1504": 29, "1372": 29, "0991": 29, "0867": 29, "0851": 29, "0911": 29, "0804": 29, "0926": 29, "0881": 29, "softmaxbackward0": 29, "furthermor": 29, "relat": [29, 247, 632, 812, 814, 817, 818, 819, 820, 826, 833, 841, 844, 845, 846, 847, 864, 873], "continu": [29, 31, 32, 47, 125, 287, 295, 367, 628, 632, 812, 817, 818, 819, 822, 823, 834, 840, 843, 844, 855, 860, 861, 870], "regress": [30, 870, 877], "checkout": [31, 46, 820, 823, 844], "f705efe7cb5d18df17ce6c1e20f04d0eb4933f48": 31, "theoret": 31, "aspect": [31, 32, 813, 839, 852, 870], "easiest": [31, 812, 814, 819, 856], "defer": [31, 32, 818, 824, 829, 830, 837, 840, 841, 844, 876], "similarli": [31, 44, 139, 147, 223, 328, 335, 336, 369, 372, 629, 632, 825, 829, 841, 847, 851, 876], "essenc": [31, 871, 876], "becom": [31, 57, 80, 97, 346, 372, 378, 464, 639, 699, 801, 820, 821, 827, 829, 831, 833, 840, 855, 859, 861, 863], "slide": [31, 57, 61, 80, 84, 375, 394, 395, 396, 412, 413, 414, 415, 418, 422, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 792], "regressor": [31, 32, 812], "input_dim": [31, 32, 46, 812], "output_dim": [31, 32, 46, 812], "linear0": [31, 32, 43, 812, 852, 853], "linear1": [31, 32, 43, 812, 852, 853], "instanti": [31, 32, 784, 832], "adam": [31, 32, 43, 47, 59, 82, 536, 615, 616, 621, 634, 635, 796, 812, 852, 853, 854, 870], "n_training_exampl": [31, 32, 812], "2000": [31, 32, 80, 314, 369, 812], "random_norm": [31, 32, 61, 62, 66, 84, 85, 89, 545, 634, 636, 637, 643, 651, 653, 654, 655, 657, 658, 662, 687, 812], "linspac": [31, 32, 53, 76, 126, 629, 812, 836, 847, 849, 877], "pred": [31, 32, 46, 47, 57, 63, 80, 86, 377, 453, 456, 638, 696, 697, 698, 812, 827, 837, 840], "gradient": [31, 32, 45, 47, 57, 80, 97, 213, 364, 372, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 631, 640, 715, 716, 717, 773, 784, 796, 812, 822, 845, 852, 853, 855, 870], "grad": [31, 32, 43, 47, 615, 635, 796, 812, 839, 852, 853, 854], "execute_with_gradi": [31, 32, 43, 47, 635, 812, 852, 853, 854, 855], "lambda": [31, 32, 48, 50, 80, 123, 125, 297, 307, 544, 557, 617, 618, 620, 625, 628, 634, 635, 637, 641, 673, 725, 726, 730, 812, 818, 837, 838, 839, 842, 847, 849, 852], "2d": [31, 32, 47, 57, 80, 97, 313, 369, 375, 376, 378, 387, 390, 391, 399, 400, 442, 449, 463, 473, 522, 792, 810, 812, 841, 847], "5f": [31, 32, 812], "nonetheless": [31, 32], "extract": [31, 32, 39, 46, 57, 80, 98, 378, 467, 493, 841, 843, 845, 866, 870, 871, 876], "gc": [31, 32, 557, 634], "decompos": [31, 32, 57, 80, 97, 100, 323, 324, 325, 326, 327, 348, 355, 369, 372, 376, 440, 445, 448, 451, 841, 854], "said": [31, 32, 778, 845, 861, 863], "otherwis": [31, 32, 49, 52, 53, 54, 56, 57, 58, 61, 62, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 126, 128, 129, 134, 136, 137, 138, 141, 143, 149, 152, 153, 155, 156, 158, 159, 160, 161, 162, 171, 175, 179, 180, 196, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 303, 304, 305, 306, 307, 309, 310, 311, 313, 323, 324, 325, 326, 327, 334, 335, 336, 337, 338, 340, 341, 342, 350, 351, 357, 359, 361, 362, 363, 367, 369, 372, 375, 376, 378, 381, 394, 395, 396, 399, 400, 401, 419, 432, 447, 449, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 470, 472, 474, 475, 476, 483, 490, 492, 493, 494, 496, 499, 501, 503, 504, 505, 507, 509, 521, 522, 523, 524, 525, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 569, 576, 577, 591, 592, 593, 595, 597, 599, 600, 601, 613, 617, 619, 624, 628, 629, 630, 631, 632, 634, 635, 636, 637, 640, 641, 644, 645, 646, 647, 648, 650, 651, 652, 653, 659, 660, 661, 663, 666, 667, 668, 669, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 687, 691, 693, 694, 696, 697, 698, 699, 702, 703, 704, 706, 707, 708, 709, 710, 711, 713, 714, 715, 716, 731, 738, 739, 740, 741, 743, 744, 745, 746, 748, 749, 750, 751, 752, 753, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 776, 777, 792, 794, 795, 801, 812, 820, 824, 827, 829, 830, 831, 837, 838, 840, 844, 849, 856, 863, 864], "x0": [31, 32, 50, 81, 537, 634, 831], "normalize_trac": [31, 32], "html": [31, 32, 46, 56, 57, 79, 80, 147, 155, 243, 253, 254, 269, 328, 335, 336, 369, 372, 375, 378, 387, 419, 492, 522, 629, 630, 632, 637, 639, 647, 685, 686, 714, 764, 832, 860], "fname": [31, 32, 48, 50, 794, 852], "anticip": [31, 32], "addition": [31, 32, 827, 840, 841, 876], "normalize_native_comp": [31, 32], "return_backend_compiled_fn": 31, "immedi": [31, 32, 810, 818, 819], "built": [31, 32, 37, 45, 47, 50, 126, 629, 792, 793, 794, 812, 819, 820, 826, 827, 844, 850, 856, 863, 869, 870, 874], "eager_graph": [31, 32, 812, 863, 864], "lazy_graph": [31, 32, 812, 863, 864], "thought": [31, 32, 819, 820, 836, 860, 868], "matter": [31, 32, 37, 831, 859], "haven": [31, 32, 37, 856, 870], "jax_out": [31, 32], "ideal": [31, 32, 828, 829, 841, 847, 852], "worth": [31, 32], "differenti": [31, 32, 295, 365, 366, 367, 374, 870], "chosen": [31, 32, 50, 100, 126, 228, 629, 632, 644, 748, 818, 828, 841], "plai": [31, 32, 377, 456, 812, 815, 819, 821, 824, 830, 834, 841, 844, 854, 870, 873], "role": [31, 32, 812, 815, 820, 821, 830, 841, 850, 871, 873, 877], "dl": [31, 32], "effortlessli": [31, 32], "previous": [31, 32, 603, 634, 801, 818, 819, 825, 837, 839, 844, 849], "default_devic": [31, 32, 206, 209, 210, 211, 217, 218, 631, 830, 833, 834], "as_n": [31, 32, 54, 55, 74, 77, 78, 158, 159, 160, 161, 162, 163, 169, 196, 197, 630, 631, 829], "certainli": [31, 32, 812, 860, 876], "upon": [31, 32, 49, 810, 820, 821, 831, 840, 844, 847, 855, 869, 870], "unnecessari": [31, 32, 841], "extend": [31, 32, 57, 80, 378, 387, 484, 525, 825, 826, 829, 832, 833, 836, 841, 845, 855, 867, 870, 876], "infrastructur": [31, 32, 866, 872, 873], "least": [31, 56, 57, 62, 79, 80, 240, 258, 273, 375, 378, 387, 403, 408, 462, 463, 464, 473, 475, 522, 632, 637, 644, 677, 747, 812, 820, 824, 828, 829, 830, 831, 837, 840, 844, 864], "coco": 31, "seamlessli": [32, 844], "therefor": [32, 37, 53, 56, 57, 62, 79, 80, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 155, 171, 175, 179, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 328, 329, 335, 336, 338, 341, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 477, 484, 485, 487, 492, 496, 497, 522, 525, 529, 538, 546, 547, 552, 556, 558, 560, 562, 576, 591, 595, 600, 624, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 818, 820, 823, 824, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 840, 841, 842, 844, 845, 847, 849, 851, 853, 855, 859, 867, 870, 876], "wide": [32, 812, 820, 844, 868, 870], "plenti": 32, "resourc": [32, 813, 818, 819, 828], "visit": [32, 818, 819, 820, 828], "page": [32, 812, 818, 819, 820, 826, 828, 834, 850, 851, 854, 856, 865, 878], "newli": [33, 34, 46, 48, 54, 77, 152, 539, 630, 634, 820, 828, 840, 844], "randon": [33, 34, 36, 37, 38], "mean_": 33, "std_": 33, "detect": [33, 37, 56, 74, 79, 255, 632, 641, 718, 729, 818, 819, 825, 827, 828, 835, 844, 852, 853], "inspect": [33, 37, 535, 634], "__": [33, 34, 35, 36, 37, 38, 74, 831, 852], "script": [34, 812, 819, 820, 823, 828, 831, 849, 855, 870], "comp": 34, "low_level": 34, "chain": [34, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 136, 141, 143, 149, 153, 155, 168, 172, 173, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 399, 400, 401, 419, 452, 453, 454, 455, 456, 457, 458, 459, 468, 469, 490, 492, 494, 496, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 640, 641, 650, 651, 652, 653, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 715, 716, 720, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 797, 824, 827, 839, 841, 853, 854, 855, 870], "un": [34, 170, 630, 829, 849], "partial_comp": 34, "time_funct": 34, "express": [34, 56, 57, 79, 80, 98, 221, 225, 227, 228, 237, 239, 279, 285, 290, 359, 372, 632, 798, 806, 832, 841, 849, 854, 870, 871], "maxim": [34, 837, 840, 849, 867, 868, 872, 873, 874], "conclud": [35, 845], "collect": [35, 45, 47, 49, 50, 52, 74, 75, 626, 631, 634, 635, 636, 638, 641, 642, 643, 731, 788, 792, 793, 794, 795, 796, 819, 828, 833, 834, 838, 839, 842, 844, 868, 870, 873], "norm_comp": [36, 37], "global": [36, 37, 47, 58, 74, 81, 103, 158, 159, 160, 161, 162, 211, 212, 213, 582, 583, 586, 592, 593, 605, 606, 609, 630, 631, 634, 784, 795, 801, 819, 824, 825, 828, 829, 830, 833, 837, 841, 849, 870], "b": [37, 51, 56, 57, 58, 61, 62, 70, 73, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 98, 101, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 129, 134, 135, 136, 138, 141, 143, 149, 152, 153, 154, 155, 163, 173, 175, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 330, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 367, 369, 372, 375, 376, 377, 378, 382, 385, 387, 394, 395, 396, 397, 399, 400, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 425, 428, 430, 432, 436, 439, 443, 446, 451, 452, 453, 455, 456, 457, 458, 462, 463, 464, 465, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 483, 484, 490, 492, 493, 494, 495, 496, 499, 500, 505, 507, 509, 510, 512, 513, 515, 522, 523, 524, 525, 527, 529, 532, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 569, 576, 577, 591, 592, 593, 595, 599, 600, 613, 615, 616, 617, 619, 621, 622, 623, 624, 626, 629, 630, 632, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 662, 666, 667, 668, 669, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 718, 721, 724, 725, 726, 727, 729, 730, 735, 736, 737, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 805, 806, 810, 812, 813, 816, 820, 822, 823, 825, 827, 828, 831, 834, 837, 839, 842, 848, 849, 850, 852, 853, 854, 858, 861, 863, 866], "option": [37, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 168, 170, 180, 192, 196, 208, 211, 212, 213, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 375, 376, 377, 378, 381, 382, 383, 385, 387, 388, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 419, 420, 421, 423, 424, 426, 427, 428, 430, 432, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 540, 541, 543, 545, 546, 547, 548, 549, 552, 553, 555, 556, 557, 558, 560, 561, 562, 564, 565, 568, 573, 576, 577, 581, 591, 592, 593, 595, 597, 599, 600, 601, 613, 615, 616, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 685, 686, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 724, 725, 729, 730, 735, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 777, 784, 788, 789, 791, 792, 794, 796, 797, 805, 810, 818, 819, 820, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 840, 841, 842, 844, 845, 847, 849, 854, 855, 863, 864, 865, 870, 876], "prioriti": [37, 74, 801, 815, 818, 820, 821, 830, 840], "normalize_via_oper": 37, "determin": [37, 56, 57, 62, 64, 68, 71, 74, 79, 80, 81, 85, 92, 94, 97, 100, 102, 103, 132, 155, 157, 164, 170, 171, 172, 173, 175, 176, 177, 192, 202, 204, 205, 216, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 243, 245, 247, 253, 254, 255, 256, 257, 261, 262, 263, 264, 265, 270, 273, 278, 282, 285, 286, 287, 288, 289, 290, 291, 294, 304, 308, 354, 359, 367, 372, 375, 376, 377, 378, 387, 411, 419, 430, 452, 453, 492, 496, 522, 534, 537, 558, 559, 563, 564, 565, 566, 567, 568, 595, 613, 629, 630, 631, 632, 634, 637, 639, 640, 645, 648, 667, 668, 669, 671, 675, 676, 677, 679, 680, 682, 683, 685, 686, 691, 693, 694, 700, 715, 716, 717, 749, 750, 751, 752, 753, 767, 768, 778, 784, 791, 795, 827, 829, 830, 832, 837, 841, 844, 846, 847, 859], "think": [37, 818, 820, 828, 831, 847, 871], "uniqu": [37, 47, 57, 58, 68, 80, 81, 91, 375, 376, 378, 423, 446, 483, 484, 498, 569, 634, 640, 641, 645, 715, 716, 717, 720, 724, 749, 750, 751, 752, 778, 812, 823, 827, 837, 841, 842, 843, 847, 855, 859, 873], "rule": [37, 54, 56, 57, 62, 77, 79, 80, 85, 152, 155, 178, 179, 180, 229, 240, 273, 275, 282, 284, 292, 294, 375, 378, 387, 419, 472, 522, 630, 632, 637, 639, 667, 668, 675, 679, 682, 686, 700, 778, 805, 823, 824, 827, 828, 829, 831, 835, 836, 837, 839, 844, 847, 871], "broadcast": [37, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 97, 102, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 329, 335, 336, 337, 338, 339, 340, 343, 344, 346, 348, 350, 352, 353, 354, 355, 359, 367, 369, 372, 375, 376, 377, 378, 381, 382, 387, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 408, 409, 411, 412, 413, 414, 417, 419, 424, 426, 427, 435, 436, 441, 442, 444, 453, 454, 455, 456, 458, 459, 465, 469, 472, 477, 485, 486, 487, 488, 490, 492, 494, 496, 497, 501, 504, 505, 507, 508, 509, 511, 512, 522, 523, 524, 525, 528, 529, 530, 531, 532, 540, 541, 545, 546, 547, 552, 553, 562, 576, 577, 615, 616, 619, 621, 622, 623, 624, 626, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 688, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 712, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 748, 752, 753, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 778, 805, 827, 829, 831, 832, 833, 844, 845, 849], "elementwis": [37, 57, 65, 80, 88, 300, 302, 362, 367, 637, 642, 692, 737, 837, 845, 849], "taken": [37, 57, 62, 80, 85, 341, 372, 375, 420, 637, 671, 691, 818, 828, 841, 845, 854, 871], "account": [37, 47, 49, 57, 64, 80, 87, 287, 378, 474, 632, 639, 706, 791, 805, 819, 828, 832, 841, 845, 863], "fact": [37, 97, 820, 823, 828, 841, 844, 849, 852], "consum": [37, 773, 827, 828, 836, 842, 844], "thrown": [37, 562, 634, 819, 824, 830, 833, 835, 855], "doesn": [37, 562, 580, 634, 771, 792, 818, 819, 825, 827, 828, 829, 830, 831, 834, 835, 837, 839, 844, 847, 849, 855, 863, 868], "consider": [37, 818, 831, 836, 847, 859, 867, 868], "standalon": [38, 818, 824, 844, 857, 866, 871, 876, 877], "static": [38, 57, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 106, 107, 129, 319, 375, 396, 409, 414, 423, 445, 451, 490, 502, 595, 629, 636, 663, 682, 789, 794, 841, 846, 855, 869, 870, 871], "flow": [39, 827, 863, 870, 871], "statement": [39, 44, 828, 840, 844, 847, 855, 863, 864], "opposit": 39, "exclud": [39, 70, 80, 93, 126, 147, 328, 369, 523, 524, 629, 643, 741, 757, 776, 779, 801, 831, 849, 863], "todo": [40, 41, 42, 47, 50, 80, 524, 818, 829, 841], "aim": [43, 816, 820, 823, 834, 838, 841, 844, 848, 868, 870, 873], "interfac": [43, 76, 134, 629, 851, 854, 855, 857, 860, 866, 867, 868, 869, 870, 874, 877], "set_framework": [43, 50], "underneath": [43, 828, 868], "sai": [43, 818, 819, 834, 838, 851, 861, 878], "clip": [43, 56, 57, 64, 79, 80, 81, 87, 271, 272, 378, 467, 492, 493, 540, 541, 632, 634, 639, 827, 837, 839, 840, 852, 854, 867], "a_min": 43, "a_max": 43, "tensforflow": 43, "clip_by_valu": [43, 854, 867], "clip_value_min": 43, "clip_value_max": 43, "clamp": [43, 57, 80, 300, 367, 854], "49": [43, 47, 57, 66, 80, 84, 85, 287, 375, 376, 387, 397, 407, 418, 443, 523, 632, 647, 692, 740, 759], "devicearrai": [43, 824, 841, 849, 851], "accept": [43, 52, 53, 56, 57, 62, 75, 79, 80, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 328, 329, 335, 336, 338, 341, 342, 364, 369, 372, 374, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 484, 492, 496, 522, 525, 529, 538, 546, 547, 552, 556, 558, 560, 562, 576, 591, 595, 600, 624, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 812, 818, 819, 820, 824, 827, 829, 830, 831, 832, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 851, 857, 868], "jax_concat": 43, "tf_concat": 43, "np_concat": 43, "torch_concat": 43, "85": [43, 51, 57, 66, 73, 79, 80, 82, 84, 89, 103, 112, 225, 234, 235, 279, 295, 296, 299, 367, 387, 523, 592, 619, 626, 632, 634, 635, 636, 643, 660, 739, 740, 741], "mymodel": [43, 852], "x_in": [43, 852, 853, 854], "reduce_mean": [43, 812, 852, 853, 854], "49040043354034424": 43, "48975786566734314": 43, "4892795979976654": 43, "48886892199516296": 43, "4884953498840332": 43, "4881443977355957": 43, "4878086447715759": 43, "48748287558555603": 43, "48716384172439575": 43, "48684927821159363": 43, "48653748631477356": 43, "48622724413871765": 43, "4859171509742737": 43, "48560672998428345": 43, "48529526591300964": 43, "4849821627140045": 43, "48466697335243225": 43, "4843493402004242": 43, "4840289056301117": 43, "4837053418159485": 43, "4833785891532898": 43, "4830484390258789": 43, "48271444439888": 43, "48237672448158264": 43, "48203518986701965": 43, "48168954253196716": 43, "4813397228717804": 43, "4809857904911041": 43, "48062753677368164": 43, "48026490211486816": 43, "479898065328598": 43, "47952669858932495": 43, "4791509211063385": 43, "4787706732749939": 43, "47838595509529114": 43, "4779967665672302": 43, "47760307788848877": 43, "4772048890590668": 43, "47680220007896423": 43, "47639501094818115": 43, "47598329186439514": 43, "4755673110485077": 43, "4751465618610382": 43, "4747215211391449": 43, "4742920398712158": 43, "47385817766189575": 43, "47341999411582947": 43, "47297725081443787": 43, "4725303053855896": 43, "47207894921302795": 43, "47162333130836487": 43, "47116345167160034": 43, "470699280500412": 43, "47023090720176697": 43, "54": [43, 54, 56, 61, 79, 80, 84, 89, 168, 237, 238, 243, 258, 287, 293, 314, 369, 375, 387, 397, 407, 523, 632, 636, 637, 647, 660, 679, 682, 739, 740, 741, 759, 828, 831], "4697583019733429": 43, "55": [43, 51, 80, 89, 118, 234, 293, 387, 523, 560, 632, 634, 637, 643, 647, 676, 682, 740, 741, 759, 823], "46928152441978455": 43, "46880054473876953": 43, "4683155119419098": 43, "4678264260292053": 43, "46733325719833374": 43, "46683603525161743": 43, "61": [43, 45, 56, 57, 62, 79, 80, 82, 86, 89, 226, 261, 263, 288, 397, 615, 632, 635, 636, 637, 658, 675, 741, 834], "4663347601890564": 43, "4658295214176178": 43, "465320348739624": 43, "4648073613643646": 43, "46429020166397095": 43, "4637692868709564": 43, "46324464678764343": 43, "4627160429954529": 43, "4621836841106415": 43, "4616474211215973": 43, "46110764145851135": 43, "72": [43, 57, 66, 80, 82, 245, 349, 372, 375, 397, 407, 619, 632, 635, 637, 647, 682, 740, 759], "460563987493515": 43, "4600166976451874": 43, "74": [43, 45, 56, 89, 235, 265, 632, 637, 679], "45946577191352844": 43, "45891112089157104": 43, "45835286378860474": 43, "4577910006046295": 43, "78": [43, 59, 284, 621, 632, 635, 637, 643, 647, 682, 740, 759], "45722562074661255": 43, "45665669441223145": 43, "80": [43, 57, 80, 349, 372, 376, 387, 443, 523, 637, 641, 647, 682, 729, 759, 860], "4560841917991638": 43, "81": [43, 47, 56, 62, 77, 79, 85, 89, 168, 238, 263, 264, 288, 387, 523, 630, 632, 637, 641, 643, 647, 675, 679, 692, 726, 741, 759, 844], "4555082619190216": 43, "45492875576019287": 43, "45434585213661194": 43, "45375964045524597": 43, "4531698524951935": 43, "4525766670703888": 43, "45198020339012146": 43, "4513803720474243": 43, "4507772624492645": 43, "4501707851886749": 43, "4495610296726227": 43, "4489481747150421": 43, "44833192229270935": 43, "4477125108242035": 43, "44708991050720215": 43, "44646409153938293": 43, "44583529233932495": 43, "4452032148838043": 43, "44456806778907776": 43, "4439": 43, "selectbackward0": 43, "ivy_compil": 44, "ic": 44, "numer": [44, 53, 54, 56, 57, 58, 62, 66, 67, 70, 77, 79, 80, 81, 85, 89, 90, 92, 102, 103, 139, 152, 220, 223, 236, 240, 245, 246, 247, 254, 255, 256, 259, 268, 269, 273, 275, 276, 277, 278, 282, 283, 284, 288, 289, 293, 294, 375, 377, 382, 387, 419, 454, 509, 522, 582, 583, 592, 593, 605, 606, 629, 630, 632, 634, 637, 643, 644, 647, 668, 675, 677, 682, 685, 687, 689, 691, 693, 739, 740, 741, 743, 744, 745, 747, 748, 753, 760, 763, 765, 776, 777, 778, 779, 791, 816, 829, 834, 839, 841, 842, 844, 845, 846, 847, 849, 853, 867, 870, 876], "anyth": [44, 57, 80, 387, 528, 529, 820, 833, 844, 845, 870, 871], "affect": [44, 50, 57, 377, 457, 828, 841], "variabl": [44, 46, 47, 49, 57, 58, 59, 65, 74, 80, 81, 82, 88, 122, 123, 125, 322, 369, 375, 376, 382, 387, 421, 447, 510, 521, 522, 538, 562, 563, 564, 565, 568, 595, 616, 617, 619, 621, 622, 623, 628, 634, 635, 637, 640, 642, 686, 715, 716, 717, 737, 773, 784, 789, 791, 792, 793, 794, 795, 796, 797, 820, 825, 829, 832, 836, 839, 840, 844, 845, 849, 852, 853, 854, 855, 856, 863, 871], "original_fn": 44, "100000": 44, "var": [44, 70, 93, 95, 122, 123, 124, 125, 628, 640, 647, 715, 716, 798, 819, 831, 849, 867], "co": [44, 45, 56, 58, 79, 238, 243, 245, 286, 549, 632, 634, 817, 829, 849, 860], "sin": [44, 56, 58, 79, 238, 243, 245, 286, 549, 632, 634, 824, 849], "tan": [44, 56, 79, 536, 632, 634, 832, 836, 837, 840, 841, 849], "comp_fn": 44, "compile_graph": [44, 50], "expected_result": 44, "compiled_result": 44, "irrelev": [44, 828, 829, 831], "opeat": 44, "_layer": [44, 849], "net": [44, 49, 50, 849, 854, 860, 861], "compiled_net": 44, "latest": [45, 47, 56, 57, 79, 80, 155, 243, 253, 254, 269, 335, 336, 372, 375, 378, 387, 419, 421, 492, 522, 630, 632, 637, 639, 647, 685, 686, 714, 764, 792, 812, 818, 819, 820, 823, 825, 828, 832, 834, 845, 855, 856, 864, 875], "pypi": [45, 47, 50, 818, 819, 845, 855], "pkg": [45, 47, 50], "public": [45, 47, 50, 542, 634, 828, 839, 851, 873], "revis": [45, 47, 820], "req": [45, 47], "tabqrujw": 45, "filter": [45, 47, 49, 57, 61, 80, 84, 317, 318, 369, 375, 396, 414, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 778, 792, 812, 825, 828], "quiet": [45, 47], "commit": [45, 47, 815, 816, 818, 821, 823, 831, 843, 844], "f3be3702c9fab1c9fa97c743813a4bdb39525705": 45, "metadata": [45, 47, 50, 840], "setup": [45, 47, 50, 819, 820, 826, 828, 834], "py3": [45, 47, 50], "whl": [45, 46, 47, 50], "cp39": [45, 47], "manylinux_2_12_x86_64": [45, 47], "manylinux2010_x86_64": [45, 47], "manylinux_2_17_x86_64": [45, 47, 819], "manylinux2014_x86_64": [45, 46, 47], "py2": [45, 47], "495": [45, 47], "nvidia_ml_pi": [45, 47], "pypars": [45, 47, 50], "ivy_cor": [45, 47, 50, 819], "1338326": 45, "sha256": [45, 47, 50], "e5c4205c80116b781373daf4502d61881235c5e3eb0d55096ab07dcc6eb66bec": 45, "store": [45, 47, 50, 54, 57, 58, 62, 64, 74, 77, 80, 81, 85, 87, 154, 375, 376, 420, 428, 432, 446, 450, 549, 634, 637, 639, 691, 708, 773, 774, 792, 793, 794, 814, 820, 824, 825, 827, 832, 838, 840, 841, 842, 849, 851, 852, 853, 857, 863], "ephem": [45, 47], "njrc_e6b": 45, "2e": [45, 47], "ae2d7c5ce8708e605368a33e08d57d1de8e107e3db157c3063": [45, 47], "4845": [45, 47], "a8cde63eca203d3bd7f900fa32f44dbd038476606a3836de14caf2b0a5ff7460": 45, "b6": [45, 47], "0d": [45, 47], "0d1bbd99855f99cb2f6c2e5ff96f8023fad8ec367695f7d72d": [45, 47], "uninstal": [45, 47, 50], "vnd": [45, 47, 50], "json": [45, 47, 50, 74, 819, 834, 852], "psst": 45, "pickl": [45, 46, 74, 794, 827, 852], "imageio": 45, "urllib": [45, 50], "_src": 45, "back": [45, 57, 64, 80, 87, 378, 474, 495, 578, 602, 634, 636, 639, 663, 706, 791, 796, 806, 819, 824, 829, 830, 833, 838, 839, 846, 848, 855, 856, 860, 868, 872], "tf_cpp_min_log_level": 45, "mkdir": [45, 46, 47, 819, 828], "perceiv": [45, 46], "touch": 45, "io_processor": 45, "position_encod": 45, "jmp": 45, "tabul": 45, "29359": 45, "29k": 45, "67k": 45, "002": 45, "30179": 45, "47k": 45, "8107": 45, "9k": 45, "92k": 45, "itertool": 45, "preprocessor": 45, "vector": [45, 53, 57, 58, 61, 62, 80, 81, 84, 85, 97, 98, 100, 139, 365, 366, 374, 375, 376, 378, 381, 382, 387, 398, 429, 434, 442, 444, 449, 484, 486, 488, 506, 510, 522, 541, 545, 562, 614, 629, 634, 636, 637, 660, 663, 668, 672, 673, 675, 677, 682, 687, 688, 692, 693, 694, 695, 776, 792, 870], "perceiverbackbon": 45, "input_preprocessor": 45, "_input_preprocessor": 45, "_encod": 45, "__call__": [45, 773, 792, 793, 794, 812, 864], "is_train": 45, "po": [45, 806], "input_mask": 45, "network_input_is_1d": 45, "_input_is_1d": 45, "queri": [45, 46, 61, 74, 84, 198, 212, 555, 581, 631, 634, 636, 663, 666, 792, 827, 829, 834, 851, 870], "decod": [45, 852], "cross": [45, 47, 62, 63, 85, 86, 98, 637, 638, 696, 697, 698, 812, 828, 829], "attend": [45, 636, 663], "encoder_queri": 45, "latent": [45, 640, 716, 717], "imagepreprocessor": 45, "deal": [45, 794, 816, 830, 837, 839, 841, 844, 855], "image_s": 45, "fourier_pos_config": 45, "position_encoding_typ": 45, "fourier": [45, 57, 80, 375, 398, 403, 404, 408, 409, 419, 420, 423, 549, 634], "fourier_position_encoding_kwarg": 45, "concat_po": 45, "max_resolut": 45, "num_band": [45, 58, 81, 549, 634], "sine_onli": 45, "prep_typ": 45, "spatial_downsampl": 45, "cross_attend_widening_factor": 45, "cross_attention_shape_for_attn": 45, "kv": 45, "dropout_prob": 45, "num_block": 45, "num_cross_attend_head": 45, "num_self_attend_head": 45, "num_self_attends_per_block": 45, "num_z_channel": 45, "self_attend_widening_factor": 45, "use_query_residu": 45, "z_index_dim": 45, "z_pos_enc_init_scal": 45, "perceiver_backbon": [45, 812], "perceiverencod": 45, "At": [45, 818, 819, 820, 823, 834, 844, 845, 860, 870], "publish": [45, 812, 855, 861, 864], "thankfulli": [45, 844], "perceiver_io": [45, 46], "imagenet_fourier_position_encod": 45, "pystat": 45, "imagenet_checkpoint": 45, "rb": 45, "ckpt": 45, "09": [45, 51, 56, 82, 89, 118, 278, 288, 615, 626, 632, 635, 740], "173": [45, 62, 637, 675], "194": 45, "125": [45, 57, 62, 85, 234, 346, 372, 377, 453, 632, 637, 692], "177": [45, 47], "193776248": 45, "185m": 45, "octet": 45, "184": 45, "80m": 45, "144mb": 45, "144": 45, "mean_rgb": 45, "stddev_rgb": 45, "im": 45, "denorm": 45, "resize_and_center_crop": 45, "crop": [45, 57, 80, 375, 404, 409, 420], "center": [45, 791], "image_height": [45, 47, 812], "image_width": [45, 812], "padded_center_crop_s": 45, "offset_height": 45, "offset_width": 45, "crop_window": 45, "inter_cub": 45, "ye": [45, 855], "dummy_input": [45, 812], "transpili": 45, "torch_perceiver_backbon": 45, "quicker": 45, "params_v": [45, 812, 864], "perceiverioclassifi": [45, 812], "max_pool": [45, 812], "Of": [45, 824, 840, 841, 852, 875, 876], "cours": [45, 819, 820, 823, 824, 831, 840, 841, 847, 852, 855, 875, 876], "468": 45, "huggingface_hub": 45, "multiprocess": [45, 74, 103, 634, 852, 855], "py39": 45, "132": [45, 80], "pyarrow": 45, "xxhash": 45, "212": [45, 57, 61, 80, 359, 372, 660], "pyyaml": 45, "2021": [45, 57, 80, 362, 372, 812], "aiohttp": 45, "async": 45, "timeout": [45, 74, 103, 586, 609, 634, 846], "0a3": 45, "async_timeout": 45, "frozenlist": 45, "manylinux_2_5_x86_64": [45, 50], "manylinux1_x86_64": [45, 50], "158": 45, "attr": [45, 829], "aiosign": 45, "multidict": 45, "114": [45, 375, 397, 407], "yarl": 45, "264": [45, 641, 718], "2022": [45, 46], "pytz": 45, "2020": [45, 823, 870], "dateutil": [45, 50], "wikiart": 45, "paint": [45, 812, 849, 859], "load_dataset": [45, 863, 864], "n_sampl": [45, 57, 80, 376, 378, 425, 433, 487], "10000": [45, 47, 53, 76, 138, 629], "huggan": 45, "split": [45, 46, 47, 51, 56, 57, 64, 73, 74, 79, 80, 87, 110, 111, 112, 113, 114, 115, 116, 117, 118, 211, 212, 213, 291, 295, 300, 301, 303, 348, 355, 367, 378, 470, 479, 499, 545, 572, 626, 631, 632, 634, 636, 639, 649, 656, 657, 711, 773, 788, 792, 812, 813, 820, 828, 848, 849, 855, 877], "wiki_art": 45, "gib": 45, "unknown": [45, 776], "huggan___parquet": 45, "36ee951979f9b56c": 45, "2a3b91fbd88a2c90d1dbbb32b460cf621d31bd5b05b934492fdef7d8d6f236ec": 45, "parquet": 45, "subsequ": [45, 801, 819, 824, 828, 829, 831, 836, 837, 840, 844, 853, 871], "reus": [45, 53, 76, 80, 87, 128, 462, 463, 470, 472, 474, 475, 476, 483, 499, 702, 703, 704, 706, 708, 709, 711, 713, 833, 844, 875], "curl": [45, 819], "2fwikiart": 45, "xferd": 45, "dload": 45, "upload": [45, 844], "spent": [45, 861], "25936": 45, "278k": 45, "abstract_expression": 45, "action_paint": 45, "analytical_cub": 45, "art_nouveau": 45, "baroqu": 45, "color_field_paint": 45, "contemporary_r": 45, "cubism": 45, "early_renaiss": 45, "expression": 45, "fauvism": 45, "high_renaiss": 45, "impression": 45, "mannerism_late_renaiss": 45, "minim": [45, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 369, 375, 377, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 683, 684, 685, 687, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 806, 832, 840, 842, 847, 849, 863, 868, 876], "naive_art_primitiv": 45, "new_real": 45, "northern_renaiss": 45, "pointil": 45, "pop_art": 45, "post_impression": 45, "realism": 45, "rococo": 45, "romantic": 45, "symbol": [45, 805, 818, 819, 870, 871], "synthetic_cub": 45, "ukiyo_": 45, "custom": [45, 57, 80, 299, 311, 364, 367, 374, 776, 805, 814, 822, 828, 833, 838, 842, 844, 847, 853, 860, 870, 874, 875, 876], "hugginfac": 45, "customdataset": 45, "__len__": [45, 827], "__getitem__": [45, 74, 827], "idx": [45, 46, 47, 535, 634, 812, 830, 851], "random_split": 45, "224x224": 45, "val_siz": 45, "dataset_train": 45, "dataset_v": 45, "dataset_test": 45, "dataloader_train": 45, "dataloader_v": 45, "dataloader_test": 45, "batch": [45, 46, 47, 57, 58, 62, 74, 80, 81, 85, 211, 212, 375, 376, 377, 381, 389, 391, 392, 398, 411, 421, 438, 452, 454, 501, 502, 503, 506, 549, 552, 553, 614, 631, 634, 636, 637, 640, 642, 660, 661, 662, 663, 694, 715, 716, 717, 737, 776, 792, 795, 812, 827, 837, 842, 852, 868], "train_featur": 45, "train_label": 45, "imshow": [45, 46], "001": [45, 56, 57, 65, 77, 80, 82, 165, 263, 280, 338, 351, 372, 616, 630, 632, 635, 642, 737, 776, 852, 853], "train_step": 45, "running_loss": [45, 47, 812], "last_loss": 45, "training_load": 45, "intra": 45, "report": [45, 815, 818, 844], "zero_grad": 45, "999": [45, 59, 79, 82, 291, 615, 616, 621, 623, 632, 635, 796, 853], "epoch_numb": 45, "best_vloss": 45, "1_000_000": 45, "running_vloss": 45, "vdata": 45, "vinput": 45, "vlabel": 45, "voutput": 45, "vloss": 45, "avg_vloss": 45, "model_path": 45, "model_": 45, "state_dict": [45, 793, 794], "highest": [45, 57, 66, 80, 89, 319, 322, 369, 643, 739, 829], "energi": 45, "augment": 45, "mayb": [45, 46, 52, 812, 819, 828, 849, 851], "finetun": 45, "deploi": [45, 812, 828, 857, 864, 868, 869, 870, 872, 876], "percieverio": 46, "ai": [46, 828, 868, 872], "contribut": [46, 57, 80, 387, 525, 815, 817, 819, 820, 821, 826, 834, 835, 841, 842, 849, 856, 863, 874, 878], "invit": [46, 818, 821, 841, 847], "g4ar9q7dtn": 46, "step1": 46, "printf": 46, "8packag": 46, "share": [46, 74, 186, 630, 776, 777, 812, 825, 827, 831, 837, 839, 841, 842, 844, 847, 849, 860, 868, 869, 876], "googledr": 46, "10_wfp1u4rmzc20eignrdqa9v2s9byjwv": 46, "file_id": 46, "drive": [46, 47], "uc": 46, "tee": [46, 819], "file_id_wget_cmd": 46, "perl": 46, "pe": 46, "g": [46, 48, 49, 57, 66, 68, 70, 72, 80, 89, 95, 97, 151, 180, 193, 240, 253, 273, 280, 283, 335, 336, 372, 375, 376, 378, 382, 387, 412, 414, 451, 492, 508, 509, 510, 511, 512, 523, 524, 630, 631, 632, 637, 641, 643, 645, 647, 673, 674, 678, 685, 687, 688, 694, 721, 725, 727, 730, 735, 739, 740, 741, 749, 750, 751, 752, 757, 758, 760, 762, 763, 765, 791, 810, 813, 818, 819, 822, 823, 825, 826, 827, 839, 841, 844, 849, 855, 857, 861, 866], "uuid": 46, "anywai": [46, 824, 838, 841], "bin": [46, 57, 80, 387, 520, 525, 819, 820, 823, 827], "bash": [46, 819, 820, 823], "step2": 46, "interpret": [46, 53, 57, 76, 80, 127, 128, 134, 140, 377, 387, 454, 522, 629, 828, 871], "sudo": [46, 819], "apt": [46, 819], "yf": 46, "step3": 46, "delet": [46, 820, 828], "xvzf": 46, "rm": [46, 48, 814, 820], "step4": 46, "symlink": 46, "unzip": [46, 47], "fr": 46, "l": [46, 57, 62, 79, 85, 267, 376, 377, 429, 452, 636, 637, 663, 667, 672, 673, 674, 677, 691, 820, 822], "ln": 46, "sf": 46, "la": 46, "step5": 46, "step6": 46, "ipkykernel": 46, "step7": 46, "engbjapanpython3": 46, "ipykernel": 46, "reconnect": 46, "sy": [46, 878], "oct": 46, "gcc": [46, 868, 875], "lf": 46, "upgrad": 46, "cuda11": 46, "cudnn805": 46, "cp38": [46, 50, 819], "helper": [46, 771, 773, 774, 780, 782, 783, 812, 816, 826, 829, 833, 834, 843, 852, 857], "feedforward": 46, "prenorm": 46, "perceiveriospec": 46, "fetch": [46, 557, 634, 819, 820, 823, 828], "ogbanugot": [46, 878], "xmartlab": 46, "caffeflow": 46, "fetch_class": 46, "class_label": 46, "ground_truth": 46, "127": [46, 54, 57, 62, 77, 80, 168, 359, 372, 630, 637, 675], "path_to_imag": 46, "get_imag": 46, "spine": 46, "set_vis": 46, "bottom": [46, 545, 634, 818, 819, 828, 834, 876], "tick_param": 46, "set_xticklabel": 46, "set_yticklabel": 46, "show_result": 46, "listdir": [46, 47], "endswith": 46, "this_dir": 46, "dirnam": 46, "join": [46, 47, 64, 74, 80, 87, 468, 469, 639, 700, 710, 812, 821], "add_subplot": 46, "xtick": 46, "ytick": 46, "green": [46, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 811, 818, 819, 820], "red": 46, "perceiver_io_img_classif": 46, "normalize_imag": 46, "batch_shap": [46, 61, 66, 76, 84, 89, 132, 141, 629, 636, 637, 643, 662, 666, 695, 738, 792, 847, 849, 851], "img_dim": 46, "queries_dim": 46, "learn_queri": 46, "load_weight": 46, "num_input_ax": 46, "network_depth": 46, "num_lat_att_per_lay": 46, "query_shap": 46, "num_fourier_freq_band": 46, "weight_fpath": 46, "pretrained_weight": 46, "isfil": 46, "noinspect": [46, 851], "pybroadexcept": 46, "from_disk_as_pickl": 46, "action": [46, 810, 817, 828, 831, 835, 844], "fail": [46, 771, 816, 819, 820, 823, 828, 829, 831, 835, 838, 840, 841, 842], "placehold": [46, 641, 725, 730, 735, 792, 820, 824, 836, 857], "pyunboundlocalvari": 46, "max_fourier_freq": 46, "random_uniform": [46, 50, 66, 89, 643, 812, 830, 833, 844, 849, 853], "817437": 46, "gpu_bfc_alloc": 46, "orig_valu": 46, "tf_force_gpu_allow_growth": 46, "autograd": [46, 855], "declar": [46, 820, 843], "_3r2_73j": 47, "0edf8c1e8ea835f4c456bdf89737d89032f50b5a": 47, "1297564": 47, "05fcafac1e19fec835a9ac61270b3ac6039a5095f6b0f9fde20bacc2a5abba45": 47, "le3bu3_v": 47, "cc6508f5d7e25538c5df5fdae52a41d2bf17b9a517aedd125cfca913bb5b259b": 47, "third": [47, 97, 98, 378, 471, 498, 637, 645, 687, 749, 826, 829, 840, 855, 869, 870, 876], "parti": [47, 826, 829, 855, 860, 869, 870, 876], "mount": [47, 814, 820], "mydriv": 47, "chdir": 47, "kaggl": 47, "medium": 47, "articl": [47, 812, 835], "insert": [47, 57, 67, 80, 90, 378, 459, 469, 639, 641, 644, 646, 702, 722, 723, 744, 755, 828, 835], "www": [47, 335, 336, 372], "your_kaggle_usernam": 47, "competit": 47, "digit": 47, "zip": [47, 849], "readabl": [47, 824, 827, 833, 835, 836, 844, 845, 851, 852], "chmod": [47, 819, 828], "recent": [47, 809, 819, 820, 844, 859, 860], "forc": [47, 826, 828, 830], "archiv": [47, 819], "inflat": [47, 829], "sample_submiss": 47, "later": [47, 74, 539, 634, 818, 835, 840, 844, 845, 870], "my": [47, 828], "label_df": 47, "mod_train": 47, "data_valu": 47, "test_data_valu": 47, "correct_label": 47, "train_path": 47, "str": [47, 49, 52, 53, 57, 58, 61, 62, 63, 64, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 123, 125, 134, 136, 139, 141, 143, 149, 150, 153, 155, 157, 158, 159, 160, 164, 165, 168, 169, 170, 171, 172, 173, 175, 177, 180, 181, 182, 183, 184, 185, 192, 193, 213, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 375, 376, 377, 378, 381, 387, 390, 394, 395, 396, 398, 399, 400, 401, 403, 404, 408, 409, 412, 413, 414, 415, 417, 418, 419, 420, 422, 423, 426, 430, 445, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 467, 468, 469, 474, 490, 492, 493, 494, 495, 496, 501, 502, 503, 504, 505, 507, 509, 511, 522, 523, 524, 525, 532, 534, 535, 537, 538, 540, 541, 543, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 573, 576, 577, 579, 580, 589, 591, 592, 593, 595, 597, 599, 600, 613, 617, 624, 628, 629, 630, 631, 634, 635, 636, 637, 638, 639, 640, 641, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 688, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 715, 716, 717, 724, 725, 730, 735, 738, 739, 740, 741, 743, 746, 749, 750, 751, 753, 757, 758, 759, 761, 763, 764, 766, 767, 768, 773, 774, 776, 777, 782, 784, 792, 794, 795, 805, 806, 810, 829, 830, 833, 837, 840, 841, 845, 849, 854, 863, 864, 865], "makedir": 47, "valid_path": 47, "28x28": 47, "pic": 47, "int8": [47, 54, 66, 76, 77, 89, 134, 161, 166, 168, 169, 173, 629, 630, 739, 776, 777, 829, 844], "new_img": [47, 49], "builder": [47, 814], "batchwis": 47, "subset": [47, 778, 824, 828, 832, 836, 839, 841, 844, 849, 870], "goe": [47, 378, 467, 822, 835, 840, 847], "seed_valu": [47, 74, 643, 742], "randomize_dataset": 47, "create_dataset": 47, "num_examples_per_class": 47, "img_arrai": 47, "class_nam": [47, 773], "dir": [47, 852], "img_path": 47, "imread": [47, 49, 852], "imread_grayscal": 47, "generate_batch": [47, 812], "dataset_s": [47, 812], "ivyerror": [47, 807, 812, 833], "smaller": [47, 57, 64, 70, 80, 87, 302, 334, 351, 367, 372, 375, 377, 387, 404, 409, 420, 452, 522, 523, 524, 545, 634, 639, 647, 699, 707, 757, 758, 763, 765, 812, 820, 833, 849], "yield": [47, 67, 320, 321, 369, 378, 484, 644, 748, 812, 828], "x_batch_inst": 47, "form": [47, 49, 52, 53, 57, 62, 74, 76, 85, 96, 97, 98, 127, 128, 140, 145, 146, 312, 315, 329, 338, 369, 372, 376, 378, 429, 440, 471, 480, 484, 500, 535, 596, 598, 629, 634, 636, 637, 641, 667, 669, 671, 672, 673, 674, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 691, 719, 730, 776, 791, 813, 818, 819, 837, 844, 847, 853, 854, 860, 870, 871, 876], "intialis": 47, "num_epoch": [47, 812], "inherit": [47, 824, 827, 833, 851, 855, 857], "creation": [47, 57, 74, 80, 103, 826, 829, 830, 836, 838, 841, 842, 844, 845, 849, 863, 870, 872, 876], "inform": [47, 49, 54, 57, 59, 77, 82, 165, 168, 319, 369, 535, 624, 630, 634, 635, 640, 717, 810, 812, 817, 818, 819, 820, 821, 823, 827, 828, 833, 837, 838, 840, 842, 844, 873], "insid": [47, 62, 85, 103, 378, 494, 637, 680, 774, 819, 820, 824, 827, 829, 830, 834, 837, 838, 844, 845, 863, 876], "ivynet": [47, 812], "h_w": [47, 812], "input_channel": [47, 792, 812, 849, 853], "output_channel": [47, 792, 812, 853], "gelu": [47, 48, 51, 73, 626, 788, 812], "image_widht": 47, "start_dim": [47, 57, 80, 378, 474, 812], "end_dim": [47, 57, 80, 378, 474, 812], "gpu_is_avail": [47, 631, 812], "120": [47, 70, 93, 103, 637, 682, 757, 812], "__name__": [47, 48, 50, 601, 634, 833], "heavi": [47, 778, 819, 841, 842, 847, 871], "lift": [47, 842, 871], "num_correct": [47, 812], "y_pred": 47, "epoch_loss": [47, 812], "field": [47, 62, 68, 85, 91, 376, 378, 429, 498, 637, 645, 672, 673, 684, 685, 687, 749, 750, 751, 828, 868, 876], "training_accuraci": [47, 812], "train_loss": 47, "train_correct": [47, 812], "train_loop": [47, 812], "leav": [47, 52, 57, 75, 77, 79, 80, 81, 84, 85, 87, 93, 103, 165, 168, 240, 297, 300, 301, 307, 378, 468, 469, 474, 486, 487, 488, 504, 505, 507, 523, 524, 529, 549, 597, 639, 641, 655, 666, 671, 687, 701, 705, 710, 712, 713, 718, 719, 728, 729, 730, 731, 757, 758, 805, 812, 818, 827, 828, 829, 831, 832, 836, 837, 840, 841, 844, 852, 853], "xbatch": [47, 812], "ybatch": [47, 812], "to_devic": [47, 55, 78, 196, 631, 794, 812], "entropi": [47, 63, 86, 638, 696, 697, 698, 812], "hot": [47, 53, 76, 141, 629, 812], "ybatch_encod": [47, 812], "one_hot": [47, 53, 76, 629, 812, 854], "loss_prob": [47, 812], "ret_grad_idx": [47, 617, 635, 773, 839], "xs_grad_idx": [47, 617, 635, 773, 839], "batch_loss": [47, 812], "set_descript": [47, 812], "set_postfix": [47, 812], "accuracy_percentag": [47, 812], "naverag": [47, 812], "6f": [47, 812], "_train_summari": 47, "writer": 47, "writerow": 47, "157it": 47, "06it": 47, "475401": 47, "11it": 47, "081436": 47, "13it": 47, "0187": 47, "029279": 47, "0324": 47, "008382": 47, "07it": 47, "00456": 47, "003816": 47, "82it": 47, "00277": 47, "002179": 47, "05it": 47, "00175": 47, "001569": 47, "00147": 47, "09it": 47, "00128": 47, "001005": 47, "106": 47, "10it": 47, "00112": 47, "000837": 47, "129": [47, 636, 655, 657], "12it": 47, "000989": 47, "000709": 47, "145": 47, "000873": 47, "000606": 47, "08it": 47, "000774": 47, "000524": 47, "000688": 47, "000455": 47, "000613": 47, "000398": 47, "000547": 47, "000350": 47, "205": 47, "000488": 47, "000308": 47, "218": 47, "000437": 47, "000273": 47, "000391": 47, "000243": 47, "238": [47, 247, 632], "98it": 47, "000351": 47, "000216": 47, "260": 47, "plot_summari": 47, "whitegrid": 47, "nrow": 47, "ncol": 47, "fontweight": 47, "bold": 47, "set_xlabel": 47, "set_ylabel": 47, "savefig": 47, "summary_plot": 47, "png": [47, 49, 50, 852], "save_weight": [47, 794], "model_param": 47, "ivynet_weight": 47, "hdf5": [47, 74, 794, 852], "deitimageprocessor": 48, "tfdeitforimageclassif": 48, "tfdeitforimageclassificationwithteach": 48, "distillation_classifi": 48, "cls_classifi": 48, "randomli": [48, 375, 399, 400, 401, 636, 659, 776, 777, 778, 779, 784, 792], "henc": [48, 68, 223, 338, 372, 632, 639, 645, 702, 749, 750, 751, 752, 801, 819, 827, 828, 829, 840, 844], "image_processor": [48, 863, 864], "distil": [48, 871], "patch16": 48, "outputs_from_original_model": 48, "bertforsequenceclassif": 48, "bertforpretrain": 48, "NOT": [48, 268, 632, 805, 818], "probabl": [48, 57, 61, 63, 66, 80, 84, 86, 89, 375, 377, 382, 387, 399, 400, 401, 454, 508, 522, 525, 529, 636, 638, 643, 659, 663, 666, 696, 738, 778, 791, 792, 812, 844, 856, 861], "ptarmigan": 48, "rf": [48, 820], "branch": [48, 228, 240, 243, 245, 273, 285, 286, 287, 290, 632, 819, 820, 823, 828, 835, 855, 863, 870], "moduleconvert": [48, 789, 794], "mc": 48, "from_keras_modul": [48, 789], "compiled_func": 48, "return_graph": [48, 50], "compiled_output": 48, "diverg": [48, 57, 80, 247, 377, 454, 632], "_all_funct": [48, 50], "convert_to_tensor_v2_with_dispatch": 48, "transpose_v2": 48, "convolution_v2": 48, "bias_add": 48, "binary_op_wrapp": 48, "cast": [48, 54, 56, 57, 62, 70, 77, 79, 85, 93, 152, 155, 180, 274, 387, 523, 524, 630, 632, 637, 647, 678, 694, 757, 758, 761, 763, 765, 777, 837, 842, 849, 867], "moments_v2": 48, "batch_norm": [48, 50, 57, 80, 381], "tensordot": [48, 62, 85, 637, 806, 829], "softmax_v2": 48, "_slice_help": 48, "save_to_disk": [48, 50, 794], "12265048989200113": 48, "11038777417100028": 48, "1167045795539998": 48, "ivy_api_kei": 49, "obj": [49, 127, 128, 557, 629, 634, 863, 864, 865], "combo": [49, 852], "permit": [49, 824, 836, 841, 844, 847], "usabl": [49, 836, 845], "neither": [49, 223, 240, 247, 273, 632, 637, 689, 828, 841, 847], "nor": [49, 223, 240, 247, 273, 632, 828, 841, 874], "specifc": 49, "invoc": 49, "externally_link": 49, "logo": 49, "patch": [49, 291, 632, 829, 870], "cv2_imshow": 49, "envrion": 49, "canni": 49, "original_img": 49, "fn_arg": 49, "dilate_edg": 49, "morphologi": 49, "hk_model": 49, "resnet18": [49, 50], "keras_model": 49, "odsc": 49, "talk": [49, 875], "228": 50, "352": [50, 84, 636, 660, 833], "nvidia_ml_py3": 50, "19190": 50, "241af6b4a51197474b0da3ee7bfa32d847756c8f0d93b51448655d6458312714": 50, "b9": 50, "b1": [50, 637, 686], "cb4feab29709d4155310d29a421389665dcab9eb3b679b527b": 50, "cycler": 50, "fonttool": 50, "965": 50, "pillow": 50, "kiwisolv": 50, "show_graph": [50, 794], "to_ivy_modul": [50, 789, 854], "image_dim": 50, "v0": [50, 853], "urlerror": 50, "dev_str": 50, "comp_network": 50, "time_chronolog": 50, "ret0_nc": 50, "ret1_nc": 50, "ret0_c": 50, "ret1_c": 50, "pytorch_vision_v0": 50, "distribut": [50, 57, 63, 66, 80, 86, 89, 375, 376, 377, 382, 399, 400, 401, 434, 445, 451, 454, 456, 457, 459, 508, 509, 510, 511, 512, 638, 643, 696, 697, 698, 738, 739, 740, 741, 743, 791, 792, 818, 819, 828, 830, 855, 870, 873], "distributed_c10d": 50, "262": 50, "reduce_op": 50, "reduceop": 50, "004645566477999864": 50, "0044566806820000695": 50, "attribut": [50, 74, 165, 166, 167, 168, 199, 200, 208, 550, 551, 630, 631, 634, 774, 825, 826, 827, 832, 833, 837, 838, 840, 841, 847, 850, 851, 852, 853], "definit": [50, 56, 62, 79, 85, 292, 632, 637, 667, 812, 816, 820, 824, 829, 834, 837, 851, 864], "max_pool2d": [50, 57, 80, 375, 395], "__iadd__": 50, "adaptive_avg_pool2d": [50, 57, 80, 375], "_arraywithactiv": [51, 102], "abc": [51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 106, 548, 634, 641, 736, 791, 796, 805, 806, 851], "_abc_impl": [51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 106, 107], "_abc": [51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 106, 107], "_abc_data": [51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 106, 107], "approxim": [51, 56, 57, 62, 73, 79, 80, 85, 97, 100, 110, 221, 222, 225, 226, 227, 228, 237, 238, 243, 245, 247, 261, 262, 263, 264, 278, 285, 286, 290, 291, 292, 349, 359, 372, 377, 456, 457, 626, 632, 637, 680, 683, 788, 832, 841], "complex_mod": [51, 56, 57, 73, 79, 80, 110, 111, 112, 113, 114, 115, 116, 117, 118, 291, 295, 300, 301, 303, 367, 626, 632, 788, 838], "variant": [51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 138, 139, 140, 141, 143, 145, 146, 149, 153, 154, 155, 165, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 375, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 615, 616, 619, 621, 622, 623, 624, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 683, 684, 685, 687, 691, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 824, 831, 832, 847], "docstr": [51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 110, 111, 112, 113, 114, 115, 116, 117, 118, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 153, 154, 155, 165, 168, 172, 173, 180, 197, 214, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 322, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 372, 375, 378, 387, 394, 395, 396, 397, 399, 400, 401, 403, 407, 408, 409, 412, 413, 414, 418, 419, 422, 423, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 540, 541, 544, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 566, 568, 569, 571, 576, 577, 591, 592, 593, 594, 595, 597, 599, 600, 613, 614, 615, 616, 619, 621, 622, 623, 624, 629, 630, 632, 634, 637, 639, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 817, 818, 822, 826, 835, 836, 837, 838, 841, 843, 845], "liter": [51, 56, 57, 62, 73, 79, 80, 85, 110, 111, 112, 113, 114, 115, 116, 117, 118, 291, 295, 300, 301, 303, 367, 375, 376, 378, 381, 397, 407, 411, 419, 434, 440, 445, 448, 451, 484, 506, 626, 632, 637, 646, 678, 694, 755, 788, 847], "magnitud": [51, 56, 57, 73, 79, 80, 110, 111, 112, 113, 114, 115, 116, 117, 118, 220, 223, 240, 247, 273, 291, 295, 300, 301, 303, 367, 626, 632, 637, 687, 688, 788, 829], "handle_complex_input": [51, 56, 57, 73, 79, 80, 110, 111, 112, 113, 114, 115, 116, 117, 118, 291, 295, 300, 301, 303, 367, 626, 632, 788, 838], "element": [51, 53, 56, 57, 58, 61, 62, 64, 66, 67, 68, 70, 73, 74, 76, 77, 79, 80, 81, 84, 85, 87, 89, 90, 91, 93, 98, 102, 103, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 126, 129, 135, 136, 145, 146, 147, 163, 165, 168, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 303, 305, 306, 307, 309, 310, 311, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 367, 369, 372, 375, 376, 377, 378, 387, 388, 399, 400, 401, 404, 409, 412, 413, 414, 418, 420, 421, 422, 428, 429, 430, 452, 462, 463, 464, 474, 475, 476, 478, 481, 491, 492, 494, 496, 498, 520, 521, 523, 524, 525, 526, 527, 528, 530, 531, 533, 537, 540, 541, 552, 553, 569, 571, 591, 592, 593, 595, 599, 600, 626, 629, 632, 634, 636, 637, 639, 641, 643, 644, 645, 646, 647, 648, 659, 668, 670, 672, 673, 677, 682, 684, 685, 687, 691, 699, 702, 703, 704, 705, 706, 707, 708, 709, 718, 721, 727, 738, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 776, 778, 792, 806, 832, 842, 844, 847, 849, 874], "138": [51, 110, 626], "165": [51, 110, 626, 636, 660], "hardswish": [51, 57, 73, 80, 298, 367, 626, 788], "leaky_relu": [51, 73, 80, 295, 626, 777], "alpha": [51, 56, 57, 73, 79, 80, 107, 112, 223, 289, 295, 296, 304, 308, 314, 367, 369, 376, 381, 382, 430, 506, 509, 510, 511, 626, 632, 788, 836, 841, 842], "float": [51, 53, 54, 56, 57, 58, 59, 61, 62, 63, 65, 66, 68, 70, 73, 76, 77, 79, 80, 81, 82, 84, 85, 86, 88, 89, 93, 97, 100, 102, 112, 118, 126, 127, 128, 130, 132, 134, 135, 136, 137, 138, 142, 143, 148, 152, 156, 160, 165, 169, 173, 179, 180, 183, 189, 198, 207, 211, 212, 215, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 251, 253, 254, 255, 256, 257, 259, 261, 262, 263, 264, 265, 266, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 302, 304, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 319, 334, 335, 336, 337, 345, 346, 351, 353, 354, 357, 358, 359, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 387, 390, 399, 400, 401, 418, 419, 426, 429, 430, 432, 445, 449, 451, 452, 453, 457, 458, 473, 491, 501, 502, 503, 506, 507, 508, 509, 510, 511, 512, 522, 523, 524, 525, 530, 531, 532, 539, 540, 541, 549, 558, 582, 583, 586, 592, 593, 613, 615, 616, 619, 621, 622, 623, 626, 627, 629, 630, 631, 632, 634, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 647, 659, 661, 663, 666, 667, 669, 672, 673, 674, 676, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 691, 694, 696, 697, 698, 715, 716, 717, 724, 737, 740, 741, 747, 749, 750, 751, 752, 757, 758, 760, 761, 762, 763, 764, 765, 766, 773, 776, 777, 779, 788, 791, 792, 795, 796, 810, 816, 823, 827, 829, 832, 833, 834, 836, 837, 839, 840, 842, 844, 845, 847, 849, 851, 853], "slope": [51, 57, 73, 80, 112, 295, 296, 302, 304, 308, 367, 626, 788], "leaki": [51, 73, 112, 626, 788], "log_softmax": [51, 73, 626, 788], "0719": [51, 73, 113], "221": [51, 113], "mish": [51, 73, 626, 788], "30340147": [51, 114, 626], "86509842": [51, 73, 114, 626], "269": [51, 116], "881": [51, 56, 79, 116, 226, 239, 279, 632], "422": [51, 117, 626], "155": [51, 84, 117, 626, 636, 660], "softplu": [51, 73, 626, 788, 847], "beta": [51, 57, 65, 73, 80, 88, 118, 304, 308, 314, 317, 318, 367, 369, 376, 377, 381, 382, 430, 458, 506, 510, 511, 626, 642, 737, 788, 847], "threshold": [51, 56, 57, 73, 79, 80, 118, 271, 272, 311, 337, 367, 372, 377, 378, 453, 458, 491, 626, 632, 788, 847], "union": [51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 367, 369, 372, 373, 375, 376, 377, 378, 381, 382, 383, 385, 387, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 554, 555, 556, 558, 560, 561, 562, 564, 565, 568, 569, 571, 572, 576, 577, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 626, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 725, 726, 727, 729, 730, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 776, 791, 796, 797, 824, 827, 829, 830, 831, 833, 836, 837, 840, 845, 847, 849, 854, 863, 864, 865], "3461": [51, 73, 118, 626], "6491": [51, 73, 118, 626], "_array_to_new_backend": 52, "_to_ivi": 52, "_to_n": 52, "to_ignor": [52, 72, 95, 641, 729, 730], "_to_new_backend": 52, "args_to_ivi": 52, "include_deriv": [52, 75, 641, 719, 730, 773], "nest": [52, 74, 75, 103, 106, 243, 567, 597, 614, 617, 632, 634, 635, 640, 715, 716, 718, 719, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 796, 824, 826, 827, 837, 839, 845, 852, 853, 855, 857, 870], "unchang": [52, 56, 375, 378, 420, 474, 636, 659], "deriv": [52, 53, 57, 59, 75, 76, 80, 82, 131, 136, 143, 149, 313, 317, 342, 369, 372, 615, 616, 619, 620, 621, 622, 623, 629, 635, 640, 641, 717, 719, 730, 794, 796, 797, 829, 830, 851, 853], "word": [52, 126, 378, 477, 629, 643, 741, 789, 792, 827, 840, 841, 857], "args_to_n": [52, 840], "cont_inplac": 52, "decid": [52, 74, 641, 729, 730, 812, 818, 819, 829, 847], "args_to_new_backend": 52, "shallow": [52, 641, 725, 726, 730, 735, 736], "nativevari": 52, "mutabl": [52, 641, 719, 725, 726, 730, 735, 736, 825], "to_ivi": [52, 75, 641, 731, 840], "leaf": [52, 74, 81, 93, 103, 548, 641, 728, 729, 731, 758, 827, 837, 852], "travers": [52, 75, 641, 722, 730, 827, 829, 833, 849], "lowest": [52, 57, 66, 75, 80, 89, 387, 525, 641, 643, 730, 739, 806, 837, 855, 857, 867, 871, 875], "search": [52, 57, 75, 80, 744, 745, 784, 817, 819, 827, 831, 834, 844, 845, 859], "to_new_backend": 52, "_arraywithcr": [53, 102], "boolean": [53, 54, 56, 57, 58, 64, 67, 70, 74, 76, 77, 79, 80, 81, 87, 90, 93, 102, 103, 123, 125, 127, 128, 129, 135, 152, 168, 170, 172, 173, 176, 192, 202, 210, 216, 230, 231, 232, 233, 234, 235, 267, 268, 269, 270, 335, 336, 351, 372, 376, 378, 434, 445, 451, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 492, 499, 534, 537, 548, 555, 558, 559, 563, 564, 565, 566, 567, 568, 569, 578, 581, 584, 585, 587, 588, 613, 628, 629, 630, 631, 632, 634, 636, 639, 640, 641, 644, 647, 663, 702, 703, 704, 706, 708, 709, 711, 713, 715, 716, 728, 746, 747, 748, 760, 762, 776, 777, 778, 779, 784, 795, 827, 829, 837, 841, 844, 847], "never": [53, 57, 64, 76, 80, 87, 128, 378, 462, 463, 464, 470, 472, 474, 475, 476, 479, 483, 490, 499, 555, 634, 639, 702, 703, 704, 706, 708, 709, 711, 713, 820, 829, 840, 841, 844], "valueerror": [53, 57, 64, 76, 80, 87, 91, 128, 375, 377, 409, 420, 457, 462, 463, 470, 472, 474, 475, 476, 483, 499, 639, 702, 703, 704, 706, 708, 709, 711, 713, 752, 778, 807, 833], "buffer": [53, 76, 80, 87, 128, 134, 462, 463, 470, 472, 474, 475, 476, 483, 499, 629, 702, 703, 704, 706, 708, 709, 711, 713, 793, 794, 840, 855], "nativedtyp": [53, 54, 57, 61, 62, 66, 67, 70, 76, 80, 85, 89, 90, 93, 126, 127, 128, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 148, 149, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 169, 170, 174, 176, 178, 182, 192, 312, 313, 314, 315, 316, 317, 318, 333, 340, 356, 369, 372, 382, 387, 508, 509, 510, 511, 512, 522, 523, 524, 525, 528, 531, 629, 630, 636, 637, 643, 644, 646, 647, 659, 678, 694, 739, 740, 741, 744, 745, 755, 757, 758, 761, 763, 765, 791, 829, 830, 836, 845, 849], "datatyp": [53, 57, 74, 76, 80, 128, 136, 140, 157, 178, 182, 375, 423, 629, 630, 771, 845, 863], "nativedevic": [53, 55, 57, 66, 76, 78, 80, 89, 126, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 147, 148, 149, 194, 195, 196, 197, 198, 201, 206, 207, 208, 209, 211, 212, 213, 214, 215, 219, 312, 313, 328, 369, 382, 508, 509, 511, 512, 629, 631, 643, 738, 739, 740, 741, 791, 796, 797, 829, 830, 833, 836, 845], "39999998": [53, 127, 128, 629, 645, 750], "5999999": [53, 57, 80, 84, 127, 128, 297, 367, 376, 425, 629, 636, 659, 666], "0999999": [53, 70, 127, 128, 297, 307, 310, 353, 367, 372, 629, 761], "10000038": [53, 127, 128, 629], "90786433e": [53, 127, 128, 629], "310": [53, 127, 128, 629], "copy_arrai": [53, 76, 629], "to_ivy_arrai": [53, 76, 129, 629], "empty_lik": [53, 57, 76, 80, 264, 376, 428, 629, 632], "uniniti": [53, 130, 131, 629, 835], "from_dlpack": [53, 76, 629], "full_lik": [53, 76, 629, 845], "fill_valu": [53, 57, 67, 76, 80, 90, 135, 136, 252, 260, 378, 382, 492, 512, 629, 632, 644, 747, 829, 842, 845], "scalar": [53, 56, 57, 58, 62, 73, 76, 79, 80, 81, 85, 97, 112, 136, 141, 223, 244, 289, 295, 338, 339, 341, 346, 349, 351, 353, 358, 372, 375, 376, 377, 378, 423, 430, 452, 462, 463, 464, 473, 478, 600, 613, 629, 632, 634, 637, 694, 829, 839, 841, 855, 870], "fill": [53, 56, 57, 66, 67, 74, 76, 79, 80, 89, 90, 130, 135, 136, 138, 141, 142, 143, 148, 149, 274, 313, 369, 376, 378, 382, 434, 440, 445, 451, 473, 492, 493, 509, 511, 512, 629, 632, 643, 644, 739, 747, 791, 818, 842], "000123": [53, 136, 629], "stop": [53, 57, 59, 76, 80, 82, 126, 137, 138, 213, 376, 445, 451, 578, 616, 619, 621, 622, 623, 624, 629, 631, 634, 635, 640, 641, 715, 716, 717, 729, 796, 810, 836, 839, 847, 849, 855, 870], "num": [53, 76, 137, 138, 629, 776, 820, 836, 849], "endpoint": [53, 76, 137, 138, 629, 791, 836], "logspac": [53, 76, 629, 849], "sequenc": [53, 57, 61, 62, 64, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 103, 110, 111, 112, 113, 114, 115, 116, 117, 118, 132, 134, 136, 138, 141, 143, 149, 153, 155, 168, 172, 173, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 316, 323, 324, 325, 326, 327, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 365, 366, 369, 372, 373, 374, 375, 376, 378, 382, 387, 388, 390, 391, 392, 399, 400, 401, 403, 404, 408, 409, 411, 418, 419, 420, 421, 422, 425, 433, 434, 435, 437, 443, 444, 445, 448, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 468, 469, 470, 471, 477, 479, 480, 482, 483, 485, 488, 490, 492, 493, 494, 496, 499, 500, 501, 503, 504, 505, 507, 509, 510, 522, 523, 524, 525, 532, 533, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 572, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 614, 617, 618, 619, 624, 629, 632, 634, 635, 636, 637, 639, 641, 647, 648, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 663, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 694, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 713, 714, 718, 725, 735, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 792, 795, 797, 820, 828, 829, 830, 831, 833, 844, 845, 847, 849, 854, 873], "on_valu": [53, 76, 138, 141, 629], "off_valu": [53, 76, 138, 141, 629], "evenli": [53, 56, 57, 61, 64, 74, 76, 79, 80, 84, 87, 126, 137, 138, 292, 375, 418, 422, 629, 632, 636, 639, 649, 650, 651, 652, 654, 656, 658, 708], "hint": [53, 56, 57, 62, 79, 80, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 329, 335, 336, 338, 341, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 484, 492, 496, 522, 525, 552, 556, 558, 560, 591, 600, 624, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 818, 824, 832, 834, 836, 837, 840, 841, 845], "simplic": [53, 56, 57, 62, 79, 80, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 329, 335, 336, 338, 341, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 484, 492, 496, 522, 525, 552, 556, 558, 560, 591, 600, 624, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 832, 847, 853], "nestabl": [53, 56, 57, 62, 79, 80, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 155, 171, 175, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 313, 328, 329, 335, 336, 338, 341, 369, 372, 375, 376, 378, 387, 394, 395, 396, 397, 399, 400, 401, 407, 412, 413, 414, 419, 421, 430, 484, 492, 496, 522, 525, 529, 538, 546, 547, 552, 556, 558, 560, 562, 576, 591, 595, 600, 624, 629, 630, 632, 634, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 650, 651, 652, 653, 654, 658, 659, 660, 663, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 695, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 737, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 818, 822, 831, 832, 840, 844, 857], "464": [53, 56, 89, 138, 227, 228, 632], "15888336": [53, 138], "2154": [53, 138], "43469003": [53, 138], "meshgrid": [53, 76, 629], "spars": [53, 57, 63, 76, 80, 86, 139, 316, 369, 376, 434, 445, 451, 629, 638, 698], "xy": [53, 76, 139, 629], "coordin": [53, 56, 67, 79, 80, 90, 139, 147, 228, 290, 320, 321, 328, 349, 369, 383, 513, 629, 632, 644, 747], "conserv": [53, 139, 629], "cartesian": [53, 139, 629], "matrix": [53, 57, 58, 61, 62, 80, 81, 84, 85, 97, 98, 100, 102, 139, 145, 146, 147, 328, 329, 369, 376, 378, 387, 426, 429, 430, 433, 434, 435, 437, 440, 441, 442, 443, 444, 445, 446, 447, 450, 451, 482, 522, 534, 540, 629, 634, 636, 637, 660, 667, 669, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 695, 776, 778, 791, 792, 806, 810, 818, 829, 841, 868, 870], "ij": [53, 70, 139, 629, 647, 759, 806], "rank": [53, 57, 62, 64, 71, 80, 85, 87, 94, 97, 98, 99, 100, 101, 106, 139, 323, 324, 325, 326, 327, 369, 376, 378, 387, 434, 435, 445, 448, 451, 484, 492, 496, 532, 629, 637, 639, 644, 648, 668, 670, 678, 680, 684, 686, 691, 693, 694, 701, 702, 710, 713, 714, 747, 767, 768, 813, 878], "ni": [53, 139, 629], "xi": [53, 139, 629], "scatter": [53, 58, 76, 81, 141, 576, 577, 629, 634, 826, 840, 847, 877], "j": [53, 56, 57, 58, 62, 70, 76, 79, 80, 85, 97, 125, 141, 221, 222, 223, 224, 226, 229, 238, 240, 243, 245, 253, 261, 263, 267, 273, 284, 286, 287, 290, 291, 338, 372, 375, 376, 387, 403, 404, 408, 419, 420, 424, 429, 431, 442, 448, 532, 537, 628, 629, 632, 634, 637, 647, 672, 691, 759, 806, 820, 822, 826, 863, 866], "unless": [53, 57, 62, 76, 80, 141, 273, 334, 351, 356, 372, 629, 632, 637, 680, 825, 830, 840, 855, 864, 865], "ones_lik": [53, 76, 629, 825, 854, 867], "tril": [53, 76, 629], "whose": [53, 56, 57, 58, 62, 64, 68, 70, 76, 79, 80, 81, 85, 87, 91, 93, 98, 100, 102, 136, 145, 146, 222, 226, 229, 237, 238, 239, 278, 279, 285, 286, 290, 291, 292, 329, 343, 344, 348, 352, 353, 355, 359, 369, 376, 378, 429, 450, 483, 492, 498, 539, 595, 629, 632, 634, 637, 639, 645, 647, 667, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 691, 694, 703, 707, 749, 750, 751, 758, 759, 778, 815, 832, 844], "innermost": [53, 57, 62, 85, 145, 146, 329, 369, 376, 429, 629, 637, 667, 669, 671, 672, 673, 674, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 691], "mxn": [53, 57, 62, 85, 145, 146, 329, 369, 629, 637, 671, 678, 680, 681, 683, 684, 688, 691], "matric": [53, 57, 62, 80, 85, 97, 98, 102, 139, 145, 146, 329, 369, 376, 378, 429, 434, 435, 437, 443, 444, 449, 473, 629, 636, 637, 660, 667, 669, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 691, 692, 778, 816, 834, 870], "diagon": [53, 57, 62, 80, 85, 98, 132, 145, 146, 147, 313, 328, 329, 369, 376, 378, 427, 430, 440, 446, 473, 629, 637, 670, 691], "triangular": [53, 57, 62, 85, 145, 146, 147, 328, 329, 369, 376, 446, 629, 637, 667, 673, 674, 680, 684], "triu": [53, 76, 629], "upper": [53, 57, 62, 66, 80, 85, 89, 132, 146, 147, 313, 329, 369, 376, 387, 446, 525, 629, 637, 643, 667, 673, 674, 684, 741, 829, 840, 844], "zeros_lik": [53, 57, 76, 152, 269, 378, 492, 615, 616, 619, 621, 622, 623, 629, 630, 632, 635, 637, 639, 684, 699, 841, 847], "data_typ": [54, 57, 77, 80, 182, 630, 826, 829, 844, 845], "_arraywithdatatyp": [54, 102], "irrespect": [54, 62, 77, 85, 152, 630, 637, 687, 827, 840, 851, 877], "promot": [54, 56, 57, 62, 77, 79, 80, 85, 92, 102, 103, 152, 155, 178, 179, 180, 186, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 240, 243, 245, 247, 261, 262, 263, 264, 265, 270, 273, 278, 282, 285, 286, 287, 288, 289, 290, 291, 294, 346, 354, 359, 372, 375, 387, 419, 522, 585, 608, 630, 632, 634, 637, 639, 647, 667, 668, 675, 676, 677, 678, 679, 680, 682, 683, 685, 686, 693, 694, 700, 710, 753, 761, 764, 776, 777, 821, 823, 832, 833, 837, 846], "nan": [54, 56, 57, 58, 68, 70, 77, 79, 80, 81, 152, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 254, 255, 256, 261, 262, 263, 264, 265, 268, 273, 274, 276, 278, 279, 282, 283, 284, 285, 286, 287, 290, 291, 293, 300, 334, 335, 336, 347, 351, 356, 359, 367, 372, 378, 387, 492, 520, 521, 528, 529, 530, 531, 558, 613, 627, 630, 632, 634, 645, 647, 648, 749, 750, 751, 752, 760, 761, 762, 764, 765, 766, 767, 768, 776, 779, 823, 829, 832, 839, 845, 846], "infin": [54, 56, 58, 62, 77, 79, 85, 152, 220, 221, 222, 223, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 245, 246, 247, 254, 255, 261, 262, 263, 264, 265, 268, 273, 274, 276, 278, 282, 283, 285, 286, 287, 290, 291, 293, 335, 336, 359, 372, 558, 627, 630, 632, 634, 637, 647, 648, 685, 694, 760, 762, 767, 768, 823, 832], "desir": [54, 55, 57, 67, 70, 74, 77, 78, 80, 90, 93, 97, 152, 154, 155, 214, 319, 360, 369, 372, 378, 387, 482, 528, 531, 532, 630, 631, 637, 644, 647, 689, 746, 761, 791, 792, 820, 825, 828, 829, 830, 841, 849, 859, 863, 870], "broadcast_arrai": [54, 77, 630], "mix": [54, 56, 77, 79, 80, 81, 86, 89, 102, 103, 153, 166, 167, 180, 199, 200, 230, 233, 234, 235, 240, 241, 247, 251, 259, 260, 270, 273, 276, 282, 377, 387, 458, 529, 548, 550, 551, 552, 553, 562, 597, 600, 630, 631, 632, 634, 636, 637, 638, 639, 642, 647, 650, 652, 655, 657, 658, 660, 666, 667, 689, 696, 698, 699, 737, 759, 761, 764, 777, 779, 818, 822, 829, 830, 831, 840, 847, 849, 857, 870, 874, 876], "broadcast_to": [54, 77, 630, 829], "can_cast": [54, 77, 630, 829, 837, 841], "accord": [54, 57, 58, 64, 70, 77, 87, 93, 155, 165, 223, 234, 240, 247, 273, 284, 319, 369, 375, 378, 420, 484, 552, 555, 576, 577, 630, 632, 634, 637, 639, 647, 693, 701, 714, 764, 766, 771, 778, 798, 805, 818, 819, 823, 829, 835, 837, 841, 844], "finfo": [54, 77, 630, 844], "resolut": [54, 77, 165, 630, 820], "4028235e": [54, 165, 630], "iinfo": [54, 77, 630], "integ": [54, 56, 57, 61, 62, 64, 66, 70, 71, 74, 79, 80, 81, 84, 85, 87, 89, 93, 94, 102, 103, 126, 135, 168, 169, 175, 179, 180, 184, 220, 230, 231, 232, 233, 234, 235, 236, 246, 247, 258, 270, 275, 278, 282, 283, 293, 294, 330, 331, 332, 335, 336, 340, 345, 346, 369, 372, 375, 378, 382, 385, 387, 403, 408, 418, 421, 422, 423, 470, 479, 484, 492, 496, 499, 508, 509, 510, 511, 512, 514, 515, 520, 522, 523, 524, 529, 532, 555, 571, 581, 614, 629, 630, 632, 634, 636, 637, 639, 643, 646, 647, 648, 649, 650, 651, 652, 654, 656, 658, 668, 670, 679, 693, 694, 708, 738, 739, 740, 741, 742, 743, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 776, 777, 778, 779, 784, 792, 806, 820, 827, 829, 839, 842, 844, 849, 851], "119": [54, 168], "1220": [54, 168], "int16": [54, 57, 66, 70, 77, 89, 155, 159, 161, 166, 168, 175, 190, 387, 523, 524, 630, 647, 739, 757, 758, 763, 765, 776, 777, 829, 841, 844, 849], "32768": [54, 77, 168, 593, 634], "32767": [54, 77, 168], "is_bool_dtyp": [54, 77, 630], "is_float_dtyp": [54, 77, 630, 845], "is_int_dtyp": [54, 77, 630, 842, 845], "is_uint_dtyp": [54, 77, 630, 842, 845], "result_typ": [54, 77, 630, 829], "arrays_and_dtyp": [54, 77, 180, 630], "_arraywithdevic": [55, 102], "move": [55, 57, 78, 80, 147, 210, 214, 218, 328, 369, 378, 483, 629, 631, 794, 812, 820, 830, 845], "addit": [55, 57, 58, 65, 78, 80, 81, 88, 123, 125, 214, 223, 283, 377, 381, 387, 452, 506, 521, 526, 545, 546, 547, 614, 628, 631, 632, 634, 636, 640, 642, 663, 717, 737, 792, 806, 818, 819, 820, 825, 829, 831, 832, 835, 837, 839, 840, 841, 844, 845, 847, 851, 852, 854, 863, 870, 871, 872, 876], "__dlpack__": [55, 78, 133, 214, 629, 631], "caveat": [55, 78, 214, 377, 456, 631], "portabl": [55, 78, 214, 631, 812, 868], "_arraywithelementwis": [56, 102], "ab": [56, 62, 72, 79, 95, 102, 103, 278, 334, 351, 372, 378, 491, 632, 637, 641, 678, 688, 694, 726, 729, 773, 805, 806, 816, 824, 829, 834, 838, 841, 844, 867], "absolut": [56, 57, 62, 72, 74, 79, 80, 85, 102, 220, 284, 334, 351, 354, 360, 372, 376, 377, 430, 447, 453, 455, 632, 637, 678, 679, 680, 685, 771, 773, 776, 778, 779, 813, 819], "aco": [56, 79, 632], "invers": [56, 57, 62, 79, 80, 85, 221, 222, 225, 226, 227, 228, 229, 344, 372, 375, 385, 398, 407, 409, 419, 514, 632, 637, 676, 679, 683, 798, 829], "cosin": [56, 79, 221, 222, 237, 238, 312, 315, 369, 375, 397, 407, 632, 792], "acosh": [56, 79, 166, 167, 630, 632, 816, 834], "area": [56, 57, 79, 80, 84, 222, 226, 229, 375, 411, 418, 422, 632, 815, 840, 847, 860, 866], "hyperbol": [56, 79, 222, 226, 229, 238, 286, 290, 291, 304, 308, 367, 632], "sector": [56, 79, 222, 226, 229, 632, 860], "multipli": [56, 57, 61, 70, 79, 80, 84, 97, 223, 289, 352, 375, 376, 411, 442, 443, 523, 524, 632, 636, 647, 659, 757, 763, 820, 824, 825, 827, 831], "angl": [56, 79, 228, 238, 286, 291, 350, 372, 632], "deg": [56, 79, 224, 632], "radian": [56, 57, 79, 80, 221, 224, 225, 227, 228, 237, 239, 279, 285, 290, 359, 372, 632, 832], "degre": [56, 57, 70, 79, 80, 93, 224, 239, 279, 322, 369, 378, 490, 632, 647, 764, 766, 869], "1j": [56, 79, 80, 224, 225, 237, 238, 243, 245, 257, 280, 285, 286, 290, 338, 592, 632, 634], "2j": [56, 57, 79, 80, 224, 253, 338, 375, 403, 408, 593, 632, 634], "3j": [56, 57, 79, 80, 224, 257, 280, 338, 372, 632], "35619449": [56, 224, 632], "78539816": [56, 224, 632], "135": [56, 224, 540, 632, 634], "asin": [56, 79, 632], "sine": [56, 79, 225, 226, 285, 286, 632], "927": [56, 79, 225], "asinh": [56, 79, 225, 632], "atan": [56, 79, 632], "tangent": [56, 79, 227, 228, 229, 290, 291, 304, 308, 365, 367, 374, 632, 832], "785": [56, 79, 227, 228, 632], "atan2": [56, 79, 632], "quotient": [56, 79, 228, 240, 247, 632], "588": [56, 228, 632], "inf": [56, 57, 58, 62, 79, 80, 81, 85, 228, 245, 254, 255, 256, 257, 261, 262, 264, 274, 300, 344, 354, 367, 372, 376, 387, 426, 525, 558, 613, 627, 632, 634, 636, 637, 664, 678, 694, 776, 779, 816, 829, 834, 839], "719": [56, 228, 632], "atanh": [56, 79, 632], "549": [56, 79, 84, 229, 632, 636, 660], "bitwise_and": [56, 79, 632], "bitwise_invert": [56, 79, 632], "bitiwse_invert": [56, 231], "bitwise_left_shift": [56, 79, 632], "bitwise_or": [56, 79, 632], "bitwise_right_shift": [56, 79, 102, 632], "bitwise_xor": [56, 79, 102, 632], "ceil": [56, 57, 79, 80, 97, 100, 126, 375, 394, 395, 396, 412, 413, 414, 417, 629, 632, 792, 840], "416": [56, 237, 632], "540": [56, 237], "990": [56, 237], "cosh": [56, 79, 237, 632], "deg2rad": [56, 79, 632], "180": [56, 79, 239, 279, 632], "270": [56, 79, 239, 279, 632], "360": [56, 79, 239, 279, 632, 828], "dividend": [56, 79, 240, 247, 282, 294, 632], "divisor": [56, 57, 59, 70, 79, 80, 82, 93, 240, 247, 250, 251, 282, 294, 375, 378, 394, 395, 396, 470, 479, 499, 615, 616, 621, 632, 635, 647, 764, 766, 792, 796], "375": [56, 241, 276], "erf": [56, 79, 343, 372, 632], "exponenti": [56, 57, 79, 80, 242, 243, 245, 265, 278, 295, 305, 367, 376, 441, 632], "gauss": [56, 79, 242, 632], "328": [56, 242, 290, 632], "677": [56, 242], "842": [56, 242, 290, 632], "71828198": [56, 79, 243], "38905573": [56, 79, 243], "08553696": [56, 79, 243, 632], "exp2": [56, 79, 632], "expm1": [56, 79, 632, 829], "244": [56, 245, 812], "918": [56, 245], "147": [56, 245, 632], "floor": [56, 57, 79, 80, 97, 100, 234, 247, 375, 394, 395, 396, 398, 412, 413, 414, 417, 632, 792, 840], "floor_divid": [56, 79, 632, 784, 829], "fmin": [56, 79, 632, 829], "gcd": [56, 79, 632, 829], "greater": [56, 57, 61, 64, 66, 79, 80, 84, 89, 102, 103, 134, 221, 222, 225, 226, 228, 229, 232, 234, 240, 246, 247, 261, 263, 278, 282, 284, 286, 287, 291, 292, 293, 337, 372, 375, 398, 403, 408, 419, 629, 632, 636, 637, 639, 643, 666, 668, 679, 709, 741, 778, 792, 820, 821, 842, 867], "greater_equ": [56, 79, 102, 103, 265, 632, 867], "isfinit": [56, 79, 632, 841], "out_i": [56, 79, 254, 255, 256, 257, 280, 632], "self_i": [56, 79, 254, 255, 256, 257, 280], "finit": [56, 79, 220, 221, 222, 223, 226, 228, 229, 238, 240, 241, 243, 245, 247, 254, 255, 261, 263, 273, 274, 276, 278, 282, 286, 287, 291, 632], "isinf": [56, 79, 632], "detect_posit": [56, 79, 255, 632], "detect_neg": [56, 79, 255, 632], "isnan": [56, 79, 632], "isreal": [56, 79, 632], "5j": [56, 79, 80, 257, 280, 338, 372, 632], "6j": [56, 57, 79, 253, 257, 338, 632], "lcm": [56, 79, 632, 829], "less": [56, 57, 62, 66, 70, 79, 80, 85, 89, 102, 103, 221, 222, 225, 228, 229, 236, 240, 247, 261, 262, 263, 264, 278, 282, 284, 287, 358, 372, 375, 376, 387, 397, 398, 407, 419, 445, 451, 522, 525, 632, 637, 643, 647, 678, 679, 680, 683, 694, 741, 764, 766, 792, 819, 820, 827, 829, 831, 833, 836, 841, 844, 847, 848, 849, 860, 867, 870, 872], "less_equ": [56, 79, 102, 103, 632, 833, 867], "log10": [56, 57, 79, 319, 369, 632], "logarithm": [56, 79, 243, 261, 262, 263, 264, 265, 342, 354, 372, 632, 637, 685], "602": [56, 262, 632], "699": [56, 262, 632], "log1p": [56, 79, 632, 839], "693": [56, 79, 117, 226, 263, 626, 632], "0953": [56, 79, 261, 263, 632], "log2": [56, 79, 266, 632], "logaddexp": [56, 79, 632], "logaddexp2": [56, 79, 632, 816, 834], "169925": [56, 79, 266, 632], "logical_and": [56, 79, 632, 841, 847, 877], "logical_not": [56, 79, 632, 829], "logical_or": [56, 79, 632, 877], "conform": [56, 62, 79, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 139, 142, 143, 144, 145, 146, 148, 149, 155, 165, 168, 180, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 251, 252, 253, 254, 255, 256, 260, 262, 263, 264, 265, 267, 268, 269, 270, 273, 275, 276, 277, 278, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 335, 336, 338, 372, 375, 378, 387, 419, 492, 496, 522, 629, 630, 632, 637, 639, 644, 645, 646, 647, 648, 667, 668, 669, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 700, 702, 703, 704, 706, 707, 709, 710, 714, 744, 745, 747, 748, 749, 750, 751, 752, 753, 756, 760, 761, 762, 763, 764, 765, 766, 767, 768, 832, 835], "api_specif": [56, 57, 79, 80, 155, 243, 253, 254, 269, 335, 336, 372, 375, 378, 419, 492, 630, 632, 639, 647, 714, 764, 832], "array_api": [56, 79, 155, 243, 253, 254, 269, 375, 378, 419, 492, 630, 632, 637, 639, 647, 685, 686, 714, 764, 832], "logical_xor": [56, 79, 632], "use_wher": [56, 79, 271, 272, 632], "formula": [56, 57, 79, 240, 262, 264, 271, 272, 273, 319, 353, 369, 372, 381, 501, 503, 632, 810], "exce": [56, 57, 80, 272, 378, 494, 632], "product": [56, 57, 61, 62, 70, 79, 80, 84, 85, 93, 97, 98, 100, 273, 365, 366, 374, 376, 378, 387, 425, 428, 432, 435, 436, 437, 442, 443, 444, 496, 523, 524, 531, 632, 636, 637, 647, 663, 666, 668, 675, 677, 682, 689, 693, 757, 758, 759, 763, 764, 806, 818, 849, 870, 872], "nan_to_num": [56, 79, 632], "posinf": [56, 79, 274, 632], "neginf": [56, 79, 274, 632], "5e": [56, 59, 79, 80, 274, 357, 621, 632, 635], "not_equ": [56, 79, 102, 103, 632, 867], "pow": [56, 79, 102, 103, 632, 823, 867], "expon": [56, 57, 58, 80, 81, 278, 346, 348, 352, 372, 381, 506, 593, 632, 634, 637, 679], "rad2deg": [56, 79, 632], "286": [56, 80, 279], "458": [56, 279], "573": [56, 279, 632], "reciproc": [56, 79, 632], "333": [56, 79, 240, 281, 632], "remaind": [56, 57, 64, 74, 79, 80, 87, 249, 632, 639, 708, 823, 840], "modulu": [56, 79, 282, 632, 840], "x2_i": [56, 79, 223, 228, 230, 232, 233, 234, 235, 240, 241, 247, 251, 252, 259, 260, 265, 267, 269, 270, 273, 276, 278, 282, 289, 632, 823], "678": [56, 283, 284], "np_variant": [56, 79, 284, 632], "841": [56, 73, 79, 110, 285, 626, 632], "909": [56, 79, 81, 285, 632], "141": [56, 79, 152, 285, 630, 632], "sinh": [56, 79, 285, 632], "232": [56, 79, 286, 632], "sqrt": [56, 57, 79, 80, 375, 398, 403, 404, 408, 409, 419, 632, 791, 792, 812], "squar": [56, 57, 62, 79, 80, 85, 287, 376, 377, 381, 387, 429, 441, 453, 506, 522, 617, 618, 620, 625, 632, 635, 637, 641, 667, 669, 670, 672, 673, 674, 676, 679, 685, 686, 687, 692, 724, 812], "tanh": [56, 57, 79, 80, 290, 304, 308, 367, 632, 788, 849], "762": [56, 79, 291, 632], "964": [56, 79, 291, 632], "trapz": [56, 79, 632], "dx": [56, 79, 292, 632], "apart": [56, 79, 292, 632], "trapezoid": [56, 79, 292, 632], "trunc": [56, 79, 632], "025": [56, 293, 377, 458, 632, 640, 717], "trunc_divid": [56, 79, 632], "_arraywithactivationsexperiment": [57, 102], "celu": [57, 80, 367], "formul": [57, 73, 80, 98, 110, 295, 297, 367, 788], "elu": [57, 80, 299, 367, 788], "scaler": [57, 80, 296, 367, 776, 779, 844], "hardshrink": [57, 80, 367], "lambd": [57, 80, 297, 307, 367], "hardsilu": [57, 80, 367], "66666667": [57, 119, 298, 387, 522, 626], "hardtanh": [57, 80, 367], "max_val": [57, 80, 299, 367], "min_val": [57, 80, 299, 367], "region": [57, 80, 299, 307, 367, 819], "19722438": [57, 80, 300, 367], "38629448": [57, 80, 300, 367], "38629436": [57, 80, 300, 367], "logsigmoid": [57, 80, 367, 788], "31326175": [57, 73, 301, 367], "126928": [57, 80, 301], "01814993": [57, 301], "00004578": [57, 301], "57888985": [57, 301], "31326169": [57, 80, 301, 367], "69314718": [57, 62, 73, 80, 85, 301, 354, 367, 372, 637, 685], "01104775": [57, 301], "prelu": [57, 80, 367, 788], "unidirect": [57, 302, 367, 636, 661], "relu6": [57, 80, 367, 788], "rectifi": [57, 73, 80, 112, 114, 115, 303, 306, 311, 367, 626], "scaled_tanh": [57, 80, 308, 367], "7159": [57, 80, 304, 308, 367], "amplitud": [57, 80, 304, 308, 367], "65537548": [57, 80, 304], "49570239": [57, 80, 304], "77637792": [57, 304], "selu": [57, 80, 367, 788], "11133075": [57, 305, 367], "05070102": [57, 80, 305, 367], "10140204": [57, 305, 367], "15210295": [57, 305, 367], "20280409": [57, 305, 367], "25350523": [57, 305, 367], "30420589": [57, 305, 367], "35490704": [57, 305, 367], "silu": [57, 80, 367, 788], "26894143": [57, 306], "73105854": [57, 80, 306], "softshrink": [57, 80, 367], "bound": [57, 80, 307, 319, 367, 369, 378, 467, 492, 493, 776, 829, 833, 841, 844, 849, 876], "tanhshrink": [57, 80, 367], "23840582": [57, 80, 309, 367], "condit": [57, 67, 80, 90, 123, 310, 325, 326, 369, 376, 426, 628, 641, 644, 728, 729, 748, 778, 823, 829, 831, 833, 837, 838, 840, 844, 863], "met": [57, 80, 310, 833], "hreshold": [57, 310], "thresholded_relu": [57, 80, 367], "_arraywithconversionsexperiment": [57, 102], "_arraywithcreationexperiment": [57, 102], "blackman_window": [57, 80, 369], "period": [57, 80, 286, 290, 312, 314, 315, 317, 318, 369, 375, 410, 632, 820], "window": [57, 61, 80, 84, 312, 314, 315, 317, 318, 333, 369, 375, 381, 394, 395, 396, 398, 412, 413, 414, 415, 417, 418, 422, 423, 506, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 792, 814, 820, 826, 834, 875], "symmetr": [57, 62, 80, 85, 97, 98, 312, 314, 315, 317, 318, 369, 376, 378, 429, 484, 637, 667, 672, 673, 674, 695, 827], "38777878e": [57, 80, 312, 369], "40000000e": [57, 312, 369], "00000000e": [57, 62, 80, 81, 312, 343, 344, 369, 375, 397, 403, 407, 408, 637, 684, 816, 834], "30000000e": [57, 80, 312, 369], "eye_lik": [57, 80, 369], "elsewher": [57, 80, 132, 313, 369, 629, 644, 748, 819], "mel_weight_matrix": [57, 80, 369], "num_mel_bin": [57, 80, 319, 369], "dft_length": [57, 80, 319, 369, 375, 398], "sample_r": [57, 80, 319, 369], "lower_edge_hertz": [57, 80, 319, 369], "upper_edge_hertz": [57, 80, 319, 369], "3000": [57, 80, 319, 369], "melweightmatrix": [57, 80, 319, 369], "linearli": [57, 58, 81, 319, 369, 549, 634, 637, 686], "frequenc": [57, 58, 80, 81, 319, 369, 387, 522, 549, 634, 820], "spectra": [57, 319, 369], "dft": [57, 80, 319, 369, 375], "stft": [57, 80, 319, 369, 375], "mel": [57, 80, 319, 369], "hertz": [57, 319, 369], "2595": [57, 319, 369], "700": [57, 81, 319, 369, 553], "band": [57, 58, 80, 81, 319, 369, 549, 634], "spectrum": [57, 80, 319, 369], "n_fft": [57, 80, 319, 369, 375, 398], "8000": [57, 80, 314, 319, 369], "75694758": [57, 319, 369], "trilu": [57, 80, 369], "retain": [57, 147, 328, 329, 369, 617, 629, 635, 839, 843, 857], "unsorted_segment_mean": [57, 80, 369], "segment_id": [57, 80, 330, 331, 332, 369, 798], "num_seg": [57, 80, 330, 331, 332, 369, 798], "identifi": [57, 80, 330, 331, 332, 369, 818, 823, 828, 829, 844, 847], "th": [57, 80, 98, 330, 331, 332, 341, 369, 372, 376, 377, 387, 427, 434, 452, 532], "unsorted_segment_min": [57, 80, 369], "unsorted_segment_sum": [57, 80, 369], "polyv": [57, 80, 369], "coeff": [57, 80, 322, 369], "polynomi": [57, 80, 322, 369], "coeffici": [57, 80, 314, 322, 369, 376, 446, 637, 686, 796], "indetermin": [57, 80, 322, 369], "simplifi": [57, 80, 322, 369, 805, 806, 833, 841, 849, 850, 853, 860, 863, 866, 868, 869, 870, 873, 876, 877], "substitut": [57, 80, 322, 369], "_arraywithdata_typeexperiment": [57, 102], "_arraywithdeviceexperiment": [57, 102], "_arraywithelementwiseexperiment": [57, 102], "equal_nan": [57, 80, 334, 351, 372], "1e10": [57, 334, 351, 372], "00001e10": [57, 334, 351, 372], "00001e": [57, 334, 372], "amax": [57, 80, 372], "keepdim": [57, 62, 64, 67, 70, 71, 74, 80, 85, 87, 90, 93, 94, 335, 336, 340, 356, 363, 372, 373, 378, 387, 489, 527, 528, 529, 530, 531, 532, 637, 639, 644, 647, 648, 678, 694, 713, 744, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 833, 841, 849], "singleton": [57, 62, 67, 70, 71, 80, 85, 90, 93, 94, 335, 336, 372, 637, 639, 644, 647, 648, 694, 702, 709, 745, 760, 761, 762, 763, 764, 765, 766, 767, 768, 849], "amin": [57, 80, 372], "binar": [57, 80, 372], "conj": [57, 80, 238, 243, 245, 286, 287, 291, 372, 632], "conjug": [57, 62, 80, 85, 338, 372, 375, 376, 382, 398, 424, 430, 442, 444, 446, 510, 637, 677, 681, 689], "copysign": [57, 80, 372], "unsign": [57, 70, 80, 339, 372, 378, 387, 492, 523, 524, 647, 757, 758, 763, 765, 777, 829, 849], "count_nonzero": [57, 80, 372], "diff": [57, 74, 80, 372, 831, 840, 867], "prepend": [57, 80, 341, 372, 637, 639, 677, 702, 819], "differenc": [57, 80, 341, 372], "prior": [57, 80, 341, 372, 382, 510, 637, 689, 833, 845], "expand": [57, 58, 64, 80, 81, 341, 372, 378, 496, 549, 634, 639, 702, 812, 827, 843], "discret": [57, 80, 341, 372, 375, 397, 398, 403, 404, 407, 408, 409, 419, 420, 638, 697, 792], "digamma": [57, 80, 372], "7549271": [57, 342, 372], "92278427": [57, 80, 342, 372], "9988394": [57, 342, 372], "erfc": [57, 80, 372], "complementari": [57, 80, 333, 343, 369, 372, 868, 876], "84270084e": [57, 343, 344], "80259693e": [57, 343, 344], "erfinv": [57, 80, 372], "float_pow": [57, 80, 372], "fmax": [57, 80, 372], "fmod": [57, 80, 632], "divis": [57, 58, 59, 80, 81, 82, 234, 240, 247, 249, 282, 284, 294, 378, 470, 583, 592, 606, 615, 616, 621, 632, 634, 635, 636, 649, 656, 657, 796, 837, 846], "frexp": [57, 80, 372], "edge_ord": [57, 80, 349, 372], "boundari": [57, 66, 80, 89, 100, 325, 326, 349, 369, 372, 375, 411, 643, 741, 870], "33333333": [57, 80, 281, 349, 372, 452, 632], "hypot": [57, 80, 372], "hypotenus": [57, 350, 372], "4031": [57, 350, 372], "8102": [57, 350, 372], "isclos": [57, 80, 372, 823], "ldexp": [57, 80, 372], "lerp": [57, 80, 372], "lgamma": [57, 80, 372], "45373654": [57, 354, 372], "6477685": [57, 354, 372], "modf": [57, 80, 372], "fraction": [57, 80, 355, 372, 387, 532, 636, 659], "nansum": [57, 80, 372], "accumul": [57, 80, 356, 372, 378, 489], "nextaft": [57, 80, 372], "0e": [57, 59, 80, 82, 357, 372, 621, 635], "4013e": [57, 80, 357, 372], "4028e": [57, 80, 357, 372], "signbit": [57, 80, 372], "637": [57, 80, 359, 372], "0909": [57, 80, 359, 372], "sparsify_tensor": [57, 80, 372], "sparsifi": [57, 80, 360, 372], "arang": [57, 62, 70, 80, 85, 137, 360, 372, 375, 376, 394, 395, 396, 403, 408, 412, 413, 414, 417, 426, 443, 476, 572, 614, 629, 634, 637, 640, 647, 678, 694, 716, 717, 759, 812, 829, 840, 877], "xlogi": [57, 80, 372], "0986": [57, 80, 361, 372], "3863": [57, 80, 361, 372], "0000": [57, 80, 314, 315, 318, 344, 361, 369, 372, 376, 378, 441, 478], "zeta": [57, 80, 372], "0369": [57, 80, 362, 372], "_arraywithgeneralexperiment": [57, 102], "init_valu": [57, 80, 84, 363, 373, 375, 418], "reduct": [57, 58, 63, 71, 74, 80, 81, 84, 86, 94, 363, 373, 375, 377, 378, 418, 452, 453, 454, 455, 456, 457, 458, 459, 489, 546, 576, 577, 634, 638, 648, 696, 697, 698, 767, 768, 793, 829, 837, 840, 844, 851], "_arraywithgradientsexperiment": [57, 102], "_arraywithimageexperiment": [57, 102], "_arraywithlayersexperiment": [57, 102], "adaptive_avg_pool1d": [57, 80, 375], "1d": [57, 80, 97, 98, 375, 376, 378, 387, 389, 397, 399, 401, 407, 442, 462, 467, 489, 493, 522, 776, 792], "adapt": [57, 80, 82, 375, 389, 390, 391, 392, 622, 635, 792, 796, 860], "plane": [57, 80, 240, 243, 245, 273, 285, 286, 287, 290, 375, 378, 389, 390, 391, 392, 490, 632], "l_in": [57, 80, 375, 389], "spatial": [57, 61, 80, 84, 375, 381, 389, 390, 391, 392, 411, 418, 422, 501, 502, 503, 506, 636, 649, 650, 651, 652, 654, 656, 658, 795], "Will": [57, 80, 375, 389, 390, 391, 392, 801, 855], "l_out": [57, 80, 375, 389], "nhwc": [57, 61, 80, 84, 375, 381, 390, 395, 400, 413, 417, 506, 636, 649, 652, 653, 656, 657, 658, 792], "3d": [57, 62, 80, 375, 390, 392, 399, 400, 464, 637, 675, 792, 847], "4d": [57, 80, 375, 376, 381, 390, 400, 401, 450, 506], "s_0": [57, 80, 375, 390, 391], "s_1": [57, 80, 375, 390, 391], "adaptive_max_pool2d": [57, 80, 375], "h_in": [57, 80, 375, 391, 392], "w_in": [57, 80, 375, 391, 392], "adaptive_max_pool3d": [57, 80, 375], "avg_pool1d": [57, 80, 375], "kernel": [57, 61, 80, 84, 375, 394, 395, 396, 412, 413, 414, 415, 636, 662, 849, 855, 870, 873, 874], "nwc": [57, 61, 80, 84, 375, 394, 399, 412, 415, 636, 649, 650, 651, 656, 657, 792], "count_include_pad": [57, 80, 375, 394, 395, 396, 792], "d_in": [57, 61, 80, 84, 375, 392, 394, 395, 396, 398, 403, 404, 408, 412, 413, 414, 415, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658], "algorithm": [57, 61, 73, 80, 84, 110, 375, 376, 394, 395, 396, 411, 412, 413, 414, 415, 445, 447, 451, 637, 650, 652, 653, 654, 655, 658, 685, 788, 792, 806, 829, 841, 847, 855, 870, 872, 874], "ncw": [57, 61, 80, 84, 375, 394, 399, 400, 412, 415, 636, 649, 650, 651, 656, 657, 792], "avg_pool2d": [57, 80, 375], "divisor_overrid": [57, 80, 375, 394, 395, 396, 792], "avg_pool3d": [57, 80, 375], "ndhwc": [57, 61, 80, 84, 375, 396, 401, 414, 636, 649, 654, 655, 656, 657, 792], "volum": [57, 61, 80, 84, 375, 396, 398, 403, 404, 408, 414, 636, 654, 655], "ncdhw": [57, 61, 80, 84, 375, 396, 401, 414, 636, 649, 654, 655, 656, 657, 792], "dct": [57, 80, 375, 792, 852], "truncat": [57, 80, 375, 376, 397, 403, 407, 408, 409, 420, 449, 579, 634, 792, 833, 852], "larger": [57, 64, 70, 80, 87, 93, 165, 375, 397, 404, 407, 409, 420, 630, 639, 647, 699, 707, 764, 766, 792, 844, 847, 877], "ortho": [57, 80, 375, 397, 398, 403, 404, 407, 408, 409, 419, 420, 792], "onesid": [57, 80, 375, 398], "fft": [57, 80, 375, 398, 404, 419, 420, 423, 792, 818, 870], "symmetri": [57, 375, 398], "rfft": [57, 80, 375, 398, 420], "invok": [57, 375, 398, 812, 835, 863, 864], "batch_idx": [57, 375, 398], "signal_dim1": [57, 375, 398], "signal_dim2": [57, 375, 398], "signal_dimn": [57, 375, 398], "signal_dim": [57, 375, 398], "embed": [57, 80, 375, 377, 452, 636, 663, 778, 792, 870], "max_norm": [57, 58, 80, 81, 375, 402, 540, 541, 634, 792], "ifft": [57, 80, 375, 403, 409, 792], "pi": [57, 80, 286, 290, 375, 377, 403, 408, 457, 627, 632], "44509285e": [57, 80, 375, 403], "14423775e": [57, 80, 375, 403], "17j": [57, 80, 375, 403, 408], "11483250e": [57, 80, 375, 403], "16j": [57, 80, 375, 403, 408], "33486982e": [57, 80, 375, 403], "22464680e": [57, 80, 375, 403], "95799250e": [57, 80, 375, 403], "66951701e": [57, 80, 375, 403], "fft2": [57, 375], "20477401j": [57, 375, 404], "0614962j": [57, 375, 404], "idct": [57, 80, 375], "49862671": [57, 80, 375, 397, 407], "37691498": [57, 80, 375, 397, 407], "00390816": [57, 80, 375, 397, 407], "58938599": [57, 80, 375, 397, 407], "92713165": [57, 80, 375, 397, 407], "078475": [57, 80, 375, 397, 407], "19664812": [57, 80, 375, 397, 407], "95411837": [57, 80, 375, 397, 407], "30636606e": [57, 80, 375, 408], "43029718e": [57, 80, 375, 408], "18j": [57, 80, 375, 403, 408], "53080850e": [57, 80, 375, 408], "58689626e": [57, 80, 375, 408], "24474906e": [57, 80, 375, 408], "91858728e": [57, 80, 375, 408], "01435406e": [57, 80, 375, 408], "ifftn": [57, 80, 375], "24730653": [57, 80, 375, 409], "90832391j": [57, 80, 375, 409], "49495562": [57, 80, 375, 409], "9039565j": [57, 80, 375, 409], "98193269": [57, 80, 375, 409], "49560517j": [57, 80, 375, 409], "93280757": [57, 80, 375, 409], "48075343j": [57, 80, 375, 409], "28526384": [57, 80, 375, 409], "3351205j": [57, 80, 375, 409], "2343787": [57, 80, 375, 409], "83528011j": [57, 80, 375, 409], "18791352": [57, 80, 375, 409], "30690572j": [57, 80, 375, 409], "82115787": [57, 80, 375, 409], "96195183j": [57, 80, 375, 409], "44719226": [57, 80, 375, 409], "72654048j": [57, 80, 375, 409], "51476765": [57, 375, 409], "66160417j": [57, 375, 409], "04319742": [57, 375, 409], "05411636j": [57, 375, 409], "015561": [57, 375, 409], "04216015j": [57, 375, 409], "06310689": [57, 375, 409], "05347854j": [57, 375, 409], "13392983": [57, 375, 409], "16052352j": [57, 375, 409], "08371392": [57, 375, 409], "17252843j": [57, 375, 409], "0031429": [57, 375, 409], "05421245j": [57, 375, 409], "10446617": [57, 375, 409], "17747098j": [57, 375, 409], "05344324": [57, 375, 409], "07972424j": [57, 375, 409], "8344667": [57, 80, 375, 409], "98222595j": [57, 80, 375, 409], "48472244": [57, 80, 375, 409], "30233797j": [57, 80, 375, 409], "recompute_scale_factor": [57, 80, 375, 411, 847], "antialia": [57, 80, 375, 411, 847], "height": [57, 58, 61, 80, 81, 84, 375, 411, 545, 634, 636, 652, 653, 654, 655, 658, 821, 852], "width": [57, 58, 61, 80, 81, 84, 375, 376, 378, 381, 387, 411, 430, 484, 506, 525, 545, 634, 636, 650, 651, 652, 653, 654, 655, 658, 663], "trilinear": [57, 80, 375, 411, 847], "nearest_exact": [57, 80, 375, 411, 847], "tf_area": [57, 80, 375, 411, 847], "mitchellcub": [57, 80, 375, 411, 847], "lanczos3": [57, 80, 375, 411, 847], "lanczos5": [57, 80, 375, 411, 847], "gaussian": [57, 80, 110, 375, 411, 626, 847], "overwrit": [57, 74, 80, 213, 375, 411, 631, 820, 840, 841, 849], "thu": [57, 80, 234, 247, 282, 290, 291, 375, 376, 411, 429, 632, 637, 672, 673, 818, 828, 833, 838, 841, 845], "antialias": [57, 80, 411], "max_pool1d": [57, 80, 375], "dilaton": [57, 80, 412, 413, 414], "max_pool3d": [57, 80, 375], "max_unpool1d": [57, 80, 375], "unpool": [57, 80, 375, 415], "reduce_window": [57, 84, 375], "window_dimens": [57, 84, 375, 418], "window_strid": [57, 84, 375, 418], "base_dil": [57, 84, 375, 418], "window_dil": [57, 84, 375, 418], "trim": [57, 74, 80, 375, 378, 419, 495], "orthonorm": [57, 62, 80, 85, 375, 419, 637, 684, 687], "8660254j": [57, 80, 375, 419], "rfftn": [57, 80, 375], "sliding_window": [57, 80, 375], "window_s": [57, 80, 375, 422], "frame_length": [57, 80, 375, 423], "frame_step": [57, 80, 375, 423], "fft_length": [57, 80, 375, 423], "window_fn": [57, 80, 375, 423], "pad_end": [57, 80, 375, 423], "smallest": [57, 74, 80, 165, 168, 236, 375, 378, 423, 494, 630, 632, 637, 678, 776, 778, 779], "enclos": [57, 80, 375, 423, 871], "window_length": [57, 80, 312, 314, 317, 318, 333, 369, 375, 423], "li": [57, 80, 375, 376, 387, 423, 430, 532, 859], "past": [57, 80, 375, 423, 820, 823, 842, 844, 856, 870], "fft_unique_bin": [57, 80, 375, 423], "complex64": [57, 77, 80, 158, 172, 181, 187, 253, 280, 375, 419, 423, 630, 632, 637, 685, 687, 688, 777, 829, 834], "complex128": [57, 80, 81, 158, 159, 172, 181, 187, 375, 423, 571, 630, 634, 637, 673, 674, 678, 694, 776, 777, 816, 829, 834], "compon": [57, 80, 142, 143, 221, 222, 223, 226, 229, 238, 240, 241, 243, 245, 273, 275, 276, 283, 286, 287, 290, 291, 323, 327, 338, 369, 372, 375, 376, 381, 423, 434, 445, 506, 629, 632, 644, 747, 812, 843, 849, 860, 866, 871, 873], "linear_algebra": [57, 62, 80, 85, 637, 845], "_arraywithlinearalgebraexperiment": [57, 102], "adjoint": [57, 62, 80, 85, 376, 446, 637, 676, 686, 687, 776], "batched_out": [57, 80, 376], "j1": [57, 80, 376, 425], "jn": [57, 80, 376, 425], "k1": [57, 80, 376, 425], "km": [57, 80, 376, 425], "outer": [57, 62, 80, 85, 97, 376, 425, 637, 640, 715, 716, 717, 806, 818], "30000001": [57, 80, 376, 425, 545, 634, 645, 750], "40000001": [57, 61, 73, 80, 102, 103, 112, 115, 296, 367, 376, 425, 626, 636, 645, 666, 750], "60000002": [57, 80, 93, 103, 376, 381, 425, 505, 507, 541, 634, 761], "80000001": [57, 80, 376, 381, 425, 505, 507], "60000001": [57, 80, 376, 425], "90000004": [57, 80, 376, 425, 647, 761], "20000002": [57, 80, 376, 425, 541, 634], "20000005": [57, 59, 80, 296, 304, 307, 308, 367, 376, 425, 615], "00000012": [57, 80, 376, 425], "49999994": [57, 80, 376, 425], "00000006": [57, 80, 376, 425], "60000014": [57, 80, 376, 425], "19999993": [57, 80, 376, 425], "80000007": [57, 80, 376, 425, 541, 634], "20000017": [57, 80, 376, 425], "89999992": [57, 80, 376, 425], "60000008": [57, 80, 376, 425], "80000019": [57, 80, 353, 372, 376, 425], "4000001": [57, 80, 84, 376, 425, 636, 659, 666], "cond": [57, 80, 123, 376, 628, 855], "933034373659268": [57, 426], "diagflat": [57, 80, 376, 436, 441], "offset": [57, 62, 65, 76, 80, 85, 88, 134, 376, 381, 427, 501, 502, 503, 629, 637, 642, 671, 691, 737, 783], "padding_valu": [57, 80, 376, 427], "right_left": [57, 80, 376, 427], "num_row": [57, 80, 376, 427], "num_col": [57, 80, 376, 427], "dot": [57, 61, 80, 84, 97, 376, 377, 443, 452, 636, 637, 663, 666, 693, 806, 812, 819, 828], "eig": [57, 62, 80, 376, 637, 673, 674], "37228132": [57, 80, 376, 429, 431, 672], "82456484": [57, 429, 672], "41597356": [57, 429, 672], "56576746": [57, 429, 672], "90937671": [57, 429, 672], "eigh_tridiagon": [57, 80, 376], "eigvals_onli": [57, 80, 376, 430], "select_rang": [57, 80, 376, 430], "tol": [57, 80, 101, 376, 430, 445, 451], "eigenvalu": [57, 62, 80, 85, 97, 98, 376, 429, 430, 431, 637, 672, 673, 674, 680], "eigenvector": [57, 80, 376, 429, 430, 637, 672, 673], "interv": [57, 66, 71, 80, 89, 94, 126, 137, 138, 145, 376, 387, 430, 525, 629, 637, 639, 643, 648, 668, 693, 699, 702, 710, 739, 741, 767, 768], "converg": [57, 80, 376, 430, 861], "_2": [57, 80, 376, 430], "eig_val": [57, 80, 376, 430], "decreas": [57, 80, 376, 430, 778], "eig_vector": [57, 80, 376, 430], "38196": [57, 430], "61803": [57, 430], "eigval": [57, 80, 376], "general_inner_product": [57, 85, 376], "n_mode": [57, 85, 376, 432], "tradit": [57, 85, 376, 432], "inner": [57, 62, 76, 85, 106, 141, 376, 429, 432, 629, 637, 640, 672, 673, 677, 715, 716, 717, 806, 818, 840], "higher_order_mo": [57, 80, 376], "n_featur": [57, 80, 376, 433], "d1": [57, 80, 376, 433], "dn": [57, 80, 376, 433], "initialize_tuck": [57, 80, 376], "svd": [57, 62, 80, 85, 100, 376, 434, 440, 445, 447, 448, 449, 451, 637, 688], "truncated_svd": [57, 80, 376, 434, 445, 448, 451], "non_neg": [57, 80, 327, 369, 376, 434], "mask": [57, 61, 80, 84, 97, 375, 376, 378, 421, 434, 435, 445, 451, 491, 555, 634, 636, 659, 663, 666, 847], "svd_mask_repeat": [57, 80, 376, 434, 445, 451], "tuckertensor": [57, 80, 101, 327, 369, 376, 434, 445, 451], "scheme": [57, 80, 376, 434, 445, 823, 853, 870], "tucker": [57, 80, 327, 369, 376, 434, 445], "decomposit": [57, 62, 80, 85, 97, 98, 100, 323, 324, 325, 326, 327, 369, 376, 434, 438, 445, 448, 450, 451, 637, 667, 673, 684, 687, 818, 877], "miss": [57, 80, 376, 378, 434, 445, 451, 491, 796, 818, 819, 824, 827, 828, 831, 841, 844, 847], "everywher": [57, 80, 376, 434, 445, 451], "kron": [57, 80, 376, 441, 877], "make_svd_non_neg": [57, 80, 376, 449], "nntype": [57, 80, 376, 440], "nndsvd": [57, 80, 376, 440], "singular": [57, 62, 80, 85, 376, 434, 440, 447, 449, 637, 678, 680, 683, 687, 688, 776, 778, 829], "nndsvda": [57, 80, 376, 440], "boutsidi": [57, 80, 376, 440], "gallopoulo": [57, 80, 376, 440], "recognit": [57, 80, 376, 440, 815], "1350": [57, 80, 376, 440], "1362": [57, 80, 376, 440], "2008": [57, 80, 376, 440, 870], "matrix_exp": [57, 80, 376], "7183": [57, 80, 376, 441], "3891": [57, 80, 376, 441], "mode_dot": [57, 80, 96, 97, 101, 376], "matrix_or_vector": [57, 80, 97, 101, 376, 442], "i_1": [57, 80, 97, 98, 376, 442], "i_k": [57, 80, 97, 376, 442], "i_n": [57, 80, 97, 376, 442], "i_": [57, 80, 97, 376, 387, 442, 525], "multi_dot": [57, 80, 376], "148": [57, 79, 80, 243, 376, 443], "multi_mode_dot": [57, 80, 376], "mat_or_vec_list": [57, 80, 376, 444], "times_0": [57, 376, 444], "vec": [57, 376, 444], "times_1": [57, 376, 444], "cdot": [57, 273, 376, 444, 632], "times_n": [57, 376, 444], "partial_tuck": [57, 80, 376], "n_iter_max": [57, 80, 376, 445, 451], "verbos": [57, 80, 376, 445, 448, 451, 810, 844, 849], "return_error": [57, 80, 376, 445, 451], "variat": [57, 80, 376, 445, 451, 831, 841, 844], "reconstruct": [57, 62, 68, 80, 91, 100, 376, 378, 445, 451, 498, 637, 645, 687, 749, 751, 842], "return_erro": [57, 376, 445, 451], "svd_flip": [57, 80, 376], "u_based_decis": [57, 80, 376, 447], "basi": [57, 80, 376, 447, 820, 823, 852], "flip": [57, 64, 80, 87, 97, 231, 376, 378, 447, 475, 476, 632, 639, 840, 851, 852, 854], "decis": [57, 80, 376, 447, 812, 823, 829, 847, 849, 851, 870], "u_adjust": [57, 80, 376, 447], "v_adjust": [57, 80, 376, 447], "tensor_train": [57, 80, 376], "tt": [57, 80, 326, 369, 376, 448, 450], "kth": [57, 376, 448], "tttensor": [57, 100, 326, 369, 376, 448], "compute_uv": [57, 62, 80, 85, 376, 449, 637, 687], "n_eigenvec": [57, 80, 376, 449], "returnedv": [57, 449], "vh": [57, 62, 80, 85, 376, 449, 637, 687], "eigen": [57, 80, 376, 449], "namedtupl": [57, 62, 68, 80, 85, 91, 376, 378, 429, 449, 498, 637, 645, 672, 673, 684, 685, 687, 749, 750, 751], "tt_matrix_to_tensor": [57, 80, 376], "rank_k": [57, 80, 376, 450], "left_dim_k": [57, 80, 376, 450], "right_dim_k": [57, 80, 376, 450], "rank_": [57, 80, 376, 450], "49671414": [57, 80, 376, 450, 643, 740], "1382643": [57, 80, 376, 450, 643, 740], "64768857": [57, 80, 376, 450, 643, 740], "5230298": [57, 80, 376, 450, 643, 740], "23415337": [57, 80, 376, 450, 643, 740], "23413695": [57, 80, 376, 450, 643, 740], "57921278": [57, 80, 376, 450], "76743472": [57, 80, 376, 450], "1163073": [57, 80, 376, 450], "11629914": [57, 80, 376, 450], "03237505": [57, 80, 376, 450], "03237278": [57, 80, 376, 450], "78441733": [57, 80, 376, 450], "38119566": [57, 80, 376, 450], "21834874": [57, 80, 376, 450], "10610882": [57, 80, 376, 450], "15165846": [57, 80, 376, 450], "15164782": [57, 80, 376, 450], "35662258": [57, 80, 376, 450], "35659757": [57, 80, 376, 450], "02283812": [57, 80, 376, 450], "49705869": [57, 80, 376, 450], "40518808": [57, 80, 376, 450], "16882598": [57, 80, 376, 450], "fixed_factor": [57, 80, 376, 451], "tl": [57, 80, 376, 451], "kolda": [57, 80, 376, 451], "bader": [57, 80, 376, 451], "siam": [57, 80, 376, 448, 451], "review": [57, 80, 376, 451, 814, 815, 818, 820, 826, 828, 831, 841, 845], "vol": [57, 80, 376, 451], "pp": [57, 80, 376, 451], "455": [57, 80, 376, 451], "2009": [57, 80, 376, 451], "_arraywithlossesexperiment": [57, 102], "hinge_embedding_loss": [57, 80, 377], "margin": [57, 80, 377, 452, 459, 841], "measur": [57, 377, 452, 636, 663, 792], "semi": [57, 377, 452], "l_n": [57, 377, 452], "x_n": [57, 377, 452], "y_n": [57, 377, 452], "ell": [57, 377, 452], "operatornam": [57, 284, 286, 377, 452, 632, 637, 673], "l_1": [57, 377, 452], "hyperparamet": [57, 80, 377, 452], "aggreg": [57, 80, 377, 452, 645, 749, 828], "unreduc": [57, 80, 377, 452], "hing": [57, 80, 377, 452, 459], "target_tensor": [57, 377, 452, 457], "huber_loss": [57, 80, 377], "delta": [57, 59, 80, 82, 377, 453, 615, 635], "transit": [57, 80, 377, 453, 870], "huber": [57, 80, 377, 453], "kl_div": [57, 80, 377], "log_target": [57, 80, 377, 454], "contai": [57, 454], "batchmean": [57, 377, 454], "kullback": [57, 80, 377, 454], "leibler": [57, 80, 377, 454], "0916": [57, 454], "l1_loss": [57, 80, 377, 456], "l1": [57, 62, 80, 85, 377, 381, 453, 455, 456, 458, 504, 637, 694, 827, 852], "targetict": [57, 80, 377, 455, 456, 458, 459], "20000000000000004": [57, 455], "log_poisson_loss": [57, 80, 377], "compute_full_loss": [57, 80, 377, 456, 793], "favor": [57, 80, 377, 456], "likelihood": [57, 80, 377, 456, 457], "28402555": [57, 377, 456], "03402555": [57, 377, 456], "1573164": [57, 377, 456], "poisson_nll_loss": [57, 80, 377], "log_input": [57, 80, 377, 457], "poisson": [57, 80, 377, 382, 456, 457], "assumpt": [57, 377, 456, 457], "minu": [57, 377, 456, 457], "omiss": [57, 377, 457], "stirl": [57, 80, 377, 456, 457], "1977562": [57, 457], "smooth_l1_loss": [57, 80, 377], "smooth": [57, 63, 80, 86, 377, 453, 458, 638, 696, 697, 698, 839], "8125": [57, 458], "soft_margin_loss": [57, 80, 377], "soft": [57, 80, 307, 377, 378, 459, 491, 830], "35667497": [57, 459], "22314353": [57, 459], "60943791": [57, 459], "_arraywithmanipulationexperiment": [57, 102], "as_strid": [57, 80, 378], "nativeshap": [57, 61, 64, 66, 80, 87, 89, 127, 128, 130, 135, 142, 148, 378, 382, 460, 472, 477, 485, 488, 508, 509, 510, 511, 512, 577, 590, 596, 598, 629, 634, 636, 639, 643, 649, 651, 653, 655, 657, 706, 739, 740, 741, 836, 838], "byte": [57, 58, 76, 80, 81, 102, 134, 378, 460, 571, 629, 634, 875, 876], "associative_scan": [57, 80, 378], "revers": [57, 58, 62, 70, 80, 85, 93, 102, 103, 366, 374, 375, 376, 378, 387, 421, 437, 461, 475, 476, 523, 524, 544, 634, 637, 639, 647, 692, 703, 757, 758, 818, 827, 828, 829, 831, 832, 840, 841, 847, 854, 855], "scan": [57, 80, 378, 461, 855], "atleast_1d": [57, 80, 378], "ari": [57, 80, 378, 462, 463, 464, 470, 479, 499], "a1": [57, 81, 378, 462, 463, 464, 468, 537], "a2": [57, 81, 378, 462, 463, 464, 468, 537], "atleast_2d": [57, 80, 378], "atleast_3d": [57, 80, 378], "column_stack": [57, 80, 378], "concat_from_sequ": [57, 80, 378], "input_sequ": [57, 80, 378, 469], "new_axi": [57, 80, 378, 469, 854], "dsplit": [57, 80, 378], "indices_or_sect": [57, 80, 378, 470, 479, 499], "3rd": [57, 80, 378, 470], "dstack": [57, 80, 378], "fill_diagon": [57, 80, 378], "fill_diag": [57, 473], "fortran": [57, 64, 80, 87, 378, 474, 639, 706, 870, 874], "layout": [57, 64, 80, 87, 378, 474, 639, 706, 825, 840, 841, 847], "fliplr": [57, 80, 378, 840], "diag": [57, 62, 80, 85, 98, 378, 475, 476, 637, 673, 849], "flipud": [57, 80, 378, 840], "fold": [57, 80, 378, 485, 486, 828], "unfold": [57, 80, 97, 98, 100, 376, 378, 434, 477, 485, 487], "folded_tensor": [57, 378, 477], "heavisid": [57, 80, 378], "5000": [57, 378, 478, 637, 676, 806], "hsplit": [57, 80, 378], "horizont": [57, 80, 378, 468, 479, 545, 634], "hstack": [57, 80, 378, 468], "i0": [57, 80, 378, 387, 525], "bessel": [57, 70, 80, 93, 317, 369, 378, 481, 647, 764, 766], "kind": [57, 70, 80, 165, 168, 169, 387, 481, 523, 524, 529, 630, 647, 757, 758, 763, 765, 776, 777, 817, 841, 844, 847, 849, 855], "26606588": [57, 80, 378, 481], "2795853": [57, 80, 378, 481], "88079259": [57, 80, 378, 481], "row_mod": [57, 80, 378, 482], "column_mod": [57, 80, 378, 482], "ascend": [57, 69, 80, 92, 378, 385, 482, 515, 646, 753, 755, 821], "prod": [57, 58, 70, 81, 93, 376, 378, 435, 437, 482, 531, 546, 634, 647, 776, 806, 829, 831, 849, 867], "moveaxi": [57, 80, 378], "destin": [57, 80, 378, 483], "unstack": [57, 64, 74, 87, 483, 639, 827, 849, 852, 877], "reorder": [57, 64, 80, 87, 378, 483, 545, 634, 639, 703, 843], "stat_length": [57, 80, 378, 484], "constant_valu": [57, 80, 378, 484], "end_valu": [57, 80, 378, 484], "reflect_typ": [57, 80, 378, 484], "partial_fold": [57, 80, 378], "skip_begin": [57, 80, 378, 485, 486, 487, 488], "untouch": [57, 80, 378, 485, 486, 487, 488], "partial_tensor_to_vec": [57, 80, 378], "skip_end": [57, 80, 378, 486, 487], "vectoris": [57, 80, 97, 378, 486, 488], "partial_unfold": [57, 80, 378], "ravel_tensor": [57, 80, 378, 487], "n_1": [57, 80, 378, 487], "n_2": [57, 80, 378, 487], "n_i": [57, 80, 376, 378, 435, 487], "partial_vec_to_tensor": [57, 80, 378], "put_along_axi": [57, 80, 378], "rot90": [57, 80, 378, 840], "rotat": [57, 80, 378, 490], "soft_threshold": [57, 80, 378], "behav": [57, 80, 335, 336, 372, 376, 378, 429, 492, 637, 672, 823, 833, 838, 840, 841, 842, 851, 871], "invalid": [57, 71, 80, 94, 378, 492, 637, 639, 648, 693, 702, 767, 768, 776, 819, 829], "slice": [57, 70, 74, 80, 81, 93, 98, 147, 328, 369, 378, 467, 489, 492, 493, 552, 553, 555, 581, 629, 634, 641, 647, 727, 762, 844, 870], "inexact": [57, 80, 346, 372, 378, 492], "largest": [57, 74, 80, 165, 168, 376, 378, 447, 492, 494, 630, 637, 678, 687], "take_along_axi": [57, 80, 378], "arr": [57, 58, 77, 80, 173, 378, 467, 489, 493, 577, 630, 829, 830], "top_k": [57, 80, 378], "sort": [57, 68, 74, 80, 91, 103, 199, 292, 376, 378, 387, 429, 494, 515, 529, 631, 632, 637, 645, 672, 673, 687, 688, 749, 753, 754, 755, 778, 812, 817, 828, 843, 845], "trim_zero": [57, 80, 378], "fb": [57, 80, 378, 495], "front": [57, 80, 378, 495, 841, 848, 849, 852, 859, 868, 870], "unflatten": [57, 80, 378], "unfolded_tensor": [57, 378, 497], "unique_consecut": [57, 80, 378], "vsplit": [57, 80, 378], "vertic": [57, 80, 378, 499, 500, 545, 634, 820], "_arraywithnormsexperiment": [57, 102], "varianc": [57, 70, 80, 93, 381, 501, 503, 647, 766, 791, 795], "nsc": [57, 80, 381, 501, 502, 503, 795], "braodcast": [57, 80, 381, 501], "running_mean": [57, 80, 381, 501, 503, 795], "running_var": [57, 80, 381, 501, 503, 795], "nc": [57, 80, 381, 501, 502, 503, 795], "group_norm": [57, 80, 381], "num_group": [57, 80, 381, 502], "instance_norm": [57, 80, 381], "l1_normal": [57, 80, 381], "33333334": [57, 80, 298, 367, 381, 504, 507, 541, 617, 634, 635, 636, 637, 658, 694], "33333337": [57, 137, 381, 504, 617, 629, 635], "28571439": [57, 381, 504], "l2_normal": [57, 80, 381, 507], "l2": [57, 62, 85, 96, 97, 381, 505, 507, 637, 694, 792, 827], "44721359": [57, 80, 381, 505, 507], "89442718": [57, 80, 381, 505, 507, 541, 634], "lp_normal": [57, 80, 381], "lp": [57, 381, 507], "_arraywithrandomexperiment": [57, 102], "bernoulli": [57, 80, 375, 382, 399, 400, 401], "event": [57, 80, 382, 508, 844], "parameter": [57, 66, 80, 89, 382, 508, 509, 511, 512, 643, 738, 740, 741], "odd": [57, 80, 278, 378, 382, 484, 508, 632, 806, 817, 823], "drawn": [57, 66, 80, 89, 382, 508, 509, 510, 511, 512, 643, 738, 739, 740, 741, 776, 777, 778, 791, 844], "dirichlet": [57, 80, 382], "10598304": [57, 382, 510], "21537054": [57, 382, 510], "67864642": [57, 382, 510], "48006698": [57, 382, 510], "07472073": [57, 382, 510], "44521229": [57, 382, 510], "55479872": [57, 382, 510], "05426367": [57, 382, 510], "39093761": [57, 382, 510], "19531053": [57, 382, 510], "51675832": [57, 382, 510], "28793114": [57, 382, 510], "12315625": [57, 382, 510], "29823365": [57, 382, 510], "5786101": [57, 382, 510], "15564976": [57, 382, 510], "50542368": [57, 382, 510], "33892656": [57, 382, 510], "1325352": [57, 382, 510], "44439589": [57, 382, 510], "42306891": [57, 382, 510], "gamma": [57, 65, 80, 88, 342, 354, 372, 382, 387, 526, 642, 737], "lam": [57, 80, 382, 512], "_arraywithsearchingexperiment": [57, 102], "unravel_index": [57, 80, 383], "unravel": [57, 80, 383, 513], "_arraywithsetexperiment": [57, 102], "_arraywithsortingexperiment": [57, 102], "lexsort": [57, 80, 385], "indirectli": [57, 80, 385, 515], "statist": [57, 80, 95, 378, 484, 795, 810, 818, 829, 844, 845, 870], "_arraywithstatisticalexperiment": [57, 102], "bincount": [57, 80, 387], "minlength": [57, 80, 387, 520], "corrcoef": [57, 80, 387], "rowvar": [57, 80, 387, 521, 522], "relationship": [57, 80, 521, 791, 843], "cov": [57, 80, 387], "ddof": [57, 80, 387, 522], "fweight": [57, 80, 387, 522], "aweight": [57, 80, 387, 522], "overridden": [57, 80, 387, 522, 796, 824], "assign": [57, 80, 97, 387, 522, 818, 820, 825, 829, 840, 843, 851], "covari": [57, 80, 387, 522], "cummax": [57, 80, 387], "exclus": [57, 58, 70, 74, 80, 81, 93, 126, 376, 387, 445, 523, 524, 564, 565, 568, 629, 634, 643, 647, 739, 757, 758, 815, 827, 829, 837, 854, 874, 876], "cumul": [57, 70, 80, 93, 387, 523, 524, 647, 757, 758], "uint64": [57, 70, 162, 167, 169, 170, 180, 182, 185, 387, 523, 524, 630, 647, 757, 758, 763, 765, 776, 777, 829, 844, 849], "uint16": [57, 70, 157, 162, 167, 168, 177, 387, 523, 524, 630, 647, 757, 758, 763, 765, 776, 777, 829, 841, 844, 849], "bit": [57, 70, 164, 165, 168, 231, 232, 234, 387, 523, 524, 630, 632, 647, 757, 758, 763, 765, 812, 817, 818, 819, 827, 828, 829, 831, 837, 849, 851, 876], "uint32": [57, 70, 162, 167, 168, 169, 191, 387, 523, 524, 630, 647, 757, 758, 763, 765, 776, 777, 829, 844, 849], "cummin": [57, 80, 387], "histogram": [57, 80, 387], "extend_lower_interv": [57, 80, 387, 525], "extend_upper_interv": [57, 80, 387, 525], "densiti": [57, 80, 387, 525], "monoton": [57, 80, 387, 525], "rightmost": [57, 80, 387, 525], "c1": [57, 80, 387, 525, 827], "ff": [57, 80, 387, 525], "c_": [57, 80, 98, 387, 525], "igamma": [57, 80, 387], "incomplet": [57, 80, 387, 526, 820], "3614": [57, 80, 387, 526], "2085": [57, 80, 387, 526], "median": [57, 80, 378, 387, 484, 529], "nanmean": [57, 80, 387], "6666666666666665": [57, 80, 387, 528], "nanmedian": [57, 80, 387], "overwrite_input": [57, 80, 387, 529], "treat": [57, 74, 80, 103, 278, 356, 372, 378, 381, 387, 493, 506, 529, 531, 632, 773, 839, 844, 850, 854], "undefin": [57, 80, 378, 387, 388, 484, 529, 533, 829, 833, 839], "nanmin": [57, 80, 387], "nanprod": [57, 80, 387], "Not": [57, 80, 356, 372, 376, 387, 431, 531, 627, 825, 833, 842, 852, 853, 855], "quantil": [57, 80, 387, 867], "inclus": [57, 80, 126, 387, 532, 629, 643, 739, 813, 825, 840, 847], "midpoint": [57, 80, 387, 532], "surround": [57, 80, 387, 532, 847], "whichev": [57, 80, 387, 532], "_arraywithutilityexperiment": [57, 102], "optional_get_el": [57, 80, 388], "empti": [57, 58, 70, 74, 81, 93, 126, 378, 388, 484, 533, 540, 577, 629, 634, 637, 641, 647, 648, 691, 694, 732, 762, 763, 765, 767, 768, 818, 819, 824, 826, 829, 830, 840], "_arraywithgener": [58, 102], "all_equ": [58, 81, 634], "equality_matrix": [58, 81, 534, 634], "array_equ": [58, 81, 634], "assert_supports_inplac": [58, 81, 634], "ivybackendexcept": [58, 81, 538, 562, 634, 807, 824, 830, 833, 834], "clip_matrix_norm": [58, 81, 634], "894": [58, 81, 540, 541, 634, 642, 737], "clip_vector_norm": [58, 81, 634], "default_v": [58, 544, 634], "catch_except": [58, 544, 634], "rev": [58, 544, 634], "with_cal": [58, 544, 634], "catch": [58, 544, 634, 838, 844], "einops_rearrang": [58, 81, 634], "axes_length": [58, 81, 545, 546, 547, 634], "arrang": [58, 545, 634], "rearrang": [58, 81, 545, 547, 634, 843], "einops_reduc": [58, 81, 634, 829], "einops_repeat": [58, 81, 634], "fourier_encod": [58, 81, 634], "max_freq": [58, 81, 549, 634], "oppos": [58, 81, 549, 634, 829], "geometr": [58, 81, 549, 634, 637, 692], "0000000e": [58, 81, 549, 634], "2246468e": [58, 81, 549, 634], "4492936e": [58, 549, 634], "6739404e": [58, 81, 549, 634], "batch_dim": [58, 81, 552, 553, 634, 798], "gather_nd": [58, 81, 634], "get_num_dim": [58, 81, 634], "as_arrai": [58, 81, 556, 590, 634, 798], "has_nan": [58, 81, 634], "include_inf": [58, 81, 558, 613, 634], "inplace_decr": [58, 81, 634], "val": [58, 74, 79, 81, 253, 378, 473, 560, 561, 562, 581, 582, 583, 632, 634, 829, 840, 851], "decrement": [58, 81, 560, 634], "inplace_incr": [58, 81, 634], "increment": [58, 81, 561, 634, 820, 870], "inplace_upd": [58, 81, 580, 634, 789, 840], "ensure_in_backend": [58, 81, 562, 634, 840], "keep_input_dtyp": [58, 81, 562, 634, 840], "is_arrai": [58, 81, 634, 840, 841], "is_ivy_arrai": [58, 81, 634, 840, 851], "is_ivy_contain": [58, 634], "is_native_arrai": [58, 81, 176, 565, 630, 634, 851], "isin": [58, 81, 634, 867], "test_el": [58, 81, 569, 634], "assume_uniqu": [58, 81, 569, 634], "invert": [58, 81, 231, 569, 632, 634, 637, 679], "scatter_flat": [58, 81, 634], "occupi": [58, 165, 168, 576, 577, 630, 634], "scatter_nd": [58, 81, 634, 847, 851], "stable_divid": [58, 81, 634, 837], "denomin": [58, 65, 81, 88, 583, 592, 606, 634, 642, 737, 795, 837, 846, 855, 867], "min_denomin": [58, 81, 583, 592, 606, 634, 846], "_min_denomin": [58, 592, 634], "stable_pow": [58, 81, 634], "min_bas": [58, 81, 582, 593, 605, 634, 795, 846], "stabl": [58, 69, 81, 92, 147, 328, 335, 336, 369, 372, 385, 515, 582, 583, 592, 593, 605, 606, 629, 634, 646, 753, 756, 778, 819, 825, 829, 841, 846, 849, 855], "00004": [58, 81, 593, 634], "00008": [58, 81, 593, 634], "00004000e": [58, 593], "56002560e": [58, 593], "60001200e": [58, 593], "09602048e": [58, 593], "supports_inplace_upd": [58, 81, 634], "to_fil": 58, "fid": 58, "sep": 58, "format_": 58, "recov": [58, 833, 841], "to_scalar": [58, 81, 634], "value_is_nan": [58, 81, 634], "_arraywithgradi": [59, 102], "adam_step": [59, 82, 635], "mw": [59, 82, 615, 616, 635, 853], "vw": [59, 82, 615, 616, 635, 853], "beta1": [59, 82, 536, 615, 616, 621, 634, 635, 796, 853], "beta2": [59, 82, 536, 615, 616, 621, 634, 635, 796, 853], "epsilon": [59, 62, 63, 82, 85, 86, 536, 615, 616, 621, 634, 635, 637, 638, 680, 683, 696, 697, 698, 788, 793, 795, 796, 827, 837, 840, 853], "dc": [59, 82, 615, 616, 619, 621, 622, 623, 635], "dw": [59, 82, 615, 616, 619, 621, 622, 623, 635], "forget": [59, 82, 615, 616, 621, 635, 796, 812, 829], "dcdw": [59, 82, 615, 616, 619, 621, 622, 635], "adam_step_delta": [59, 82, 615, 635], "2020105": [59, 615, 635], "22187898": [59, 615, 635], "24144873": [59, 615, 635], "10000002": [59, 93, 296, 367, 615, 761], "00300002": [59, 615], "00800002": [59, 615], "adam_upd": [59, 82, 635, 853], "mw_tm1": [59, 82, 616, 621, 635], "vw_tm1": [59, 82, 616, 621, 635], "ws_new": [59, 82, 616, 621, 622, 623, 635], "updated_weight": [59, 82, 616, 635], "92558753": [59, 616], "92558873": [59, 616, 635], "92558718": [59, 616, 635], "00000063e": [59, 82, 616, 635], "00000016e": [59, 82, 616, 635], "00000086e": [59, 82, 616, 635], "gradient_descent_upd": [59, 82, 635, 640, 715, 716, 717], "descent": [59, 82, 619, 635, 796, 853, 870], "new_weight": [59, 82, 619, 621, 622, 635, 852], "lamb_upd": [59, 82, 635], "max_trust_ratio": [59, 82, 621, 635, 796], "decay_lambda": [59, 82, 621, 622, 635, 796], "trust": [59, 82, 621, 635, 796], "ratio": [59, 82, 621, 635, 796], "decai": [59, 82, 621, 622, 635, 796], "lamb": [59, 82, 621, 635, 796, 853], "784": [59, 621, 635], "lars_upd": [59, 82, 635], "lar": [59, 82, 622, 635, 796, 853], "34077978": [59, 622, 635], "78025991": [59, 622, 635], "56051969": [59, 622, 635], "78026009": [59, 622, 635], "56051981": [59, 622, 635], "12103939": [59, 622, 635], "optimizer_upd": [59, 82, 635], "effective_grad": [59, 82, 623, 635], "3e": [59, 82, 623, 635], "preserve_typ": [59, 82, 624, 635], "_arraywithimag": [60, 102], "_arraywithlay": [61, 102], "conv1d": [61, 84, 636, 792], "filter_format": [61, 84, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657], "channel_last": [61, 84, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657, 776], "x_dilat": [61, 84, 636, 649, 650, 652, 653, 654, 656], "d_out": [61, 84, 375, 392, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657], "channel_first": [61, 84, 636, 649, 650, 651, 652, 653, 654, 655, 656, 657], "wio": [61, 636, 649, 650, 651, 656], "conv1d_transpos": [61, 84, 636], "output_shap": [61, 84, 636, 649, 651, 653, 655, 657, 792], "iow": [61, 84, 636, 651], "woi": [61, 84, 636, 651], "fh": [61, 84, 636, 641, 649, 652, 653, 654, 655, 656, 657, 658, 730], "hwio": [61, 636, 649, 650, 652, 656], "conv2d_transpos": [61, 84, 636], "iohw": [61, 84, 636, 653], "hwoi": [61, 84, 636, 653], "conv3d": [61, 84, 636, 655, 792], "fd": [61, 84, 636, 649, 654, 655, 656, 657], "conv3d_transpos": [61, 84, 636, 657], "iodhw": [61, 84, 636, 655, 657], "dhwoi": [61, 84, 636, 655, 657], "depthwise_conv2d": [61, 84, 636], "randint": [61, 66, 68, 84, 89, 643, 645, 658, 662, 749, 812, 829, 863], "noise_shap": [61, 84, 636, 659], "42857146": [61, 636, 659], "85714293": [61, 636, 659], "28571415": [61, 84, 636, 659], "71428585": [61, 84, 636, 659], "14285755": [61, 84, 636, 659], "5714283": [61, 636, 659], "4285717": [61, 84, 636, 659], "8571434": [61, 84, 636, 659], "2857151": [61, 636, 659], "dropout1d": [61, 84, 375, 400], "dropout2d": [61, 84, 375], "dropout3d": [61, 84, 375], "outer_batch_shap": [61, 84, 636, 660], "inner_batch_shap": [61, 84, 636, 660], "lstm_updat": [61, 84, 636, 849], "init_h": [61, 84, 636, 662, 849], "init_c": [61, 84, 636, 662, 849], "recurrent_kernel": [61, 84, 636, 662, 849], "recurrent_bia": [61, 84, 636, 662, 849], "hidden": [61, 84, 636, 661, 662, 792, 826, 833, 849, 853], "recurr": [61, 80, 84, 375, 421, 636, 662, 849, 870, 874], "timestep": [61, 80, 84, 375, 421, 636, 661, 662, 663, 792, 849], "h_i": [61, 84, 662], "c_i": [61, 84, 662], "rc": [61, 84, 662], "multi_head_attent": [61, 84, 636, 840], "num_head": [61, 84, 636, 663, 792], "in_proj_weight": [61, 84, 636, 663], "q_proj_weight": [61, 84, 636, 663], "k_proj_weight": [61, 84, 636, 663], "v_proj_weight": [61, 84, 636, 663], "out_proj_weight": [61, 84, 636, 663], "in_proj_bia": [61, 84, 636, 663], "out_proj_bia": [61, 84, 636, 663], "is_caus": [61, 84, 636, 663, 666], "key_padding_mask": [61, 84, 636, 663], "bias_k": [61, 84, 636, 663], "bias_v": [61, 84, 636, 663], "static_k": [61, 84, 636, 663], "static_v": [61, 84, 636, 663], "add_zero_attn": [61, 84, 636, 663], "return_attention_weight": [61, 84, 636, 663], "average_attention_weight": [61, 84, 636, 663], "scaled_dot_product_attent": [61, 84, 636], "dropout_p": [61, 84, 636, 666], "num_queri": [61, 84, 636, 666], "feat_dim": [61, 84, 636, 666], "num_kei": [61, 84, 636, 666], "causal": [61, 84, 636, 663, 666], "attent": [61, 84, 636, 663, 666, 792, 820, 824, 860], "29999995": [61, 296, 297, 307, 367, 375, 419, 636, 645, 666, 750], "19994521": [61, 636, 666], "09994531": [61, 636, 666], "30000019": [61, 378, 468, 636, 666], "_arraywithlinearalgebra": [62, 102], "choleski": [62, 85, 637, 840], "625": [62, 80, 348, 637, 667], "vif": [62, 85, 668], "det": [62, 85, 637, 685, 828], "axis1": [62, 64, 85, 87, 637, 639, 671, 691, 711], "axis2": [62, 85, 637, 671, 691], "eigh": [62, 85, 376, 429, 637, 672], "uplo": [62, 85, 637, 673, 674], "eigvalsh": [62, 85, 637], "array_lik": [62, 85, 375, 377, 378, 420, 453, 454, 458, 459, 489, 637, 675, 682, 806], "203": [62, 79, 229, 637, 642, 675, 737], "233": [62, 637, 675], "inv": [62, 85, 637], "transpose_a": [62, 85, 637, 677], "transpose_b": [62, 85, 637, 677], "adjoint_a": [62, 85, 637, 677], "adjoint_b": [62, 85, 637, 677], "matrix_norm": [62, 85, 637], "ord": [62, 85, 637, 678, 694], "fro": [62, 85, 377, 453, 637, 678], "nuc": [62, 85, 637, 678], "performingth": [62, 678], "matrix_pow": [62, 85, 637], "matrix_rank": [62, 85, 637], "hermitian": [62, 85, 376, 429, 430, 637, 672, 673, 674, 680, 687], "largest_singular_valu": [62, 85, 637, 680, 683], "defici": [62, 637, 680], "matrix_transpos": [62, 85, 637, 851], "pinv": [62, 85, 637], "pseudo": [62, 85, 637, 683, 839], "99999988": [62, 85, 637, 683], "qr": [62, 85, 637, 842], "12309149": [62, 637, 684], "90453403": [62, 637, 684], "40824829": [62, 637, 684], "49236596": [62, 637, 684], "30151134": [62, 637, 684], "81649658": [62, 637, 684], "86164044": [62, 637, 684], "12403841e": [62, 637, 684], "60113630e": [62, 637, 684], "10782342e": [62, 637, 684], "04534034e": [62, 637, 684], "80906807e": [62, 637, 684], "88178420e": [62, 85, 637, 674, 684], "slogdet": [62, 85, 637], "logabsdet": [62, 85, 637, 685], "natur": [62, 85, 243, 261, 262, 263, 264, 283, 354, 372, 632, 637, 685, 824, 831, 833, 842, 860], "098611": [62, 637, 685], "solv": [62, 85, 376, 440, 637, 776, 812, 819, 823, 834, 841, 850, 872], "full_matric": [62, 85, 637, 687], "svf": [62, 687], "reconstructed_x": [62, 637, 687], "svdval": [62, 85, 637], "tensorsolv": [62, 85, 637], "vander": [62, 85, 637], "vandermond": [62, 85, 637, 692], "vecdot": [62, 85, 637], "vector_norm": [62, 85, 637], "mathemat": [62, 85, 223, 228, 240, 245, 247, 263, 273, 627, 632, 637, 678, 694, 829, 841, 847, 870, 876], "manhattan": [62, 85, 637, 694], "euclidean": [62, 85, 97, 98, 637, 694], "7416575": [62, 85, 637, 694], "vector_to_skew_symmetric_matrix": [62, 85, 637], "_arraywithloss": [63, 102], "binary_cross_entropi": [63, 86, 638, 828], "from_logit": [63, 86, 638, 696, 793], "pos_weight": [63, 86, 638, 696], "crossentropi": [63, 86, 638, 696], "26765382": [63, 638, 696], "34657359": [63, 638, 697], "sparse_cross_entropi": [63, 86, 638], "07438118": [63, 86, 698], "11889165": [63, 698], "_arraywithmanipul": [64, 102], "x_min": [64, 87, 639, 699, 854], "x_max": [64, 87, 639, 699, 854], "before_1": [64, 87, 378, 484, 639, 701, 714], "after_1": [64, 87, 378, 484, 639, 701, 714], "before_n": [64, 87, 378, 484, 639, 701, 714], "after_n": [64, 87, 378, 484, 639, 701, 714], "repetit": [64, 87, 639, 705, 712, 847], "flat": [64, 74, 87, 383, 513, 576, 634, 639, 705], "allowzero": [64, 87, 639, 706], "remain": [64, 67, 80, 87, 90, 223, 240, 241, 247, 255, 256, 273, 276, 282, 284, 375, 399, 400, 401, 420, 632, 639, 641, 644, 706, 724, 747, 806, 819, 820, 828, 831, 833, 837, 845, 847, 855], "roll": [64, 87, 639, 836, 867], "shift": [64, 76, 87, 103, 136, 147, 232, 234, 328, 369, 629, 632, 639, 707, 819, 820, 830, 831, 836, 843, 867], "restor": [64, 87, 639, 707, 835], "num_or_size_split": [64, 74, 87, 639, 708, 849], "with_remaind": [64, 74, 87, 639, 708], "squeezabl": [64, 639, 709], "swapax": [64, 87, 639], "axis0": [64, 87, 639, 711], "swap_ax": [64, 711], "swap": [64, 87, 639, 711, 801, 864], "tile": [64, 81, 87, 547, 639], "unpack": [64, 87, 639, 713, 842, 844], "zero_pad": [64, 87, 639], "_arraywithnorm": [65, 102], "layer_norm": [65, 88, 642], "normalized_idx": [65, 88, 642, 737], "new_std": [65, 88, 642, 737, 795], "learnabl": [65, 88, 636, 640, 642, 661, 717, 737, 792, 795, 854], "0976": [65, 642, 737], "3452": [65, 642, 737], "2740": [65, 642, 737], "1047": [65, 642, 737], "5886": [65, 642, 737], "2732": [65, 642, 737], "7696": [65, 642, 737, 776], "7024": [65, 642, 737], "2518": [65, 642, 737], "826": [65, 642, 737], "178": [65, 642, 737], "981": [65, 642, 737], "831": [65, 642, 737], "421": [65, 642, 737], "_arraywithrandom": [66, 102], "multinomi": [66, 89, 382, 510, 643], "population_s": [66, 89, 643, 738], "num_sampl": [66, 89, 643, 738], "unnorm": [66, 89, 643, 738, 844], "popul": [66, 70, 74, 89, 93, 643, 647, 738, 764, 766, 829, 830, 840, 844, 849, 876], "draw": [66, 89, 382, 508, 510, 512, 643, 738, 740, 741, 776, 777, 778, 779, 784, 791, 818, 823, 842, 844], "half": [66, 89, 126, 287, 629, 632, 643, 739, 741, 816, 834, 847], "235": [66, 740], "float16": [66, 77, 89, 134, 157, 159, 160, 165, 167, 346, 372, 629, 630, 637, 694, 740, 741, 776, 777, 816, 829, 834, 841, 844], "807": [66, 740], "_arraywithsearch": [67, 102], "select_last_index": [67, 90, 644, 744, 745], "occurr": [67, 378, 387, 498, 520, 644, 645, 744, 745, 749], "argmin": [67, 90, 644, 867], "output_dtyp": [67, 90, 644, 745], "argwher": [67, 90, 644], "nonzero": [67, 90, 98, 221, 222, 223, 226, 229, 238, 240, 243, 245, 247, 273, 286, 291, 632, 644], "as_tupl": [67, 90, 644, 747], "fewer": [67, 90, 644, 747], "_arraywithset": [68, 102], "unique_al": [68, 91, 645], "by_valu": [68, 91, 645, 749], "inverse_indic": [68, 91, 378, 498, 645, 749, 751], "unique_count": [68, 91, 645], "unique_invers": [68, 91, 645], "unique_valu": [68, 91, 645], "admonit": [68, 752], "dask": [68, 645, 749, 750, 751, 752, 860], "difficult": [68, 645, 749, 750, 751, 752, 820, 823, 829, 844, 855], "omit": [68, 283, 632, 645, 749, 750, 751, 752, 836, 840, 841], "x_i": [68, 70, 79, 98, 220, 221, 222, 225, 226, 227, 229, 231, 236, 237, 238, 243, 245, 246, 253, 254, 255, 256, 257, 261, 262, 263, 264, 268, 275, 280, 283, 284, 285, 286, 287, 288, 290, 291, 293, 335, 336, 338, 359, 372, 632, 645, 647, 749, 750, 751, 752, 760, 761, 762, 764, 765, 766, 791, 832], "x_j": [68, 645, 749, 750, 751, 752], "typeerror": [68, 91, 645, 752, 851], "_arraywithsort": [69, 102], "stabil": [69, 92, 592, 593, 634, 646, 753, 756, 829, 839, 845, 847], "msort": [69, 92, 646], "searchsort": [69, 92, 646, 777], "sorter": [69, 92, 646, 755], "ret_dtyp": [69, 92, 646, 755], "_arraywithstatist": [70, 102], "cumprod": [70, 93, 647, 841, 854, 867], "cumsum": [70, 93, 647, 829, 867], "einsum": [70, 93, 647], "equat": [70, 80, 93, 314, 369, 376, 446, 637, 647, 686, 759, 776, 805, 828, 870], "operand": [70, 80, 84, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 245, 246, 247, 254, 255, 256, 261, 262, 263, 264, 265, 273, 276, 278, 282, 283, 284, 285, 286, 287, 290, 291, 293, 335, 336, 359, 363, 372, 373, 375, 418, 632, 637, 647, 685, 691, 759, 760, 762, 763, 765, 805, 806, 824, 827, 832, 841], "contract": [70, 637, 647, 689, 759, 806], "seq": [70, 647, 759, 776], "ii": [70, 93, 647, 759, 820], "jk": [70, 647, 759, 806], "ik": [70, 647, 759, 806], "126": [70, 110, 279, 626, 632, 637, 647, 679, 759], "510": [70, 647, 759], "special": [70, 85, 97, 98, 102, 103, 220, 221, 222, 223, 225, 226, 227, 228, 229, 236, 237, 238, 240, 241, 243, 245, 246, 247, 254, 255, 256, 261, 262, 263, 264, 265, 268, 273, 276, 278, 282, 283, 284, 285, 286, 287, 290, 291, 293, 335, 336, 359, 372, 632, 637, 647, 685, 691, 760, 761, 762, 763, 764, 765, 766, 776, 777, 778, 779, 784, 791, 818, 821, 823, 824, 826, 828, 831, 832, 833, 836, 840, 842, 843, 844, 845, 847, 870, 871, 872], "arithmet": [70, 93, 234, 240, 273, 632, 647, 761, 841], "propag": [70, 234, 335, 336, 372, 632, 647, 760, 761, 762, 764, 765, 766, 839], "overflow": [70, 93, 223, 240, 247, 632, 637, 647, 685, 761, 765, 817, 829], "04999995": [70, 761], "freedom": [70, 93, 647, 764, 766, 825], "constitut": [70, 93, 647, 764, 766, 837, 849, 871], "commonli": [70, 93, 647, 764, 766, 833, 837, 839], "81649661": [70, 647, 764], "6666665": [70, 766, 852], "667": [70, 81, 240, 541, 592, 632, 634, 766], "_arraywithutil": [71, 102], "logic": [71, 94, 204, 240, 241, 267, 268, 269, 273, 276, 631, 632, 648, 767, 768, 818, 824, 828, 829, 830, 833, 837, 838, 839, 840, 841, 843, 844, 847, 851, 864], "AND": [71, 94, 230, 241, 267, 632, 648, 767], "OR": [71, 94, 233, 269, 276, 632, 648, 768, 819, 820, 839], "_wrap_funct": [72, 95, 826, 837, 838], "function_nam": [72, 95, 818, 845], "new_funct": [72, 95, 826], "add_ivy_array_instance_method": 72, "cl": [72, 95], "moduletyp": [72, 95, 863, 864, 865], "toi": [72, 95], "arrayexampl": 72, "hasattr": [72, 95], "_containerwithactiv": [73, 103], "dict_in": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "queue": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 586, 609, 634, 846, 852], "queue_load_s": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "container_combine_method": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "list_join": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "queue_timeout": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103, 586, 609, 634, 846], "print_limit": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "key_length_limit": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "print_ind": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "print_line_spac": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "ivyh": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "default_key_color": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "keyword_color_dict": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "rebuild_child_contain": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "types_to_iteratively_nest": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "alphabetical_kei": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "dynamic_backend": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 102, 103, 793, 794, 825, 846], "build_cal": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 103], "containerbas": [73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 827], "_static_gelu": 73, "key_chain": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 163, 165, 168, 171, 172, 173, 175, 177, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 317, 318, 328, 329, 333, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 360, 361, 362, 363, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 411, 412, 413, 414, 418, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 471, 480, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 509, 514, 515, 522, 523, 524, 525, 532, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "to_appli": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 163, 165, 168, 171, 172, 173, 175, 177, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 317, 318, 328, 329, 333, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 360, 361, 362, 363, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 411, 412, 413, 414, 418, 419, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 471, 480, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 509, 514, 515, 522, 523, 524, 525, 532, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 641, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "prune_unappli": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 163, 165, 168, 171, 172, 173, 175, 177, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 317, 318, 328, 329, 333, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 360, 361, 362, 363, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 411, 412, 413, 414, 418, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 471, 480, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 509, 514, 515, 522, 523, 524, 525, 532, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 641, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 731, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "map_sequ": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 128, 129, 131, 133, 134, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 155, 163, 165, 168, 171, 172, 173, 175, 177, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 314, 317, 318, 328, 329, 333, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 360, 361, 362, 363, 389, 390, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 411, 412, 413, 414, 418, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 471, 480, 482, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 498, 500, 501, 502, 503, 504, 505, 507, 509, 514, 515, 522, 523, 524, 525, 532, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 650, 651, 652, 653, 654, 655, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768], "prune": [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 110, 111, 112, 113, 114, 115, 116, 117, 118, 134, 136, 141, 143, 149, 153, 155, 168, 172, 173, 180, 214, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 303, 304, 305, 306, 307, 309, 310, 311, 313, 334, 335, 336, 337, 338, 340, 342, 350, 351, 357, 359, 361, 362, 363, 399, 400, 401, 419, 452, 453, 454, 455, 456, 457, 458, 459, 462, 463, 464, 468, 469, 490, 492, 493, 494, 496, 501, 503, 504, 505, 507, 509, 522, 523, 524, 525, 534, 537, 538, 540, 541, 545, 546, 547, 548, 549, 552, 553, 556, 558, 560, 561, 562, 564, 565, 568, 576, 577, 591, 592, 593, 595, 597, 599, 600, 613, 619, 624, 641, 650, 651, 652, 653, 659, 660, 666, 667, 668, 673, 674, 675, 676, 677, 678, 680, 682, 684, 685, 691, 696, 697, 698, 699, 703, 706, 707, 708, 709, 710, 713, 714, 731, 732, 733, 734, 738, 739, 740, 741, 743, 746, 749, 750, 751, 752, 753, 757, 758, 761, 763, 764, 766, 767, 768, 774, 777, 828], "static_gelu": 73, "046": 73, "_static_hardswish": 73, "_static_leaky_relu": 73, "static_leaky_relu": 73, "38999999": [73, 80, 112, 295, 296, 367], "_static_log_softmax": 73, "static_log_softmax": 73, "371": [73, 113], "_static_mish": 73, "static_mish": 73, "30883577": [73, 114, 626], "28903052": [73, 114, 626], "10714479": [73, 114, 626], "_static_relu": 73, "static_relu": 73, "_static_sigmoid": 73, "static_sigmoid": 73, "2689414": [73, 116, 117, 626], "7310586": [73, 116, 117, 626], "88079703": [73, 116, 626], "62245935": [73, 116], "4750208": [73, 116], "_static_softmax": 73, "static_softmax": 73, "72844321": [73, 117], "19852395": [73, 117], "07303288": [73, 117], "_static_softplu": 73, "revert": [73, 118, 626], "static_softplu": 73, "53499615": 73, "42036411": 73, "948": [73, 118, 641, 718], "dictionari": [74, 91, 103, 212, 601, 617, 631, 634, 635, 752, 771, 773, 806, 824, 828, 829, 837, 841, 842, 852, 855], "asynchron": [74, 103, 870], "wait": [74, 103, 586, 634, 812, 818, 820, 828, 841], "arriv": [74, 103, 586, 634, 847], "cont_list_join": [74, 103], "whitespac": [74, 103], "indent": [74, 103, 852], "newlin": [74, 103, 832], "termin": [74, 103, 819, 820, 827, 834, 835, 849, 852], "constructor": [74, 103, 536, 634, 773, 789, 797, 829, 830, 832, 851], "kept": [74, 103, 640, 715, 716, 820, 840, 845], "encount": [74, 103, 792, 816, 818, 829, 833, 834, 844], "node": [74, 81, 103, 538, 548, 595, 641, 728, 729, 791, 800, 826, 827, 841, 860, 863, 864, 871], "alphabet": [74, 103], "__setitem__": [74, 378, 492, 824, 827, 851], "_cont_at_key_chains_input_as_dict": 74, "current_chain": 74, "ignore_key_error": 74, "_cont_at_key_chains_input_as_seq": 74, "_cont_call_static_method_with_flexible_arg": 74, "static_method": 74, "kw": 74, "self_idx": 74, "_cont_concat_unifi": 74, "_cont_get_dev": 74, "_cont_get_dtyp": 74, "_cont_get_shap": 74, "_cont_ivi": 74, "_cont_mean_unifi": 74, "_1": 74, "_cont_prune_key_chains_input_as_dict": 74, "return_cont": 74, "_cont_prune_key_chains_input_as_seq": 74, "_cont_slice_kei": 74, "key_slic": 74, "_cont_sum_unifi": 74, "_get_queue_item": 74, "cont_all_fals": 74, "assert_is_bool": 74, "cont_all_key_chain": 74, "include_empti": 74, "cont_all_tru": [74, 827, 852], "cont_as_bool": 74, "cont_assert_contains_sub_contain": 74, "sub_cont": 74, "screen": [74, 818, 819, 852], "cont_assert_contains_sub_structur": 74, "check_shap": [74, 798], "cont_assert_ident": 74, "check_typ": 74, "same_arrai": [74, 852], "arrays_equ": 74, "cont_assert_identical_structur": 74, "assert_and_assign": 74, "congruent": 74, "cont_at_key_chain": 74, "ignore_non": 74, "cont_at_kei": 74, "substr": 74, "cont_combin": 74, "duplic": [74, 378, 489, 557, 634, 641, 720, 825, 832, 838, 839, 842, 853, 876], "configur": [74, 212, 631, 641, 731, 819, 820, 826, 828, 829, 834, 835], "container_rightmost": 74, "cont_common_key_chain": 74, "cont_config": 74, "cont_contains_sub_contain": 74, "cont_contains_sub_structur": 74, "cont_copi": [74, 852], "cont_create_if_abs": 74, "noth": [74, 847, 876], "cont_cutoff_at_depth": 74, "depth_cutoff": 74, "cont_cutoff_at_height": 74, "height_cutoff": 74, "cont_deep_copi": [74, 852, 863], "cont_dev": 74, "cont_dev_str": 74, "cont_diff": [74, 852], "diff_kei": 74, "detect_key_diff": 74, "detect_value_diff": 74, "detect_shape_diff": 74, "container0": 74, "cont_dtyp": 74, "cont_duplicate_array_keychain": 74, "cont_find_sub_contain": 74, "sub_cont_to_find": 74, "cont_find_sub_structur": 74, "sub_struc_to_find": 74, "cont_flatten_key_chain": [74, 852], "above_height": [74, 852], "below_depth": [74, 852], "cont_format_key_chain": 74, "format_fn": 74, "cont_from_disk_as_hdf5": [74, 852], "h5_obj_or_filepath": 74, "slice_obj": 74, "disk": [74, 794, 852, 869], "h5py": 74, "filepath": [74, 648, 769, 770, 820, 823], "cont_from_disk_as_json": [74, 852], "json_filepath": 74, "cont_from_disk_as_pickl": [74, 852], "pickle_filepath": 74, "cont_from_flat_list": 74, "flat_list": 74, "hierarchi": [74, 810, 818, 843, 852, 866, 876], "cont_handle_inplac": 74, "prime": [74, 829], "overwritten": [74, 824, 825], "cont_has_kei": 74, "query_kei": 74, "somewher": [74, 828], "cont_has_key_chain": 74, "cont_ident": [74, 852], "cont_identical_array_shap": 74, "cont_identical_config": 74, "cont_identical_structur": 74, "cont_if_exist": 74, "cont_inplace_upd": 74, "cont_ivi": 74, "cont_key_chains_contain": 74, "sub_str": 74, "cont_list_stack": [74, 852], "cont_load": 74, "cont_map": [74, 827, 852], "func": [74, 97, 213, 364, 365, 366, 374, 539, 614, 617, 618, 620, 625, 631, 634, 635, 641, 731, 773, 818, 823, 824, 831, 833, 839], "cont_map_sub_cont": 74, "include_self": 74, "possibli": [74, 597, 634, 776, 844, 855], "cont_max_depth": 74, "cont_multi_map": 74, "map_nest": 74, "assert_ident": 74, "leftmost": [74, 641, 731], "cont_multi_map_in_funct": 74, "cont_num_arrai": 74, "cont_overwrite_at_key_chain": 74, "target_dict": 74, "return_dict": 74, "cont_prune_empti": 74, "keep_non": 74, "cont_prune_key_chain": 74, "key1": [74, 812, 853], "key2": [74, 812], "key3": 74, "cont_prune_key_from_key_chain": 74, "certain": [74, 126, 137, 138, 377, 454, 629, 818, 819, 820, 823, 829, 837, 843, 844, 847, 855, 863, 864, 865, 874], "cont_prune_kei": 74, "cont_prune_keys_from_key_chain": 74, "cont_reduc": 74, "cont_remove_key_length_limit": 74, "cont_remove_print_limit": 74, "cont_reshape_lik": 74, "leading_shap": 74, "cont_restructur": 74, "keep_orig": 74, "old": [74, 819, 825, 840], "cont_restructure_key_chain": 74, "keychain_map": 74, "cont_sav": 74, "cont_set_at_key_chain": 74, "cont_set_at_kei": 74, "cont_shap": [74, 636, 654], "cont_show": 74, "cont_show_sub_contain": 74, "sub_cont_or_keychain": 74, "cont_size_ordered_arrai": 74, "keychain": [74, 80, 298, 337, 462, 463, 464, 493], "cont_slice_kei": 74, "all_depth": 74, "cont_slice_via_kei": 74, "slice_kei": 74, "cont_sort_by_kei": 74, "cont_structural_diff": 74, "cont_to_dict": 74, "cont_to_disk_as_hdf5": [74, 852], "starting_index": 74, "max_batch_s": 74, "cont_to_disk_as_json": [74, 852], "cont_to_disk_as_pickl": [74, 852], "cont_to_flat_list": 74, "cont_to_iter": [74, 827], "leaf_keys_onli": 74, "cont_to_iterator_kei": 74, "cont_to_iterator_valu": 74, "cont_to_json": 74, "cont_to_nested_list": 74, "cont_to_raw": 74, "cont_trim_kei": 74, "cont_try_kc": 74, "cont_unifi": 74, "concatten": [74, 213, 631], "cont_unstack_cont": 74, "dim_siz": 74, "cont_update_config": 74, "cont_with_default_key_color": 74, "cont_with_entries_as_list": 74, "cont_with_ivy_backend": 74, "ivy_backend": [74, 842], "cont_with_key_length_limit": [74, 852], "cont_with_print_ind": [74, 852], "cont_with_print_limit": [74, 852], "cont_with_print_line_spac": 74, "h5_file_s": 74, "shuffle_h5_fil": 74, "split_cont": 74, "_is_json": 74, "_repr": 74, "_containerwithconvers": [75, 103], "_static_to_ivi": 75, "_static_to_n": 75, "_containerwithcr": [76, 103], "_static_arang": 76, "_static_asarrai": 76, "_static_copy_arrai": 76, "_static_empti": 76, "_static_empty_lik": 76, "_static_ey": 76, "n_row": [76, 80, 132, 147, 328, 369, 376, 437, 629], "n_col": [76, 80, 132, 147, 328, 369, 629], "_static_from_dlpack": 76, "_static_ful": 76, "_static_full_lik": 76, "static_full_lik": 76, "2324": [76, 136, 629], "234": [76, 79, 136, 159, 242, 293, 629, 630, 632, 636, 660, 776], "_static_linspac": 76, "_static_logspac": 76, "static_logspac": 76, "15443469": [76, 138], "64158883": [76, 138], "_static_meshgrid": 76, "_static_native_arrai": 76, "_static_one_hot": 76, "static_one_hot": 76, "_static_on": 76, "_static_ones_lik": 76, "_static_tril": 76, "_static_triu": 76, "_static_zero": 76, "_static_zeros_lik": 76, "frombuff": [76, 629], "expos": [76, 134, 542, 629, 634, 812, 828, 849, 853, 859], "x00": [76, 134, 629], "xf0": [76, 134, 629], "x01": [76, 134, 629], "x02": [76, 134, 629], "x03": [76, 134, 629], "x04": [76, 134, 629], "x05": [76, 134], "5443469": [76, 138, 629], "static_frombuff": 76, "static_triu_indic": 76, "triu_indic": [76, 629], "_containerwithdatatyp": [77, 103], "_static_astyp": 77, "718": [77, 79, 152, 269, 630], "618": [77, 79, 152, 269, 630], "static_astyp": 77, "_static_broadcast_arrai": 77, "static_broadcast_arrai": 77, "_static_broadcast_to": 77, "static_broadcast_to": 77, "_static_can_cast": 77, "from_": [77, 155, 630], "static_can_cast": 77, "_static_default_complex_dtyp": 77, "complex_dtyp": [77, 158, 181, 630], "_static_default_float_dtyp": 77, "float_dtyp": [77, 160, 183, 630], "_static_dtyp": 77, "_static_finfo": 77, "inquir": [77, 165, 168], "static_finfo": 77, "55040e": [77, 165, 630], "7976931348623157e": [77, 165, 630], "308": [77, 165, 630, 776, 844], "_static_function_supported_dtyp": 77, "_static_function_unsupported_dtyp": 77, "_static_iinfo": 77, "1800": [77, 168, 630], "1084": 77, "40000": 77, "static_iinfo": 77, "2147483648": [77, 80, 168, 378, 492, 630], "2147483647": [77, 168, 630], "_static_is_bool_dtyp": 77, "dtype_in": [77, 150, 151, 164, 170, 171, 172, 173, 174, 175, 176, 177, 192, 630], "_static_is_complex_dtyp": 77, "is_complex_dtyp": [77, 630, 845], "roughli": [77, 819, 823, 873], "static_is_complex_dtyp": 77, "_static_is_float_dtyp": 77, "static_is_float_dtyp": 77, "_static_is_int_dtyp": 77, "_static_is_uint_dtyp": 77, "_static_result_typ": 77, "static_result_typ": 77, "broadcats": [77, 153], "_containerwithdevic": [78, 103], "_static_dev": 78, "static_dev": 78, "_static_to_devic": 78, "static_to_devic": 78, "contaion": [78, 197], "_containerwithelementwis": [79, 103], "_static_ab": 79, "static_ab": 79, "_static_aco": 79, "static_aco": 79, "_static_acosh": 79, "static_acosh": 79, "_static_add": 79, "static_add": [79, 107], "_static_asin": 79, "static_asin": 79, "524": [79, 225, 632], "412": [79, 84, 225, 632, 641, 718], "_static_asinh": 79, "static_asinh": 79, "_static_atan": 79, "static_atan": 79, "_static_atan2": 79, "static_atan2": 79, "915": [79, 228, 632], "983": [79, 228, 632], "978": [79, 228, 632], "696": [79, 89, 228, 632, 740], "993": [79, 228, 632], "_static_atanh": 79, "static_atanh": 79, "_static_bitwise_and": 79, "static_bitwise_and": 79, "_static_bitwise_invert": 79, "static_bitwise_invert": 79, "_static_bitwise_left_shift": 79, "_static_bitwise_or": 79, "static_bitwise_or": 79, "_static_bitwise_right_shift": 79, "static_bitwise_right_shift": 79, "_static_bitwise_xor": 79, "static_bitwise_xor": 79, "_static_ceil": 79, "static_ceil": 79, "_static_co": 79, "static_co": 79, "_static_cosh": 79, "static_cosh": 79, "_static_deg2rad": 79, "static_deg2rad": 79, "0262": [79, 239, 279, 632], "873": [79, 239, 279, 632], "_static_divid": 79, "static_divid": 79, "_static_equ": 79, "static_equ": 79, "_static_erf": 79, "static_erf": 79, "27632612": [79, 242], "934008": [79, 242, 632], "99999928": [79, 242], "91903949": [79, 242], "_static_exp": 79, "static_exp": 79, "59814835": [79, 243, 632], "4131622": [79, 243], "_static_expm1": 79, "thefunct": [79, 242], "areal": 79, "static_expm1": 79, "71828175": [79, 243, 632], "38905621": [79, 243, 632], "59815216": 79, "_static_floor": 79, "static_floor": 79, "_static_floor_divid": 79, "static_floor_divid": 79, "_static_great": 79, "static_great": 79, "_static_greater_equ": 79, "static_greater_equ": 79, "_static_isfinit": 79, "999999999999": [79, 254, 632], "static_isfinit": 79, "_static_isinf": 79, "static_isinf": 79, "_static_isnan": 79, "static_isnan": 79, "_static_isr": 79, "0j": [79, 80, 142, 143, 221, 222, 223, 226, 229, 238, 243, 245, 257, 261, 263, 280, 284, 286, 287, 291, 338, 372, 629, 632, 637, 685], "23j": [79, 80], "9j": [79, 80], "static_isr": 79, "_static_lcm": 79, "1080": [79, 258], "1550": [79, 258], "130": [79, 258], "_static_less": 79, "static_less": 79, "_static_less_equ": 79, "static_less_equ": 79, "_static_log": 79, "static_log": 79, "_static_log10": 79, "static_log10": 79, "898": [79, 262, 632], "0414": [79, 262, 632], "_static_log1p": 79, "static_log1p": 79, "_static_log2": 79, "static_log2": 79, "_static_logaddexp": 79, "static_logaddexp": 79, "_static_logical_and": 79, "static_logical_and": 79, "_static_logical_not": 79, "static_logical_not": 79, "_static_logical_or": 79, "static_logical_or": 79, "_static_logical_xor": 79, "static_logical_xor": 79, "_static_maximum": 79, "static_maximum": 79, "_static_minimum": 79, "static_minimum": 79, "_static_multipli": 79, "static_multipli": 79, "_static_neg": 79, "static_neg": 79, "_static_not_equ": 79, "static_not_equ": 79, "_static_posit": 79, "static_posit": 79, "_static_pow": 79, "static_pow": 79, "_static_rad2deg": 79, "static_rad2deg": 79, "5160": 79, "10300": [79, 279, 632], "15500": 79, "20600": 79, "2860": [79, 279], "_static_reciproc": 79, "recirpoc": [79, 281], "static_reciproc": 79, "_static_remaind": 79, "static_remaind": 79, "_static_round": 79, "thevfunct": 79, "527": [79, 283, 632], "static_round": 79, "301": [79, 283, 632], "_static_sign": 79, "static_sign": 79, "_static_sin": 79, "static_sin": 79, "757": [79, 285, 632], "959": [79, 245, 285, 632], "279": [79, 285, 375, 397, 407, 540, 632, 634], "_static_sinh": 79, "static_sinh": 79, "835": [79, 286], "347": [79, 286], "721": [79, 286], "_static_sqrt": 79, "static_sqrt": 79, "_static_squar": 79, "static_squar": 79, "_static_subtract": 79, "static_subtract": 79, "_static_tan": 79, "static_tan": 79, "_static_tanh": 79, "static_tanh": 79, "995": [79, 291, 632], "9999": 79, "_static_trapz": 79, "static_trapz": 79, "_static_trunc": 79, "static_trunc": 79, "_static_trunc_divid": 79, "75j": [79, 224, 253], "01317055": [79, 224], "05634501": [79, 224], "115": [79, 224, 279, 632], "3461759": [79, 224], "524111": [79, 224], "644": [79, 225, 632, 853], "305": [79, 84, 225, 632], "351": [79, 239, 279], "00613": [79, 239], "0154": [79, 239], "403": [79, 243], "428772": [79, 243], "649": [79, 245], "220": [79, 245], "865": [79, 245], "metho": [79, 252, 264], "imaginari": [79, 102, 112, 115, 118, 142, 143, 221, 222, 223, 238, 240, 241, 243, 245, 253, 273, 275, 276, 283, 286, 287, 291, 338, 372, 375, 376, 419, 430, 626, 629, 632, 644, 747, 831], "4j": [79, 253, 375, 419, 593, 632, 634], "7j": [79, 80, 257, 280, 338, 372, 632], "956": [79, 263], "08746284": [79, 266], "32192809": [79, 266], "nuner": [79, 273], "413": [79, 279], "335": [79, 80, 280, 338], "345j": [79, 80, 280, 338], "static_angl": 79, "static_exp2": 79, "static_fmin": 79, "static_gcd": 79, "static_imag": 79, "static_logaddexp2": 79, "static_nan_to_num": 79, "static_r": 79, "_containerwithactivationexperiment": [80, 103], "_static_celu": 80, "formlat": 80, "static_celu": 80, "_static_elu": 80, "static_elu": 80, "_static_hardshrink": 80, "hard": [80, 297, 820, 851, 870], "shrinkag": [80, 297, 307, 378, 491], "_static_hardsilu": 80, "20833333": [80, 298, 367], "29166666": [80, 298, 367], "66666669": [80, 103, 298, 367, 381, 507, 617, 635], "66666663": [80, 137, 298, 367, 629], "_static_hardtanh": 80, "3899": 80, "_static_scaled_tanh": 80, "931": 80, "71587813": 80, "88367474": 80, "00376701": [80, 304], "2285642": 80, "99999881": 80, "49999905": 80, "_static_silu": 80, "static_silu": 80, "27777028": [80, 306], "23947507": [80, 306], "0900332": [80, 306], "_static_softshrink": 80, "_static_tanhshrink": 80, "36634541": [80, 309], "02005103": [80, 309], "00262468": [80, 309], "_static_threshold": 80, "389999": [80, 299], "19722462": [80, 300], "84729779": [80, 300], "31326163": [80, 301], "46328258": [80, 301], "51301527": [80, 301], "79813886": [80, 301], "simplywrap": [80, 304], "54939651": [80, 304], "09999998": [80, 304, 615, 635], "09999999": [80, 304], "08336546": [80, 304], "0379949": [80, 304], "22856998": [80, 305], "42028043": [80, 305], "31868932": [80, 305], "static_logit": 80, "static_logsigmoid": 80, "34115386": 80, "64439666": 80, "24115384": 80, "55435526": 80, "07888974": 80, "00741899": 80, "26328245": 80, "00012302": 80, "static_prelu": 80, "static_relu6": 80, "static_selu": 80, "static_thresholded_relu": 80, "_containerwithconversionexperiment": [80, 103], "_containerwithcreationexperiment": [80, 103], "_static_trilu": 80, "blackman": [80, 312, 369], "00770143e": [80, 312], "49229857e": [80, 312], "hamming_window": [80, 369], "ham": [80, 314, 369], "4180": [80, 314], "8180": [80, 314], "hann_window": [80, 369], "hann": [80, 315, 369], "7500": [80, 315], "3455": [80, 315], "9045": [80, 315], "kaiser_bessel_derived_window": [80, 369], "suitabl": [80, 317, 318, 369, 646, 755, 778, 819, 820, 827, 845, 870], "spectral": [80, 317, 318, 369], "analysi": [80, 317, 318, 369, 870, 871], "kaiser": [80, 312, 317, 318, 369], "70710677": [80, 317, 505, 507], "18493208": [80, 317, 369], "9827513": [80, 317, 369], "kaiser_window": [80, 369], "static_kaiser_window": [80, 318], "2049": [80, 318], "8712": [80, 318], "0367": [80, 318, 369], "7753": [80, 318], "static_blackman_window": 80, "static_eye_lik": 80, "static_hamming_window": 80, "static_hann_window": 80, "static_hann": 80, "static_kaiser_bessel_derived_window": 80, "static_mel_weight_matrix": 80, "static_polyv": 80, "static_tril_indic": 80, "static_unsorted_segment_mean": 80, "static_unsorted_segment_min": 80, "static_unsorted_segment_sum": 80, "static_vorbis_window": 80, "vorbis_window": [80, 369], "vorbi": [80, 333, 369], "38268343": [80, 333, 637, 673], "92387953": [80, 333], "14943586": [80, 333, 369], "51644717": [80, 333], "85631905": [80, 333], "98877142": [80, 333], "tril_indic": [80, 369], "_containerwithdata_typeexperiment": [80, 103], "_containerwithdeviceexperiment": [80, 103], "_containerwithelementwiseexperiment": [80, 103], "0003": [80, 334, 637, 676, 776, 779], "0006": [80, 334, 362], "2345j": [80, 338], "5772": [80, 342], "9635": [80, 342], "4228": [80, 342], "9228": [80, 342], "57299206e": [80, 343, 344], "67773480e": [80, 343, 344], "20904985e": [80, 343, 344], "84270084": [80, 343, 344, 372], "99532223": [80, 343, 344], "99997795": [80, 343, 344], "mantissa": [80, 348, 372, 829], "frist": [80, 349, 372], "coord": [80, 349], "6055": [80, 350], "160": [80, 352], "10240": [80, 352], "60000038": [80, 353, 372, 637, 693], "0707": [80, 359, 372], "0579": [80, 359, 372], "static_allclos": 80, "static_amax": 80, "static_amin": 80, "static_binar": 80, "static_conj": 80, "static_copysign": 80, "static_count_nonzero": 80, "static_diff": 80, "static_digamma": 80, "57721537": 80, "96351004": 80, "static_erfc": 80, "15729921": 80, "00467773": [80, 343, 372], "static_erfinv": 80, "static_fix": 80, "static_float_pow": 80, "static_fmax": 80, "static_fmod": 80, "static_frexp": 80, "static_gradi": 80, "static_hypot": 80, "static_isclos": 80, "static_ldexp": 80, "static_lerp": 80, "90000057": [80, 353, 372], "70000076": [80, 353, 372], "55000019": [80, 353, 372], "05000019": [80, 353, 372], "static_modf": 80, "static_nansum": 80, "static_nextaft": 80, "static_signbit": 80, "static_sinc": 80, "636": 80, "090": 80, "070": 80, "057": 80, "static_sparsify_tensor": 80, "static_xlogi": 80, "static_zeta": 80, "0244": [80, 362], "_containerwithgeneralexperiment": [80, 103], "_static_reduc": 80, "static_reduc": 80, "_containerwithgradientsexperiment": [80, 103], "_containerwithimageexperiment": [80, 103], "_containerwithlayersexperiment": [80, 103], "_static_fft": 80, "static_fft": 80, "_static_sliding_window": 80, "673": [80, 397], "0507": [80, 397], "79711437": [80, 375, 397, 407], "94867325": [80, 375, 397, 407], "74089146": [80, 375, 397, 407], "25980937": [80, 375, 397, 407], "64958102": [80, 375, 397, 407], "2442648": [80, 375, 397, 407], "247306": [80, 409], "908323j": [80, 409], "494955": [80, 409], "90395j": [80, 409], "static_adaptive_avg_pool1d": 80, "static_adaptive_avg_pool2d": 80, "static_adaptive_max_pool2d": 80, "static_adaptive_max_pool3d": 80, "static_avg_pool1d": 80, "static_avg_pool2d": 80, "static_avg_pool3d": 80, "static_dct": 80, "253": [80, 286, 632], "515": [80, 643, 740], "467": 80, "static_dft": 80, "static_embed": 80, "static_idct": 80, "93732834": [80, 375, 397], "75048852": [80, 375, 397], "29723358": [80, 375, 407], "6950531": 80, "93914509": 80, "88008738": 80, "18951225": 80, "06697273": [80, 375, 407], "57439804": 80, "68861485": [80, 375, 407], "41308832": [80, 375, 407], "0700836": 80, "2449036": 80, "6711426": 80, "514": 80, "501709": 80, "4924011": 80, "static_ifft": 80, "static_ifftn": 80, "static_interpol": 80, "static_max_pool1d": 80, "static_max_pool2d": 80, "max_pool2dd": 80, "static_max_pool3d": 80, "static_max_unpool1d": 80, "static_rfft": 80, "static_rfftn": 80, "static_rnn": 80, "step_funct": [80, 375, 421], "initial_st": [80, 375, 421, 636, 661], "go_backward": [80, 375, 421], "unrol": [80, 375, 421, 636, 662, 849, 852], "input_length": [80, 375, 421], "zero_output_for_mask": [80, 375, 421], "return_all_output": [80, 375, 421], "rnn": [80, 375, 870], "tempor": [80, 375, 421], "state_s": [80, 375, 421], "while_loop": [80, 375, 421, 628], "otput": [80, 375, 421], "funciton": [80, 375, 421], "static_stft": 80, "_containerwithlinearalgebraexperiment": [80, 103], "933034": [80, 376, 426], "eigenvealu": [80, 429, 672], "xx": [80, 429, 431, 672], "37228107": [80, 429, 672], "3722816": [80, 429, 672], "8245648": [80, 429, 672], "41597357": [80, 429, 672], "56576747": [80, 429, 672], "9093767": [80, 429, 672], "56155": [80, 430], "82842": [80, 430], "450": [80, 436], "static_adjoint": 80, "static_batched_out": 80, "static_cond": 80, "static_diagflat": 80, "static_dot": 80, "static_eig": 80, "static_eigh_tridiagon": 80, "static_eigv": 80, "static_higher_order_mo": 80, "static_initialize_tuck": 80, "static_kron": 80, "kroneck": [80, 376, 435, 436], "static_make_svd_non_neg": 80, "static_matrix_exp": 80, "static_mode_dot": 80, "static_multi_dot": 80, "static_multi_mode_dot": 80, "static_partial_tuck": 80, "static_svd_flip": 80, "static_tensor_train": 80, "static_truncated_svd": 80, "static_tt_matrix_to_tensor": 80, "tt_matrix": [80, 376, 450], "output_tensor": [80, 100, 376, 450], "static_tuck": 80, "_containerwithlossesexperiment": [80, 103], "_static_hinge_embedding_loss": 80, "_static_huber_loss": 80, "static_huber_loss": 80, "0575": [80, 453], "_static_kl_div": 80, "_static_l1_loss": 80, "static_l1_loss": 80, "_static_log_poisson_loss": 80, "static_log_poisson_loss": 80, "_static_poisson_nll_loss": 80, "06446016": 80, "55611551": 80, "30244565": [80, 457], "_static_smooth_l1_loss": 80, "static_smooth_l1_loss": 80, "_static_soft_margin_loss": 80, "3890561": [80, 456], "413159": [80, 456], "06429195": [80, 457], "43333333": [80, 458], "10666666": [80, 458], "_containerwithmanipulationexperiment": [80, 103], "_static_fill_diagon": 80, "_static_put_along_axi": 80, "_static_tak": 80, "69999981": [80, 307, 367, 378, 468, 492], "_static_trim_zero": 80, "_static_unflatten": 80, "_static_unique_consecut": 80, "ary1": [80, 378, 462, 463, 464], "ary2": [80, 378, 462, 463, 464], "broadcast_shap": [80, 106, 378, 776, 778], "static_concat_from_sequ": [80, 469], "30192195": [80, 481], "static_as_strid": 80, "static_atleast_1d": 80, "static_atleast_2d": 80, "static_atleast_3d": 80, "static_broadcast_shap": 80, "static_column_stack": 80, "static_dsplit": 80, "static_dstack": 80, "static_expand": 80, "static_flatten": 80, "static_fliplr": 80, "static_flipud": 80, "static_fold": 80, "static_heavisid": 80, "static_hsplit": 80, "static_hstack": 80, "static_i0": 80, "static_matric": 80, "static_moveaxi": 80, "static_pad": 80, "static_partial_fold": 80, "static_partial_tensor_to_vec": 80, "static_partial_unfold": 80, "static_partial_vec_to_tensor": 80, "static_rot90": 80, "static_soft_threshold": 80, "static_take_along_axi": 80, "static_top_k": 80, "static_unfold": 80, "static_vsplit": 80, "static_vstack": 80, "_containerwithnormsexperiment": [80, 103], "16903085": [80, 505, 507], "50709254": [80, 505, 507], "84515423": [80, 505, 507], "44183609": [80, 505, 507], "56807494": [80, 505, 507], "69431382": [80, 505, 507], "static_batch_norm": 80, "static_group_norm": 80, "static_instance_norm": 80, "static_l1_norm": 80, "static_l2_norm": 80, "static_lp_norm": 80, "12500000": 80, "37500000": 80, "62500000": 80, "27500000": 80, "35000000": 80, "42500000": 80, "0000000": 80, "5000000": 80, "2500000": 80, "_containerwithrandomexperiment": [80, 103], "43643127": [80, 510], "32325703": [80, 510], "24031169": [80, 510], "34251311": [80, 510], "31692529": [80, 510], "3405616": [80, 510], "5319725": [80, 510], "22458365": [80, 510], "24344385": [80, 510], "26588406": [80, 510], "61075421": [80, 510], "12336174": [80, 510], "51142915": [80, 510], "25041268": [80, 510], "23815817": [80, 510], "64042903": [80, 510], "25763214": [80, 510], "10193883": [80, 510], "31624692": [80, 510], "46567987": [80, 510], "21807321": [80, 510], "37677699": [80, 510], "39914594": [80, 510], "22407707": [80, 510], "static_bernoulli": 80, "static_beta": 80, "static_dirichlet": 80, "static_gamma": 80, "static_poisson": 80, "_containerwithsearchingexperiment": [80, 103], "static_unravel_index": 80, "_containerwithsetexperiment": [80, 103], "_containerwithsortingexperiment": [80, 103], "invert_permut": [80, 385], "static_invert_permut": 80, "static_lexsort": [80, 92], "_containerwithstatisticalexperiment": [80, 103], "_static_cummax": 80, "static_cummax": 80, "_static_cummin": 80, "static_cummin": 80, "_static_nanmin": 80, "static_nanmin": 80, "func_nam": [80, 525, 818, 831, 832, 837, 841], "static_bincount": 80, "static_corrcoef": 80, "static_cov": [80, 387, 522], "static_histogram": 80, "static_igamma": 80, "static_lgamma": 80, "static_median": 80, "static_nanmean": 80, "static_nanmedian": 80, "static_nanprod": 80, "static_quantil": 80, "_containerwithutilityexperiment": [80, 103], "static_optional_get_el": 80, "_containerwithgener": [81, 103], "_static_all_equ": 81, "static_all_equ": 81, "_static_array_equ": 81, "a0": [81, 378, 468], "static_array_equ": 81, "_static_assert_supports_inplac": 81, "_static_clip_matrix_norm": 81, "static_clip_matrix_norm": 81, "849": [81, 540, 634], "_static_clip_vector_norm": 81, "static_clip_vector_norm": 81, "_static_einops_rearrang": 81, "static_einops_rearrang": 81, "_static_einops_reduc": 81, "static_einops_reduc": 81, "29333329": [81, 546, 634], "53000069": [81, 546, 634], "39666676": [81, 546, 634], "20666695": [81, 546, 634], "_static_einops_repeat": 81, "static_einops_repeat": 81, "_static_exist": 81, "_static_fourier_encod": 81, "static_fourier_encod": 81, "classivi": [81, 645, 750], "89858720e": 81, "79717439e": 81, "_static_gath": 81, "static_gath": 81, "_static_gather_nd": 81, "static_gather_nd": 81, "_static_get_num_dim": 81, "static_get_num_dim": 81, "_static_has_nan": 81, "leafwis": 81, "static_has_nan": 81, "_static_inplace_decr": 81, "_static_inplace_incr": 81, "_static_inplace_upd": 81, "_static_is_arrai": 81, "static_is_arrai": 81, "_static_is_ivy_arrai": 81, "static_is_ivy_arrai": 81, "_static_is_native_arrai": 81, "static_is_native_arrai": 81, "_static_scatter_flat": 81, "_static_scatter_nd": 81, "static_scatter_nd": 81, "_static_s": 81, "static_s": 81, "_static_stable_divid": 81, "22222222": 81, "11111111": 81, "857": [81, 592, 634], "444": 81, "_static_stable_pow": 81, "00012": [81, 593, 634], "00016": [81, 82, 593, 621, 634, 635], "00001": [81, 593, 634, 776], "00032": [81, 593], "00256": [81, 593], "1679638": [81, 593], "395": [81, 593], "16777383": [81, 593], "_static_supports_inplace_upd": 81, "_static_to_list": 81, "static_to_list": 81, "_static_to_numpi": 81, "static_to_numpi": 81, "_static_to_scalar": 81, "static_to_scalar": 81, "_static_value_is_nan": 81, "452": 81, "static_value_is_nan": 81, "833": [81, 541], "items": [81, 102, 634], "static_isin": 81, "static_items": 81, "static_strid": 81, "425": [81, 613], "_containerwithgradi": [82, 103], "_static_stop_gradi": 82, "static_stop_gradi": 82, "976": [82, 291, 615, 632, 635], "49e": [82, 615, 635], "74e": [82, 615, 635], "95e": [82, 615, 635], "024": [82, 615, 635], "096": [82, 615, 635], "216": [82, 85, 615, 635, 692], "626": [82, 615, 635], "en": [82, 615, 616, 635, 828], "wikipedia": [82, 615, 616, 635], "wiki": [82, 615, 616, 635], "stochastic_gradient_desc": [82, 615, 616, 635], "01099": [82, 616], "01003": [82, 616, 635], "01015": [82, 616, 635], "99936122": [82, 616, 635], "99936116": [82, 616, 635], "99936128": [82, 616, 635], "99936104": [82, 616, 635], "w_new": [82, 619, 635], "708": [82, 621, 635], "445": [82, 621, 635], "6e": [82, 621, 635], "00036": [82, 621, 635], "00049": [82, 621, 635], "layerwis": [82, 622, 635], "01132035": [82, 622, 635], "22264051": [82, 622, 635], "2056601": [82, 622, 635], "1324538": [82, 622, 635], "56490755": [82, 622, 635], "96622658": [82, 622, 635], "90848625": [82, 622, 635], "93616199": [82, 622, 635], "77232409": [82, 622, 635], "_containerwithimag": [83, 103], "_containerwithlay": [84, 103], "_static_conv1d": 84, "static_conv1d": 84, "_static_conv1d_transpos": 84, "static_conv1d_transpos": 84, "112": [84, 637, 647, 651, 682, 759], "_static_conv2d": 84, "ey": [84, 629, 636, 652, 658, 847, 854], "static_conv2d": 84, "_static_conv2d_transpos": 84, "static_conv2d_transpos": 84, "_static_conv3d": 84, "fdfh": [84, 654], "static_conv3d": 84, "_static_conv3d_transpos": 84, "static_conv3d_transpos": 84, "_static_depthwise_conv2d": 84, "inp": [84, 636, 658], "static_depthwise_conv2d": 84, "_static_dropout": 84, "static_dropout": 84, "_static_dropout1d": 84, "static_dropout1d": 84, "_static_dropout2d": 84, "_static_dropout3d": 84, "_static_linear": 84, "278": [84, 636, 659, 660], "static_linear": 84, "195": 84, "_static_lstm_upd": 84, "_static_multi_head_attent": 84, "_static_reduce_window": 84, "_static_scaled_dot_product_attent": 84, "static_scaled_dot_product_attent": 84, "39999962": [84, 636, 659, 660], "19999695": [84, 660], "11600018": [84, 660], "88399887": [84, 660], "306": [84, 636, 660], "19999981": [84, 297, 310, 367, 375, 419, 636, 659, 666], "59249449": [84, 636, 666], "68226194": [84, 636, 666], "19603825": [84, 636, 666], "9960382": [84, 636, 666], "26894283": [84, 636, 666], "40236187": [84, 636, 666], "39999437": [84, 636, 666], "59999037": [84, 636, 666], "35046196": [84, 636, 666], "54282808": [84, 636, 666], "39989519": [84, 636, 666], "5998764": [84, 636, 666], "_containerwithlinearalgebra": [85, 103], "_static_choleski": 85, "static_choleski": 85, "577": [85, 637, 667], "707": [85, 637, 667], "static_rol": [85, 87], "_static_cross": 85, "static_cross": 85, "_static_det": 85, "_static_diag": 85, "_static_diagon": 85, "static_diagon": 85, "_static_eigh": 85, "_static_eigvalsh": 85, "static_eigvalsh": 85, "51572949": [85, 637, 674], "17091519": [85, 637, 674], "3448143": [85, 637, 674], "35898387e": [85, 637, 674], "46410179e": [85, 637, 674], "_static_inn": 85, "static_inn": 85, "_static_inv": 85, "static_inv": 85, "_static_matmul": 85, "matul": 85, "static_matmul": 85, "_static_matrix_norm": 85, "deimens": 85, "static_matrix_norm": 85, "_static_matrix_pow": 85, "_static_matrix_rank": 85, "static_matrix_rank": 85, "_static_matrix_transpos": 85, "static_matrix_transpos": 85, "_static_out": 85, "n1": [85, 139, 629], "n2": [85, 139, 629], "static_out": [85, 682], "_static_pinv": 85, "static_pinv": 85, "0426": 85, "0964": 85, "0605": 85, "1368": 85, "_static_qr": 85, "static_qr": 85, "31622777": [85, 637, 684], "9486833": [85, 637, 684], "4472136": [85, 637, 684], "89442719": [85, 637, 684], "16227766": [85, 637, 684], "42718872": [85, 637, 684], "63245553": [85, 637, 684], "47213595": [85, 637, 684], "81377674": [85, 637, 684], "_static_slogdet": 85, "static_slogdet": 85, "6931472": 85, "0986123": 85, "_static_solv": 85, "_static_svd": 85, "static_svd": 85, "au": 85, "aS": 85, "avh": 85, "bvh": 85, "_static_svdv": 85, "_static_tensordot": 85, "_static_tensorsolv": 85, "_static_trac": 85, "static_trac": 85, "_static_vand": 85, "static_vand": 85, "343": [85, 283, 632, 692], "729": [85, 692, 853], "_static_vecdot": 85, "_static_vector_norm": 85, "static_vector_norm": 85, "77359247": [85, 694], "_static_vector_to_skew_symmetric_matrix": 85, "09861231": [85, 637, 685], "static_general_inner_product": 85, "3475602": [85, 687], "93765765": [85, 687], "58776021": [85, 687], "10416126": [85, 687], "80644298": [85, 687], "87024701": [85, 687], "48127627": [85, 687], "79101127": [85, 687], "98288572": [85, 687], "68917423": [85, 687], "_containerwithloss": [86, 103], "_static_binary_cross_entropi": 86, "static_binary_cross_entropi": 86, "511": 86, "223": 86, "357": 86, "_static_cross_entropi": 86, "static_cross_entropi": 86, "20397282": 86, "83258148": 86, "60943794": [86, 637, 685], "_static_sparse_cross_entropi": 86, "static_sparse_cross_entropi": 86, "36354783": [86, 638, 696], "14733934": [86, 638, 696], "17027519": [86, 697], "53647931": [86, 697], "53647929": [86, 698], "1702752": [86, 698], "_containerwithmanipul": [87, 103], "_static_clip": 87, "static_clip": 87, "_static_concat": 87, "_static_constant_pad": 87, "static_constant_pad": 87, "_static_expand_dim": 87, "static_expand_dim": 87, "container_axi": [87, 639, 702], "_static_flip": 87, "static_flip": 87, "_static_permute_dim": 87, "static_permute_dim": 87, "_static_repeat": 87, "static_repeat": 87, "_static_reshap": 87, "static_reshap": 87, "_static_rol": 87, "positivclip": 87, "_static_split": 87, "static_split": 87, "_static_squeez": 87, "static_squeez": 87, "_static_stack": 87, "leavv": 87, "static_stack": 87, "_static_swapax": 87, "_static_til": 87, "static_til": 87, "_static_unstack": 87, "static_unstack": 87, "_static_zero_pad": 87, "repreat": [87, 705], "_containerwithnorm": [88, 103], "34198591": [88, 642, 737], "04274819": [88, 642, 737], "29923761": [88, 642, 737], "24053511": [88, 642, 737], "62221265": [88, 737], "20277636": [88, 737], "41943574": [88, 737], "83710337": [88, 737], "_containerwithrandom": [89, 103], "_static_multinomi": 89, "_static_randint": 89, "static_randint": 89, "_static_random_norm": 89, "static_random_norm": 89, "651": 89, "_static_random_uniform": 89, "static_random_uniform": 89, "481": 89, "0999": 89, "_static_shuffl": 89, "static_shuffl": 89, "431": [89, 740], "274": [89, 740], "_containerwithsearch": [90, 103], "_static_argmax": 90, "static_argmax": 90, "_static_argmin": 90, "static_argmin": 90, "_static_argwher": 90, "static_argwher": 90, "_static_nonzero": 90, "_static_wher": 90, "static_wher": 90, "_containerwithset": [91, 103], "_static_unique_al": 91, "static_unique_al": 91, "_static_unique_count": 91, "static_unique_count": 91, "_static_unique_invers": 91, "static_unique_invers": 91, "_static_unique_valu": 91, "_containerwithsort": [92, 103], "_static_argsort": 92, "static_argsort": 92, "_static_searchsort": 92, "_static_sort": 92, "static_sort": 92, "static_msort": 92, "_containerwithstatist": [93, 103], "_static_cumprod": 93, "static_cumprod": 93, "_static_cumsum": 93, "static_cumsum": 93, "_static_min": 93, "_static_prod": 93, "static_prod": 93, "11000001": [93, 763], "23100001": [93, 763], "30800003": [93, 647, 763], "_static_sum": 93, "_static_var": 93, "static_var": 93, "12666667": [93, 647, 766], "11555555": [93, 647, 766], "rtype": [93, 759, 805], "respectv": [93, 764], "81649649": [93, 764], "94280904": [93, 764], "509902": [93, 647, 764], "2472192": [93, 764], "44948983": [93, 764], "41421354": [93, 764], "6666667": [93, 766], "_containerwithutil": [94, 103], "_static_al": 94, "static_al": 94, "_static_ani": 94, "static_ani": 94, "add_ivy_container_instance_method": 95, "containerexampl": 95, "factorized_tensor": [96, 97, 98, 99, 100, 101], "factorizedtensor": [96, 97, 98, 99, 100, 101], "matrix_or_tensor": 96, "to_unfold": [96, 97, 98, 99, 100, 101], "to_vec": [96, 97, 98, 99, 100, 101], "cp_tensor": [97, 98], "cptensor": [97, 98, 323, 369], "cp_copi": 97, "cp_flip_sign": 97, "s_i": [97, 98], "normalisation_weight": [97, 98], "normalised_factor": [97, 98], "cp_lstsq_grad": 97, "return_loss": 97, "nabla": 97, "mathcal": 97, "mathbf": 97, "factor_matric": 97, "cp_gradient": 97, "quantiti": 97, "cp_mode_dot": 97, "keep_dim": [97, 101], "cp_multi_mode_dot": 97, "cp_n_param": 97, "tensor_shap": [97, 99, 100, 101], "n_param": [97, 98, 99, 100, 101], "cp_norm": 97, "cp_to_tensor": 97, "khatria": 97, "rao": [97, 376, 435], "khatri": [97, 376, 435], "cp_normal": 97, "normalis": [97, 98], "u_1": [97, 98], "u_n": [97, 98], "v_1": [97, 98], "v_n": [97, 98], "v_k": [97, 98], "u_k": [97, 98], "absorb": [97, 98], "refold": [97, 378, 477, 488], "cp_to_unfold": 97, "ie": 97, "s_u_i": 97, "exploit": [97, 873], "khatri_rao": [97, 376], "cp_to_vec": 97, "ravel": [97, 847], "unfolding_dot_khatri_rao": 97, "mttkrp": 97, "validate_cp_rank": 97, "percent": [97, 100], "validate_cp_tensor": 97, "parafac2_tensor": 98, "parafac2tensor": [98, 324, 369], "apply_parafac2_project": 98, "evolv": [98, 859, 870], "b_i": 98, "ijk": [98, 806], "sum_r": 98, "a_": 98, "ir": [98, 868, 871, 876], "jr": 98, "kr": 98, "coupl": [98, 819, 824, 851, 853, 870], "factoris": 98, "i1": [98, 387, 525], "classmethod": [98, 105, 106, 781], "from_cptensor": 98, "parafac2_tensor_ok": 98, "parafac2_normalis": 98, "normalised_project": 98, "parafac2_to_slic": 98, "slice_idx": 98, "frontal": 98, "a_i": 98, "j_i": 98, "b_": 98, "reformul": 98, "p_i": 98, "orthogon": [98, 323, 327, 369, 376, 429, 445, 451, 637, 672, 673], "sum_": 98, "ijr": 98, "constraint": [98, 806, 828, 829, 839], "projection_matric": 98, "parafac2_to_tensor": 98, "construct": [98, 639, 712, 792, 795, 796, 797, 843, 849, 853, 854, 868, 870, 877], "uneven": 98, "parafac2_to_unfold": 98, "parafac2_to_vec": 98, "validate_parafac2_tensor": 98, "cp": [98, 323, 369, 820], "tr_tensor": 99, "trtensor": [99, 325, 369], "tr_n_param": 99, "tr_to_tensor": 99, "tr_to_unfold": 99, "tr_to_vec": 99, "validate_tr_rank": 99, "validate_tr_tensor": 99, "tt_tensor": 100, "_tt_n_param": 100, "mp": [100, 326, 369], "index_upd": 100, "pad_tt_rank": 100, "factor_list": 100, "n_pad": 100, "pad_boundari": 100, "ring": 100, "bond": 100, "padded_factor_list": 100, "tt_to_tensor": 100, "assembl": [100, 376, 450], "tt_to_unfold": 100, "reassembl": 100, "tt_to_vec": 100, "validate_tt_rank": 100, "constant_rank": 100, "allow_overparametr": 100, "proport": [100, 791], "realiz": [100, 870], "validate_tt_tensor": 100, "tucker_tensor": 101, "tucker_copi": 101, "tucker_mode_dot": [101, 877], "tucker_n_param": 101, "tucker_norm": 101, "tucker_to_tensor": 101, "skip_factor": 101, "transpose_factor": 101, "tucker_to_unfold": 101, "tucker_to_vec": 101, "validate_tucker_rank": 101, "fixed_mod": 101, "validate_tucker_tensor": 101, "_bisection_root_find": 101, "fun": [101, 366, 374, 614, 634, 641, 729, 828], "max_it": 101, "__abs__": [102, 103], "__add__": [102, 103, 824, 827, 831, 832, 836, 841, 842, 851], "__eq__": [102, 103], "__ge__": [102, 103], "__gt__": [102, 103, 847], "__le__": [102, 103], "__lt__": [102, 103], "__ne__": [102, 103], "__pow__": [102, 103, 851], "69678056": 102, "59876156": 102, "82660675": 102, "__radd__": [102, 103, 831, 832, 841], "__rrshift__": [102, 103], "__rshift__": [102, 103], "__rsub__": [102, 103], "__sub__": [102, 103, 824, 827, 831, 836, 851], "__truediv__": [102, 103, 824, 827, 831], "__xor__": [102, 103], "referenc": [102, 833, 840], "resid": [102, 106, 639, 702, 841, 849, 853], "mt": [102, 851], "hopefulli": [102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 816, 818, 819, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 859, 860, 861], "reach": [102, 103, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 788, 789, 791, 792, 794, 795, 796, 797, 816, 818, 819, 820, 821, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 850, 851, 852, 853, 854, 859, 860, 861, 869, 870], "eq": 103, "ge": 103, "le": 103, "ne": 103, "75979435": 103, "52153397": 103, "13532257": 103, "rshift": 103, "truediv": 103, "nested_arrai": [105, 106, 107, 826], "nestedarrai": 105, "nested_rank": [105, 106, 107], "inner_shap": [105, 106, 107], "nestedarraybas": [105, 106, 107], "from_row_length": 105, "row_length": 105, "from_row_split": 105, "row_split": 105, "ragged_map": 106, "ragged_multi_map": 106, "ragged_arrai": 106, "ragged_multi_map_in_funct": 106, "replace_ivy_arrai": 106, "unbind": 106, "nestedarrayelementwis": 107, "strictli": [112, 115, 118, 247, 626, 632, 836, 840], "24000001": [112, 626], "703": [113, 626], "683": [113, 626], "408": [113, 626], "313": [113, 626], "437": [113, 626], "40337825": [114, 626], "56114835": [114, 626], "20788449": [114, 626], "0768": [117, 626], "231": [117, 626], "\u03b2": [118, 626], "body_fn": [122, 123, 125, 628], "bodi": [122, 125, 628, 823, 844], "lst": [122, 628], "orelse_fn": [123, 628], "body1": [124, 628], "body2": [124, 628], "test_fn": [125, 628, 774, 812, 864, 865], "repeatedli": [125, 628, 641, 727, 828, 844], "ml_framework": [126, 629], "distanc": [126, 629], "adjac": [126, 629], "nestedsequ": [127, 128, 629], "typevar": [127, 128, 629], "supportsbufferprotocol": [127, 128, 629], "static_copy_arrai": [129, 629], "intdtyp": [132, 143, 149, 161, 172, 177, 184, 190, 629, 630], "pycapsul": [133, 144, 629], "interchang": [133, 144, 629, 639, 711], "plu": [134, 629], "x00b": [134, 629], "x00d": [134, 629], "x00e": [134, 629], "41588834": [138, 629], "7827941": [138, 629], "6227766": [138, 629], "23413252": [138, 629], "n3": [139, 629], "xv": [139, 629], "yv": [139, 629], "x_nativ": [140, 629, 840], "y_nativ": [140, 629], "z_nativ": [140, 629], "d_type": [142, 629], "col": [147, 328, 369, 629], "primari": [147, 166, 167, 199, 200, 328, 369, 385, 515, 550, 551, 629, 630, 631, 634, 777, 779, 818, 822, 825, 829, 838, 840, 841, 843, 844, 847, 855, 857], "upward": [147, 328, 369, 629], "downward": [147, 328, 369, 629], "2xn": [147, 328, 369, 629], "subarrai": [147, 328, 369, 629], "incompat": [154, 630], "closest": [157, 236, 246, 247, 283, 293, 630, 632, 844, 847], "xtype": [157, 630], "ytype": [157, 630], "native_uint16": [157, 630], "complexdtyp": [158, 172, 181, 630], "set_default_complex_dtyp": [158, 187, 630], "4294": [158, 160, 630], "967346": [158, 160, 630], "set_default_dtyp": [159, 188, 630, 829, 837], "floatdtyp": [160, 183, 630], "set_default_float_dtyp": [160, 169, 181, 189, 630, 829], "int_dtyp": [161, 184, 630], "set_default_int_dtyp": [161, 169, 190, 630, 829], "4294967346": [161, 162, 630], "uint_dtyp": [162, 185, 630], "uint": [162, 177, 185, 191, 630, 829, 842], "uintdtyp": [162, 177, 185, 191, 630], "set_default_uint_dtyp": [162, 169, 191, 630], "native_bool": [164, 630], "ieee": [165, 223, 240, 245, 263, 273, 282, 287, 290, 627, 630, 632, 860], "754": [165, 223, 240, 245, 263, 273, 282, 287, 290, 627, 630, 632, 860], "smallest_norm": [165, 630], "bfloat16": [166, 630, 776, 777, 829, 841, 844, 845], "unsupport": [167, 200, 551, 630, 631, 634, 771, 774, 816, 819, 834, 841], "encapsul": [168, 630, 828], "314": [168, 280, 338, 372, 630, 632], "9223372036854775808": [168, 630], "9223372036854775807": [168, 630], "65535": [168, 630], "4294967295": [168, 630], "native_uint8": [170, 630], "hashabl": [174, 630], "type1": [178, 630], "type2": [178, 630], "array_api_promot": [178, 179, 630, 776, 777], "unexpect": [179, 247, 630, 632, 829], "default_complex_dtyp": [181, 630], "default_dtype_stack": [182, 188, 630], "unset_default_dtyp": [182, 630], "native_uint64": [182, 630], "default_float_dtyp": [183, 630, 829], "default_int_dtyp": [184, 190, 630, 829], "default_uint_dtyp": [185, 191, 630], "ret1": [186, 630], "ret2": [186, 630], "reset": [187, 188, 189, 190, 191, 217, 218, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 630, 631, 634, 830], "default_complex_dtype_stack": [187, 630], "default_float_dtype_stack": [189, 630], "native_float16": [192, 630], "unmodifi": [194, 631, 825, 829], "aliv": [201, 206, 208, 554, 574, 575, 631, 634, 830], "139740789224448": [201, 631], "process_specif": [207, 219, 631], "percentag": [207, 631], "ram": [207, 215, 219, 631], "alon": [207, 219, 631, 812, 835, 844], "036902561555": [207, 631], "7024003467681645": [207, 631], "as_native_dev": [207, 631], "7095597456708771": [207, 631], "attr_onli": [208, 631], "soft_device_mod": [210, 218, 631], "chunk": [211, 212, 213, 631], "split_factor": [211, 631, 833], "max_chunk_s": [213, 631], "chunk_siz": [213, 631], "input_ax": [213, 631], "output_ax": [213, 631], "fed": [213, 631, 853], "fist": [213, 631], "gb": [215, 219, 631, 819, 834], "66700032": [215, 631], "589934592": [215, 631], "219563008": [219, 631], "902400346": [219, 631], "525205504": [219, 631], "na": [220, 632, 844], "noqa": [220, 287, 632, 792, 801, 842], "princip": [221, 225, 227, 359, 372, 632], "codomain": [221, 222, 225, 226, 227, 228, 237, 238, 243, 245, 261, 262, 264, 285, 286, 287, 290, 291, 359, 372, 632, 832], "\u03c0": [221, 225, 227, 228, 627, 632], "3\u03c0": [221, 228, 632], "unspecifi": [221, 222, 226, 229, 238, 243, 245, 247, 282, 286, 287, 291, 376, 429, 632, 637, 639, 672, 673, 710, 840], "\u03c0j": [222, 226, 229, 261, 263, 632], "3\u03c0j": [222, 261, 263, 632], "x1_i": [223, 228, 230, 232, 233, 234, 235, 240, 241, 247, 251, 252, 259, 260, 265, 267, 269, 270, 273, 276, 278, 282, 289, 632, 823], "2019": [223, 240, 245, 263, 273, 632, 870, 873], "commut": [223, 632], "tabl": [223, 240, 273, 585, 608, 632, 634, 776, 777, 792, 841, 846, 870], "dj": [223, 240, 273, 632], "z1": [223, 632], "z2": [223, 632], "yj": [224, 632], "nanj": [226, 632], "809": [226, 632], "569": [226, 632], "733": [226, 632], "notat": [228, 632, 647, 759, 828], "denot": [228, 632, 794], "quadrant": [228, 632], "rai": [228, 632, 860], "bitwis": [230, 233, 235, 270, 632], "170": [234, 632], "243": [234, 632], "xor": [235, 270, 632], "654": [237, 632], "ci": [238, 243, 245, 286, 632, 823, 829, 835, 842, 844, 855], "368": [238, 632], "670": [238, 632], "202": [238, 632, 823], "548": [238, 632], "1490": [238, 632], "57079633": [239, 632], "14159265": [239, 632], "71238898": [239, 632], "28318531": [239, 632], "02617994": [239, 632], "87266463": [239, 632], "01919862": [239, 632], "03839725": [239, 632], "05759586": [239, 632], "07679449": [239, 632], "09599311": [239, 632], "11519173": [239, 632], "35081118": [239, 632], "88139129": [239, 632], "underflow": [240, 247, 632, 637, 685, 829], "textbook": [240, 273, 632], "frac": [240, 262, 264, 284, 286, 290, 375, 381, 403, 404, 408, 409, 501, 503, 632], "ac": [240, 273, 632, 805, 806], "bd": [240, 273, 632], "bc": [240, 273, 632, 805, 806], "versu": [240, 273, 632], "riemann": [240, 273, 632], "sphere": [240, 273, 632], "c99": [240, 273, 632], "infinit": [240, 273, 287, 632], "unlik": [240, 273, 632, 823, 828, 831, 860, 875, 877], "698": [240, 632], "truth": [241, 251, 252, 259, 260, 276, 377, 453, 632, 771, 773, 784, 816, 834, 841, 844], "32862675": [242, 632], "67780113": [242, 632], "11246294": [242, 632], "42839241": [242, 632], "52050018": [242, 632], "16799599": [242, 632], "30787992": [242, 632], "43796915": [242, 632], "98667163": [242, 632], "79690808": [242, 632], "88020504": [242, 632], "91031402": [242, 632], "95228523": [242, 632], "96610528": [242, 632], "cut": [243, 245, 285, 286, 287, 290, 632, 859, 876], "08553692": [243, 632], "567": [243, 632], "00344786": [243, 632], "76297021": [243, 632], "197948": [243, 632], "53253174": [243, 632], "fdlibm": [245, 263, 632], "compliant": [245, 263, 268, 269, 335, 336, 372, 632, 647, 760, 761, 762, 764], "potenti": [245, 263, 632, 812, 818, 819, 828, 829, 841, 848, 873], "632": [245, 632], "20e": [245, 632], "72e": [245, 632, 776], "greatest": [246, 247, 250, 632], "pep": [247, 632, 836], "disambigu": [247, 632, 839], "former": [247, 632, 819, 829, 832, 841], "latter": [247, 632, 819, 823, 825, 829, 832, 841], "overload": [247, 632, 844], "led": [247, 632, 823, 872], "subtl": [247, 632, 829, 876], "bug": [247, 632, 812, 818, 820, 826, 834, 835, 841, 844, 856], "ambigu": [247, 632], "semant": [247, 282, 378, 492, 632, 829, 849, 854, 859, 871], "ill": [247, 632, 778], "surpris": [247, 632, 855], "arrau": [253, 632], "log_": [262, 264, 632], "742": [263, 632], "negat": [275, 338, 372, 632], "52095687": [278, 632], "92457771": [278, 632], "49372482": [278, 632], "22738838": [278, 632], "156": [278, 632, 776], "5877228": [278, 632], "189": [279, 632, 641, 718], "252": [279, 632], "1150": [279, 632], "2890": [279, 632], "344": [279, 632], "355j": [280, 338, 372, 632], "55j": [280, 338, 372, 632], "primarili": [282, 632, 818, 827, 870], "counterpart": [283, 632, 827, 838], "deliber": [283, 632, 847], "imprecis": [283, 632], "5654": [283, 632], "034": [283, 632], "433": [283, 618, 620, 632, 635], "signum": [284, 632], "textrm": [284, 632], "932": [285, 632], "746": [285, 632], "657": [285, 632], "indistinguish": [287, 632], "infti": [287, 632], "32455532": [287, 632], "89897949": [287, 632], "169": [287, 632], "analyt": [290, 632, 870, 872, 876], "pole": [290, 632], "546": [290, 632, 636, 660], "916": [290, 632], "996": [290, 632], "histor": [291, 632], "stem": [291, 632, 840], "older": [291, 632], "advis": [291, 632, 841], "462": [291, 632], "604": [291, 632], "997": [291, 632], "0375": [293, 632], "032": [293, 632], "57258511": [296, 367], "69999999": [296, 367, 625, 635], "90928203": [296, 367], "98772264": [296, 367], "99591321": [296, 367], "99863964": [296, 367], "69880581": [296, 367], "18126924": [296, 367], "79999995": [297, 307, 310, 367], "70000005": [297, 310, 367], "1241": [298, 367], "4897": [298, 367], "4090": [298, 367], "31008321": [298, 367], "1147176": [298, 367], "40899992": [298, 367], "20141329": [301, 367], "40318608": [301, 367], "48683619": [301, 367], "46328247": [301, 367], "59813893": [301, 367], "43748799": [301, 367], "parametr": [302, 367, 823, 844, 870], "71589994": [304, 308, 367], "14324772": [304, 308, 367], "70648694": [304, 308, 367], "54488957": [304, 308, 367], "10740992": [304, 308, 367], "19514863": [304, 308, 367], "6705687": [305, 367], "52016652": [305, 367], "40560818": [305, 367], "45630932": [305, 367], "2689": [306, 367], "7310": [306, 367], "7615": [306, 367], "2784": [306, 367], "7168": [306, 367], "8708": [306, 367], "4374": [306, 367], "1379": [306, 367], "0089": [306, 367], "59999991": [307, 367], "03597236": [309, 367], "43827677": [309, 367], "80100036": [309, 367], "12954807": [309, 367], "76459098": [309, 367], "20044947": [309, 367], "60000372": [309, 367], "taper": [312, 315, 369], "summat": [312, 369, 647, 759, 805, 806], "leakag": [312, 369], "wors": [312, 369, 860], "y1": [313, 369], "0800": [314, 369], "3979": [314, 369], "9121": [314, 369], "5400": [314, 369], "han": [315, 369], "ith": [316, 369], "00726415": [317, 369], "9999736": [317, 369], "2773e": [318, 369], "0172e": [318, 369], "9294e": [318, 369], "4149": [318, 369], "9138": [318, 369], "5529": [318, 369], "multidimension": [320, 321, 369, 870], "normalise_factor": [323, 324, 369], "parafac2": [324, 369], "tr": [325, 369], "38268346": [333, 369], "38268352": [333, 369], "8563191": [333, 369], "14943568": [333, 369], "cn": [335, 336, 372], "zh": [335, 336, 372], "amax_cn": [335, 372], "sentinel": [335, 336, 372, 647, 760, 762], "amin_cn": [336, 372], "4769": [344, 372], "position": [346, 372], "triangl": [350, 372], "999999e": [351, 372], "65999985": [353, 372], "52000046": [353, 372], "1500001": [353, 372, 546, 634], "11259177": [354, 372], "3574118": [354, 372], "20097363": [354, 372], "suppli": [358, 372, 378, 484, 805, 824, 826, 844], "217234": [359, 372], "hurwitz": [362, 372], "custom_grad_func": [364, 374], "bind": [364, 374, 818, 839, 869, 870], "upstream": [364, 374, 819, 820, 823, 834, 839], "primal": [365, 366, 374], "jacobian": [365, 366, 374, 620, 635, 855, 870], "cotang": [366, 374], "stanh": 367, "ndenumer": 369, "ndindex": 369, "random_cp": 369, "random_parafac2": 369, "random_tr": 369, "random_tt": 369, "random_tuck": 369, "bind_custom_gradient_funct": [374, 839], "jvp": 374, "vjp": 374, "h_out": [375, 392, 636, 661], "w_out": [375, 392], "area_interpol": 375, "01823380e": [375, 397, 407], "15385818e": [375, 397, 407], "36371466e": [375, 397, 407], "38763905e": [375, 397, 407], "60722279e": [375, 397, 407], "80319249e": [375, 397, 407], "05617893e": [375, 397, 407], "21500000e": [375, 397, 407], "24000015e": [375, 397, 407], "90734863e": [375, 397, 407], "10000420e": [375, 397, 407], "15899994e": [375, 397, 407], "24000053e": [375, 397, 407], "81469727e": [375, 397, 407], "09999847e": [375, 397, 407], "4135742": [375, 397, 407], "6779785": [375, 397, 407], "3770599": [375, 397, 407], "8719864": [375, 397, 407], "72109985": [375, 397, 407], "52869415": [375, 397, 407], "79182434": [375, 397, 407], "72489166": [375, 397, 407], "container_n": [375, 397, 407], "container_typ": [375, 397, 407, 634], "container_norm": [375, 397, 407], "1580677": [375, 397], "89422607": [375, 397], "86190414": [375, 397], "00041008": [375, 397], "75149155": [375, 397], "97056389": [375, 397], "87819386": [375, 397], "89381361": [375, 397], "50000000e": [375, 397, 407, 776], "22044605e": [375, 397, 407], "ed": [375, 399, 400, 401], "rest": [375, 378, 399, 400, 401, 470, 819, 826, 828, 844, 854, 872], "5d": [375, 401, 792], "emb": [375, 402], "51285338": [375, 402], "87183261": [375, 402], "2308116": [375, 402], "02733949e": [375, 403], "00j": [375, 403], "49660576e": [375, 403], "68178638e": [375, 403], "01j": [375, 403, 408], "98912367e": [375, 403], "21802426e": [375, 403, 408], "04549134e": [375, 403, 408], "82842712e": [375, 403, 408], "86902654e": [375, 403, 408], "25501143e": [375, 403, 408], "32978028e": [375, 403, 408], "52068201e": [375, 403, 408], "71158374e": [375, 403, 408], "generate_einsum_equ": 375, "get_interpolate_kernel": 375, "27279224e": [375, 407], "44232273e": [375, 407], "70464332e": [375, 407], "73454881e": [375, 407], "00902849e": [375, 407], "10039906e": [375, 407], "07022366e": [375, 407], "69506073": [375, 407], "93914604": [375, 407], "88008881": [375, 407], "18951607": [375, 407], "57439613": [375, 407], "15318303e": [375, 408], "15148591e": [375, 408], "19j": [375, 408], "25000000e": [375, 408], "35378602e": [375, 408], "02j": [375, 408], "65404249e": [375, 408], "17611649e": [375, 408], "24320230e": [375, 408], "79344813e": [375, 408], "22374531e": [375, 408], "45929364e": [375, 408], "14208718e": [375, 408], "07177031e": [375, 408], "indexerror": [375, 409, 420, 639, 702, 807, 833], "interp": [375, 847], "xp": [375, 410, 823], "fp": [375, 410], "nd": [375, 411], "tf_bicub": [375, 411, 847], "nearest_interpol": 375, "window_shap": [375, 417], "pool_typ": [375, 417], "irfft": [375, 419], "silent": [375, 419], "discard": [375, 419, 828], "1400001": [375, 419], "3999999": [375, 419], "3999996": [375, 419], "99038106j": [375, 420], "33012702": [375, 420], "23205081j": [375, 420], "33012702j": [375, 420], "superdiagon": [376, 427, 637, 670], "subdiagon": [376, 427, 637, 670], "eigendecomposit": [376, 429, 637, 672, 673], "qlq\u1d40": [376, 429, 637, 672, 673], "tridiagon": [376, 430], "38196602": [376, 430], "61803389": [376, 430], "35048741": [376, 430], "56710052": [376, 430], "06693714": [376, 430], "74234426": [376, 430], "56155282": [376, 430], "56155276": [376, 430], "82842714": [376, 430], "82842731": [376, 430, 637, 673], "necessarili": [376, 431, 824, 827], "generalis": [376, 432], "skip_matrix": [376, 435, 437], "khatri_rao_product": [376, 435], "kronecker_product": [376, 437], "n_column": [376, 437], "lu_factor": 376, "pivot": [376, 438], "lu": [376, 438, 439], "lu_solv": 376, "nnmf": [376, 440], "hoi": [376, 445, 451], "solve_triangular": 376, "unit_diagon": [376, 446], "solut": [376, 446, 637, 686, 776, 812, 816, 818, 819, 820, 827, 829, 834, 842, 844, 847, 868, 872], "determinist": [376, 447, 844], "borrow": [376, 447, 822], "extmath": [376, 447], "ivan": [376, 448], "oseledet": [376, 448], "scientif": [376, 448, 870], "2295": [376, 448], "2317": [376, 448], "2011": [376, 448], "convention": [377, 454, 873], "explicit": [377, 378, 454, 492, 819, 827, 829, 839, 840, 841, 849, 855, 870], "555969": [377, 454], "223876": [377, 454], "111938": [377, 454], "42649534": [377, 454], "68651628": [377, 454], "51119184": [377, 454], "59967244": [377, 454], "mae": [377, 455], "666": [377, 455, 636, 637, 660, 678], "91097307": [377, 457], "3467": [377, 458], "0133": [377, 458], "0250": [377, 458], "0056": [377, 458], "0025": [377, 458], "0675": [377, 458], "6987": [377, 459], "1606": [377, 459], "3711": [377, 459], "4032": [377, 459], "6931": [377, 459], "whilst": [378, 462, 463, 464, 854, 857, 870], "ary3": [378, 464], "check_scalar": 378, "force_integ": [378, 466], "force_posit": [378, 466], "mod": [378, 467, 823], "tall": [378, 473], "horizot": [378, 480], "shortcut": [378, 484, 819], "linear_ramp": [378, 484], "reflect": [378, 484, 820, 824, 840, 844], "ramp": [378, 484], "mirror": [378, 484, 815, 818, 870], "padding_func": [378, 484], "iaxis_pad_width": [378, 484], "iaxi": [378, 484], "unalt": [378, 484], "put": [378, 489, 812, 818, 844, 855, 876], "mul": [378, 489, 840, 851], "conceptu": [378, 492, 866, 871], "concern": [378, 492, 820, 822, 827, 829, 831, 840, 847, 848, 876], "regard": [378, 492, 817, 827, 841, 842, 847, 860], "mutat": [378, 492], "elimin": [378, 498, 819], "consecut": [378, 498], "batch_mean": [381, 501, 503], "batch_var": [381, 501, 503], "running_vari": [381, 501, 503], "local_response_norm": 381, "neighbour": [381, 506], "42857143": [381, 507], "5714286": [381, 507], "multivari": [382, 510], "bayesian": [382, 510], "supposedli": [385, 514], "indirect": [385, 515], "secondari": [385, 515], "is_ivy_sparse_arrai": 386, "is_native_sparse_arrai": 386, "native_sparse_arrai": 386, "coo_indic": [386, 518], "crow_indic": [386, 518], "col_indic": [386, 518], "ccol_indic": [386, 518], "row_indic": [386, 518], "dense_shap": [386, 518], "native_sparse_array_to_indices_values_and_shap": 386, "nativesparsearrai": 386, "sparsearrai": 386, "linalg": [387, 522, 637, 685, 686, 818, 840, 842], "aw": [387, 522, 860], "48447205": [387, 522], "c0": [387, 525], "ck": [387, 525], "c2": [387, 525], "nearest_jax": [387, 532], "trace_on_next_step": [536, 634, 796, 853], "recalcul": [539, 634], "my_sum": [539, 634], "val1": [539, 634], "val2": [539, 634], "cached_sum": [539, 634], "line_eq": [539, 634], "slp": [539, 634], "itc": [539, 634], "cached_line_eq": [539, 634], "0353": [540, 634], "424": [540, 634], "339": [540, 634], "271": [540, 634], "391": [540, 634], "78885436": [541, 634], "41666666": [541, 634], "58333331": [541, 634], "06666667": [541, 634], "13333334": [541, 634], "40000004": [541, 634], "26666668": [541, 634], "13137734": [541, 634], "26275468": [541, 634], "39413199": [541, 634], "52550936": [541, 634], "6568867": [541, 634], "78826398": [541, 634], "84852815": [541, 634], "1313709": [541, 634], "41421366": [541, 634], "27279221": [541, 634], "69705628": [541, 634], "12132034": [541, 634], "default_str": [544, 634], "46999979": [545, 634], "66000009": [545, 634], "93000001": [545, 634], "29000092": [545, 634], "33999991": [545, 634], "6400001": [545, 634], "96000004": [545, 634], "36000013": [545, 634], "51999998": [545, 634], "67000008": [545, 634], "suppos": [545, 634, 829, 844], "960": [545, 634], "3600": [545, 634], "h1": [545, 634], "w1": [545, 634], "40499985": [546, 634], "61000061": [546, 634], "max_depth": [557, 634], "seen_set": [557, 634], "local_set": [557, 634], "referr": [557, 634], "redund": [557, 634, 812, 829, 833, 841, 863], "example_funct": [557, 634], "repr": [557, 634], "ivyexcept": [562, 595, 634, 807, 830, 833, 838, 840, 841, 845], "allow_dupl": [572, 634], "fork": [573, 634, 813, 823, 828, 834], "forkserv": [573, 634], "mp_default": [573, 634], "defaultcontext": [573, 634], "0x7f4e3193e520": [573, 634], "mp_fork": [573, 634], "forkcontext": [573, 634], "0x7f4e3193e580": [573, 634], "mp_spawn": [573, 634], "spawncontext": [573, 634], "0x7f4e3193e5e0": [573, 634], "mp_forkserv": [573, 634], "forkservercontext": [573, 634], "0x7f4e3193e640": [573, 634], "garbag": [575, 634], "collector": [575, 634], "get_all_arrays_in_memori": [575, 634], "exception_trace_mod": [579, 603, 634, 846], "lenient": [580, 604, 634], "inplace_mod": [580, 604, 634], "break": [580, 634, 812, 825, 829, 836, 845, 855], "infus": [581, 634], "unset": [582, 589, 634, 637, 685, 801, 825, 849], "unset_min_bas": [582, 634], "nestable_mod": [584, 607, 634, 846], "precise_mod": [585, 608, 634, 846], "shape_array_mod": [587, 610, 634, 846], "show_func_wrapper_trace_mod": [588, 611, 634, 846], "tmp_dr": [589, 634], "tmp_dir": [589, 612, 634, 846], "my_tmp": [589, 634], "unset_tmp_dir": [589, 634], "49999999999975": [592, 634], "5015015015010504": [592, 634], "000444502911705e": [592, 634], "9999999999995j": [592, 634], "00000262": [593, 634], "15605032": [593, 634], "01208451j": [593, 634], "00048": [593, 634], "1296": [593, 634], "00864": [593, 634], "isn": [595, 634, 815, 820, 838, 840, 844, 852, 855, 872], "100000023841858": [597, 634], "200000047683716": [597, 634], "299999952316284": [597, 634], "400000095367432": [597, 634], "599999904632568": [597, 634], "hemant": [601, 634], "unset_shape_array_mod": [602, 634], "set_exception_trace_mod": [603, 634, 833], "set_min_bas": [605, 634], "set_min_denomin": [606, 634], "set_nestable_mod": [607, 634], "set_precise_mod": [608, 634], "set_queue_timeout": [609, 634], "set_shape_array_mod": [610, 634], "set_show_func_wrapper_trace_mod": [611, 634, 833], "set_tmp_dir": [612, 634], "my_dir": [612, 634], "451": [613, 634], "in_ax": [614, 634], "out_ax": [614, 634], "thereof": [614, 634], "summaris": [614, 634], "99999998": [615, 635], "19999998": [615, 635], "00000001": [615, 635], "00300001": [615, 635], "00800001": [615, 635], "0125": [615, 635], "17294501": [615, 635], "15770318": [615, 635], "20863818": [615, 635], "90000075": [616, 635], "90000164": [616, 635], "9000032": [616, 635], "50000012e": [616, 635], "92558754": [616, 635], "92558694": [616, 635], "92558682": [616, 635], "92558861": [616, 635], "60000025e": [616, 635], "01024": [616, 635], "retain_grad": [617, 635], "func_ret": [617, 635, 839], "666666": [617, 635], "333332": [617, 635], "66666675": [617, 625, 635], "argnum": [618, 635], "933": [618, 620, 635], "jac_fn": [620, 635], "639": [621, 635], "361": [621, 635], "52565837": [622, 635], "8418861": [622, 635], "68377209": [622, 635], "value_grad": [625, 635], "42333412": [625, 635], "5333333": [625, 635], "93333334": [625, 635], "43333334": [625, 635], "0666666": [625, 635], "softsign": 626, "718281828459045": 627, "euler": 627, "141592653589793": 627, "cmp_i": 628, "cmp_isnot": 628, "for_loop": 628, "if_els": 628, "try_except": 628, "to_dlpack": 629, "as_ivy_dtyp": [630, 841], "as_native_dtyp": 630, "check_float": 630, "closest_valid_dtyp": 630, "default_dtyp": [630, 829, 837], "dtype_bit": 630, "function_supported_dtyp": [630, 829, 844], "function_unsupported_dtyp": [630, 829], "infer_default_dtyp": 630, "invalid_dtyp": [630, 829], "is_hashable_dtyp": 630, "is_native_dtyp": 630, "promote_typ": [630, 829], "promote_types_of_input": [630, 829, 840], "type_promote_arrai": [630, 829], "unset_default_complex_dtyp": 630, "unset_default_float_dtyp": 630, "unset_default_int_dtyp": 630, "unset_default_uint_dtyp": 630, "valid_dtyp": 630, "defaultcomplexdtyp": 630, "defaultdtyp": 630, "defaultfloatdtyp": 630, "defaultintdtyp": 630, "defaultuintdtyp": 630, "as_ivy_dev": [631, 851], "clear_cached_mem_on_dev": 631, "dev_util": [631, 830], "function_supported_devic": 631, "function_unsupported_devic": 631, "get_all_ivy_arrays_on_dev": [631, 830], "handle_soft_device_vari": [631, 830], "num_cpu_cor": [631, 830], "num_gpu": [631, 830, 844], "num_ivy_arrays_on_dev": 631, "percent_used_mem_on_dev": 631, "print_all_ivy_arrays_on_dev": 631, "set_split_factor": [631, 833], "split_func_cal": 631, "total_mem_on_dev": [631, 830], "tpu_is_avail": 631, "unset_default_devic": [631, 830], "unset_soft_device_mod": [631, 830], "used_mem_on_dev": 631, "defaultdevic": [631, 830], "profil": 631, "save_dir": 631, "arg_info": 634, "arg_nam": 634, "cache_fn": [634, 837], "current_backend_str": [634, 844, 849, 851], "function_supported_devices_and_dtyp": 634, "function_unsupported_devices_and_dtyp": 634, "get_item": [634, 840], "get_referrers_recurs": 634, "inplace_arrays_support": 634, "inplace_variables_support": 634, "is_ivy_nested_arrai": 634, "isscalar": 634, "match_kwarg": 634, "num_arrays_in_memori": 634, "print_all_arrays_in_memori": 634, "set_item": [634, 844], "to_ivy_shap": 634, "to_native_shap": 634, "try_else_non": 634, "unset_array_mod": [634, 846], "unset_exception_trace_mod": 634, "unset_inplace_mod": 634, "unset_min_denomin": 634, "unset_nestable_mod": 634, "unset_precise_mod": 634, "unset_queue_timeout": 634, "unset_show_func_wrapper_trace_mod": 634, "vmap": [634, 855, 870], "arraymod": 634, "precisemod": [634, 829], "jac": 635, "value_and_grad": [635, 839], "feature_group_count": [636, 649, 656, 657], "oiw": [636, 649, 650, 656], "oihw": [636, 649, 652, 656], "oidhw": [636, 649, 654, 656], "dhwio": [636, 649, 650, 654, 656], "conv_general_dil": [636, 841], "conv_general_transpos": 636, "depthwis": [636, 658, 778, 792], "1428566": [636, 659], "49000001": [636, 659], "55599999": [636, 659], "21000004": [636, 659], "incom": [636, 660], "4269": [636, 660], "911": [636, 660, 833], "157": [636, 660], "753": [636, 660], "545": [636, 643, 660, 741], "547": [636, 660, 830], "963": [636, 660], "98495483": [636, 660], "0293808": [636, 660], "0159359": [636, 660], "74752808": [636, 660], "20942307": [636, 660], "3205719": [636, 660], "all_weight": [636, 661], "num_lay": [636, 661, 792], "batch_first": [636, 661, 663], "weights_transpos": [636, 661], "has_ih_bia": [636, 661], "has_hh_bia": [636, 661], "multi": [636, 637, 661, 663, 668, 778, 792, 831, 848, 855, 866, 868, 870, 874], "long": [636, 661, 662, 819, 820, 828, 829, 831, 833, 834, 841, 849, 870], "seq_len": [636, 661], "input_s": [636, 661], "h_0": [636, 661], "c_0": [636, 661], "num_direct": [636, 661], "hidden_s": [636, 661], "four": [636, 661, 815, 824, 829, 831, 836, 837, 844, 847, 852], "w_ih": [636, 661], "w_hh": [636, 661], "b_ih": [636, 661], "b_hh": [636, 661], "pack": [636, 661], "c_out": [636, 661], "vaswani": [636, 663], "al": [636, 663], "num_attention_head": [636, 663], "key_dim": [636, 663, 792], "value_dim": [636, 663, 792], "attention_weight": [636, 663], "unbatch": [636, 663], "nm": 636, "box": [636, 664, 665, 819], "iou_threshold": [636, 664], "max_output_s": [636, 664], "score_threshold": [636, 664], "roi_align": 636, "spatial_scal": [636, 665], "sampling_ratio": [636, 665], "23333359": [636, 666], "03946018": [636, 666], "0280633": [636, 666], "29981947": [636, 666], "29981089": [636, 666], "06345534": [636, 666], "9634552": [636, 666], "19336844": [636, 666], "09336829": [636, 666], "axisa": [637, 668], "axisb": [637, 668], "axisc": [637, 668], "293": [637, 669], "46997": [637, 669], "17157288": [637, 673], "9238795": [637, 673], "78930789": [637, 673], "59803128": [637, 673], "19127655": [637, 673], "31213903": [637, 673], "63418275": [637, 673], "84632206": [637, 673], "70548367": [637, 673], "70223427": [637, 673], "09570674": [637, 673], "63116378": [637, 673], "56109613": [637, 673], "53554028": [637, 673], "32237405": [637, 673], "43822157": [637, 673], "83906901": [637, 673], "50766778": [637, 673], "71475857": [637, 673], "48103389": [637, 673], "3676433": [637, 673], "68466955": [637, 673], "62933773": [637, 673], "77917379": [637, 673], "14264561": [637, 673], "61036086": [637, 673], "45033181e": [637, 674], "02829754e": [637, 674], "54220343e": [637, 674], "12647155e": [637, 674], "38447177e": [637, 674], "56155300e": [637, 674], "26794919": [637, 674], "7320509": [637, 674], "0012": [637, 676], "00342": [637, 676], "000565": [637, 676], "0104": [637, 676], "000981": [637, 676], "00282": [637, 676], "000766": [637, 676], "0322": [637, 676], "00237": [637, 676], "000151": [637, 676], "00101": [637, 676], "00019": [637, 676], "0214": [637, 676], "00171": [637, 676], "0107": [637, 676], "0167": [637, 676], "0472": [637, 676], "0536": [637, 676], "0177": [637, 676], "000429": [637, 676], "00762": [637, 676], "frobeniu": [637, 678], "nuclear": [637, 678], "induc": [637, 678], "ranl": [637, 678], "47722558": [637, 678], "776": [637, 678], "6000004": [637, 678], "118": [637, 679], "moor": [637, 683], "penros": [637, 683], "31622776": [637, 684], "94868332": [637, 684], "1622777": [637, 684], "42718887": [637, 684], "deteremin": [637, 685], "logsabsdet": [637, 685], "subject": [637, 685], "unset_backend": [637, 685, 801, 825], "ordin": [637, 686], "b2": [637, 686], "usvh": [637, 687], "cetera": [637, 687], "driver": [637, 688, 855], "cusolv": [637, 688], "gesvd": [637, 688], "gesvdj": [637, 688], "gesvda": [637, 688], "86217213": [637, 688], "31816804": [637, 688], "615": [637, 688], "ss": [637, 688], "25994301": [637, 688], "16403675": [637, 688], "61529762": [637, 688], "51231241": [637, 688], "39777088": [637, 688], "15413129": [637, 688], "1029852": [637, 688], "01383495": [637, 688], "86647356": [637, 688], "7786541": [637, 688], "55970621": [637, 688], "16857576": [637, 688], "86412698": [637, 688], "37566757": [637, 688], "88477993": [637, 688], "95925522": [637, 688], "6444726": [637, 688], "54687881": [637, 688], "16134834": [637, 688], "35037804": [637, 688], "31025076": [637, 688], "35769391": [637, 688], "transposit": [637, 689], "0x": [637, 692], "Such": [637, 692, 837, 844], "alexandr": [637, 692], "theophil": [637, 692], "dot_product": [637, 693], "9000001": [637, 694], "64158917": [637, 694], "skew": [637, 695], "60309976": [638, 696], "6666193": [638, 696], "01348412": [638, 696], "05393649": [638, 696], "49992943": [638, 696], "83330965": [638, 696], "02136981": [638, 696], "32844672": [638, 696], "26561815": [638, 696], "22314337": [638, 696], "08916873": [638, 697, 698], "44832274": [638, 698], "75646281": [638, 698], "13862944": [638, 698], "57564628": [638, 698], "honor": [639, 706], "beyond": [639, 707, 812, 832, 841, 876], "famili": [639, 710], "intxx": [639, 710], "floatxx": [639, 710], "rep": [639, 712], "fomaml_step": 640, "inner_cost_fn": [640, 715, 716, 717], "outer_cost_fn": [640, 715, 716], "inner_grad_step": [640, 715, 716, 717], "inner_learning_r": [640, 715, 716, 717], "inner_optimization_step": [640, 715, 716, 717], "inner_batch_fn": [640, 715, 716], "outer_batch_fn": [640, 715, 716], "average_across_step": [640, 715, 716], "inner_v": [640, 715, 716], "keep_inner_v": [640, 715, 716], "outer_v": [640, 715, 716], "keep_outer_v": [640, 715, 716], "return_inner_v": [640, 715, 716, 717], "num_task": [640, 715, 716, 717], "maml": [640, 715, 716], "0x7fdde1d61120": [640, 715, 716, 717], "maml_step": 640, "vanilla": [640, 716, 853, 870], "_variabl": [640, 716, 717], "sub_batch": [640, 716], "40069818": [640, 716], "13723135": [640, 716], "reptile_step": 640, "cost_fn": [640, 717], "reptil": [640, 717], "batch_in": [640, 717], "4485182": [640, 717], "139": [640, 717], "9569855": [640, 717], "9880483": [640, 717], "01766968": [640, 717], "02197957": [640, 717], "02197981": [640, 717], "all_nested_indic": 641, "include_nest": [641, 718], "_index": [641, 718, 729], "_base": [641, 718, 728, 729, 840], "themselv": [641, 718, 827, 829, 830, 832, 837, 841, 853, 867, 876], "863": [641, 718, 830], "672": [641, 718], "482": [641, 718], "674": [641, 718], "341": [641, 718], "copy_nest": 641, "to_mut": [641, 719, 730], "deepli": [641, 719, 821, 855, 870], "copied_nest": [641, 719], "1337": [641, 719, 730], "duplicate_array_index_chain": 641, "index_nest": [641, 837], "insert_into_nest_at_index": 641, "insert_into_nest_at_indic": 641, "special_squar": [641, 724], "6666666666666667": [641, 724], "special_pow": [641, 724], "linear_model": [641, 724], "map_nest_at_index": 641, "_result": [641, 725, 735], "hh": [641, 725, 730], "map_nest_at_indic": 641, "ub": [641, 726], "tb": [641, 726], "multi_index_nest": 641, "nested_ani": 641, "check_nest": [641, 728, 729], "nested_argwher": 641, "stop_after_n_found": [641, 729], "nested_indic": [641, 729], "nested_map": [641, 830, 837], "_tuple_check_fn": [641, 730], "_list_check_fn": [641, 730], "_dict_check_fn": [641, 730], "wherebi": [641, 730, 818, 867], "ah": [641, 730], "bh": [641, 730], "ch": [641, 730], "dh": [641, 730, 823], "eh": [641, 730], "gh": [641, 730, 819, 834], "ih": [641, 730], "1338": [641, 730], "nested_multi_map": 641, "index_chain": [641, 731], "nest0": [641, 731], "ivy_arrai": [641, 731, 824, 841], "unappli": [641, 731], "prune_empti": 641, "prune_nest_at_index": 641, "prune_nest_at_indic": 641, "set_nest_at_index": 641, "set_nest_at_indic": 641, "xyz": [641, 736], "pqr": [641, 736], "mini": [642, 737, 792, 795], "uniformli": [643, 739, 741], "22346112": [643, 740], "0922": [643, 740], "9213753": [643, 740], "12818667": [643, 740], "799": [643, 740], "469": [643, 740], "287": [643, 740], "0366": [643, 740], "26431865": [643, 741], "475": [643, 741], "878": [643, 741], "861": [643, 741], "929": [643, 741], "789": [643, 741], "519": [643, 741], "0435": [643, 741], "381": [643, 741], "4608004": [643, 741], "8458502": [643, 741], "67270088": [643, 741], "31128597": [643, 741], "394": [643, 743], "zeroel": [644, 747], "fourth": [645, 749], "1141": [645, 749], "8101": [645, 749], "9298": [645, 749], "8460": [645, 749], "2119": [645, 749], "3519": [645, 749], "6252": [645, 749], "4033": [645, 749], "7443": [645, 749], "2577": [645, 749], "3707": [645, 749], "0545": [645, 749], "3238": [645, 749], "5944": [645, 749], "0775": [645, 749], "4327": [645, 749], "62519997": [645, 749], "40329999": [645, 749], "59439999": [645, 749], "74430001": [645, 749], "81010002": [645, 749], "84600002": [645, 749], "92979997": [645, 749], "einstein": [647, 759, 805], "117": [647, 759], "intend": [647, 765, 774, 791, 823, 836, 839, 868, 870, 874, 875], "07472222": [647, 766], "00666667": [647, 766], "08966666": [647, 766], "simplicit": [648, 767, 768], "ivy_test": [771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 818, 819, 820, 823, 826, 828, 834, 842], "test_ivi": [771, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 784, 818, 819, 820, 826, 828, 834, 842, 844], "assert_all_clos": [771, 842], "ret_np": [771, 773, 842], "ret_from_gt_np": [771, 842], "ground_truth_backend": [771, 773, 774, 783, 784, 816, 834, 842], "mark": [771, 815, 818, 820, 823, 844, 849], "assert_same_typ": 771, "ret_from_target": 771, "ret_from_gt": 771, "backend_to_test": [771, 773, 816, 834, 842], "gt_backend": 771, "with_backend": [771, 801], "assert_same_type_and_shap": 771, "this_key_chain": 771, "check_unsupported_devic": 771, "input_devic": 771, "all_as_kwargs_np": [771, 773], "check_unsupported_device_and_dtyp": 771, "input_dtyp": [771, 773, 783, 816, 834, 842, 844], "check_unsupported_dtyp": 771, "test_unsupported_funct": 771, "value_test": 771, "ret_np_flat": 771, "ret_np_from_gt_flat": 771, "specific_tolerance_dict": 771, "ret_from_np_gt_flat": 771, "function_test": 773, "args_to_contain": 773, "array_arg": [773, 837], "args_to_frontend": 773, "frontend_array_fn": 773, "arrays_to_frontend": 773, "as_list": 773, "convtru": 773, "nativeclass": 773, "counter": [773, 853], "create_args_kwarg": 773, "args_np": 773, "arg_np_val": 773, "args_idx": 773, "kwargs_np": 773, "kwarg_np_val": 773, "kwargs_idx": 773, "test_flag": [773, 816, 834, 842, 844], "on_devic": [773, 783, 816, 834, 842], "flatten_and_to_np": 773, "flatten_frontend": 773, "flatten_frontend_fw_to_np": 773, "frontend_ret": [773, 842], "isscalar_func": 773, "is_native_array_func": 773, "to_numpy_func": 773, "flatten_frontend_to_np": 773, "get_frontend_ret": 773, "frontend_fn": 773, "frontend_array_funct": 773, "precision_mod": [773, 783, 784, 834], "test_trac": [773, 783, 784, 816, 823, 834], "test_trace_each": [773, 783, 784], "get_ret_and_flattened_np_arrai": 773, "gradient_incompatible_funct": 773, "gradient_test": [773, 844], "rtol_": [773, 816, 834], "atol_": [773, 816, 834, 842], "tolerance_dict": 773, "gradient_unsupported_dtyp": 773, "kwargs_to_args_n_kwarg": 773, "num_positional_arg": [773, 783, 784, 816, 834, 842, 844], "port": [773, 861], "test_frontend_funct": [773, 842], "fn_tree": [773, 774, 784, 816, 834, 841, 842, 844], "gt_fn_tree": [773, 784], "test_valu": [773, 842, 844], "frontend_function_flag": [773, 783], "functiontestflag": [773, 783, 816, 834], "with_out": [773, 783, 816, 834, 842, 844], "instance_method": [773, 783, 816, 834, 844], "as_vari": [773, 783, 816, 834, 842, 844], "namespac": [773, 818, 829, 838, 841, 842, 845, 849, 854], "arg_": 773, "test_frontend_method": [773, 842], "init_input_dtyp": [773, 842], "method_input_dtyp": [773, 842], "init_flag": [773, 842, 844], "method_flag": [773, 783, 842, 844], "init_all_as_kwargs_np": [773, 842], "method_all_as_kwargs_np": [773, 842], "frontend_method_data": [773, 842], "init_as_variable_flag": [773, 784], "dictat": [773, 824, 831, 836, 840], "init_num_positional_arg": [773, 784], "init_native_array_flag": 773, "with_v": 773, "ret_gt": 773, "test_funct": [773, 816, 819, 820, 828, 834, 842, 844], "fn_name": [773, 774, 784, 816, 825, 834, 842, 844], "return_flat_np_arrai": 773, "as_variable_flag": [773, 784, 844], "native_array_flag": [773, 784, 844], "container_flag": [773, 783, 784, 844], "test_function_backend_comput": 773, "test_function_ground_truth_comput": 773, "arg_np_arrai": 773, "arrays_args_indic": 773, "arrays_kwargs_indic": 773, "kwarg_np_arrai": 773, "test_gradient_backend_comput": 773, "test_gradient_ground_truth_comput": 773, "test_method": 773, "method_nam": [773, 782, 784, 842], "init_with_v": 773, "method_with_v": 773, "test_gradi": [773, 783, 784, 816, 834, 844], "method_as_variable_flag": [773, 784], "method_num_positional_arg": [773, 784], "method_native_array_flag": 773, "method_container_flag": [773, 784], "test_method_backend_comput": 773, "test_method_ground_truth_comput": 773, "org_con_data": 773, "args_np_method": 773, "met_arg_np_v": 773, "met_args_idx": 773, "kwargs_np_method": 773, "met_kwarg_np_v": 773, "met_kwargs_idx": 773, "v_np": 773, "traced_if_requir": 773, "wrap_frontend_function_arg": 773, "holder": 774, "current_frontend_config": 774, "0x7fddd5b45f00": 774, "interruptedtest": 774, "test_interrupt": 774, "baseexcept": 774, "tri": [774, 829], "testdata": 774, "supported_device_dtyp": 774, "is_method": 774, "setup_api_test": 774, "test_data": 774, "setup_frontend_test": 774, "teardown_api_test": 774, "teardown_frontend_test": 774, "hypothesis_help": [776, 777, 778, 779], "array_help": 776, "array_and_broadcastable_shap": 776, "searchstrategi": [776, 777, 778, 779, 783, 784, 844], "array_bool": [776, 844], "min_valu": [776, 777, 778, 779, 816, 834, 842, 844], "max_valu": [776, 777, 778, 779, 842, 844], "ex": [776, 777, 778, 779, 784, 828, 864], "strategi": [776, 777, 778, 779, 783, 784, 818, 842], "array_helpers_dtype_info_help": 776, "kind_dtyp": [776, 778], "array_indices_axi": 776, "array_dtyp": [776, 777, 844], "indices_dtyp": 776, "get_dtyp": [776, 777, 816, 834, 842, 844], "abs_smallest_v": [776, 778, 779], "large_abs_safety_factor": [776, 778, 779, 816, 834, 842, 844], "small_abs_safety_factor": [776, 778, 779, 816, 834, 842], "safety_factor_scal": [776, 778, 779, 842, 844], "disable_random_axi": 776, "axis_zero": 776, "allow_inf": [776, 779, 842, 844], "min_num_dim": [776, 778, 842, 844], "max_num_dim": [776, 778, 842, 844], "min_dim_s": [776, 778, 842, 844], "max_dim_s": [776, 778, 842], "first_dimension_onli": 776, "indices_same_dim": 776, "valid_bound": 776, "safeti": [776, 778, 779, 870], "0002": [776, 779], "hypothesi": [776, 778, 784, 818, 820, 823, 828, 838], "65536": 776, "44758124e": [776, 844], "array_indices_put_along_axi": 776, "values_dtyp": 776, "array_valu": [776, 844], "allow_nan": [776, 779, 844], "allow_subnorm": [776, 779, 844], "exclude_min": [776, 779, 844], "exclude_max": [776, 779], "subnorm": [776, 779], "get_shap": [776, 778, 842, 844], "1806": 776, "36912": 776, "6955": 776, "59576": 776, "arrays_and_ax": 776, "available_dtyp": [776, 777, 816, 834, 842, 844], "allow_non": [776, 778, 842, 844], "return_dtyp": 776, "force_int_axi": 776, "26e": 776, "10e": 776, "24322108": 776, "26446279e": 776, "96046448e": 776, "008": 776, "17549435e": 776, "038": 776, "06541027e": 776, "13725760e": 776, "07143888": 776, "arrays_for_pool": 776, "min_dim": 776, "max_dim": 776, "min_sid": 776, "max_sid": 776, "explicit_or_str_pad": 776, "only_explicit_pad": 776, "return_dil": 776, "mixed_fn_compo": [776, 777, 778, 779, 844], "return_data_format": 776, "cond_data_gen_help": 776, "create_concatenable_arrays_dtyp": 776, "min_num_arrai": 776, "max_num_arrai": 776, "concat_dim": 776, "common_shap": [776, 844], "stackabl": 776, "given_common_shap": 776, "create_nested_input": 776, "leaf_valu": 776, "dtype_and_valu": [776, 816, 834, 842, 844], "num_arrai": [776, 777, 842, 844], "shared_dtyp": [776, 777, 842], "ret_shap": 776, "array_api_dtyp": [776, 777], "shape_kei": 776, "37915": 776, "6322": 776, "26765": 776, "12413": 776, "26986": 776, "34665": 776, "000e": 776, "711e": 776, "100e": 776, "955e": [776, 844], "40817": 776, "56193": 776, "29200": 776, "5851": 776, "9746": 776, "9604645e": 776, "103": 776, "41795": 776, "1170789994": 776, "44251": 776, "44209": 776, "433075925": 776, "24791": 776, "24691": 776, "24892": 776, "16711": 776, "972": 776, "15357": 776, "72057594037927936": 776, "dtype_array_queri": 776, "allow_mask": 776, "allow_neg_step": 776, "dtype_array_query_v": 776, "dtype_values_axi": [776, 844], "min_axi": 776, "max_axi": 776, "valid_axi": 776, "allow_neg_ax": 776, "min_axes_s": 776, "max_axes_s": 776, "force_tuple_axi": 776, "29788": 776, "62222885e": 776, "68281172e": 776, "257j": 776, "40129846e": 776, "90000000e": 776, "63426649e": 776, "91931887e": 776, "29488e": 776, "14361019e": 776, "12445": 776, "einsum_help": 776, "get_first_solve_batch_matrix": 776, "choose_adjoint": 776, "get_second_solve_batch_matrix": 776, "get_first_solve_matrix": 776, "allow_simplifi": 776, "choose_sid": 776, "xa": 776, "get_second_solve_matrix": 776, "list_of_s": 776, "sampled_from": [776, 842, 844], "min_siz": [776, 778, 784, 844], "max_siz": [776, 778, 784, 844], "size_bound": [776, 844], "999999999999999": 776, "9394938006792373": 776, "mutually_broadcastable_shap": 776, "num_shap": 776, "base_shap": 776, "dtype_help": 777, "univers": [777, 841, 859], "cast_filt": 777, "cast_filter_help": 777, "current_backend": [777, 801, 818, 825, 833, 837, 842, 845, 849], "get_castable_dtyp": 777, "castabl": 777, "prune_funct": 777, "intersect": [777, 828, 844], "signed_integ": 777, "real_and_complex": 777, "float_and_complex": 777, "general_help": 778, "broadcasterror": 778, "apply_safety_factor": 778, "dims_and_offset": 778, "ensure_dim_uniqu": 778, "embedding_help": 778, "general_helpers_dtype_info_help": 778, "get_axi": [778, 844], "allow_neg": 778, "sort_valu": 778, "force_tupl": 778, "force_int": 778, "assertionerror": [778, 816, 823, 833, 834, 842, 844], "get_bound": [778, 844], "get_mean_std": 778, "matrix_is_st": 778, "cond_limit": 778, "instabl": [778, 816, 829, 834], "computation": [778, 819], "prone": [778, 829], "thumb": 778, "gradual": 778, "collinear": 778, "reshape_shap": [778, 844], "sizes_": 778, "two_broadcastable_shap": 778, "x_and_filt": 778, "number_help": 779, "arbitrarili": [779, 852], "safety_factor": 779, "backend_proc": 780, "input_queu": 780, "output_queu": 780, "frontend_proc": 780, "pipeline_help": 781, "backendhandl": 781, "update_backend": [781, 842], "backendhandlermod": 781, "enum": 781, "setbackend": 781, "withbackend": 781, "withbackendcontext": 781, "get_frontend_config": 781, "frontendmethoddata": 782, "ivy_init_modul": 782, "framework_init_modul": 782, "init_nam": 782, "test_parameter_flag": 783, "dynamicflag": [783, 784], "frontendfunctiontestflag": [783, 834], "with_copi": 783, "generate_frontend_arrai": [783, 784, 834], "testflag": 783, "apply_flag": 783, "args_to_iter": 783, "frontendinittestflag": 783, "frontendmethodtestflag": 783, "test_cython_wrapp": [783, 784], "initmethodtestflag": 783, "methodtestflag": 783, "build_flag": 783, "frontend_init_flag": 783, "frontend_method_flag": 783, "function_flag": 783, "init_method_flag": 783, "testing_help": 784, "handle_exampl": [784, 844], "test_exampl": [784, 844], "test_frontend_exampl": [784, 844], "test_method_exampl": [784, 844], "test_frontend_method_exampl": [784, 844], "given_kwarg": 784, "handle_frontend_method": [784, 842, 844], "class_tre": [784, 842], "init_tre": [784, 842], "init_native_arrai": 784, "_as_varaible_strategi": 784, "method_native_arrai": 784, "test_inplac": [784, 844], "_given_kwarg": 784, "test_compil": 784, "handle_frontend_test": [784, 842, 844], "alias": [784, 818, 841, 842], "number_positional_arg": [784, 842], "test_with_out": [784, 842, 844], "test_with_copi": 784, "handle_method": [784, 844], "method_tre": [784, 842, 844], "_gradient_strategi": 784, "handle_test": [784, 816, 834, 844], "test_instance_method": [784, 844], "num_positional_args_help": 784, "num_positional_args_method": 784, "geglu": 788, "leakyrelu": 788, "logsoftmax": 788, "from_flax_modul": 789, "native_modul": 789, "params_fx": 789, "rng_seed": 789, "constructor_arg": 789, "constructor_kwarg": 789, "instance_arg": 789, "instance_kwarg": 789, "flax": [789, 854, 855, 861, 870], "from_haiku_modul": 789, "params_hk": 789, "from_paddle_modul": 789, "from_torch_modul": 789, "to_keras_modul": 789, "native_module_class": 789, "modulehelp": [790, 794], "create_vari": [791, 853], "var_shap": [791, 853], "fan_out": [791, 853], "fan_in": [791, 853], "rectangular": 791, "firstlayersiren": 791, "siren": 791, "glorotuniform": [791, 792, 853], "glorot": 791, "xavier": 791, "neuron": 791, "w_1x_1": 791, "w_2x_2": 791, "w_nx_n": 791, "w_i": 791, "vanish": 791, "explod": [791, 858, 859], "kaimingnorm": 791, "fan_mod": [791, 853], "kaim": 791, "he": 791, "negative_slop": 791, "fan": 791, "propog": 791, "fan_sum": [791, 853], "Ones": 791, "randomnorm": 791, "stddev": 791, "w0": 791, "wlim": 791, "predefin": 791, "fan_avg": 791, "adaptiveavgpool1d": 792, "avgpool1d": 792, "implicit": [792, 827, 832, 841, 844, 849, 870], "avgpool2d": 792, "avgpool3d": 792, "e501": 792, "filter_s": 792, "weight_initi": [792, 853], "bias_initi": [792, 853], "0x7fdde198b6a0": 792, "0x7fdde198b640": 792, "conv1dtranspos": 792, "0x7fdde198b5e0": 792, "0x7fdde198b580": 792, "filter_shap": 792, "0x7fdde198b520": 792, "0x7fdde198b4c0": 792, "0x7fdde198b460": 792, "0x7fdde198b400": 792, "0x7fdde198b2e0": 792, "0x7fdde198b280": 792, "conv3dtranspos": 792, "0x7fdde198b220": 792, "0x7fdde198b1c0": 792, "depthwiseconv2d": 792, "num_channel": 792, "0x7fdde198b3a0": 792, "0x7fdde198b340": 792, "bernoul": 792, "num_embed": 792, "embedding_dim": 792, "padding_idx": 792, "lookup": 792, "num_embeddingss": 792, "renorm": 792, "insensit": 792, "return_st": 792, "0x7fdde198b160": 792, "get_initial_st": 792, "0x7fdde198b760": 792, "0x7fdde198b700": 792, "maxpool1d": 792, "maxpool3d": 792, "multiheadattent": 792, "embed_dim": 792, "head_dim": 792, "dropout_r": 792, "use_proj_bia": 792, "attention_ax": 792, "build_mod": [792, 793, 794], "on_init": [792, 794], "parallel": [792, 826, 870, 874, 875], "binarycrossentropyloss": 793, "store_var": [793, 794], "with_partial_v": [793, 794], "logpoissonloss": 793, "modulemeta": 794, "temporarili": [794, 816, 823, 834], "from_cal": 794, "module_dict": 794, "register_buff": 794, "register_paramet": 794, "weights_path": 794, "randomness_factor": 794, "with_edge_label": 794, "with_arg_label": 794, "with_output_label": 794, "output_connected_onli": 794, "highlight_subgraph": 794, "trace_kwarg": 794, "_unified_ivy_graph": 794, "_call": 794, "num_featur": 795, "trail": 795, "layernorm": 795, "normalized_shap": 795, "elementwise_affin": 795, "set_stat": [796, 853], "adamw": 796, "weight_decai": 796, "init_on_first_step": 796, "fallback_to_non_trac": 796, "ignore_miss": 796, "privat": [796, 841, 844], "_step": [796, 853], "stochast": [796, 870], "sub_modul": 797, "check_al": 798, "check_all_or_any_fn": 798, "check_ani": 798, "check_dev_correct_format": 798, "check_dimens": 798, "check_elem_in_list": [798, 837, 840, 841], "elem": 798, "check_equ": [798, 841], "check_exist": 798, "check_fals": 798, "check_gather_input_valid": 798, "check_gather_nd_input_valid": 798, "check_great": 798, "allow_equ": [798, 833], "check_inplace_sizes_valid": [798, 840], "check_isinst": 798, "allowed_typ": 798, "check_kernel_padding_s": 798, "padding_s": 798, "check_less": [798, 833], "check_one_way_broadcast": 798, "check_same_dtyp": 798, "check_shapes_broadcast": 798, "check_tru": 798, "check_unsorted_segment_valid_param": 798, "ast_help": 800, "importtransform": 800, "nodetransform": 800, "impersonate_import": 800, "tree": [800, 829], "local_ivy_id": 800, "visit_import": 800, "visit_importfrom": 800, "ivyload": 800, "loader": [800, 852, 855], "exec_modul": 800, "ivypathfind": 800, "metapathfind": 800, "find_spec": 800, "fullnam": 800, "contextmanag": 801, "choose_random_backend": 801, "global_backend": 801, "dynamic_backend_convert": 801, "backend_stack": [801, 849], "prevent_access_loc": 801, "previous_backend": [801, 825], "Or": [801, 812, 814, 819, 840, 852], "set_backend_to_specific_vers": 801, "set_jax_backend": 801, "set_mxnet_backend": 801, "mx": 801, "set_numpy_backend": 801, "set_paddle_backend": 801, "set_tensorflow_backend": 801, "set_torch_backend": 801, "sub_backend_handl": 802, "clear_sub_backend": 802, "find_available_sub_backend": 802, "sub_backends_loc": 802, "fn_name_from_version_specific_fn_nam": 802, "fn_name_from_version_specific_fn_name_sub_backend": 802, "sub_backend_vers": 802, "backend_vers": [802, 816, 829, 834], "set_sub_backend": 802, "sub_backend_str": 802, "set_sub_backend_to_specific_vers": 802, "sub_backend": 802, "unset_sub_backend": 802, "check_for_binari": 803, "cleanup_and_fetch_binari": [803, 819], "clean": [803, 820, 845, 849, 850, 852], "dynamic_import": 804, "import_modul": [804, 849], "einsum_pars": 805, "convert_interleaved_input": 805, "interleav": 805, "convert_subscript": 805, "old_sub": 805, "symbol_map": 805, "subscript": [805, 806], "oe": 805, "ellipsi": [805, 806], "find_output_shap": 805, "find_output_str": 805, "canon": 805, "gen_unused_symbol": 805, "abd": [805, 806], "get_symbol": 805, "letter": 805, "resort": 805, "unicod": 805, "charact": [805, 841, 860], "chr": 805, "surrog": 805, "\u0155": 805, "20000": 805, "\u4eac": 805, "has_valid_einsum_chars_onli": 805, "einsum_str": 805, "abaz": 805, "\u00f6ver": 805, "is_valid_einsum_char": 805, "\u01f5": 805, "legalise_einsum_expr": 805, "reproduct": [805, 806], "pars": [805, 806, 826, 831, 855], "intak": 805, "contract_path": 805, "parse_einsum_input": [805, 806], "einsum_eqn": 805, "legalis": 805, "legalise_einsum_eqn": 805, "za": [805, 806], "xza": [805, 806], "xz": [805, 806], "possibly_convert_to_numpi": 805, "myshap": 805, "__main__": 805, "0x10f850710": 805, "einsum_path_help": 806, "can_dot": 806, "idx_remov": 806, "bla": 806, "benefici": 806, "movement": 806, "costli": 806, "gemm": 806, "ijj": 806, "ddot": 806, "ikj": 806, "compute_size_by_dict": 806, "idx_dict": 806, "abbc": 806, "find_contract": 806, "input_set": 806, "output_set": 806, "lh": 806, "rh": 806, "new_result": 806, "idx_contract": 806, "iset": 806, "oset": 806, "bdc": 806, "flop_count": 806, "num_term": 806, "size_dictionari": 806, "flop": [806, 810], "greedy_path": 806, "memory_limit": 806, "exhaust": [806, 840, 844, 867, 876], "indices_remov": 806, "priorit": [806, 818, 843, 847], "hadamard": 806, "cubic": 806, "greedi": 806, "idx_siz": 806, "optimal_path": 806, "siev": 806, "input_str": 806, "output_str": 806, "parse_possible_contract": 806, "path_cost": 806, "naive_cost": 806, "propos": [806, 820, 841, 847, 870], "intermediari": [806, 825], "unoptim": 806, "new_input_set": 806, "update_other_result": 806, "provision": 806, "_parse_possible_contract": 806, "mod_result": 806, "inplaceupdateexcept": 807, "include_backend": [807, 833], "ivyattributeerror": [807, 833], "attributeerror": [807, 833, 851], "ivybroadcastshapeerror": [807, 833], "ivydeviceerror": 807, "ivydtypepromotionerror": [807, 833], "ivyindexerror": [807, 833], "ivyinvalidbackendexcept": 807, "ivynotimplementedexcept": [807, 833], "notimplementederror": 807, "ivyvalueerror": [807, 833], "handle_except": [807, 836, 838], "add_array_spec": 808, "fn_array_spec": 808, "set_logging_mod": 809, "debug": [809, 815, 819, 820, 827, 828, 839, 844, 847, 852, 870, 878], "unset_logging_mod": 809, "print_stat": 810, "viz": 810, "snakeviz": 810, "bonu": 810, "cprofil": 810, "tensorflow_profile_start": 810, "logdir": 810, "host_tracer_level": 810, "python_tracer_level": 810, "device_tracer_level": 810, "delay_m": 810, "toggl": [810, 820], "timestamp": 810, "awai": [810, 812, 868, 870], "millisecond": 810, "guess": 810, "tensorflow_profile_stop": 810, "torch_profiler_init": 810, "schedul": [810, 828, 855, 870, 877], "on_trace_readi": 810, "record_shap": 810, "profile_memori": 810, "with_stack": 810, "with_flop": 810, "with_modul": 810, "experimental_config": 810, "profileract": 810, "record_and_sav": 810, "dealloc": 810, "record": [810, 819, 855, 871], "callstack": 810, "aten": 810, "torchscript": [810, 849, 857, 877], "_experimentalconfig": 810, "kineto": 810, "torch_profiler_start": 810, "torch_profiler_stop": 810, "cprint": [811, 849], "pilot": [812, 817, 856], "grow": [812, 815, 821, 870, 878], "peopl": [812, 817, 819, 820, 822, 870, 872], "brief": [812, 840, 844], "idea": [812, 818, 843, 845, 850, 861, 869], "docker": [812, 816, 817, 834], "challeng": [812, 818, 825, 876], "pull": [812, 813, 815, 818, 819, 823, 831, 835, 845, 847, 855, 856, 861], "jax_fn": 812, "jax_x": 812, "torch_x": 812, "torch_fn": 812, "shorter": [812, 851], "ensp": 812, "customiz": [812, 826], "15c235f": 812, "deepmind_perceiver_io": 812, "sm_framework": 812, "segmentation_model": 812, "sm": 812, "torch_sm": 812, "metric": [812, 855], "iou_scor": 812, "rax": 812, "torch_rax": 812, "poly1_softmax_loss": 812, "madmom": 812, "madmon": 812, "torch_madmom": 812, "freq": 812, "audio": 812, "hz2midi": 812, "torch_loss": 812, "maxpooling1d": 812, "pool_siz": 812, "tf_kornia": 812, "tf_rax": 812, "tf_madmom": 812, "tf_loss": 812, "_forward_classifi": [812, 864], "forward_classifi": [812, 864], "hk_eff_encod": 812, "dummy_x": 812, "jax_sm": 812, "jax_madmom": 812, "jax_loss": 812, "np_kornia": 812, "np_sm": 812, "np_rax": 812, "np_loss": 812, "yourself": [812, 818, 820, 835, 844, 847], "favourit": [812, 819], "hyperparam": 812, "instantli": [812, 864], "everyon": [812, 813, 818, 819, 820, 855, 861], "interoper": [812, 860, 867, 868, 870, 873], "handler": [812, 848, 850, 854, 857], "facilit": [812, 821], "mse_loss": 812, "jax_ms": 812, "tf_mse": 812, "np_mse": 812, "torch_ms": 812, "someth": [812, 816, 820, 825, 834, 835, 845, 852, 853, 855, 856, 876], "motiv": [812, 851, 860], "contextu": 812, "explos": [812, 858, 860], "adher": [812, 823, 829, 832, 836, 847, 849, 854, 859, 860, 866, 867, 876], "orient": 812, "contributor": [812, 813, 816, 818, 819, 820, 834, 841, 848, 870], "believ": [812, 820, 860], "feedback": [812, 818, 828], "appreci": [812, 821], "amaz": [812, 878], "journei": [812, 813, 821], "ambiti": 812, "season": 812, "fellow": 812, "twitter": 812, "sneak": 812, "peek": 812, "credit": 812, "accompani": 812, "lenton2021ivi": 812, "inter": 812, "author": [812, 818, 820, 868, 872], "lenton": 812, "daniel": 812, "pardo": 812, "fabio": 812, "falck": 812, "fabian": 812, "jame": 812, "stephen": 812, "clark": 812, "ronald": 812, "journal": 812, "arxiv": 812, "preprint": 812, "2102": 812, "02886": 812, "year": [812, 823, 855, 859, 861, 870], "strongli": [813, 819, 841, 876, 877], "engag": [813, 820, 821, 860], "skill": [813, 821, 872], "veteran": 813, "effort": [813, 818, 855, 860, 866, 870, 876], "board": [813, 826], "stage": [813, 820, 822, 823, 826, 844, 860, 870], "excit": [813, 822, 860], "reward": [813, 821], "badg": [813, 821, 828, 878], "program": [813, 840, 867, 868, 870, 873, 874, 877], "climb": [813, 817], "Be": [814, 826], "awar": [814, 826, 833, 835], "linux": [814, 819, 820, 826, 873, 875], "regularli": [814, 826, 828], "internet": [814, 826], "codespac": [814, 826, 834], "make_doc": 814, "sh": [814, 819, 820, 823, 828], "pwd": 814, "ssh": [814, 828], "make_docs_without_dock": [814, 826], "award": 815, "formal": 815, "dynamo": [815, 878], "earn": [815, 821], "thoroughli": [815, 823], "valuabl": [815, 818, 820], "merg": [815, 818, 820, 823, 828, 841, 870, 878], "meet": [815, 821, 841], "wizard": [815, 878], "inspector": [815, 878], "acknowledg": [815, 821], "honour": 815, "dilig": 815, "bronz": [815, 821, 878], "silver": [815, 821, 878], "gold": [815, 821, 855, 878], "expertis": [815, 821, 872], "assist": [816, 834], "runtimeerror": [816, 834], "logaddexp2_cpu": [816, 834], "falsifi": [816, 823, 834, 844], "test_logaddexp2": [816, 834], "backend_fw": [816, 834, 842], "dtype_and_x": [816, 834, 842, 844], "reproduce_failur": [816, 823, 834, 838, 844], "axicy2bkaamobaar2waaaacvaai": [816, 834], "decoartor": [816, 834], "with_unsupported_dtyp": [816, 829, 834, 841], "25830078125": [816, 834], "258544921875": [816, 834], "test_acosh": [816, 834], "axicy2baabyqwqgiaabdaai": [816, 834], "quit": [816, 820, 824, 831, 832, 834, 837, 838, 844, 847, 870, 876], "41421356": [816, 834], "41421356e": [816, 834], "34078079e": [816, 834], "154": [816, 834], "test_ab": [816, 819, 834, 844], "000j": [816, 834], "154j": [816, 834], "axicy2zkyaiibibgziaaxqhexsaab7juqaaamteazq": [816, 834], "thread": [816, 818, 819, 820, 823, 824, 825, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 852, 870], "pycharm": [816, 842, 844], "steep": 817, "curv": 817, "realpython": 817, "pyn": 817, "exchang": [817, 860, 866, 868], "stuck": [817, 818], "spell": 817, "sound": [817, 828, 848], "frequent": [818, 820, 825, 870], "outlin": [818, 819, 820, 822, 827, 829, 832, 837, 840, 841, 844], "broad": [818, 872], "individu": [818, 820, 823, 825, 829, 837, 841, 870, 873, 876, 877], "clearli": [818, 820, 831, 842, 844, 860, 874], "straightforward": [818, 821, 852], "lie": 818, "urgent": 818, "encourag": [818, 821, 835, 855, 860], "tackl": [818, 821, 841], "categoris": [818, 823, 841], "comfort": [818, 819, 833], "linkag": 818, "pr": [818, 820, 821, 823, 835, 841, 842, 844], "confid": 818, "submit": [818, 835], "scipi": [818, 860, 872, 877], "mindspor": 818, "simpler": [818, 820, 835, 863, 871, 877], "member": [818, 820, 841, 856, 860], "comment": [818, 819, 820, 823, 829, 835, 841, 843, 847], "composition": 818, "feasibl": [818, 828, 844, 860, 863], "pend": 818, "helpfulli": [818, 847, 868], "problemat": [818, 819], "unimpl": 818, "issue_link": 818, "alias_nam": 818, "notic": [818, 824, 828, 834, 835, 844, 847, 863], "push": [818, 820, 821, 823, 842, 844, 876], "liner": 818, "meanwhil": [818, 828], "reselect": 818, "faithfulli": 818, "creation_routin": [818, 842], "indexing_routin": 818, "ma": 818, "manipulation_routin": 818, "mathematical_funct": [818, 841], "sorting_searching_count": 818, "ufunc": [818, 841], "matrix_and_vector_product": 818, "matrix_eigenvalu": 818, "norms_and_other_numb": 818, "solving_equations_and_inverting_matric": 818, "gleam": 818, "uncom": 818, "test_numpy_inn": 818, "test_frontend": [818, 828, 834, 842], "unsur": [818, 844], "statu": [818, 821, 828, 835, 861], "refrain": 818, "checkbox": [818, 819], "aforement": 818, "parent": [818, 828, 851], "arraywithelementwis": [818, 824, 851], "containerwithmanipul": 818, "thorough": [818, 832, 836, 844], "add_reformatting_checklist_": 818, "category_nam": [818, 829, 830, 832, 836, 837], "autom": [818, 828, 835, 844, 857, 872], "bot": [818, 835], "markdown": [818, 826], "patient": [818, 819], "elabor": 818, "struggl": 818, "assigne": 818, "status": 818, "central": [818, 835, 847, 860, 876], "relevant_submodul": 818, "roadmap": [818, 828], "deem": [818, 841], "subtask": 818, "clearer": [818, 833, 842, 852], "backend_nam": [818, 825, 829, 830, 832, 836, 837, 838], "rare": [818, 830, 855, 875], "button": [818, 819, 820, 834], "centr": 818, "predetermin": 818, "superset": [818, 822, 837, 840, 855], "happi": [819, 834, 855, 861], "your_usernam": [819, 834], "your_fold": [819, 834], "enter": [819, 820, 824, 829, 830, 834, 836, 838], "sync": [819, 823, 834], "remot": [819, 823, 834, 835], "nutshel": [819, 836], "hook": [819, 835, 843], "lint": [819, 822], "succe": [819, 863], "whatev": [819, 827, 855], "elig": [819, 821], "student": 819, "licens": [819, 873], "remind": 819, "expir": 819, "won": [819, 820, 827, 829, 854, 856, 860, 861, 863, 864, 865], "profession": 819, "trial": 819, "jetbrain": 819, "month": [819, 859], "bui": [819, 876], "paid": 819, "rapid": [819, 859, 860, 870], "pace": 819, "person": [819, 820], "perhap": [819, 851, 852, 853, 855, 876], "conda": [819, 860, 872], "ivy_dev": [819, 820], "icon": [819, 820, 834], "panel": 819, "vscode": [819, 834], "palett": 819, "ctrl": [819, 820], "mac": [819, 820], "intel": [819, 860, 868, 875], "m1": 819, "optional_apple_silicon_1": 819, "optional_apple_silicon_2": 819, "array_api_test": [819, 820, 823, 834], "test_array_api": [819, 820, 823, 834, 844], "suit": [819, 822, 823, 828, 834, 843, 844, 852, 860, 870, 876], "cmd": 819, "bat": [819, 820], "virtualenv": 819, "tick": [819, 820, 828], "nz2": 819, "openssl": 819, "libssl1": 819, "1_1": 819, "1f": 819, "1ubuntu2": 819, "20_amd64": 819, "deb": 819, "dpkg": 819, "mitig": [819, 876], "desktop": [819, 834], "powershel": 819, "admin": 819, "deploy": [819, 864, 869, 872, 873, 876, 877], "menu": [819, 834], "introspect": 819, "dialog": 819, "persist": 819, "earlier": [819, 820, 829, 845], "virtualis": 819, "bio": [819, 860], "dropdown": [819, 828], "dockerfil": 819, "ca": 819, "certif": 819, "gnupg": 819, "lsb": 819, "keyr": 819, "fssl": 819, "gpg": 819, "dearmor": 819, "echo": [819, 828, 856], "arch": 819, "lsb_releas": 819, "ce": 819, "cli": 819, "containerd": 819, "systemctl": 819, "softwar": [819, 820, 859, 860, 868, 873, 874, 875], "press": [819, 820, 852], "4a": 819, "socket": 819, "rwx": 819, "sock": 819, "pid": 819, "editor": 819, "pytest": [819, 820, 823, 828, 834, 838, 844], "keyboard": 819, "screenshot": 819, "pop": [819, 834, 860], "test_elementwis": 819, "shell": [819, 820, 823, 828], "setup_test": 819, "run_ivy_core_test": 819, "run_ivy_nn_test": 819, "run_ivy_stateful_test": 819, "run_test": [819, 828], "test_depend": 819, "test_ivy_cor": 819, "test_ivy_nn": 819, "test_ivy_st": 819, "unix": 819, "test_": [819, 842], "test_cor": [819, 820, 842], "offici": [819, 829, 849], "wish": [819, 841], "ivy_nn": 819, "ivy_st": 819, "header": [819, 820, 843], "arrow": 819, "test_stat": 819, "test_submodule_nam": 819, "test_function_nam": 819, "debugg": 819, "studio": [819, 834, 844], "afterward": [819, 852], "background": [819, 826, 834, 870, 872], "overlap": [819, 828, 834, 845, 847, 871], "test_file_path": [819, 834], "test_fn_nam": [819, 834], "engin": [819, 870, 872, 873], "devcontain": 819, "comma": 819, "postcreatecommand": 819, "post_create_command": 819, "poststartcommand": 819, "safe": [819, 841], "containerworkspacefold": 819, "reopen": 819, "test_fle_path": 819, "slash": 819, "isol": [819, 820, 871, 876], "container": 819, "intens": 819, "headach": 819, "arm": [819, 820], "vm": [819, 828], "azur": 819, "cloud": [819, 828, 872], "theme": [819, 826], "ipad": 819, "browser": [819, 826], "quota": 819, "requisit": 819, "pane": [819, 820, 828], "dockerfilegpu": 819, "ivv": 819, "multiv": 819, "multivers": [819, 845], "dockerfilemultivers": 819, "dockerhub": 819, "upto": [819, 820], "minut": [819, 828], "launch": 819, "kindli": [819, 843], "guidelin": 819, "colour": 819, "chanc": 819, "troubleshoot": 819, "ever": 819, "flask": [819, 834], "toolbar": [819, 820, 834], "_array_modul": [819, 823, 834], "refresh": [819, 834], "pytestarg": [819, 834], "unittesten": [819, 834], "pytesten": [819, 834], "autotestdiscoveronsaveen": [819, 834], "conftest": 819, "serv": [819, 820, 824, 827, 836, 837, 841, 842, 844, 847, 848, 857, 868], "aren": [819, 829], "available_config": 819, "cp310": 819, "x86": [819, 875], "newer": [819, 844], "_compil": 819, "meantim": 819, "suffici": [819, 831, 841, 844], "bear": [819, 824, 827, 829, 841], "tendenc": 820, "land": 820, "unrel": [820, 860], "fly": [820, 870], "internship": 820, "suspect": 820, "iii": 820, "issue_numb": 820, "12345": 820, "rememb": 820, "respond": 820, "dai": [820, 835], "freed": 820, "situat": [820, 828, 854], "obvious": [820, 828], "hypothet": 820, "frustrat": 820, "delai": [820, 863], "busi": 820, "inact": 820, "unfairli": 820, "investig": 820, "name_of_your_branch": 820, "date": [820, 823], "complic": [820, 842, 849], "merge_with_upstream": 820, "abort": 820, "tediou": [820, 831, 847], "stash": [820, 835], "reinstat": 820, "uncommit": 820, "unstag": [820, 835], "untrack": 820, "atlassian": 820, "wrote": 820, "piec": [820, 824, 837, 838, 849, 863, 866, 868], "blame": 820, "eg": 820, "week": [820, 861], "grep": 820, "commit_id": 820, "handi": 820, "histori": 820, "approv": 820, "someon": [820, 855], "hash": [820, 852], "cancel": 820, "speedup": 820, "unavail": 820, "tickbox": 820, "intent": [820, 840], "discourag": 820, "adopt": [820, 824, 836, 847, 860, 869, 870, 875], "philosophi": 820, "infrequ": 820, "earli": [820, 870], "wast": [820, 828], "spot": [820, 831, 837], "mistak": 820, "mountain": 820, "advoc": [820, 855], "session": [820, 870], "beauti": 820, "care": [820, 830, 841, 847, 854, 860], "undo": 820, "stress": 820, "nifti": 820, "reassur": 820, "local_path_to_ivi": 820, "subfold": [820, 842, 844, 845], "dep": 820, "fresh": 820, "arsen": 820, "exec": 820, "ivy_contain": 820, "test_imag": 820, "test_random_crop": 820, "test_creation_funct": 820, "test_arang": 820, "cursor": 820, "alt": 820, "breakpoint": 820, "gutter": 820, "caret": 820, "f8": 820, "f9": 820, "Into": 820, "f7": 820, "smart": 820, "fragment": [820, 866, 868, 872], "wherein": [820, 837, 844], "failur": [820, 828, 842, 844], "embark": 821, "innov": [821, 860], "door": [821, 855], "elev": 821, "mission": [821, 860, 872], "opportun": 821, "testament": [821, 843], "stone": 821, "gift": 821, "acquir": 821, "peak": 821, "privileg": [821, 872], "bounti": 821, "cash": 821, "delight": 821, "weed": [822, 848], "tour": 822, "formatt": [822, 835], "conjunct": 823, "establish": [823, 872], "unconnect": 823, "strang": [823, 851], "test_linalg": [823, 842], "test_set_funct": 823, "test_signatur": 823, "excess": [823, 825, 831], "array_modul": 823, "vv": 823, "test_manipulation_funct": 823, "test_concat": [823, 844], "nb": 823, "liber": 823, "______________________": 823, "test_remaind": 823, "_______________________": 823, "test_operators_and_elementwise_funct": 823, "1264": 823, "1277": 823, "binary_param_assert_against_refimpl": 823, "ctx": 823, "620": 823, "binary_assert_against_refimpl": 823, "324": 823, "scalar_o": 823, "17304064": 823, "binaryparamcontext": 823, "axic42baaowcnp": 823, "rumwmabaear0": 823, "make_binary_param": 823, "numeric_dtyp": 823, "left_strat": 823, "left_sym": 823, "right_strat": 823, "right_sym": 823, "right_is_scalar": 823, "binary_param_assert_dtyp": 823, "binary_param_assert_shap": 823, "recreat": 823, "unexpectedli": 823, "discrep": [823, 842], "test_asarray_arrai": 823, "test_floor_divid": 823, "health": 823, "test_iop": 823, "__imod__": 823, "isequ": 823, "test_matrix_norm": 823, "alter": 823, "tweak": 823, "array_api_methods_to_test": 823, "test_special_cas": 823, "__ipow__": 823, "is_integ": 823, "easier": [823, 824, 825, 829, 842, 845, 857, 870, 872], "revisit": [823, 836], "_data": [824, 840, 841, 851], "organiz": [824, 827, 841], "underpin": [824, 827, 849], "programmat": [824, 827, 871], "backup": [824, 826, 827], "accident": [824, 827, 841], "absent": [824, 827], "auto": [824, 826, 827, 835, 852], "__mul__": [824, 827, 831, 836, 847, 851], "throw": [824, 829, 830, 833, 834, 851, 870], "imposs": 824, "inputs_to_native_arrai": [824, 837, 838], "outputs_to_ivy_arrai": [824, 829, 830, 836, 837, 838], "secondli": [824, 829], "__ivy_array_function__": 824, "__torch_function__": 824, "myarrai": 824, "handled_funct": 824, "notimpl": 824, "issubclass": 824, "enough": [824, 828, 829, 830, 844, 851, 852, 853], "ivy_funct": 824, "my_ab": 824, "my_arrai": 824, "implicit_backend": [825, 849], "__dict__": [825, 840, 849], "ivy_original_dict": [825, 849], "fallback": 825, "live": [825, 826, 829, 860, 861, 866, 868], "dlpack": 825, "set_dynamic_backend": 825, "unset_dynamic_backend": 825, "dynamic_backend_a": 825, "set_": 825, "unset_": 825, "backend_handl": 825, "requires_grad": 825, "memory_format": 825, "preserve_format": 825, "weren": 825, "vast": [825, 829, 870], "minor": [825, 847, 855], "fn_name_v_1p12_and_abov": 825, "fn_name_v_1p01_to_1p1": 825, "heavili": [826, 838, 855], "conf": 826, "cleanup": 826, "readm": [826, 855], "maxdepth": 826, "caption": 826, "related_work": 826, "deep_div": 826, "faq": 826, "glossari": 826, "autosummari": 826, "top_functional_toc": 826, "restructuredtext": 826, "discov": [826, 829], "ivy_toctree_caption_map": 826, "unfortun": [826, 835], "linker": 826, "foo": 826, "discussion_channel_map": 826, "1000043690254946374": 826, "1000043749088436315": 826, "forum": [826, 856], "seri": [826, 829, 841, 844, 870, 872], "discussion_paragraph": 826, "discord_link": 826, "channel_link": 826, "gg": 826, "zvqdvbznqj": 826, "799879767196958751": 826, "channel_id": 826, "autoskippablemethod": 826, "skippable_method_attribut": 826, "__qualname__": 826, "autodoc": 826, "__doc__": 826, "autoivydata": 826, "mutual": [827, 837], "containerwithelementwis": 827, "__repr__": 827, "__getattr__": [827, 863], "__setattr__": [827, 863], "__contains__": 827, "__getstate__": 827, "__setstate__": 827, "unpickl": 827, "num_dim": [827, 854], "restrict": [827, 828, 841, 849, 863, 867], "enforc": [827, 851], "lefthand": 827, "righthand": 827, "handle_nest": [827, 836, 837, 838, 849], "absenc": [827, 836, 870], "implicitli": [827, 839, 844, 849], "log_pr": [827, 837, 840], "intuit": [827, 844, 852, 853, 866], "chronolog": 827, "concurr": [827, 828, 837, 870], "despit": [827, 829, 830, 842, 849, 860, 867, 870], "__list__": 827, "whatsoev": [827, 837, 857, 876], "children": 827, "shallowest": 827, "deepest": 827, "rollback": 828, "incorpor": [828, 842, 852, 870], "techniqu": 828, "triplet": 828, "test_torch": [828, 842], "test_tensor": [828, 842], "test_torch_instance_arctan_": 828, "12500": 828, "daili": 828, "huge": [828, 852, 858, 860, 870, 876], "shoot": 828, "_reduce_loss": [828, 837, 840], "test_nn": 828, "test_loss": 828, "test_binary_cross_entropy_with_logit": 828, "test_cross_entropi": 828, "test_binary_cross_entropi": 828, "test_sparse_cross_entropi": 828, "test_loss_funct": 828, "test_torch_binary_cross_entropi": 828, "test_torch_cross_entropi": 828, "binary_cross_entropy_with_logit": 828, "torch_binary_cross_entropi": 828, "torch_cross_entropi": 828, "readthedoc": 828, "pedagog": 828, "f_1": 828, "t_1": 828, "t_3": 828, "t_7": 828, "t_": 828, "f_m": 828, "cyclic": 828, "intellig": [828, 844, 872], "tests_fil": 828, "file_nam": [828, 844, 845], "tests_lin": 828, "correspondingli": 828, "tests_to_run": 828, "determine_tests_lin": 828, "mongodb": 828, "databas": [828, 844], "mechan": [828, 855], "secret": 828, "db": 828, "ssh_deploy_kei": 828, "suffic": [828, 838, 844], "massiv": 828, "yml": 828, "felicit": 828, "clone_map": 828, "deploy_kei": 828, "user_email": 828, "user_nam": 828, "target_branch": 828, "github_serv": 828, "deploy_key_fil": 828, "ssh_known_hosts_fil": 828, "known_host": 828, "keyscan": 828, "git_ssh_command": 828, "userknownhostsfil": 828, "email": [828, 860], "methodologi": 828, "master1": 828, "restructur": 828, "_map": 828, "t_2": 828, "t_n": 828, "index_map": 828, "test_map": 828, "snowbal": 828, "recalibr": 828, "workflow_dispatch": 828, "cron": 828, "saturdai": 828, "night": 828, "pm": 828, "gut": 828, "lesser": [828, 833], "lol": 828, "hour": [828, 861], "cater": [828, 843], "master2": 828, "master32": 828, "synchron": 828, "runner2": 828, "corrupt": 828, "decoupl": [828, 853], "150": 828, "cycl": [828, 844], "yellow": 828, "queu": 828, "redirect": 828, "book": 828, "onrend": 828, "jo": 828, "ran": 828, "clickabl": 828, "all_dtyp": 829, "all_numeric_dtyp": 829, "all_int_dtyp": 829, "all_float_dtyp": 829, "replic": [829, 839, 840, 841], "thirdli": 829, "native_float32": 829, "importantli": [829, 851, 854], "arguabl": [829, 830, 841], "jaxarrai": [829, 830, 833, 836, 840, 845, 849], "_handle_0_dim_output": 829, "subtli": [829, 840], "promote_types_frontend_nam": 829, "promote_types_of_frontend_name_input": 829, "frontend_nam": 829, "upcast": 829, "nearli": [829, 836, 838, 870], "downcast": 829, "footprint": 829, "concret": 829, "aris": [829, 835, 855, 860], "utterli": 829, "meant": [829, 831, 840], "twice": 829, "disadvantag": 829, "relax": 829, "f64": 829, "unwant": 829, "primaci": 829, "resembl": 829, "compound": 829, "infer_dtyp": [829, 830, 836, 838], "settabl": [829, 830], "handle_out_argu": [829, 830, 836, 837, 838, 840, 849], "infer_devic": [829, 830, 836, 838], "deleg": [829, 877], "shape_to_tupl": 829, "with_supported_dtyp": 829, "unment": 829, "_cast_for_unary_op": [829, 837, 840], "target_typ": 829, "syntax": [829, 859, 860, 870], "unsupported_dtyp": 829, "supported_dtypes_and_devic": 829, "with_unsupported_device_and_dtyp": 829, "globals_getter_func": 829, "f2": 829, "lack": [829, 840, 870, 877], "mandat": [829, 840, 844, 845, 860], "confus": [829, 833, 840, 847, 857, 861], "inconsist": [829, 833, 839], "is_nan": 829, "supported_dtyp": 829, "anytim": 829, "84530": 829, "unwarr": 829, "risk": [829, 876], "needlessli": 829, "bloat": 829, "undergo": [829, 855], "unsupported_devic": 829, "supported_devic": 829, "downsid": 829, "coverag": [829, 844], "undesir": 829, "accomplish": 829, "upcast_data_typ": 829, "downcast_data_typ": 829, "crosscast_data_typ": 829, "cast_data_typ": 829, "downcast_data_dtyp": 829, "vice": 829, "versa": 829, "till": 829, "crosscast": 829, "exmp1": 829, "watch": [829, 841], "handle_numpy_arrays_in_specific_backend": [829, 836], "cate": 829, "understood": 829, "consumpt": [829, 874], "dual": 830, "categor": [830, 837, 841], "210": 830, "_handle_except": [830, 833], "1013": 830, "_handle_nest": [830, 833], "905": 830, "_handle_out_argu": [830, 833], "441": 830, "_inputs_to_native_arrai": [830, 833], "new_arg": [830, 833], "new_kwarg": [830, 833], "_outputs_to_ivy_arrai": [830, 833], "358": 830, "_handle_array_funct": [830, 833], "_handle_device_shift": 830, "handle_device_shift": [830, 838], "device_shifting_dev": 830, "__enter__": 830, "__exit__": 830, "soft_devic": 830, "eight": [831, 848], "op_nam": 831, "__r": 831, "unsurprisingli": [831, 859], "recap": [831, 853], "combinatori": 831, "okai": [831, 847, 849], "spec": [831, 832], "my_func": [831, 845], "some_flag": 831, "another_flag": 831, "jointli": 831, "5574077": 831, "1850398": 831, "5463025": 831, "8422884": 831, "91601413": 831, "9647598": 831, "3738229": 831, "1597457": 831, "0963247": 831, "9955841": 831, "3278579": 831, "asid": 831, "14254655": 831, "1578213": 831, "380515": 831, "trivial": [831, 840], "failing_fn_nam": 831, "onlin": [831, 832], "minutest": 831, "fault": [831, 870], "contrast": [832, 836, 841, 876], "preview": 832, "incorrectli": [832, 863], "needless": [832, 842], "renam": [832, 841], "judgment": 832, "operator_nam": 832, "succinct": 832, "docst": 832, "native_error": 833, "_combine_messag": 833, "truli": [833, 851], "wrong": [833, 835, 838, 841, 847], "198": 833, "392": 833, "_handle_array_like_without_promot": 833, "805": 833, "432": 833, "349": 833, "other_test": 833, "523": 833, "_handle_numpy_out": 833, "396": [833, 853], "_outputs_to_numpy_arrai": 833, "_inputs_to_ivy_arrays_np": 833, "ivy_arg": 833, "ivy_kwarg": 833, "453": 833, "_from_zero_dim_arrays_to_scalar": 833, "truth_value_test": 833, "visibl": 833, "unwieldi": 833, "squash": 833, "hide": [833, 863], "cleaner": [833, 852], "caught": [833, 835], "rethrow": 833, "_print_traceback_histori": 833, "error_stack": 833, "axiserror": 833, "polici": [833, 838, 844, 846], "moreov": 833, "submoodul": 834, "test_jax_transpos": 834, "manipulaiton": 834, "test_jax": [834, 842], "test_numpi": [834, 842], "test_manipul": [834, 842, 844], "preconditionnotmet": 834, "densetensor": 834, "holder_": 834, "phi": 834, "dense_tensor_impl": 834, "array_and_ax": 834, "aaegbaegaqaaaaaaaaaaaaab": 834, "black": 835, "flake8": 835, "linter": 835, "autoflak": 835, "docformatt": 835, "pydocstyl": 835, "yaml": 835, "patch1687898304": 835, "8072": 835, "3516aed563": 835, "reformat": 835, "akshai": 835, "jain": 835, "gui": 835, "cryptic": 835, "garden": 835, "utc": 835, "didn": 835, "human": 835, "intervent": 835, "typo": 835, "ui": 835, "handle_array_like_without_promot": [836, 838], "to_native_arrays_and_back": [836, 838, 849], "handle_array_funct": [836, 838], "inputs_to_native_shap": [836, 838], "rational": [836, 840, 847], "__div__": [836, 847], "484": 836, "brittl": 836, "freeli": 836, "technic": [836, 840, 855, 870, 872], "original_typ": 836, "cumbersom": 836, "hinder": [836, 859], "venn": 837, "diagram": [837, 876], "light": [837, 845, 855, 857, 871, 876], "maximis": 837, "encompass": 837, "partial_mixed_handl": [837, 838, 847], "handle_partial_mixed_funct": [837, 838, 847], "fn_decor": 837, "mixed_backend_wrapp": [837, 840], "to_add": 837, "to_skip": 837, "inputs_to_ivy_arrai": [837, 838], "modif": [837, 870], "briefli": [837, 844, 852], "get_all_arrays_on_dev": 837, "outputs_to_ivy_shap": 838, "outputs_to_native_arrai": 838, "handle_view_index": [838, 840], "handle_view": [838, 840], "handle_rag": 838, "handle_backend_invalid": 838, "handle_nan": 838, "to_native_shapes_and_back": 838, "modern": [839, 859, 860, 875], "inter_func": 839, "custom_grad_fn": 839, "args1": 839, "speak": 840, "val_n": 840, "base_idx": 840, "_manipulation_stack": 840, "base_flat": 840, "_view_ref": 840, "_update_view": 840, "contigu": 840, "c_contigu": 840, "ascontiguousarrai": 840, "copyto": 840, "_is_vari": 840, "tensor_scatter_nd_upd": 840, "is_vari": 840, "_update_torch_view": 840, "predominantli": [840, 845], "support_native_out": [840, 849], "_scalar_output_to_0d_arrai": 840, "_wrap_fn": 840, "dim0": 840, "dim1": 840, "res_floor": 840, "extent": [840, 841], "to_out_fn": 840, "add_wrapp": 840, "paradigm": [840, 855, 870], "expans": 840, "weak": 840, "_torch_bas": 840, "_torch_view_ref": 840, "_torch_manipul": 840, "weakli": 840, "adequ": 840, "tf_frontend": 841, "lax": [841, 842, 847, 854, 855], "torch_frontend": [841, 842], "numpy_frontend": 841, "jax_frontend": 841, "to_ivy_arrays_and_back": [841, 842], "fidel": 841, "algebra": [841, 868, 869, 870, 873, 877], "dynamic": 841, "mimic": 841, "arithmetic_oper": 841, "handle_numpy_out": 841, "handle_numpy_dtyp": 841, "handle_numpy_cast": 841, "from_zero_dim_arrays_to_scalar": 841, "_add": 841, "same_kind": 841, "subok": [841, 842, 847], "promote_types_of_numpy_input": 841, "underscor": 841, "unhandl": 841, "trigonometric_funct": 841, "_tan": 841, "check_tensorflow_cast": 841, "raw_op": [841, 842], "map_raw_ops_alia": 841, "output_typ": 841, "kwargs_to_upd": 841, "pointwise_op": 841, "sensibl": 841, "ahead": [841, 845, 870], "reduce_logsumexp": 841, "logsumexp": 841, "trick": 841, "max_input_tensor": 841, "preferred_element_typ": 841, "languag": [841, 849, 857, 859, 861, 868, 871, 873, 874, 875, 876], "finer": 841, "logicaland": 841, "np_frontend": 841, "_ivy_arrai": 841, "radd": 841, "_init_data": 841, "_process_str_data": 841, "_dtype": [841, 842, 851], "_shape": [841, 851], "govern": 841, "promote_types_of_": 841, "_input": 841, "promote_types_of_torch_input": [841, 842], "handle_numpy_casting_speci": 841, "new_fn": 841, "equiv": 841, "unsaf": 841, "array_type_test": 841, "_isfinit": 841, "organis": 841, "youtub": 841, "knowledg": 842, "np_frontend_help": 842, "open_task": 842, "test_lax": 842, "test_oper": 842, "test_jax_tan": 842, "test_mathematical_funct": 842, "test_trigonometric_funct": 842, "dtypes_values_cast": 842, "dtypes_values_casting_dtyp": 842, "arr_func": 842, "get_num_positional_args_ufunc": 842, "test_numpy_tan": 842, "handle_where_and_array_bool": 842, "test_tensorflow": 842, "test_math": 842, "test_tensorflow_tan": 842, "test_pointwise_op": 842, "test_torch_tan": 842, "_fill_valu": 842, "test_glob": 842, "test_jax_ful": 842, "test_from_shape_or_valu": 842, "_input_fill_and_dtyp": 842, "dtype_and_input": 842, "dtype_to_cast": 842, "input_fill_dtyp": 842, "test_numpy_ful": 842, "test_raw_op": 842, "test_tensorflow_fil": 842, "test_creation_op": 842, "with_arrai": 842, "test_torch_ful": 842, "add_nois": 842, "all_clos": 842, "_get_dtype_and_matrix": 842, "test_torch_qr": 842, "frontend_q": 842, "frontend_r": 842, "walkthrough": 842, "comparison_op": 842, "test_comparison_op": 842, "test_torch_great": 842, "all_alias": 842, "test_ndarrai": 842, "test_numpy_instance_add__": 842, "test_tensorflow_instance_add": 842, "1e04": 842, "allow_infin": 842, "test_torch_instance_add": 842, "_arrays_idx_n_dtyp": 842, "surprisingli": 842, "closest_relevant_group": 842, "strive": [842, 844, 847, 855, 872], "craft": [843, 844], "tailor": 843, "clariti": [843, 844, 847, 870], "weav": 843, "thrill": 843, "brim": 843, "stand": [843, 844], "landscap": 843, "forese": 843, "refin": 843, "inquiri": 843, "fixtur": 844, "hit": [844, 849, 863], "eleg": [844, 870], "unexplor": 844, "artifact": 844, "bespok": 844, "_array_or_typ": 844, "rigor": [844, 859], "test_default_int_dtyp": 844, "print_hypothesis_exampl": 844, "custom_strategi": 844, "randomis": 844, "simplist": 844, "intricaci": 844, "glanc": 844, "one_of": 844, "datum": 844, "pipe": 844, "array_or_scal": 844, "len_of_arrai": 844, "test_add": 844, "test_gpu_is_avail": 844, "pretest": 844, "snippet": [844, 864], "frontend_test": 844, "frontend_method": 844, "criterion": 844, "valid_ax": 844, "hoc": 844, "11228": 844, "268": 844, "wherev": 844, "9622": 844, "28136": 844, "6375": 844, "12720": 844, "21354": 844, "900e": 844, "57384": 844, "25687": 844, "248": 844, "test_devic": 844, "array_shap": 844, "test_lay": 844, "some_sequ": 844, "arrays_valu": 844, "36418": 844, "213": 844, "21716926": 844, "none_or_list_of_float": 844, "get_prob": 844, "103515625e": 844, "099609375": 844, "probabilist": 844, "number_positional_argu": 844, "unreproduc": 844, "x_and_linear": 844, "is_torch_backend": 844, "x_shape": [844, 849], "weight_shap": 844, "bias_shap": 844, "ivy_np": 844, "valid_float_dtyp": 844, "test_demo": 844, "failing_test": 844, "traceback": 844, "shrink": 844, "prescrib": 844, "scratch": 844, "test_gelu": 844, "test_fil": 844, "notabl": [844, 870], "max_exampl": 844, "deadlin": 844, "weird": 844, "systemat": 844, "safeguard": 844, "inabl": 844, "test_result_typ": 844, "9090909090909091": 844, "judgement": 845, "some_namespac": 845, "some_backend": 845, "another_backend": 845, "refactor": 845, "ongo": 845, "check_fill_value_and_dtype_are_compat": 845, "_to_devic": 845, "shouldn": [845, 863], "pin": 845, "unpinn": 845, "culmin": 845, "unsett": 846, "array_significant_figur": 846, "array_decimal_valu": 846, "warning_level": 846, "nan_polici": 846, "stablest": 846, "constantli": [847, 859], "answer": [847, 851, 855], "contradict": 847, "entail": 847, "sacrif": 847, "jacfwd": 847, "jacrev": 847, "banner": 847, "expens": 847, "incredibli": [847, 852, 855, 873], "price": 847, "pai": 847, "intrus": 847, "x_beta": 847, "equip": 847, "simplif": 847, "allevi": 847, "ineffici": [847, 855, 870], "fuse": 847, "hybrid": 847, "workaround": 847, "slip": 847, "radar": 847, "stumbl": 847, "gone": [848, 860], "fulfil": 848, "syntact": [849, 854], "power_seq": 849, "_determine_backend_from_arg": 849, "importlib": 849, "_backend_dict": 849, "x_flat": 849, "wi": 849, "wi_x": 849, "wii_x": 849, "wif_x": 849, "wig_x": 849, "wio_x": 849, "wh": 849, "ht": 849, "ct": 849, "hts_list": 849, "wii_xt": 849, "wif_xt": 849, "wig_xt": 849, "wio_xt": 849, "htm1": 849, "ctm1": 849, "wh_htm1": 849, "whi_htm1": 849, "whf_htm1": 849, "whg_htm1": 849, "who_htm1": 849, "ft": 849, "ot": 849, "reliabl": 849, "sacrific": 849, "hear": 849, "virtu": [849, 867], "pure_ivi": 849, "pure_torch": 849, "unclean": 849, "wx": 849, "temp": 849, "ivy_func": 849, "emphas": 849, "example_input": 849, "static_argnum": [849, 863], "static_argnam": [849, 863], "primit": [850, 855, 868, 870], "hierarch": [850, 852, 853, 870], "arraywithactiv": 851, "arraywithcr": 851, "arraywithdatatyp": 851, "arraywithdevic": 851, "arraywithgener": 851, "arraywithgradi": 851, "arraywithimag": 851, "arraywithlay": 851, "arraywithlinearalgebra": 851, "arraywithloss": 851, "arraywithmanipul": 851, "arraywithnorm": 851, "arraywithrandom": 851, "arraywithsearch": 851, "arraywithset": 851, "arraywithsort": 851, "arraywithstatist": 851, "arraywithutil": 851, "_init": 851, "_size": 851, "_devic": 851, "_dev_str": 851, "_pre_repr": 851, "_post_repr": 851, "framework_str": 851, "pypep8nam": 851, "immut": 851, "claim": 851, "_native_wrapp": 851, "genuin": 851, "some_method": 851, "rewritten": 851, "littl": [851, 859, 872], "compartment": 851, "newshap": 851, "new_shap": 851, "tidi": 851, "crystal": 851, "ton": 852, "ado": [852, 853], "soup": 852, "walk": [852, 853], "cnt": 852, "3333335": 852, "autocomplet": 852, "midwai": 852, "agent": 852, "total_spe": 852, "total_height": 852, "total_width": 852, "ag": 852, "tot": 852, "total_": 852, "total_h": 852, "cnt0": 852, "cnt1": 852, "diff_0": 852, "diff_1": 852, "config0": 852, "config1": 852, "l0": 852, "decoder__l0": 852, "decoder__l1": 852, "encoder__l0": 852, "encoder__l1": 852, "l0__b": 852, "l0__w": 852, "l1__b": 852, "l1__w": 852, "printabl": 852, "foresight": 852, "untidili": 852, "update_ag": 852, "normalize_img": 852, "img_max": 852, "reduce_max": 852, "img_min": 852, "reduce_min": 852, "img_rang": 852, "agent_posit": 852, "agent_veloc": 852, "agent_cam_front_rgb": 852, "agent_cam_front_depth": 852, "agent_cam_rear_rgb": 852, "agent_cam_rear_depth": 852, "agent_cam_lidar": 852, "camera": 852, "front_rgb": 852, "front_depth": 852, "rear_rgb": 852, "rear_depth": 852, "lidar": 852, "rgb": 852, "rear": 852, "veloc": 852, "cam": 852, "cam_max": 852, "cam_min": 852, "cam_rang": 852, "allud": [852, 860], "perman": 852, "_cnt": 852, "img_": 852, "_dataset_s": 852, "_batch_siz": 852, "_count": [852, 853], "__next__": 852, "img_fnam": 852, "loaded_img": 852, "batch_slic": 852, "0145": 852, "addbackward0": 852, "_create_vari": 853, "_input_channel": 853, "_output_channel": 853, "_w_shape": 853, "_b_shape": 853, "_with_bia": 853, "764": 853, "872": 853, "211": 853, "439": 853, "nightmar": 853, "overcom": 853, "key0": 853, "linear3": 853, "preced": [853, 860], "_w_init": 853, "_b_init": 853, "misnom": 853, "saw": 853, "_beta1": 853, "_beta2": 853, "_epsilon": 853, "_mw": 853, "_vw": 853, "_first_pass": 853, "_should_trac": 853, "new_v": 853, "_lr": 853, "_inplac": 853, "_stop_gradi": 853, "sparse_funct": 854, "_linear": 854, "jax_graph": 854, "to_backend": 854, "thinli": 854, "to_haiku_modul": 854, "loss_fn_t": 854, "without_apply_rng": 854, "update_rul": 854, "tree_multimap": 854, "trax": [854, 861], "objax": [854, 861], "matur": [855, 860, 870], "doubt": 855, "grate": [855, 878], "probe": 855, "lock": 855, "dex": 855, "tricki": [855, 857], "tight": 855, "dispatch": [855, 870, 873], "ast": 855, "autodiff": 855, "shine": 855, "merci": 855, "compet": [855, 870], "parallelis": 855, "spmd": 855, "mixtur": 855, "expert": 855, "sophist": 855, "depart": 855, "hundr": 855, "broadli": [855, 876], "supplementari": 855, "reusabl": [855, 868, 870], "fanci": [855, 870], "fusion": [855, 874], "lose": 855, "pmap": 855, "eventu": 855, "supplement": 855, "backdoor": 855, "callback": 855, "somewhat": [855, 870], "outsourc": 855, "ivy_root": 856, "pem": 856, "api_kei": 856, "asap": 856, "nail": 857, "scientist": 857, "correl": 857, "collabor": [858, 859, 860], "consortium": [858, 860], "grown": 859, "rapidli": 859, "shareabl": 859, "outdat": 859, "newest": 859, "prototyp": [859, 870], "obsolet": [859, 861], "invent": 859, "simultan": [859, 861], "runner": 859, "principl": [859, 868, 870, 873], "2006": 859, "cloth": 859, "forgiven": 860, "eyebrow": 860, "somehow": 860, "funni": 860, "comic": 860, "charger": 860, "instant": 860, "contrari": 860, "bumpi": 860, "road": 860, "technologi": [860, 868, 872], "motherboard": 860, "raid": 860, "bluetooth": 860, "wireless": 860, "btx": 860, "sata": 860, "tcp": 860, "ip": 860, "smtp": 860, "send": [860, 875], "gmail": 860, "outlook": 860, "growth": [860, 873], "necess": 860, "2015": [860, 870], "aros": 860, "ourselv": [860, 876], "quansight": [860, 876], "compani": [860, 866], "apach": [860, 872, 876], "onnx": [860, 868, 876], "cupi": [860, 870, 877], "modin": 860, "spyder": 860, "octoml": [860, 876], "sponsor": 860, "lg": 860, "electron": 860, "shaw": 860, "pursuit": 860, "complianc": 860, "convinc": 860, "celebr": 860, "streamlin": [861, 873], "awesom": 861, "love": 861, "slew": 861, "inevit": [861, 871], "erron": 861, "poor": 861, "spin": 861, "sake": 861, "wouldn": 861, "frantic": 861, "lucid": 861, "honk": 861, "hasn": 861, "spend": [861, 870], "sonnet": 861, "trainer": [861, 877], "quo": 861, "dopamin": 861, "ignit": 861, "catalyst": 861, "lightn": 861, "fastai": 861, "publicli": [863, 864, 865], "logger": 863, "arg_stateful_idx": 863, "kwarg_stateful_idx": 863, "include_gener": 863, "array_cach": 863, "return_backend_traced_fn": 863, "lazygraph": [863, 864, 865], "sum_j": 863, "traced_fn": 863, "impos": 863, "comp_func": 863, "bake": 863, "cont": 863, "new_attribut": 863, "wip": 863, "resnet50": 863, "breed": 863, "resnetforimageclassif": [863, 864], "traced_graph": 863, "predicted_label": 863, "debug_mod": 864, "rough": 864, "transformed_with_st": 864, "bigger": 864, "hf": 864, "tf_model": 864, "transpile_kwarg": 865, "transpiled_func": 865, "unified_func": 865, "rwork": 866, "vendor": [866, 872], "complimentari": [866, 876], "acycl": [866, 871], "fillna": 867, "pct_chang": 867, "_____________": 867, "__________________________________________________________________": 867, "scaffold": [868, 876], "heart": 868, "toolchain": [868, 873], "assembli": [868, 875, 876], "idl": 868, "middl": 868, "emit": 868, "gnu": [868, 873], "broader": 868, "heterogen": 868, "aid": 868, "coprocessor": 868, "programm": [868, 875], "gate": 868, "onednn": 868, "sit": [868, 871, 876], "tandem": 868, "possess": 868, "khrono": [869, 875], "appl": 869, "coremltool": 869, "albeit": 869, "promin": 870, "abbrevi": 870, "laboratori": 870, "proprietari": [870, 874, 875], "mathwork": 870, "commerci": 870, "1984": 870, "toolbox": 870, "mupad": 870, "simulink": 870, "graphic": [870, 874, 875], "simul": 870, "million": [870, 873], "worldwid": 870, "scienc": [870, 872], "econom": 870, "2001": 870, "od": 870, "solver": 870, "cython": 870, "friendli": 870, "2002": 870, "lua": 870, "luajit": 870, "idiap": 870, "epfl": 870, "2005": 870, "numarrai": 870, "cpython": 870, "partli": 870, "2007": 870, "forest": 870, "boost": 870, "dbscan": 870, "inbuilt": 870, "esqu": 870, "aesara": 870, "2012": 870, "polymorph": 870, "mpi": 870, "openmp": 870, "glue": 870, "jaot": 870, "nasa": 870, "cern": 870, "climat": 870, "allianc": 870, "influenti": 870, "2014": 870, "scala": 870, "ship": 870, "forgiv": 870, "decemb": 870, "announc": 870, "mainten": 870, "meaning": 870, "2016": 870, "imper": 870, "amazon": 870, "traction": 870, "cognit": [870, 877], "grade": 870, "dnn": 870, "backpropag": 870, "succumb": 870, "came": 870, "monitor": 870, "hobbyist": 870, "tremend": 870, "gear": 870, "batteri": 870, "zygot": 870, "jl": 870, "workload": 870, "daggerflux": 870, "frontier": 870, "hessian": 870, "2018": 870, "lightweight": [870, 877], "shortcom": 870, "barrier": 870, "inexperienc": 870, "underdevelop": 870, "fanat": 870, "ounc": 870, "infanc": 870, "nich": 870, "mobil": 870, "lite": 870, "enterpris": 870, "reinvent": [870, 872], "inertia": 870, "creator": [870, 872], "paszk": 870, "hi": 870, "bulk": 870, "haskel": 870, "dataflow": 871, "trace_modul": 871, "scriptfunct": 871, "scriptmodul": 871, "fake": 871, "proxi": 871, "graphmodul": 871, "travi": 872, "oliph": 872, "leader": 872, "cornerston": 872, "numba": 872, "numfocu": 872, "pydata": 872, "confer": 872, "consult": 872, "devop": 872, "mlop": 872, "dashboard": 872, "startup": 872, "mlir": [872, 873, 876], "Their": 872, "held": 872, "presum": 872, "llvm": [872, 875], "founder": 872, "tvm": [872, 876], "sustain": 872, "empow": 872, "har": 872, "burden": 872, "precompil": 873, "executor": 873, "julia": [873, 876], "fsf": 873, "gpl": 873, "biggest": [873, 876], "throughput": 874, "autotun": 874, "gpgpu": 874, "classic": 875, "sycl": 875, "dpc": 875, "maco": 875, "oneapi": 875, "ia": 875, "aka": 875, "xeon": 875, "gen9": 875, "xe": 875, "arria": 875, "gx": 875, "fpga": 875, "lofti": 876, "ambit": 876, "realm": 876, "bedrock": 876, "flux": 876, "bite": 876, "chew": 876, "eagerpi": 876, "tensorli": 876, "thinc": 876, "neuropod": 876, "fx": 876, "retrain": 876, "closer": 876, "greatli": 876, "modular": 876, "anywher": 876, "theano": 877, "plaidml": 877, "partial_svd": 877, "subsystem": 877, "bhushan": 878, "srivastava": 878, "he11owther": 878, "og": 878, "edward": 878, "amimo": 878, "moblei": 878, "trent": 878, "ogban": 878, "ugot": 878, "fayad": 878, "alman": 878, "sarvesh": 878, "kesharwani": 878, "krishna": 878, "boppana": 878, "saptarshi": 878, "bandopadhyai": 878, "tugai": 878, "g\u00fcl": 878, "sondertg": 878, "vismai": 878, "suramwar": 878, "leacornelio": 878, "samund": 878, "singh": 878, "samthakur587": 878, "suraj": 878, "zheng": 878, "jai": 878, "choi": 878, "zjay07": 878, "ebenez": 878, "gadri": 878, "akrong": 878, "aibenstunn": 878, "nitesh": 878, "niteshk84": 878, "abdullah": 878, "sabri": 878, "abdullahsabri": 878, "muhammad": 878, "ishaqu": 878, "muhammadnizamani": 878, "moham": 878, "ibrahim": 878, "medo072": 878, "sheroz": 878, "khan": 878, "ksheroz": 878, "suyash": 878, "gupta": 878, "sgalpha01": 878, "alvin": 878, "vinod": 878, "david": 878, "adlai": 878, "nettei": 878, "mwape": 878, "bunda": 878, "teckno": 878, "ramya": 878, "manasa": 878, "amancherla": 878, "ramyamanasa": 878, "rohit": 878, "kumar": 878, "salla": 878, "rohitsalla": 878, "sanjai": 878, "suthar": 878, "sanjay8602": 878, "muzakkir": 878, "hussain": 878, "muzakkirhussain011": 878, "chaitanya": 878, "lakhchaura": 878, "zenithflux": 878, "kacper": 878, "ko\u017cdo\u0144": 878, "kozdon": 878, "zera": 878, "marveen": 878, "lyngkhoi": 878, "fleventi": 878, "jackson": 878, "mcclintock": 878, "jacksondm33": 878, "ayush": 878, "lokar": 878, "ayush111111": 878, "garima": 878, "saroj": 878, "androgari": 878, "lee": 878, "bissessar": 878, "leebissessar5": 878, "mostafa": 878, "gamal": 878, "mr": 878, "array22": 878, "rahul": 878, "prem": 878, "rp097": 878, "vaishnavi": 878, "mudaliar": 878, "vaishnavimudaliar": 878, "waqar": 878, "ahm": 878, "waqaarahm": 878, "aryan": 878, "pandei": 878, "aryan8912": 878, "dhruv": 878, "sharma": 878, "druvdub": 878, "mehmet": 878, "bilgehan": 878, "bezcioglu": 878, "bilgehanmehmet": 878, "omkar": 878, "khade": 878, "omickeye": 878, "puriti": 878, "nyagweth": 878, "stefan": 878, "sanchez": 878, "stefansan26": 878}, "objects": {"ivy.Array": [[220, 0, 1, "", "abs"], [221, 0, 1, "", "acos"], [222, 0, 1, "", "acosh"], [615, 0, 1, "", "adam_step"], [616, 0, 1, "", "adam_update"], [389, 0, 1, "", "adaptive_avg_pool1d"], [390, 0, 1, "", "adaptive_avg_pool2d"], [391, 0, 1, "", "adaptive_max_pool2d"], [392, 0, 1, "", "adaptive_max_pool3d"], [223, 0, 1, "", "add"], [424, 0, 1, "", "adjoint"], [767, 0, 1, "", "all"], [534, 0, 1, "", "all_equal"], [334, 0, 1, "", "allclose"], [335, 0, 1, "", "amax"], [336, 0, 1, "", "amin"], [224, 0, 1, "", "angle"], [768, 0, 1, "", "any"], [744, 0, 1, "", "argmax"], [745, 0, 1, "", "argmin"], [753, 0, 1, "", "argsort"], [746, 0, 1, "", "argwhere"], [537, 0, 1, "", "array_equal"], [460, 0, 1, "", "as_strided"], [128, 0, 1, "", "asarray"], [225, 0, 1, "", "asin"], [226, 0, 1, "", "asinh"], [538, 0, 1, "", "assert_supports_inplace"], [461, 0, 1, "", "associative_scan"], [152, 0, 1, "", "astype"], [227, 0, 1, "", "atan"], [228, 0, 1, "", "atan2"], [229, 0, 1, "", "atanh"], [462, 0, 1, "", "atleast_1d"], [463, 0, 1, "", "atleast_2d"], [464, 0, 1, "", "atleast_3d"], [394, 0, 1, "", "avg_pool1d"], [395, 0, 1, "", "avg_pool2d"], [396, 0, 1, "", "avg_pool3d"], [501, 0, 1, "", "batch_norm"], [425, 0, 1, "", "batched_outer"], [508, 0, 1, "", "bernoulli"], [509, 0, 1, "", "beta"], [337, 0, 1, "", "binarizer"], [696, 0, 1, "", "binary_cross_entropy"], [520, 0, 1, "", "bincount"], [230, 0, 1, "", "bitwise_and"], [231, 0, 1, "", "bitwise_invert"], [232, 0, 1, "", "bitwise_left_shift"], [233, 0, 1, "", "bitwise_or"], [234, 0, 1, "", "bitwise_right_shift"], [235, 0, 1, "", "bitwise_xor"], [312, 0, 1, "", "blackman_window"], [153, 0, 1, "", "broadcast_arrays"], [154, 0, 1, "", "broadcast_to"], [155, 0, 1, "", "can_cast"], [236, 0, 1, "", "ceil"], [295, 0, 1, "", "celu"], [667, 0, 1, "", "cholesky"], [699, 0, 1, "", "clip"], [540, 0, 1, "", "clip_matrix_norm"], [541, 0, 1, "", "clip_vector_norm"], [468, 0, 1, "", "column_stack"], [700, 0, 1, "", "concat"], [469, 0, 1, "", "concat_from_sequence"], [426, 0, 1, "", "cond"], [338, 0, 1, "", "conj"], [701, 0, 1, "", "constant_pad"], [650, 0, 1, "", "conv1d"], [651, 0, 1, "", "conv1d_transpose"], [652, 0, 1, "", "conv2d"], [653, 0, 1, "", "conv2d_transpose"], [654, 0, 1, "", "conv3d"], [655, 0, 1, "", "conv3d_transpose"], [129, 0, 1, "", "copy_array"], [339, 0, 1, "", "copysign"], [521, 0, 1, "", "corrcoef"], [237, 0, 1, "", "cos"], [238, 0, 1, "", "cosh"], [340, 0, 1, "", "count_nonzero"], [522, 0, 1, "", "cov"], [668, 0, 1, "", "cross"], [697, 0, 1, "", "cross_entropy"], [523, 0, 1, "", "cummax"], [524, 0, 1, "", "cummin"], [757, 0, 1, "", "cumprod"], [758, 0, 1, "", "cumsum"], [397, 0, 1, "", "dct"], [544, 0, 1, "", "default"], [239, 0, 1, "", "deg2rad"], [658, 0, 1, "", "depthwise_conv2d"], [669, 0, 1, "", "det"], [197, 0, 1, "", "dev"], [398, 0, 1, "", "dft"], [670, 0, 1, "", "diag"], [427, 0, 1, "", "diagflat"], [671, 0, 1, "", "diagonal"], [341, 0, 1, "", "diff"], [342, 0, 1, "", "digamma"], [510, 0, 1, "", "dirichlet"], [240, 0, 1, "", "divide"], [428, 0, 1, "", "dot"], [659, 0, 1, "", "dropout"], [399, 0, 1, "", "dropout1d"], [400, 0, 1, "", "dropout2d"], [401, 0, 1, "", "dropout3d"], [470, 0, 1, "", "dsplit"], [471, 0, 1, "", "dstack"], [163, 0, 1, "", "dtype"], [429, 0, 1, "", "eig"], [673, 0, 1, "", "eigh"], [430, 0, 1, "", "eigh_tridiagonal"], [431, 0, 1, "", "eigvals"], [674, 0, 1, "", "eigvalsh"], [545, 0, 1, "", "einops_rearrange"], [546, 0, 1, "", "einops_reduce"], [547, 0, 1, "", "einops_repeat"], [759, 0, 1, "", "einsum"], [296, 0, 1, "", "elu"], [402, 0, 1, "", "embedding"], [131, 0, 1, "", "empty_like"], [241, 0, 1, "", "equal"], [242, 0, 1, "", "erf"], [343, 0, 1, "", "erfc"], [344, 0, 1, "", "erfinv"], [548, 0, 1, "", "exists"], [243, 0, 1, "", "exp"], [244, 0, 1, "", "exp2"], [472, 0, 1, "", "expand"], [702, 0, 1, "", "expand_dims"], [245, 0, 1, "", "expm1"], [313, 0, 1, "", "eye_like"], [403, 0, 1, "", "fft"], [404, 0, 1, "", "fft2"], [473, 0, 1, "", "fill_diagonal"], [165, 0, 1, "", "finfo"], [345, 0, 1, "", "fix"], [474, 0, 1, "", "flatten"], [703, 0, 1, "", "flip"], [475, 0, 1, "", "fliplr"], [476, 0, 1, "", "flipud"], [346, 0, 1, "", "float_power"], [246, 0, 1, "", "floor"], [247, 0, 1, "", "floor_divide"], [347, 0, 1, "", "fmax"], [248, 0, 1, "", "fmin"], [249, 0, 1, "", "fmod"], [477, 0, 1, "", "fold"], [549, 0, 1, "", "fourier_encode"], [348, 0, 1, "", "frexp"], [133, 0, 1, "", "from_dlpack"], [136, 0, 1, "", "full_like"], [511, 0, 1, "", "gamma"], [552, 0, 1, "", "gather"], [553, 0, 1, "", "gather_nd"], [250, 0, 1, "", "gcd"], [110, 0, 1, "", "gelu"], [432, 0, 1, "", "general_inner_product"], [556, 0, 1, "", "get_num_dims"], [349, 0, 1, "", "gradient"], [619, 0, 1, "", "gradient_descent_update"], [251, 0, 1, "", "greater"], [252, 0, 1, "", "greater_equal"], [502, 0, 1, "", "group_norm"], [297, 0, 1, "", "hardshrink"], [298, 0, 1, "", "hardsilu"], [111, 0, 1, "", "hardswish"], [299, 0, 1, "", "hardtanh"], [558, 0, 1, "", "has_nans"], [478, 0, 1, "", "heaviside"], [433, 0, 1, "", "higher_order_moment"], [452, 0, 1, "", "hinge_embedding_loss"], [525, 0, 1, "", "histogram"], [479, 0, 1, "", "hsplit"], [480, 0, 1, "", "hstack"], [453, 0, 1, "", "huber_loss"], [350, 0, 1, "", "hypot"], [481, 0, 1, "", "i0"], [407, 0, 1, "", "idct"], [408, 0, 1, "", "ifft"], [409, 0, 1, "", "ifftn"], [526, 0, 1, "", "igamma"], [168, 0, 1, "", "iinfo"], [253, 0, 1, "", "imag"], [434, 0, 1, "", "initialize_tucker"], [675, 0, 1, "", "inner"], [560, 0, 1, "", "inplace_decrement"], [561, 0, 1, "", "inplace_increment"], [562, 0, 1, "", "inplace_update"], [503, 0, 1, "", "instance_norm"], [411, 0, 1, "", "interpolate"], [676, 0, 1, "", "inv"], [564, 0, 1, "", "is_array"], [171, 0, 1, "", "is_bool_dtype"], [173, 0, 1, "", "is_float_dtype"], [175, 0, 1, "", "is_int_dtype"], [565, 0, 1, "", "is_ivy_array"], [566, 0, 1, "", "is_ivy_container"], [568, 0, 1, "", "is_native_array"], [177, 0, 1, "", "is_uint_dtype"], [351, 0, 1, "", "isclose"], [254, 0, 1, "", "isfinite"], [569, 0, 1, "", "isin"], [255, 0, 1, "", "isinf"], [256, 0, 1, "", "isnan"], [257, 0, 1, "", "isreal"], [571, 0, 1, "", "itemsize"], [454, 0, 1, "", "kl_div"], [436, 0, 1, "", "kron"], [455, 0, 1, "", "l1_loss"], [504, 0, 1, "", "l1_normalize"], [505, 0, 1, "", "l2_normalize"], [621, 0, 1, "", "lamb_update"], [622, 0, 1, "", "lars_update"], [737, 0, 1, "", "layer_norm"], [258, 0, 1, "", "lcm"], [352, 0, 1, "", "ldexp"], [112, 0, 1, "", "leaky_relu"], [353, 0, 1, "", "lerp"], [259, 0, 1, "", "less"], [260, 0, 1, "", "less_equal"], [515, 0, 1, "", "lexsort"], [354, 0, 1, "", "lgamma"], [660, 0, 1, "", "linear"], [137, 0, 1, "", "linspace"], [261, 0, 1, "", "log"], [262, 0, 1, "", "log10"], [263, 0, 1, "", "log1p"], [264, 0, 1, "", "log2"], [456, 0, 1, "", "log_poisson_loss"], [113, 0, 1, "", "log_softmax"], [265, 0, 1, "", "logaddexp"], [266, 0, 1, "", "logaddexp2"], [267, 0, 1, "", "logical_and"], [268, 0, 1, "", "logical_not"], [269, 0, 1, "", "logical_or"], [270, 0, 1, "", "logical_xor"], [300, 0, 1, "", "logit"], [301, 0, 1, "", "logsigmoid"], [138, 0, 1, "", "logspace"], [507, 0, 1, "", "lp_normalize"], [662, 0, 1, "", "lstm_update"], [440, 0, 1, "", "make_svd_non_negative"], [677, 0, 1, "", "matmul"], [482, 0, 1, "", "matricize"], [441, 0, 1, "", "matrix_exp"], [678, 0, 1, "", "matrix_norm"], [679, 0, 1, "", "matrix_power"], [680, 0, 1, "", "matrix_rank"], [681, 0, 1, "", "matrix_transpose"], [760, 0, 1, "", "max"], [412, 0, 1, "", "max_pool1d"], [413, 0, 1, "", "max_pool2d"], [414, 0, 1, "", "max_pool3d"], [415, 0, 1, "", "max_unpool1d"], [271, 0, 1, "", "maximum"], [761, 0, 1, "", "mean"], [527, 0, 1, "", "median"], [319, 0, 1, "", "mel_weight_matrix"], [139, 0, 1, "", "meshgrid"], [762, 0, 1, "", "min"], [272, 0, 1, "", "minimum"], [114, 0, 1, "", "mish"], [442, 0, 1, "", "mode_dot"], [355, 0, 1, "", "modf"], [483, 0, 1, "", "moveaxis"], [754, 0, 1, "", "msort"], [443, 0, 1, "", "multi_dot"], [663, 0, 1, "", "multi_head_attention"], [444, 0, 1, "", "multi_mode_dot"], [738, 0, 1, "", "multinomial"], [273, 0, 1, "", "multiply"], [274, 0, 1, "", "nan_to_num"], [528, 0, 1, "", "nanmean"], [529, 0, 1, "", "nanmedian"], [530, 0, 1, "", "nanmin"], [531, 0, 1, "", "nanprod"], [356, 0, 1, "", "nansum"], [140, 0, 1, "", "native_array"], [275, 0, 1, "", "negative"], [357, 0, 1, "", "nextafter"], [747, 0, 1, "", "nonzero"], [276, 0, 1, "", "not_equal"], [141, 0, 1, "", "one_hot"], [143, 0, 1, "", "ones_like"], [623, 0, 1, "", "optimizer_update"], [533, 0, 1, "", "optional_get_element"], [682, 0, 1, "", "outer"], [484, 0, 1, "", "pad"], [485, 0, 1, "", "partial_fold"], [486, 0, 1, "", "partial_tensor_to_vec"], [445, 0, 1, "", "partial_tucker"], [487, 0, 1, "", "partial_unfold"], [488, 0, 1, "", "partial_vec_to_tensor"], [704, 0, 1, "", "permute_dims"], [683, 0, 1, "", "pinv"], [512, 0, 1, "", "poisson"], [457, 0, 1, "", "poisson_nll_loss"], [277, 0, 1, "", "positive"], [278, 0, 1, "", "pow"], [302, 0, 1, "", "prelu"], [763, 0, 1, "", "prod"], [489, 0, 1, "", "put_along_axis"], [684, 0, 1, "", "qr"], [532, 0, 1, "", "quantile"], [279, 0, 1, "", "rad2deg"], [739, 0, 1, "", "randint"], [740, 0, 1, "", "random_normal"], [741, 0, 1, "", "random_uniform"], [280, 0, 1, "", "real"], [281, 0, 1, "", "reciprocal"], [363, 0, 1, "", "reduce"], [418, 0, 1, "", "reduce_window"], [115, 0, 1, "", "relu"], [303, 0, 1, "", "relu6"], [282, 0, 1, "", "remainder"], [705, 0, 1, "", "repeat"], [706, 0, 1, "", "reshape"], [180, 0, 1, "", "result_type"], [419, 0, 1, "", "rfft"], [420, 0, 1, "", "rfftn"], [707, 0, 1, "", "roll"], [490, 0, 1, "", "rot90"], [283, 0, 1, "", "round"], [666, 0, 1, "", "scaled_dot_product_attention"], [304, 0, 1, "", "scaled_tanh"], [576, 0, 1, "", "scatter_flat"], [577, 0, 1, "", "scatter_nd"], [755, 0, 1, "", "searchsorted"], [305, 0, 1, "", "selu"], [590, 0, 1, "", "shape"], [743, 0, 1, "", "shuffle"], [116, 0, 1, "", "sigmoid"], [284, 0, 1, "", "sign"], [358, 0, 1, "", "signbit"], [306, 0, 1, "", "silu"], [285, 0, 1, "", "sin"], [359, 0, 1, "", "sinc"], [286, 0, 1, "", "sinh"], [591, 0, 1, "", "size"], [422, 0, 1, "", "sliding_window"], [685, 0, 1, "", "slogdet"], [458, 0, 1, "", "smooth_l1_loss"], [459, 0, 1, "", "soft_margin_loss"], [491, 0, 1, "", "soft_thresholding"], [117, 0, 1, "", "softmax"], [118, 0, 1, "", "softplus"], [307, 0, 1, "", "softshrink"], [686, 0, 1, "", "solve"], [756, 0, 1, "", "sort"], [698, 0, 1, "", "sparse_cross_entropy"], [360, 0, 1, "", "sparsify_tensor"], [708, 0, 1, "", "split"], [287, 0, 1, "", "sqrt"], [288, 0, 1, "", "square"], [709, 0, 1, "", "squeeze"], [592, 0, 1, "", "stable_divide"], [593, 0, 1, "", "stable_pow"], [710, 0, 1, "", "stack"], [764, 0, 1, "", "std"], [423, 0, 1, "", "stft"], [624, 0, 1, "", "stop_gradient"], [594, 0, 1, "", "strides"], [289, 0, 1, "", "subtract"], [765, 0, 1, "", "sum"], [595, 0, 1, "", "supports_inplace_updates"], [687, 0, 1, "", "svd"], [447, 0, 1, "", "svd_flip"], [688, 0, 1, "", "svdvals"], [711, 0, 1, "", "swapaxes"], [492, 0, 1, "", "take"], [493, 0, 1, "", "take_along_axis"], [290, 0, 1, "", "tan"], [291, 0, 1, "", "tanh"], [309, 0, 1, "", "tanhshrink"], [448, 0, 1, "", "tensor_train"], [689, 0, 1, "", "tensordot"], [690, 0, 1, "", "tensorsolve"], [310, 0, 1, "", "threshold"], [311, 0, 1, "", "thresholded_relu"], [712, 0, 1, "", "tile"], [214, 0, 1, "", "to_device"], [597, 0, 1, "", "to_list"], [599, 0, 1, "", "to_numpy"], [600, 0, 1, "", "to_scalar"], [494, 0, 1, "", "top_k"], [691, 0, 1, "", "trace"], [292, 0, 1, "", "trapz"], [145, 0, 1, "", "tril"], [329, 0, 1, "", "trilu"], [495, 0, 1, "", "trim_zeros"], [146, 0, 1, "", "triu"], [293, 0, 1, "", "trunc"], [294, 0, 1, "", "trunc_divide"], [449, 0, 1, "", "truncated_svd"], [450, 0, 1, "", "tt_matrix_to_tensor"], [451, 0, 1, "", "tucker"], [496, 0, 1, "", "unflatten"], [497, 0, 1, "", "unfold"], [749, 0, 1, "", "unique_all"], [498, 0, 1, "", "unique_consecutive"], [750, 0, 1, "", "unique_counts"], [751, 0, 1, "", "unique_inverse"], [752, 0, 1, "", "unique_values"], [513, 0, 1, "", "unravel_index"], [330, 0, 1, "", "unsorted_segment_mean"], [331, 0, 1, "", "unsorted_segment_min"], [332, 0, 1, "", "unsorted_segment_sum"], [713, 0, 1, "", "unstack"], [613, 0, 1, "", "value_is_nan"], [692, 0, 1, "", "vander"], [766, 0, 1, "", "var"], [693, 0, 1, "", "vecdot"], [694, 0, 1, "", "vector_norm"], [695, 0, 1, "", "vector_to_skew_symmetric_matrix"], [499, 0, 1, "", "vsplit"], [500, 0, 1, "", "vstack"], [748, 0, 1, "", "where"], [361, 0, 1, "", "xlogy"], [714, 0, 1, "", "zero_pad"], [149, 0, 1, "", "zeros_like"], [362, 0, 1, "", "zeta"]], "ivy": [[634, 1, 1, "", "ArrayMode"], [630, 1, 1, "", "DefaultComplexDtype"], [631, 1, 1, "", "DefaultDevice"], [630, 1, 1, "", "DefaultDtype"], [630, 1, 1, "", "DefaultFloatDtype"], [630, 1, 1, "", "DefaultIntDtype"], [630, 1, 1, "", "DefaultUintDtype"], [386, 1, 1, "", "NativeSparseArray"], [629, 1, 1, "", "NestedSequence"], [634, 1, 1, "", "PreciseMode"], [631, 1, 1, "", "Profiler"], [386, 1, 1, "", "SparseArray"], [220, 2, 1, "", "abs"], [221, 2, 1, "", "acos"], [222, 2, 1, "", "acosh"], [635, 2, 1, "", "adam_step"], [635, 2, 1, "", "adam_update"], [389, 2, 1, "", "adaptive_avg_pool1d"], [390, 2, 1, "", "adaptive_avg_pool2d"], [391, 2, 1, "", "adaptive_max_pool2d"], [392, 2, 1, "", "adaptive_max_pool3d"], [223, 2, 1, "", "add"], [376, 2, 1, "", "adjoint"], [648, 2, 1, "", "all"], [634, 2, 1, "", "all_equal"], [641, 2, 1, "", "all_nested_indices"], [372, 2, 1, "", "allclose"], [372, 2, 1, "", "amax"], [372, 2, 1, "", "amin"], [224, 2, 1, "", "angle"], [648, 2, 1, "", "any"], [629, 2, 1, "", "arange"], [393, 2, 1, "", "area_interpolate"], [634, 2, 1, "", "arg_info"], [634, 2, 1, "", "arg_names"], [644, 2, 1, "", "argmax"], [644, 2, 1, "", "argmin"], [646, 2, 1, "", "argsort"], [644, 2, 1, "", "argwhere"], [629, 2, 1, "", "array"], [634, 2, 1, "", "array_equal"], [193, 2, 1, "", "as_ivy_dev"], [630, 2, 1, "", "as_ivy_dtype"], [194, 2, 1, "", "as_native_dev"], [630, 2, 1, "", "as_native_dtype"], [378, 2, 1, "", "as_strided"], [629, 2, 1, "", "asarray"], [225, 2, 1, "", "asin"], [226, 2, 1, "", "asinh"], [634, 2, 1, "", "assert_supports_inplace"], [378, 2, 1, "", "associative_scan"], [630, 2, 1, "", "astype"], [227, 2, 1, "", "atan"], [228, 2, 1, "", "atan2"], [229, 2, 1, "", "atanh"], [378, 2, 1, "", "atleast_1d"], [378, 2, 1, "", "atleast_2d"], [378, 2, 1, "", "atleast_3d"], [394, 2, 1, "", "avg_pool1d"], [395, 2, 1, "", "avg_pool2d"], [396, 2, 1, "", "avg_pool3d"], [381, 2, 1, "", "batch_norm"], [376, 2, 1, "", "batched_outer"], [382, 2, 1, "", "bernoulli"], [382, 2, 1, "", "beta"], [372, 2, 1, "", "binarizer"], [638, 2, 1, "", "binary_cross_entropy"], [387, 2, 1, "", "bincount"], [374, 2, 1, "", "bind_custom_gradient_function"], [230, 2, 1, "", "bitwise_and"], [231, 2, 1, "", "bitwise_invert"], [232, 2, 1, "", "bitwise_left_shift"], [233, 2, 1, "", "bitwise_or"], [234, 2, 1, "", "bitwise_right_shift"], [235, 2, 1, "", "bitwise_xor"], [312, 2, 1, "", "blackman_window"], [630, 2, 1, "", "broadcast_arrays"], [378, 2, 1, "", "broadcast_shapes"], [630, 2, 1, "", "broadcast_to"], [634, 2, 1, "", "cache_fn"], [630, 2, 1, "", "can_cast"], [236, 2, 1, "", "ceil"], [295, 2, 1, "", "celu"], [630, 2, 1, "", "check_float"], [378, 2, 1, "", "check_scalar"], [637, 2, 1, "", "cholesky"], [378, 2, 1, "", "choose"], [195, 2, 1, "", "clear_cached_mem_on_dev"], [639, 2, 1, "", "clip"], [634, 2, 1, "", "clip_matrix_norm"], [634, 2, 1, "", "clip_vector_norm"], [630, 2, 1, "", "closest_valid_dtype"], [628, 2, 1, "", "cmp_is"], [628, 2, 1, "", "cmp_isnot"], [378, 2, 1, "", "column_stack"], [639, 2, 1, "", "concat"], [378, 2, 1, "", "concat_from_sequence"], [376, 2, 1, "", "cond"], [372, 2, 1, "", "conj"], [639, 2, 1, "", "constant_pad"], [634, 2, 1, "", "container_types"], [636, 2, 1, "", "conv"], [636, 2, 1, "", "conv1d"], [636, 2, 1, "", "conv1d_transpose"], [636, 2, 1, "", "conv2d"], [636, 2, 1, "", "conv2d_transpose"], [636, 2, 1, "", "conv3d"], [636, 2, 1, "", "conv3d_transpose"], [636, 2, 1, "", "conv_general_dilated"], [636, 2, 1, "", "conv_general_transpose"], [629, 2, 1, "", "copy_array"], [641, 2, 1, "", "copy_nest"], [372, 2, 1, "", "copysign"], [387, 2, 1, "", "corrcoef"], [237, 2, 1, "", "cos"], [238, 2, 1, "", "cosh"], [372, 2, 1, "", "count_nonzero"], [387, 2, 1, "", "cov"], [637, 2, 1, "", "cross"], [638, 2, 1, "", "cross_entropy"], [387, 2, 1, "", "cummax"], [387, 2, 1, "", "cummin"], [647, 2, 1, "", "cumprod"], [647, 2, 1, "", "cumsum"], [634, 2, 1, "", "current_backend_str"], [397, 2, 1, "", "dct"], [634, 2, 1, "", "default"], [630, 2, 1, "", "default_complex_dtype"], [196, 2, 1, "", "default_device"], [630, 2, 1, "", "default_dtype"], [630, 2, 1, "", "default_float_dtype"], [630, 2, 1, "", "default_int_dtype"], [630, 2, 1, "", "default_uint_dtype"], [239, 2, 1, "", "deg2rad"], [636, 2, 1, "", "depthwise_conv2d"], [637, 2, 1, "", "det"], [197, 2, 1, "", "dev"], [198, 2, 1, "", "dev_util"], [398, 2, 1, "", "dft"], [637, 2, 1, "", "diag"], [376, 2, 1, "", "diagflat"], [637, 2, 1, "", "diagonal"], [372, 2, 1, "", "diff"], [372, 2, 1, "", "digamma"], [382, 2, 1, "", "dirichlet"], [240, 2, 1, "", "divide"], [376, 2, 1, "", "dot"], [636, 2, 1, "", "dropout"], [399, 2, 1, "", "dropout1d"], [400, 2, 1, "", "dropout2d"], [401, 2, 1, "", "dropout3d"], [378, 2, 1, "", "dsplit"], [378, 2, 1, "", "dstack"], [630, 2, 1, "", "dtype"], [630, 2, 1, "", "dtype_bits"], [641, 2, 1, "", "duplicate_array_index_chains"], [627, 6, 1, "", "e"], [376, 2, 1, "", "eig"], [637, 2, 1, "", "eigh"], [376, 2, 1, "", "eigh_tridiagonal"], [376, 2, 1, "", "eigvals"], [637, 2, 1, "", "eigvalsh"], [634, 2, 1, "", "einops_rearrange"], [634, 2, 1, "", "einops_reduce"], [634, 2, 1, "", "einops_repeat"], [647, 2, 1, "", "einsum"], [296, 2, 1, "", "elu"], [402, 2, 1, "", "embedding"], [629, 2, 1, "", "empty"], [629, 2, 1, "", "empty_like"], [241, 2, 1, "", "equal"], [242, 2, 1, "", "erf"], [372, 2, 1, "", "erfc"], [372, 2, 1, "", "erfinv"], [635, 2, 1, "", "execute_with_gradients"], [634, 2, 1, "", "exists"], [243, 2, 1, "", "exp"], [244, 2, 1, "", "exp2"], [378, 2, 1, "", "expand"], [639, 2, 1, "", "expand_dims"], [245, 2, 1, "", "expm1"], [629, 2, 1, "", "eye"], [313, 2, 1, "", "eye_like"], [403, 2, 1, "", "fft"], [404, 2, 1, "", "fft2"], [378, 2, 1, "", "fill_diagonal"], [630, 2, 1, "", "finfo"], [372, 2, 1, "", "fix"], [378, 2, 1, "", "flatten"], [639, 2, 1, "", "flip"], [378, 2, 1, "", "fliplr"], [378, 2, 1, "", "flipud"], [372, 2, 1, "", "float_power"], [246, 2, 1, "", "floor"], [247, 2, 1, "", "floor_divide"], [372, 2, 1, "", "fmax"], [248, 2, 1, "", "fmin"], [249, 2, 1, "", "fmod"], [378, 2, 1, "", "fold"], [640, 2, 1, "", "fomaml_step"], [628, 2, 1, "", "for_loop"], [634, 2, 1, "", "fourier_encode"], [372, 2, 1, "", "frexp"], [629, 2, 1, "", "from_dlpack"], [629, 2, 1, "", "frombuffer"], [629, 2, 1, "", "full"], [629, 2, 1, "", "full_like"], [199, 2, 1, "", "function_supported_devices"], [634, 2, 1, "", "function_supported_devices_and_dtypes"], [630, 2, 1, "", "function_supported_dtypes"], [200, 2, 1, "", "function_unsupported_devices"], [634, 2, 1, "", "function_unsupported_devices_and_dtypes"], [630, 2, 1, "", "function_unsupported_dtypes"], [382, 2, 1, "", "gamma"], [634, 2, 1, "", "gather"], [634, 2, 1, "", "gather_nd"], [250, 2, 1, "", "gcd"], [626, 2, 1, "", "gelu"], [376, 2, 1, "", "general_inner_product"], [405, 2, 1, "", "generate_einsum_equation"], [634, 2, 1, "", "get_all_arrays_in_memory"], [201, 2, 1, "", "get_all_ivy_arrays_on_dev"], [406, 2, 1, "", "get_interpolate_kernel"], [634, 2, 1, "", "get_item"], [634, 2, 1, "", "get_num_dims"], [634, 2, 1, "", "get_referrers_recursive"], [202, 2, 1, "", "gpu_is_available"], [635, 2, 1, "", "grad"], [372, 2, 1, "", "gradient"], [635, 2, 1, "", "gradient_descent_update"], [251, 2, 1, "", "greater"], [252, 2, 1, "", "greater_equal"], [381, 2, 1, "", "group_norm"], [314, 2, 1, "", "hamming_window"], [203, 2, 1, "", "handle_soft_device_variable"], [315, 2, 1, "", "hann_window"], [297, 2, 1, "", "hardshrink"], [298, 2, 1, "", "hardsilu"], [626, 2, 1, "", "hardswish"], [299, 2, 1, "", "hardtanh"], [634, 2, 1, "", "has_nans"], [378, 2, 1, "", "heaviside"], [376, 2, 1, "", "higher_order_moment"], [377, 2, 1, "", "hinge_embedding_loss"], [387, 2, 1, "", "histogram"], [378, 2, 1, "", "hsplit"], [378, 2, 1, "", "hstack"], [377, 2, 1, "", "huber_loss"], [372, 2, 1, "", "hypot"], [378, 2, 1, "", "i0"], [407, 2, 1, "", "idct"], [628, 2, 1, "", "if_else"], [408, 2, 1, "", "ifft"], [409, 2, 1, "", "ifftn"], [387, 2, 1, "", "igamma"], [630, 2, 1, "", "iinfo"], [253, 2, 1, "", "imag"], [641, 2, 1, "", "index_nest"], [316, 2, 1, "", "indices"], [627, 6, 1, "", "inf"], [630, 2, 1, "", "infer_default_dtype"], [376, 2, 1, "", "initialize_tucker"], [637, 2, 1, "", "inner"], [634, 2, 1, "", "inplace_arrays_supported"], [634, 2, 1, "", "inplace_decrement"], [634, 2, 1, "", "inplace_increment"], [634, 2, 1, "", "inplace_update"], [634, 2, 1, "", "inplace_variables_supported"], [641, 2, 1, "", "insert_into_nest_at_index"], [641, 2, 1, "", "insert_into_nest_at_indices"], [381, 2, 1, "", "instance_norm"], [410, 2, 1, "", "interp"], [411, 2, 1, "", "interpolate"], [637, 2, 1, "", "inv"], [630, 2, 1, "", "invalid_dtype"], [385, 2, 1, "", "invert_permutation"], [634, 2, 1, "", "is_array"], [630, 2, 1, "", "is_bool_dtype"], [630, 2, 1, "", "is_complex_dtype"], [630, 2, 1, "", "is_float_dtype"], [630, 2, 1, "", "is_hashable_dtype"], [630, 2, 1, "", "is_int_dtype"], [634, 2, 1, "", "is_ivy_array"], [634, 2, 1, "", "is_ivy_container"], [634, 2, 1, "", "is_ivy_nested_array"], [386, 2, 1, "", "is_ivy_sparse_array"], [634, 2, 1, "", "is_native_array"], [630, 2, 1, "", "is_native_dtype"], [386, 2, 1, "", "is_native_sparse_array"], [630, 2, 1, "", "is_uint_dtype"], [372, 2, 1, "", "isclose"], [254, 2, 1, "", "isfinite"], [634, 2, 1, "", "isin"], [255, 2, 1, "", "isinf"], [256, 2, 1, "", "isnan"], [257, 2, 1, "", "isreal"], [634, 2, 1, "", "isscalar"], [634, 2, 1, "", "itemsize"], [635, 2, 1, "", "jac"], [374, 2, 1, "", "jvp"], [317, 2, 1, "", "kaiser_bessel_derived_window"], [318, 2, 1, "", "kaiser_window"], [376, 2, 1, "", "khatri_rao"], [377, 2, 1, "", "kl_div"], [376, 2, 1, "", "kron"], [376, 2, 1, "", "kronecker"], [377, 2, 1, "", "l1_loss"], [381, 2, 1, "", "l1_normalize"], [381, 2, 1, "", "l2_normalize"], [635, 2, 1, "", "lamb_update"], [635, 2, 1, "", "lars_update"], [642, 2, 1, "", "layer_norm"], [258, 2, 1, "", "lcm"], [372, 2, 1, "", "ldexp"], [626, 2, 1, "", "leaky_relu"], [372, 2, 1, "", "lerp"], [259, 2, 1, "", "less"], [260, 2, 1, "", "less_equal"], [385, 2, 1, "", "lexsort"], [372, 2, 1, "", "lgamma"], [636, 2, 1, "", "linear"], [629, 2, 1, "", "linspace"], [648, 2, 1, "", "load"], [381, 2, 1, "", "local_response_norm"], [261, 2, 1, "", "log"], [262, 2, 1, "", "log10"], [263, 2, 1, "", "log1p"], [264, 2, 1, "", "log2"], [377, 2, 1, "", "log_poisson_loss"], [626, 2, 1, "", "log_softmax"], [265, 2, 1, "", "logaddexp"], [266, 2, 1, "", "logaddexp2"], [267, 2, 1, "", "logical_and"], [268, 2, 1, "", "logical_not"], [269, 2, 1, "", "logical_or"], [270, 2, 1, "", "logical_xor"], [300, 2, 1, "", "logit"], [301, 2, 1, "", "logsigmoid"], [629, 2, 1, "", "logspace"], [381, 2, 1, "", "lp_normalize"], [636, 2, 1, "", "lstm"], [636, 2, 1, "", "lstm_update"], [376, 2, 1, "", "lu_factor"], [376, 2, 1, "", "lu_solve"], [376, 2, 1, "", "make_svd_non_negative"], [640, 2, 1, "", "maml_step"], [641, 2, 1, "", "map"], [641, 2, 1, "", "map_nest_at_index"], [641, 2, 1, "", "map_nest_at_indices"], [634, 2, 1, "", "match_kwargs"], [637, 2, 1, "", "matmul"], [378, 2, 1, "", "matricize"], [376, 2, 1, "", "matrix_exp"], [637, 2, 1, "", "matrix_norm"], [637, 2, 1, "", "matrix_power"], [637, 2, 1, "", "matrix_rank"], [637, 2, 1, "", "matrix_transpose"], [647, 2, 1, "", "max"], [412, 2, 1, "", "max_pool1d"], [413, 2, 1, "", "max_pool2d"], [375, 2, 1, "", "max_pool3d"], [375, 2, 1, "", "max_unpool1d"], [271, 2, 1, "", "maximum"], [647, 2, 1, "", "mean"], [387, 2, 1, "", "median"], [319, 2, 1, "", "mel_weight_matrix"], [629, 2, 1, "", "meshgrid"], [647, 2, 1, "", "min"], [272, 2, 1, "", "minimum"], [626, 2, 1, "", "mish"], [376, 2, 1, "", "mode_dot"], [372, 2, 1, "", "modf"], [378, 2, 1, "", "moveaxis"], [646, 2, 1, "", "msort"], [376, 2, 1, "", "multi_dot"], [636, 2, 1, "", "multi_head_attention"], [641, 2, 1, "", "multi_index_nest"], [376, 2, 1, "", "multi_mode_dot"], [643, 2, 1, "", "multinomial"], [273, 2, 1, "", "multiply"], [634, 2, 1, "", "multiprocessing"], [627, 6, 1, "", "nan"], [274, 2, 1, "", "nan_to_num"], [387, 2, 1, "", "nanmean"], [387, 2, 1, "", "nanmedian"], [387, 2, 1, "", "nanmin"], [387, 2, 1, "", "nanprod"], [372, 2, 1, "", "nansum"], [629, 2, 1, "", "native_array"], [386, 2, 1, "", "native_sparse_array"], [386, 2, 1, "", "native_sparse_array_to_indices_values_and_shape"], [320, 2, 1, "", "ndenumerate"], [321, 2, 1, "", "ndindex"], [375, 2, 1, "", "nearest_interpolate"], [275, 2, 1, "", "negative"], [641, 2, 1, "", "nested_any"], [641, 2, 1, "", "nested_argwhere"], [641, 2, 1, "", "nested_map"], [641, 2, 1, "", "nested_multi_map"], [627, 6, 1, "", "newaxis"], [372, 2, 1, "", "nextafter"], [636, 2, 1, "", "nms"], [644, 2, 1, "", "nonzero"], [276, 2, 1, "", "not_equal"], [634, 2, 1, "", "num_arrays_in_memory"], [204, 2, 1, "", "num_cpu_cores"], [205, 2, 1, "", "num_gpus"], [206, 2, 1, "", "num_ivy_arrays_on_dev"], [629, 2, 1, "", "one_hot"], [629, 2, 1, "", "ones"], [629, 2, 1, "", "ones_like"], [635, 2, 1, "", "optimizer_update"], [388, 2, 1, "", "optional_get_element"], [637, 2, 1, "", "outer"], [378, 2, 1, "", "pad"], [378, 2, 1, "", "partial_fold"], [378, 2, 1, "", "partial_tensor_to_vec"], [376, 2, 1, "", "partial_tucker"], [378, 2, 1, "", "partial_unfold"], [378, 2, 1, "", "partial_vec_to_tensor"], [207, 2, 1, "", "percent_used_mem_on_dev"], [639, 2, 1, "", "permute_dims"], [627, 6, 1, "", "pi"], [637, 2, 1, "", "pinv"], [382, 2, 1, "", "poisson"], [377, 2, 1, "", "poisson_nll_loss"], [369, 2, 1, "", "polyval"], [375, 2, 1, "", "pool"], [277, 2, 1, "", "positive"], [278, 2, 1, "", "pow"], [302, 2, 1, "", "prelu"], [634, 2, 1, "", "print_all_arrays_in_memory"], [208, 2, 1, "", "print_all_ivy_arrays_on_dev"], [647, 2, 1, "", "prod"], [630, 2, 1, "", "promote_types"], [630, 2, 1, "", "promote_types_of_inputs"], [641, 2, 1, "", "prune_empty"], [641, 2, 1, "", "prune_nest_at_index"], [641, 2, 1, "", "prune_nest_at_indices"], [378, 2, 1, "", "put_along_axis"], [637, 2, 1, "", "qr"], [387, 2, 1, "", "quantile"], [279, 2, 1, "", "rad2deg"], [643, 2, 1, "", "randint"], [369, 2, 1, "", "random_cp"], [643, 2, 1, "", "random_normal"], [369, 2, 1, "", "random_parafac2"], [369, 2, 1, "", "random_tr"], [369, 2, 1, "", "random_tt"], [369, 2, 1, "", "random_tucker"], [643, 2, 1, "", "random_uniform"], [280, 2, 1, "", "real"], [281, 2, 1, "", "reciprocal"], [373, 2, 1, "", "reduce"], [375, 2, 1, "", "reduce_window"], [626, 2, 1, "", "relu"], [303, 2, 1, "", "relu6"], [282, 2, 1, "", "remainder"], [639, 2, 1, "", "repeat"], [640, 2, 1, "", "reptile_step"], [639, 2, 1, "", "reshape"], [630, 2, 1, "", "result_type"], [375, 2, 1, "", "rfft"], [375, 2, 1, "", "rfftn"], [375, 2, 1, "", "rnn"], [636, 2, 1, "", "roi_align"], [639, 2, 1, "", "roll"], [378, 2, 1, "", "rot90"], [283, 2, 1, "", "round"], [648, 2, 1, "", "save"], [636, 2, 1, "", "scaled_dot_product_attention"], [304, 2, 1, "", "scaled_tanh"], [634, 2, 1, "", "scatter_flat"], [634, 2, 1, "", "scatter_nd"], [646, 2, 1, "", "searchsorted"], [643, 2, 1, "", "seed"], [305, 2, 1, "", "selu"], [634, 2, 1, "", "set_array_mode"], [630, 2, 1, "", "set_default_complex_dtype"], [209, 2, 1, "", "set_default_device"], [630, 2, 1, "", "set_default_dtype"], [630, 2, 1, "", "set_default_float_dtype"], [184, 2, 1, "", "set_default_int_dtype"], [185, 2, 1, "", "set_default_uint_dtype"], [634, 2, 1, "", "set_exception_trace_mode"], [634, 2, 1, "", "set_inplace_mode"], [634, 2, 1, "", "set_item"], [634, 2, 1, "", "set_min_base"], [634, 2, 1, "", "set_min_denominator"], [641, 2, 1, "", "set_nest_at_index"], [641, 2, 1, "", "set_nest_at_indices"], [634, 2, 1, "", "set_nestable_mode"], [634, 2, 1, "", "set_precise_mode"], [634, 2, 1, "", "set_queue_timeout"], [634, 2, 1, "", "set_shape_array_mode"], [634, 2, 1, "", "set_show_func_wrapper_trace_mode"], [210, 2, 1, "", "set_soft_device_mode"], [211, 2, 1, "", "set_split_factor"], [634, 2, 1, "", "set_tmp_dir"], [634, 2, 1, "", "shape"], [643, 2, 1, "", "shuffle"], [626, 2, 1, "", "sigmoid"], [284, 2, 1, "", "sign"], [372, 2, 1, "", "signbit"], [306, 2, 1, "", "silu"], [285, 2, 1, "", "sin"], [372, 2, 1, "", "sinc"], [286, 2, 1, "", "sinh"], [634, 2, 1, "", "size"], [375, 2, 1, "", "sliding_window"], [637, 2, 1, "", "slogdet"], [377, 2, 1, "", "smooth_l1_loss"], [377, 2, 1, "", "soft_margin_loss"], [378, 2, 1, "", "soft_thresholding"], [626, 2, 1, "", "softmax"], [626, 2, 1, "", "softplus"], [307, 2, 1, "", "softshrink"], [626, 2, 1, "", "softsign"], [637, 2, 1, "", "solve"], [376, 2, 1, "", "solve_triangular"], [646, 2, 1, "", "sort"], [638, 2, 1, "", "sparse_cross_entropy"], [372, 2, 1, "", "sparsify_tensor"], [639, 2, 1, "", "split"], [212, 2, 1, "", "split_factor"], [213, 2, 1, "", "split_func_call"], [287, 2, 1, "", "sqrt"], [288, 2, 1, "", "square"], [639, 2, 1, "", "squeeze"], [634, 2, 1, "", "stable_divide"], [634, 2, 1, "", "stable_pow"], [639, 2, 1, "", "stack"], [308, 2, 1, "", "stanh"], [647, 2, 1, "", "std"], [375, 2, 1, "", "stft"], [635, 2, 1, "", "stop_gradient"], [634, 2, 1, "", "strides"], [289, 2, 1, "", "subtract"], [647, 2, 1, "", "sum"], [634, 2, 1, "", "supports_inplace_updates"], [637, 2, 1, "", "svd"], [376, 2, 1, "", "svd_flip"], [637, 2, 1, "", "svdvals"], [639, 2, 1, "", "swapaxes"], [378, 2, 1, "", "take"], [378, 2, 1, "", "take_along_axis"], [290, 2, 1, "", "tan"], [291, 2, 1, "", "tanh"], [309, 2, 1, "", "tanhshrink"], [376, 2, 1, "", "tensor_train"], [637, 2, 1, "", "tensordot"], [637, 2, 1, "", "tensorsolve"], [310, 2, 1, "", "threshold"], [311, 2, 1, "", "thresholded_relu"], [639, 2, 1, "", "tile"], [214, 2, 1, "", "to_device"], [629, 2, 1, "", "to_dlpack"], [634, 2, 1, "", "to_ivy_shape"], [634, 2, 1, "", "to_list"], [634, 2, 1, "", "to_native_shape"], [634, 2, 1, "", "to_numpy"], [634, 2, 1, "", "to_scalar"], [378, 2, 1, "", "top_k"], [215, 2, 1, "", "total_mem_on_dev"], [216, 2, 1, "", "tpu_is_available"], [637, 2, 1, "", "trace"], [863, 2, 1, "", "trace_graph"], [864, 2, 1, "", "transpile"], [292, 2, 1, "", "trapz"], [629, 2, 1, "", "tril"], [369, 2, 1, "", "tril_indices"], [369, 2, 1, "", "trilu"], [378, 2, 1, "", "trim_zeros"], [629, 2, 1, "", "triu"], [629, 2, 1, "", "triu_indices"], [293, 2, 1, "", "trunc"], [294, 2, 1, "", "trunc_divide"], [376, 2, 1, "", "truncated_svd"], [634, 2, 1, "", "try_else_none"], [628, 2, 1, "", "try_except"], [376, 2, 1, "", "tt_matrix_to_tensor"], [376, 2, 1, "", "tucker"], [186, 2, 1, "", "type_promote_arrays"], [378, 2, 1, "", "unflatten"], [378, 2, 1, "", "unfold"], [865, 2, 1, "", "unify"], [645, 2, 1, "", "unique_all"], [378, 2, 1, "", "unique_consecutive"], [645, 2, 1, "", "unique_counts"], [645, 2, 1, "", "unique_inverse"], [645, 2, 1, "", "unique_values"], [383, 2, 1, "", "unravel_index"], [634, 2, 1, "", "unset_array_mode"], [187, 2, 1, "", "unset_default_complex_dtype"], [217, 2, 1, "", "unset_default_device"], [188, 2, 1, "", "unset_default_dtype"], [189, 2, 1, "", "unset_default_float_dtype"], [190, 2, 1, "", "unset_default_int_dtype"], [191, 2, 1, "", "unset_default_uint_dtype"], [634, 2, 1, "", "unset_exception_trace_mode"], [634, 2, 1, "", "unset_inplace_mode"], [634, 2, 1, "", "unset_min_base"], [634, 2, 1, "", "unset_min_denominator"], [634, 2, 1, "", "unset_nestable_mode"], [634, 2, 1, "", "unset_precise_mode"], [634, 2, 1, "", "unset_queue_timeout"], [634, 2, 1, "", "unset_shape_array_mode"], [634, 2, 1, "", "unset_show_func_wrapper_trace_mode"], [218, 2, 1, "", "unset_soft_device_mode"], [634, 2, 1, "", "unset_tmp_dir"], [369, 2, 1, "", "unsorted_segment_mean"], [369, 2, 1, "", "unsorted_segment_min"], [369, 2, 1, "", "unsorted_segment_sum"], [639, 2, 1, "", "unstack"], [219, 2, 1, "", "used_mem_on_dev"], [192, 2, 1, "", "valid_dtype"], [635, 2, 1, "", "value_and_grad"], [634, 2, 1, "", "value_is_nan"], [637, 2, 1, "", "vander"], [647, 2, 1, "", "var"], [637, 2, 1, "", "vecdot"], [637, 2, 1, "", "vector_norm"], [637, 2, 1, "", "vector_to_skew_symmetric_matrix"], [374, 2, 1, "", "vjp"], [634, 2, 1, "", "vmap"], [369, 2, 1, "", "vorbis_window"], [378, 2, 1, "", "vsplit"], [378, 2, 1, "", "vstack"], [644, 2, 1, "", "where"], [628, 2, 1, "", "while_loop"], [372, 2, 1, "", "xlogy"], [639, 2, 1, "", "zero_pad"], [629, 2, 1, "", "zeros"], [629, 2, 1, "", "zeros_like"], [372, 2, 1, "", "zeta"]], "ivy.Container": [[220, 0, 1, "", "abs"], [221, 0, 1, "", "acos"], [222, 0, 1, "", "acosh"], [615, 0, 1, "", "adam_step"], [616, 0, 1, "", "adam_update"], [389, 0, 1, "", "adaptive_avg_pool1d"], [390, 0, 1, "", "adaptive_avg_pool2d"], [391, 0, 1, "", "adaptive_max_pool2d"], [392, 0, 1, "", "adaptive_max_pool3d"], [223, 0, 1, "", "add"], [424, 0, 1, "", "adjoint"], [767, 0, 1, "", "all"], [534, 0, 1, "", "all_equal"], [334, 0, 1, "", "allclose"], [335, 0, 1, "", "amax"], [336, 0, 1, "", "amin"], [224, 0, 1, "", "angle"], [768, 0, 1, "", "any"], [744, 0, 1, "", "argmax"], [745, 0, 1, "", "argmin"], [753, 0, 1, "", "argsort"], [746, 0, 1, "", "argwhere"], [537, 0, 1, "", "array_equal"], [460, 0, 1, "", "as_strided"], [128, 0, 1, "", "asarray"], [225, 0, 1, "", "asin"], [226, 0, 1, "", "asinh"], [538, 0, 1, "", "assert_supports_inplace"], [461, 0, 1, "", "associative_scan"], [152, 0, 1, "", "astype"], [227, 0, 1, "", "atan"], [228, 0, 1, "", "atan2"], [229, 0, 1, "", "atanh"], [462, 0, 1, "", "atleast_1d"], [463, 0, 1, "", "atleast_2d"], [464, 0, 1, "", "atleast_3d"], [394, 0, 1, "", "avg_pool1d"], [395, 0, 1, "", "avg_pool2d"], [396, 0, 1, "", "avg_pool3d"], [501, 0, 1, "", "batch_norm"], [425, 0, 1, "", "batched_outer"], [508, 0, 1, "", "bernoulli"], [509, 0, 1, "", "beta"], [337, 0, 1, "", "binarizer"], [696, 0, 1, "", "binary_cross_entropy"], [520, 0, 1, "", "bincount"], [230, 0, 1, "", "bitwise_and"], [231, 0, 1, "", "bitwise_invert"], [232, 0, 1, "", "bitwise_left_shift"], [233, 0, 1, "", "bitwise_or"], [234, 0, 1, "", "bitwise_right_shift"], [235, 0, 1, "", "bitwise_xor"], [312, 0, 1, "", "blackman_window"], [153, 0, 1, "", "broadcast_arrays"], [465, 0, 1, "", "broadcast_shapes"], [154, 0, 1, "", "broadcast_to"], [155, 0, 1, "", "can_cast"], [236, 0, 1, "", "ceil"], [295, 0, 1, "", "celu"], [667, 0, 1, "", "cholesky"], [699, 0, 1, "", "clip"], [540, 0, 1, "", "clip_matrix_norm"], [541, 0, 1, "", "clip_vector_norm"], [468, 0, 1, "", "column_stack"], [700, 0, 1, "", "concat"], [469, 0, 1, "", "concat_from_sequence"], [426, 0, 1, "", "cond"], [338, 0, 1, "", "conj"], [701, 0, 1, "", "constant_pad"], [650, 0, 1, "", "conv1d"], [651, 0, 1, "", "conv1d_transpose"], [652, 0, 1, "", "conv2d"], [653, 0, 1, "", "conv2d_transpose"], [654, 0, 1, "", "conv3d"], [655, 0, 1, "", "conv3d_transpose"], [129, 0, 1, "", "copy_array"], [339, 0, 1, "", "copysign"], [521, 0, 1, "", "corrcoef"], [237, 0, 1, "", "cos"], [238, 0, 1, "", "cosh"], [340, 0, 1, "", "count_nonzero"], [522, 0, 1, "", "cov"], [668, 0, 1, "", "cross"], [697, 0, 1, "", "cross_entropy"], [523, 0, 1, "", "cummax"], [524, 0, 1, "", "cummin"], [757, 0, 1, "", "cumprod"], [758, 0, 1, "", "cumsum"], [397, 0, 1, "", "dct"], [239, 0, 1, "", "deg2rad"], [658, 0, 1, "", "depthwise_conv2d"], [669, 0, 1, "", "det"], [197, 0, 1, "", "dev"], [398, 0, 1, "", "dft"], [670, 0, 1, "", "diag"], [427, 0, 1, "", "diagflat"], [671, 0, 1, "", "diagonal"], [341, 0, 1, "", "diff"], [342, 0, 1, "", "digamma"], [510, 0, 1, "", "dirichlet"], [240, 0, 1, "", "divide"], [428, 0, 1, "", "dot"], [659, 0, 1, "", "dropout"], [399, 0, 1, "", "dropout1d"], [400, 0, 1, "", "dropout2d"], [401, 0, 1, "", "dropout3d"], [470, 0, 1, "", "dsplit"], [471, 0, 1, "", "dstack"], [163, 0, 1, "", "dtype"], [429, 0, 1, "", "eig"], [673, 0, 1, "", "eigh"], [430, 0, 1, "", "eigh_tridiagonal"], [431, 0, 1, "", "eigvals"], [674, 0, 1, "", "eigvalsh"], [545, 0, 1, "", "einops_rearrange"], [546, 0, 1, "", "einops_reduce"], [547, 0, 1, "", "einops_repeat"], [759, 0, 1, "", "einsum"], [296, 0, 1, "", "elu"], [402, 0, 1, "", "embedding"], [131, 0, 1, "", "empty_like"], [241, 0, 1, "", "equal"], [242, 0, 1, "", "erf"], [343, 0, 1, "", "erfc"], [344, 0, 1, "", "erfinv"], [548, 0, 1, "", "exists"], [243, 0, 1, "", "exp"], [244, 0, 1, "", "exp2"], [472, 0, 1, "", "expand"], [702, 0, 1, "", "expand_dims"], [245, 0, 1, "", "expm1"], [313, 0, 1, "", "eye_like"], [403, 0, 1, "", "fft"], [473, 0, 1, "", "fill_diagonal"], [165, 0, 1, "", "finfo"], [345, 0, 1, "", "fix"], [474, 0, 1, "", "flatten"], [703, 0, 1, "", "flip"], [475, 0, 1, "", "fliplr"], [476, 0, 1, "", "flipud"], [346, 0, 1, "", "float_power"], [246, 0, 1, "", "floor"], [247, 0, 1, "", "floor_divide"], [347, 0, 1, "", "fmax"], [248, 0, 1, "", "fmin"], [249, 0, 1, "", "fmod"], [477, 0, 1, "", "fold"], [549, 0, 1, "", "fourier_encode"], [348, 0, 1, "", "frexp"], [133, 0, 1, "", "from_dlpack"], [134, 0, 1, "", "frombuffer"], [136, 0, 1, "", "full_like"], [511, 0, 1, "", "gamma"], [552, 0, 1, "", "gather"], [553, 0, 1, "", "gather_nd"], [250, 0, 1, "", "gcd"], [110, 0, 1, "", "gelu"], [432, 0, 1, "", "general_inner_product"], [556, 0, 1, "", "get_num_dims"], [349, 0, 1, "", "gradient"], [619, 0, 1, "", "gradient_descent_update"], [251, 0, 1, "", "greater"], [252, 0, 1, "", "greater_equal"], [502, 0, 1, "", "group_norm"], [314, 0, 1, "", "hamming_window"], [315, 0, 1, "", "hann_window"], [297, 0, 1, "", "hardshrink"], [298, 0, 1, "", "hardsilu"], [111, 0, 1, "", "hardswish"], [299, 0, 1, "", "hardtanh"], [558, 0, 1, "", "has_nans"], [478, 0, 1, "", "heaviside"], [433, 0, 1, "", "higher_order_moment"], [452, 0, 1, "", "hinge_embedding_loss"], [525, 0, 1, "", "histogram"], [479, 0, 1, "", "hsplit"], [480, 0, 1, "", "hstack"], [453, 0, 1, "", "huber_loss"], [350, 0, 1, "", "hypot"], [481, 0, 1, "", "i0"], [407, 0, 1, "", "idct"], [408, 0, 1, "", "ifft"], [409, 0, 1, "", "ifftn"], [526, 0, 1, "", "igamma"], [168, 0, 1, "", "iinfo"], [253, 0, 1, "", "imag"], [434, 0, 1, "", "initialize_tucker"], [675, 0, 1, "", "inner"], [560, 0, 1, "", "inplace_decrement"], [561, 0, 1, "", "inplace_increment"], [562, 0, 1, "", "inplace_update"], [503, 0, 1, "", "instance_norm"], [411, 0, 1, "", "interpolate"], [676, 0, 1, "", "inv"], [514, 0, 1, "", "invert_permutation"], [564, 0, 1, "", "is_array"], [171, 0, 1, "", "is_bool_dtype"], [172, 0, 1, "", "is_complex_dtype"], [173, 0, 1, "", "is_float_dtype"], [175, 0, 1, "", "is_int_dtype"], [565, 0, 1, "", "is_ivy_array"], [568, 0, 1, "", "is_native_array"], [177, 0, 1, "", "is_uint_dtype"], [351, 0, 1, "", "isclose"], [254, 0, 1, "", "isfinite"], [569, 0, 1, "", "isin"], [255, 0, 1, "", "isinf"], [256, 0, 1, "", "isnan"], [257, 0, 1, "", "isreal"], [571, 0, 1, "", "itemsize"], [317, 0, 1, "", "kaiser_bessel_derived_window"], [318, 0, 1, "", "kaiser_window"], [454, 0, 1, "", "kl_div"], [436, 0, 1, "", "kron"], [455, 0, 1, "", "l1_loss"], [504, 0, 1, "", "l1_normalize"], [505, 0, 1, "", "l2_normalize"], [621, 0, 1, "", "lamb_update"], [622, 0, 1, "", "lars_update"], [737, 0, 1, "", "layer_norm"], [258, 0, 1, "", "lcm"], [352, 0, 1, "", "ldexp"], [112, 0, 1, "", "leaky_relu"], [353, 0, 1, "", "lerp"], [259, 0, 1, "", "less"], [260, 0, 1, "", "less_equal"], [515, 0, 1, "", "lexsort"], [354, 0, 1, "", "lgamma"], [660, 0, 1, "", "linear"], [137, 0, 1, "", "linspace"], [261, 0, 1, "", "log"], [262, 0, 1, "", "log10"], [263, 0, 1, "", "log1p"], [264, 0, 1, "", "log2"], [456, 0, 1, "", "log_poisson_loss"], [113, 0, 1, "", "log_softmax"], [265, 0, 1, "", "logaddexp"], [266, 0, 1, "", "logaddexp2"], [267, 0, 1, "", "logical_and"], [268, 0, 1, "", "logical_not"], [269, 0, 1, "", "logical_or"], [270, 0, 1, "", "logical_xor"], [300, 0, 1, "", "logit"], [301, 0, 1, "", "logsigmoid"], [138, 0, 1, "", "logspace"], [507, 0, 1, "", "lp_normalize"], [662, 0, 1, "", "lstm_update"], [440, 0, 1, "", "make_svd_non_negative"], [677, 0, 1, "", "matmul"], [482, 0, 1, "", "matricize"], [441, 0, 1, "", "matrix_exp"], [678, 0, 1, "", "matrix_norm"], [679, 0, 1, "", "matrix_power"], [680, 0, 1, "", "matrix_rank"], [681, 0, 1, "", "matrix_transpose"], [760, 0, 1, "", "max"], [412, 0, 1, "", "max_pool1d"], [413, 0, 1, "", "max_pool2d"], [414, 0, 1, "", "max_pool3d"], [415, 0, 1, "", "max_unpool1d"], [271, 0, 1, "", "maximum"], [761, 0, 1, "", "mean"], [527, 0, 1, "", "median"], [319, 0, 1, "", "mel_weight_matrix"], [139, 0, 1, "", "meshgrid"], [762, 0, 1, "", "min"], [272, 0, 1, "", "minimum"], [114, 0, 1, "", "mish"], [442, 0, 1, "", "mode_dot"], [355, 0, 1, "", "modf"], [483, 0, 1, "", "moveaxis"], [754, 0, 1, "", "msort"], [443, 0, 1, "", "multi_dot"], [663, 0, 1, "", "multi_head_attention"], [444, 0, 1, "", "multi_mode_dot"], [738, 0, 1, "", "multinomial"], [273, 0, 1, "", "multiply"], [274, 0, 1, "", "nan_to_num"], [528, 0, 1, "", "nanmean"], [529, 0, 1, "", "nanmedian"], [530, 0, 1, "", "nanmin"], [531, 0, 1, "", "nanprod"], [356, 0, 1, "", "nansum"], [140, 0, 1, "", "native_array"], [275, 0, 1, "", "negative"], [357, 0, 1, "", "nextafter"], [747, 0, 1, "", "nonzero"], [276, 0, 1, "", "not_equal"], [141, 0, 1, "", "one_hot"], [143, 0, 1, "", "ones_like"], [623, 0, 1, "", "optimizer_update"], [533, 0, 1, "", "optional_get_element"], [682, 0, 1, "", "outer"], [484, 0, 1, "", "pad"], [485, 0, 1, "", "partial_fold"], [486, 0, 1, "", "partial_tensor_to_vec"], [445, 0, 1, "", "partial_tucker"], [487, 0, 1, "", "partial_unfold"], [488, 0, 1, "", "partial_vec_to_tensor"], [704, 0, 1, "", "permute_dims"], [683, 0, 1, "", "pinv"], [512, 0, 1, "", "poisson"], [457, 0, 1, "", "poisson_nll_loss"], [322, 0, 1, "", "polyval"], [277, 0, 1, "", "positive"], [278, 0, 1, "", "pow"], [302, 0, 1, "", "prelu"], [763, 0, 1, "", "prod"], [489, 0, 1, "", "put_along_axis"], [684, 0, 1, "", "qr"], [532, 0, 1, "", "quantile"], [279, 0, 1, "", "rad2deg"], [739, 0, 1, "", "randint"], [740, 0, 1, "", "random_normal"], [741, 0, 1, "", "random_uniform"], [280, 0, 1, "", "real"], [281, 0, 1, "", "reciprocal"], [363, 0, 1, "", "reduce"], [418, 0, 1, "", "reduce_window"], [115, 0, 1, "", "relu"], [303, 0, 1, "", "relu6"], [282, 0, 1, "", "remainder"], [705, 0, 1, "", "repeat"], [706, 0, 1, "", "reshape"], [180, 0, 1, "", "result_type"], [419, 0, 1, "", "rfft"], [420, 0, 1, "", "rfftn"], [707, 0, 1, "", "roll"], [490, 0, 1, "", "rot90"], [283, 0, 1, "", "round"], [666, 0, 1, "", "scaled_dot_product_attention"], [304, 0, 1, "", "scaled_tanh"], [576, 0, 1, "", "scatter_flat"], [577, 0, 1, "", "scatter_nd"], [755, 0, 1, "", "searchsorted"], [305, 0, 1, "", "selu"], [743, 0, 1, "", "shuffle"], [116, 0, 1, "", "sigmoid"], [284, 0, 1, "", "sign"], [358, 0, 1, "", "signbit"], [306, 0, 1, "", "silu"], [285, 0, 1, "", "sin"], [359, 0, 1, "", "sinc"], [286, 0, 1, "", "sinh"], [591, 0, 1, "", "size"], [422, 0, 1, "", "sliding_window"], [685, 0, 1, "", "slogdet"], [458, 0, 1, "", "smooth_l1_loss"], [459, 0, 1, "", "soft_margin_loss"], [491, 0, 1, "", "soft_thresholding"], [117, 0, 1, "", "softmax"], [118, 0, 1, "", "softplus"], [307, 0, 1, "", "softshrink"], [686, 0, 1, "", "solve"], [756, 0, 1, "", "sort"], [698, 0, 1, "", "sparse_cross_entropy"], [360, 0, 1, "", "sparsify_tensor"], [708, 0, 1, "", "split"], [287, 0, 1, "", "sqrt"], [288, 0, 1, "", "square"], [709, 0, 1, "", "squeeze"], [592, 0, 1, "", "stable_divide"], [593, 0, 1, "", "stable_pow"], [710, 0, 1, "", "stack"], [764, 0, 1, "", "std"], [423, 0, 1, "", "stft"], [624, 0, 1, "", "stop_gradient"], [594, 0, 1, "", "strides"], [289, 0, 1, "", "subtract"], [765, 0, 1, "", "sum"], [595, 0, 1, "", "supports_inplace_updates"], [687, 0, 1, "", "svd"], [447, 0, 1, "", "svd_flip"], [688, 0, 1, "", "svdvals"], [711, 0, 1, "", "swapaxes"], [492, 0, 1, "", "take"], [493, 0, 1, "", "take_along_axis"], [290, 0, 1, "", "tan"], [291, 0, 1, "", "tanh"], [309, 0, 1, "", "tanhshrink"], [448, 0, 1, "", "tensor_train"], [689, 0, 1, "", "tensordot"], [690, 0, 1, "", "tensorsolve"], [310, 0, 1, "", "threshold"], [311, 0, 1, "", "thresholded_relu"], [712, 0, 1, "", "tile"], [214, 0, 1, "", "to_device"], [597, 0, 1, "", "to_list"], [599, 0, 1, "", "to_numpy"], [600, 0, 1, "", "to_scalar"], [494, 0, 1, "", "top_k"], [691, 0, 1, "", "trace"], [292, 0, 1, "", "trapz"], [145, 0, 1, "", "tril"], [328, 0, 1, "", "tril_indices"], [329, 0, 1, "", "trilu"], [495, 0, 1, "", "trim_zeros"], [146, 0, 1, "", "triu"], [147, 0, 1, "", "triu_indices"], [293, 0, 1, "", "trunc"], [294, 0, 1, "", "trunc_divide"], [449, 0, 1, "", "truncated_svd"], [450, 0, 1, "", "tt_matrix_to_tensor"], [451, 0, 1, "", "tucker"], [496, 0, 1, "", "unflatten"], [497, 0, 1, "", "unfold"], [749, 0, 1, "", "unique_all"], [498, 0, 1, "", "unique_consecutive"], [750, 0, 1, "", "unique_counts"], [751, 0, 1, "", "unique_inverse"], [752, 0, 1, "", "unique_values"], [513, 0, 1, "", "unravel_index"], [330, 0, 1, "", "unsorted_segment_mean"], [331, 0, 1, "", "unsorted_segment_min"], [332, 0, 1, "", "unsorted_segment_sum"], [713, 0, 1, "", "unstack"], [613, 0, 1, "", "value_is_nan"], [692, 0, 1, "", "vander"], [766, 0, 1, "", "var"], [693, 0, 1, "", "vecdot"], [694, 0, 1, "", "vector_norm"], [695, 0, 1, "", "vector_to_skew_symmetric_matrix"], [333, 0, 1, "", "vorbis_window"], [499, 0, 1, "", "vsplit"], [500, 0, 1, "", "vstack"], [748, 0, 1, "", "where"], [361, 0, 1, "", "xlogy"], [714, 0, 1, "", "zero_pad"], [149, 0, 1, "", "zeros_like"], [362, 0, 1, "", "zeta"]], "ivy.data_classes.array": [[51, 3, 0, "-", "activations"], [102, 3, 0, "-", "array"], [52, 3, 0, "-", "conversions"], [53, 3, 0, "-", "creation"], [54, 3, 0, "-", "data_type"], [55, 3, 0, "-", "device"], [56, 3, 0, "-", "elementwise"], [57, 3, 0, "-", "experimental"], [58, 3, 0, "-", "general"], [59, 3, 0, "-", "gradients"], [60, 3, 0, "-", "image"], [61, 3, 0, "-", "layers"], [62, 3, 0, "-", "linear_algebra"], [63, 3, 0, "-", "losses"], [64, 3, 0, "-", "manipulation"], [65, 3, 0, "-", "norms"], [66, 3, 0, "-", "random"], [67, 3, 0, "-", "searching"], [68, 3, 0, "-", "set"], [69, 3, 0, "-", "sorting"], [70, 3, 0, "-", "statistical"], [71, 3, 0, "-", "utility"], [72, 3, 0, "-", "wrapping"]], "ivy.data_classes.array.activations": [[51, 1, 1, "", "_ArrayWithActivations"]], "ivy.data_classes.array.activations._ArrayWithActivations": [[51, 4, 1, "", "_abc_impl"], [51, 0, 1, "", "gelu"], [51, 0, 1, "", "hardswish"], [51, 0, 1, "", "leaky_relu"], [51, 0, 1, "", "log_softmax"], [51, 0, 1, "", "mish"], [51, 0, 1, "", "relu"], [51, 0, 1, "", "sigmoid"], [51, 0, 1, "", "softmax"], [51, 0, 1, "", "softplus"]], "ivy.data_classes.array.array": [[102, 1, 1, "", "Array"]], "ivy.data_classes.array.array.Array": [[102, 5, 1, "", "T"], [102, 0, 1, "", "__abs__"], [102, 0, 1, "", "__add__"], [102, 0, 1, "", "__eq__"], [102, 0, 1, "", "__ge__"], [102, 0, 1, "", "__gt__"], [102, 0, 1, "", "__init__"], [102, 0, 1, "", "__le__"], [102, 0, 1, "", "__lt__"], [102, 0, 1, "", "__ne__"], [102, 0, 1, "", "__pow__"], [102, 0, 1, "", "__radd__"], [102, 0, 1, "", "__rrshift__"], [102, 0, 1, "", "__rshift__"], [102, 0, 1, "", "__rsub__"], [102, 0, 1, "", "__sub__"], [102, 0, 1, "", "__truediv__"], [102, 0, 1, "", "__xor__"], [102, 5, 1, "", "backend"], [102, 5, 1, "", "base"], [102, 5, 1, "", "data"], [102, 5, 1, "", "device"], [102, 5, 1, "", "dtype"], [102, 5, 1, "", "dynamic_backend"], [102, 5, 1, "", "imag"], [102, 5, 1, "", "itemsize"], [102, 5, 1, "", "mT"], [102, 5, 1, "", "ndim"], [102, 5, 1, "", "real"], [102, 5, 1, "", "shape"], [102, 5, 1, "", "size"], [102, 5, 1, "", "strides"]], "ivy.data_classes.array.conversions": [[52, 2, 1, "", "_array_to_new_backend"], [52, 2, 1, "", "_to_ivy"], [52, 2, 1, "", "_to_native"], [52, 2, 1, "", "_to_new_backend"], [52, 2, 1, "", "args_to_ivy"], [52, 2, 1, "", "args_to_native"], [52, 2, 1, "", "args_to_new_backend"], [52, 2, 1, "", "to_ivy"], [52, 2, 1, "", "to_native"], [52, 2, 1, "", "to_new_backend"]], "ivy.data_classes.array.creation": [[53, 1, 1, "", "_ArrayWithCreation"]], "ivy.data_classes.array.creation._ArrayWithCreation": [[53, 4, 1, "", "_abc_impl"], [53, 0, 1, "", "asarray"], [53, 0, 1, "", "copy_array"], [53, 0, 1, "", "empty_like"], [53, 0, 1, "", "from_dlpack"], [53, 0, 1, "", "full_like"], [53, 0, 1, "", "linspace"], [53, 0, 1, "", "logspace"], [53, 0, 1, "", "meshgrid"], [53, 0, 1, "", "native_array"], [53, 0, 1, "", "one_hot"], [53, 0, 1, "", "ones_like"], [53, 0, 1, "", "tril"], [53, 0, 1, "", "triu"], [53, 0, 1, "", "zeros_like"]], "ivy.data_classes.array.data_type": [[54, 1, 1, "", "_ArrayWithDataTypes"]], "ivy.data_classes.array.data_type._ArrayWithDataTypes": [[54, 4, 1, "", "_abc_impl"], [54, 0, 1, "", "astype"], [54, 0, 1, "", "broadcast_arrays"], [54, 0, 1, "", "broadcast_to"], [54, 0, 1, "", "can_cast"], [54, 0, 1, "", "dtype"], [54, 0, 1, "", "finfo"], [54, 0, 1, "", "iinfo"], [54, 0, 1, "", "is_bool_dtype"], [54, 0, 1, "", "is_float_dtype"], [54, 0, 1, "", "is_int_dtype"], [54, 0, 1, "", "is_uint_dtype"], [54, 0, 1, "", "result_type"]], "ivy.data_classes.array.device": [[55, 1, 1, "", "_ArrayWithDevice"]], "ivy.data_classes.array.device._ArrayWithDevice": [[55, 4, 1, "", "_abc_impl"], [55, 0, 1, "", "dev"], [55, 0, 1, "", "to_device"]], "ivy.data_classes.array.elementwise": [[56, 1, 1, "", "_ArrayWithElementwise"]], "ivy.data_classes.array.elementwise._ArrayWithElementwise": [[56, 4, 1, "", "_abc_impl"], [56, 0, 1, "", "abs"], [56, 0, 1, "", "acos"], [56, 0, 1, "", "acosh"], [56, 0, 1, "", "add"], [56, 0, 1, "", "angle"], [56, 0, 1, "", "asin"], [56, 0, 1, "", "asinh"], [56, 0, 1, "", "atan"], [56, 0, 1, "", "atan2"], [56, 0, 1, "", "atanh"], [56, 0, 1, "", "bitwise_and"], [56, 0, 1, "", "bitwise_invert"], [56, 0, 1, "", "bitwise_left_shift"], [56, 0, 1, "", "bitwise_or"], [56, 0, 1, "", "bitwise_right_shift"], [56, 0, 1, "", "bitwise_xor"], [56, 0, 1, "", "ceil"], [56, 0, 1, "", "cos"], [56, 0, 1, "", "cosh"], [56, 0, 1, "", "deg2rad"], [56, 0, 1, "", "divide"], [56, 0, 1, "", "equal"], [56, 0, 1, "", "erf"], [56, 0, 1, "", "exp"], [56, 0, 1, "", "exp2"], [56, 0, 1, "", "expm1"], [56, 0, 1, "", "floor"], [56, 0, 1, "", "floor_divide"], [56, 0, 1, "", "fmin"], [56, 0, 1, "", "gcd"], [56, 0, 1, "", "greater"], [56, 0, 1, "", "greater_equal"], [56, 0, 1, "", "isfinite"], [56, 0, 1, "", "isinf"], [56, 0, 1, "", "isnan"], [56, 0, 1, "", "isreal"], [56, 0, 1, "", "lcm"], [56, 0, 1, "", "less"], [56, 0, 1, "", "less_equal"], [56, 0, 1, "", "log"], [56, 0, 1, "", "log10"], [56, 0, 1, "", "log1p"], [56, 0, 1, "", "log2"], [56, 0, 1, "", "logaddexp"], [56, 0, 1, "", "logaddexp2"], [56, 0, 1, "", "logical_and"], [56, 0, 1, "", "logical_not"], [56, 0, 1, "", "logical_or"], [56, 0, 1, "", "logical_xor"], [56, 0, 1, "", "maximum"], [56, 0, 1, "", "minimum"], [56, 0, 1, "", "multiply"], [56, 0, 1, "", "nan_to_num"], [56, 0, 1, "", "negative"], [56, 0, 1, "", "not_equal"], [56, 0, 1, "", "positive"], [56, 0, 1, "", "pow"], [56, 0, 1, "", "rad2deg"], [56, 0, 1, "", "real"], [56, 0, 1, "", "reciprocal"], [56, 0, 1, "", "remainder"], [56, 0, 1, "", "round"], [56, 0, 1, "", "sign"], [56, 0, 1, "", "sin"], [56, 0, 1, "", "sinh"], [56, 0, 1, "", "sqrt"], [56, 0, 1, "", "square"], [56, 0, 1, "", "subtract"], [56, 0, 1, "", "tan"], [56, 0, 1, "", "tanh"], [56, 0, 1, "", "trapz"], [56, 0, 1, "", "trunc"], [56, 0, 1, "", "trunc_divide"]], "ivy.data_classes.array.experimental": [[57, 3, 0, "-", "activations"], [57, 3, 0, "-", "conversions"], [57, 3, 0, "-", "creation"], [57, 3, 0, "-", "data_type"], [57, 3, 0, "-", "device"], [57, 3, 0, "-", "elementwise"], [57, 3, 0, "-", "general"], [57, 3, 0, "-", "gradients"], [57, 3, 0, "-", "image"], [57, 3, 0, "-", "layers"], [57, 3, 0, "-", "linear_algebra"], [57, 3, 0, "-", "losses"], [57, 3, 0, "-", "manipulation"], [57, 3, 0, "-", "norms"], [57, 3, 0, "-", "random"], [57, 3, 0, "-", "searching"], [57, 3, 0, "-", "set"], [57, 3, 0, "-", "sorting"], [57, 3, 0, "-", "statistical"], [57, 3, 0, "-", "utility"]], "ivy.data_classes.array.experimental.activations": [[57, 1, 1, "", "_ArrayWithActivationsExperimental"]], "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "celu"], [57, 0, 1, "", "elu"], [57, 0, 1, "", "hardshrink"], [57, 0, 1, "", "hardsilu"], [57, 0, 1, "", "hardtanh"], [57, 0, 1, "", "logit"], [57, 0, 1, "", "logsigmoid"], [57, 0, 1, "", "prelu"], [57, 0, 1, "", "relu6"], [57, 0, 1, "", "scaled_tanh"], [57, 0, 1, "", "selu"], [57, 0, 1, "", "silu"], [57, 0, 1, "", "softshrink"], [57, 0, 1, "", "tanhshrink"], [57, 0, 1, "", "threshold"], [57, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.array.experimental.conversions": [[57, 1, 1, "", "_ArrayWithConversionsExperimental"]], "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.creation": [[57, 1, 1, "", "_ArrayWithCreationExperimental"], [57, 2, 1, "", "polyval"]], "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "blackman_window"], [57, 0, 1, "", "eye_like"], [57, 0, 1, "", "mel_weight_matrix"], [57, 0, 1, "", "trilu"], [57, 0, 1, "", "unsorted_segment_mean"], [57, 0, 1, "", "unsorted_segment_min"], [57, 0, 1, "", "unsorted_segment_sum"]], "ivy.data_classes.array.experimental.data_type": [[57, 1, 1, "", "_ArrayWithData_typeExperimental"]], "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.device": [[57, 1, 1, "", "_ArrayWithDeviceExperimental"]], "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.elementwise": [[57, 1, 1, "", "_ArrayWithElementWiseExperimental"]], "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "allclose"], [57, 0, 1, "", "amax"], [57, 0, 1, "", "amin"], [57, 0, 1, "", "binarizer"], [57, 0, 1, "", "conj"], [57, 0, 1, "", "copysign"], [57, 0, 1, "", "count_nonzero"], [57, 0, 1, "", "diff"], [57, 0, 1, "", "digamma"], [57, 0, 1, "", "erfc"], [57, 0, 1, "", "erfinv"], [57, 0, 1, "", "fix"], [57, 0, 1, "", "float_power"], [57, 0, 1, "", "fmax"], [57, 0, 1, "", "fmod"], [57, 0, 1, "", "frexp"], [57, 0, 1, "", "gradient"], [57, 0, 1, "", "hypot"], [57, 0, 1, "", "isclose"], [57, 0, 1, "", "ldexp"], [57, 0, 1, "", "lerp"], [57, 0, 1, "", "lgamma"], [57, 0, 1, "", "modf"], [57, 0, 1, "", "nansum"], [57, 0, 1, "", "nextafter"], [57, 0, 1, "", "signbit"], [57, 0, 1, "", "sinc"], [57, 0, 1, "", "sparsify_tensor"], [57, 0, 1, "", "xlogy"], [57, 0, 1, "", "zeta"]], "ivy.data_classes.array.experimental.general": [[57, 1, 1, "", "_ArrayWithGeneralExperimental"]], "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "reduce"]], "ivy.data_classes.array.experimental.gradients": [[57, 1, 1, "", "_ArrayWithGradientsExperimental"]], "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.image": [[57, 1, 1, "", "_ArrayWithImageExperimental"]], "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.layers": [[57, 1, 1, "", "_ArrayWithLayersExperimental"]], "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "adaptive_avg_pool1d"], [57, 0, 1, "", "adaptive_avg_pool2d"], [57, 0, 1, "", "adaptive_max_pool2d"], [57, 0, 1, "", "adaptive_max_pool3d"], [57, 0, 1, "", "avg_pool1d"], [57, 0, 1, "", "avg_pool2d"], [57, 0, 1, "", "avg_pool3d"], [57, 0, 1, "", "dct"], [57, 0, 1, "", "dft"], [57, 0, 1, "", "embedding"], [57, 0, 1, "", "fft"], [57, 0, 1, "", "fft2"], [57, 0, 1, "", "idct"], [57, 0, 1, "", "ifft"], [57, 0, 1, "", "ifftn"], [57, 0, 1, "", "interpolate"], [57, 0, 1, "", "max_pool1d"], [57, 0, 1, "", "max_pool2d"], [57, 0, 1, "", "max_pool3d"], [57, 0, 1, "", "max_unpool1d"], [57, 0, 1, "", "reduce_window"], [57, 0, 1, "", "rfft"], [57, 0, 1, "", "rfftn"], [57, 0, 1, "", "sliding_window"], [57, 0, 1, "", "stft"]], "ivy.data_classes.array.experimental.linear_algebra": [[57, 1, 1, "", "_ArrayWithLinearAlgebraExperimental"]], "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "adjoint"], [57, 0, 1, "", "batched_outer"], [57, 0, 1, "", "cond"], [57, 0, 1, "", "diagflat"], [57, 0, 1, "", "dot"], [57, 0, 1, "", "eig"], [57, 0, 1, "", "eigh_tridiagonal"], [57, 0, 1, "", "eigvals"], [57, 0, 1, "", "general_inner_product"], [57, 0, 1, "", "higher_order_moment"], [57, 0, 1, "", "initialize_tucker"], [57, 0, 1, "", "kron"], [57, 0, 1, "", "make_svd_non_negative"], [57, 0, 1, "", "matrix_exp"], [57, 0, 1, "", "mode_dot"], [57, 0, 1, "", "multi_dot"], [57, 0, 1, "", "multi_mode_dot"], [57, 0, 1, "", "partial_tucker"], [57, 0, 1, "", "svd_flip"], [57, 0, 1, "", "tensor_train"], [57, 0, 1, "", "truncated_svd"], [57, 0, 1, "", "tt_matrix_to_tensor"], [57, 0, 1, "", "tucker"]], "ivy.data_classes.array.experimental.losses": [[57, 1, 1, "", "_ArrayWithLossesExperimental"]], "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "hinge_embedding_loss"], [57, 0, 1, "", "huber_loss"], [57, 0, 1, "", "kl_div"], [57, 0, 1, "", "l1_loss"], [57, 0, 1, "", "log_poisson_loss"], [57, 0, 1, "", "poisson_nll_loss"], [57, 0, 1, "", "smooth_l1_loss"], [57, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.array.experimental.manipulation": [[57, 1, 1, "", "_ArrayWithManipulationExperimental"]], "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "as_strided"], [57, 0, 1, "", "associative_scan"], [57, 0, 1, "", "atleast_1d"], [57, 0, 1, "", "atleast_2d"], [57, 0, 1, "", "atleast_3d"], [57, 0, 1, "", "column_stack"], [57, 0, 1, "", "concat_from_sequence"], [57, 0, 1, "", "dsplit"], [57, 0, 1, "", "dstack"], [57, 0, 1, "", "expand"], [57, 0, 1, "", "fill_diagonal"], [57, 0, 1, "", "flatten"], [57, 0, 1, "", "fliplr"], [57, 0, 1, "", "flipud"], [57, 0, 1, "", "fold"], [57, 0, 1, "", "heaviside"], [57, 0, 1, "", "hsplit"], [57, 0, 1, "", "hstack"], [57, 0, 1, "", "i0"], [57, 0, 1, "", "matricize"], [57, 0, 1, "", "moveaxis"], [57, 0, 1, "", "pad"], [57, 0, 1, "", "partial_fold"], [57, 0, 1, "", "partial_tensor_to_vec"], [57, 0, 1, "", "partial_unfold"], [57, 0, 1, "", "partial_vec_to_tensor"], [57, 0, 1, "", "put_along_axis"], [57, 0, 1, "", "rot90"], [57, 0, 1, "", "soft_thresholding"], [57, 0, 1, "", "take"], [57, 0, 1, "", "take_along_axis"], [57, 0, 1, "", "top_k"], [57, 0, 1, "", "trim_zeros"], [57, 0, 1, "", "unflatten"], [57, 0, 1, "", "unfold"], [57, 0, 1, "", "unique_consecutive"], [57, 0, 1, "", "vsplit"], [57, 0, 1, "", "vstack"]], "ivy.data_classes.array.experimental.norms": [[57, 1, 1, "", "_ArrayWithNormsExperimental"]], "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "batch_norm"], [57, 0, 1, "", "group_norm"], [57, 0, 1, "", "instance_norm"], [57, 0, 1, "", "l1_normalize"], [57, 0, 1, "", "l2_normalize"], [57, 0, 1, "", "lp_normalize"]], "ivy.data_classes.array.experimental.random": [[57, 1, 1, "", "_ArrayWithRandomExperimental"]], "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "bernoulli"], [57, 0, 1, "", "beta"], [57, 0, 1, "", "dirichlet"], [57, 0, 1, "", "gamma"], [57, 0, 1, "", "poisson"]], "ivy.data_classes.array.experimental.searching": [[57, 1, 1, "", "_ArrayWithSearchingExperimental"]], "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "unravel_index"]], "ivy.data_classes.array.experimental.set": [[57, 1, 1, "", "_ArrayWithSetExperimental"]], "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental": [[57, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.experimental.sorting": [[57, 1, 1, "", "_ArrayWithSortingExperimental"]], "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "lexsort"]], "ivy.data_classes.array.experimental.statistical": [[57, 1, 1, "", "_ArrayWithStatisticalExperimental"]], "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "bincount"], [57, 0, 1, "", "corrcoef"], [57, 0, 1, "", "cov"], [57, 0, 1, "", "cummax"], [57, 0, 1, "", "cummin"], [57, 0, 1, "", "histogram"], [57, 0, 1, "", "igamma"], [57, 0, 1, "", "median"], [57, 0, 1, "", "nanmean"], [57, 0, 1, "", "nanmedian"], [57, 0, 1, "", "nanmin"], [57, 0, 1, "", "nanprod"], [57, 0, 1, "", "quantile"]], "ivy.data_classes.array.experimental.utility": [[57, 1, 1, "", "_ArrayWithUtilityExperimental"]], "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental": [[57, 4, 1, "", "_abc_impl"], [57, 0, 1, "", "optional_get_element"]], "ivy.data_classes.array.general": [[58, 1, 1, "", "_ArrayWithGeneral"]], "ivy.data_classes.array.general._ArrayWithGeneral": [[58, 4, 1, "", "_abc_impl"], [58, 0, 1, "", "all_equal"], [58, 0, 1, "", "array_equal"], [58, 0, 1, "", "assert_supports_inplace"], [58, 0, 1, "", "clip_matrix_norm"], [58, 0, 1, "", "clip_vector_norm"], [58, 0, 1, "", "default"], [58, 0, 1, "", "einops_rearrange"], [58, 0, 1, "", "einops_reduce"], [58, 0, 1, "", "einops_repeat"], [58, 0, 1, "", "exists"], [58, 0, 1, "", "fourier_encode"], [58, 0, 1, "", "gather"], [58, 0, 1, "", "gather_nd"], [58, 0, 1, "", "get_num_dims"], [58, 0, 1, "", "has_nans"], [58, 0, 1, "", "inplace_decrement"], [58, 0, 1, "", "inplace_increment"], [58, 0, 1, "", "inplace_update"], [58, 0, 1, "", "is_array"], [58, 0, 1, "", "is_ivy_array"], [58, 0, 1, "", "is_ivy_container"], [58, 0, 1, "", "is_native_array"], [58, 0, 1, "", "isin"], [58, 0, 1, "", "scatter_flat"], [58, 0, 1, "", "scatter_nd"], [58, 0, 1, "", "stable_divide"], [58, 0, 1, "", "stable_pow"], [58, 0, 1, "", "supports_inplace_updates"], [58, 0, 1, "", "to_file"], [58, 0, 1, "", "to_list"], [58, 0, 1, "", "to_numpy"], [58, 0, 1, "", "to_scalar"], [58, 0, 1, "", "value_is_nan"]], "ivy.data_classes.array.gradients": [[59, 1, 1, "", "_ArrayWithGradients"]], "ivy.data_classes.array.gradients._ArrayWithGradients": [[59, 4, 1, "", "_abc_impl"], [59, 0, 1, "", "adam_step"], [59, 0, 1, "", "adam_update"], [59, 0, 1, "", "gradient_descent_update"], [59, 0, 1, "", "lamb_update"], [59, 0, 1, "", "lars_update"], [59, 0, 1, "", "optimizer_update"], [59, 0, 1, "", "stop_gradient"]], "ivy.data_classes.array.image": [[60, 1, 1, "", "_ArrayWithImage"]], "ivy.data_classes.array.image._ArrayWithImage": [[60, 4, 1, "", "_abc_impl"]], "ivy.data_classes.array.layers": [[61, 1, 1, "", "_ArrayWithLayers"]], "ivy.data_classes.array.layers._ArrayWithLayers": [[61, 4, 1, "", "_abc_impl"], [61, 0, 1, "", "conv1d"], [61, 0, 1, "", "conv1d_transpose"], [61, 0, 1, "", "conv2d"], [61, 0, 1, "", "conv2d_transpose"], [61, 0, 1, "", "conv3d"], [61, 0, 1, "", "conv3d_transpose"], [61, 0, 1, "", "depthwise_conv2d"], [61, 0, 1, "", "dropout"], [61, 0, 1, "", "dropout1d"], [61, 0, 1, "", "dropout2d"], [61, 0, 1, "", "dropout3d"], [61, 0, 1, "", "linear"], [61, 0, 1, "", "lstm_update"], [61, 0, 1, "", "multi_head_attention"], [61, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.array.linear_algebra": [[62, 1, 1, "", "_ArrayWithLinearAlgebra"]], "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra": [[62, 4, 1, "", "_abc_impl"], [62, 0, 1, "", "cholesky"], [62, 0, 1, "", "cross"], [62, 0, 1, "", "det"], [62, 0, 1, "", "diag"], [62, 0, 1, "", "diagonal"], [62, 0, 1, "", "eig"], [62, 0, 1, "", "eigh"], [62, 0, 1, "", "eigvalsh"], [62, 0, 1, "", "inner"], [62, 0, 1, "", "inv"], [62, 0, 1, "", "matmul"], [62, 0, 1, "", "matrix_norm"], [62, 0, 1, "", "matrix_power"], [62, 0, 1, "", "matrix_rank"], [62, 0, 1, "", "matrix_transpose"], [62, 0, 1, "", "outer"], [62, 0, 1, "", "pinv"], [62, 0, 1, "", "qr"], [62, 0, 1, "", "slogdet"], [62, 0, 1, "", "solve"], [62, 0, 1, "", "svd"], [62, 0, 1, "", "svdvals"], [62, 0, 1, "", "tensordot"], [62, 0, 1, "", "tensorsolve"], [62, 0, 1, "", "trace"], [62, 0, 1, "", "vander"], [62, 0, 1, "", "vecdot"], [62, 0, 1, "", "vector_norm"], [62, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.array.losses": [[63, 1, 1, "", "_ArrayWithLosses"]], "ivy.data_classes.array.losses._ArrayWithLosses": [[63, 4, 1, "", "_abc_impl"], [63, 0, 1, "", "binary_cross_entropy"], [63, 0, 1, "", "cross_entropy"], [63, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.array.manipulation": [[64, 1, 1, "", "_ArrayWithManipulation"]], "ivy.data_classes.array.manipulation._ArrayWithManipulation": [[64, 4, 1, "", "_abc_impl"], [64, 0, 1, "", "clip"], [64, 0, 1, "", "concat"], [64, 0, 1, "", "constant_pad"], [64, 0, 1, "", "expand_dims"], [64, 0, 1, "", "flip"], [64, 0, 1, "", "permute_dims"], [64, 0, 1, "", "repeat"], [64, 0, 1, "", "reshape"], [64, 0, 1, "", "roll"], [64, 0, 1, "", "split"], [64, 0, 1, "", "squeeze"], [64, 0, 1, "", "stack"], [64, 0, 1, "", "swapaxes"], [64, 0, 1, "", "tile"], [64, 0, 1, "", "unstack"], [64, 0, 1, "", "view"], [64, 0, 1, "", "zero_pad"]], "ivy.data_classes.array.norms": [[65, 1, 1, "", "_ArrayWithNorms"]], "ivy.data_classes.array.norms._ArrayWithNorms": [[65, 4, 1, "", "_abc_impl"], [65, 0, 1, "", "layer_norm"]], "ivy.data_classes.array.random": [[66, 1, 1, "", "_ArrayWithRandom"]], "ivy.data_classes.array.random._ArrayWithRandom": [[66, 4, 1, "", "_abc_impl"], [66, 0, 1, "", "multinomial"], [66, 0, 1, "", "randint"], [66, 0, 1, "", "random_normal"], [66, 0, 1, "", "random_uniform"], [66, 0, 1, "", "shuffle"]], "ivy.data_classes.array.searching": [[67, 1, 1, "", "_ArrayWithSearching"]], "ivy.data_classes.array.searching._ArrayWithSearching": [[67, 4, 1, "", "_abc_impl"], [67, 0, 1, "", "argmax"], [67, 0, 1, "", "argmin"], [67, 0, 1, "", "argwhere"], [67, 0, 1, "", "nonzero"], [67, 0, 1, "", "where"]], "ivy.data_classes.array.set": [[68, 1, 1, "", "_ArrayWithSet"]], "ivy.data_classes.array.set._ArrayWithSet": [[68, 4, 1, "", "_abc_impl"], [68, 0, 1, "", "unique_all"], [68, 0, 1, "", "unique_counts"], [68, 0, 1, "", "unique_inverse"], [68, 0, 1, "", "unique_values"]], "ivy.data_classes.array.sorting": [[69, 1, 1, "", "_ArrayWithSorting"]], "ivy.data_classes.array.sorting._ArrayWithSorting": [[69, 4, 1, "", "_abc_impl"], [69, 0, 1, "", "argsort"], [69, 0, 1, "", "msort"], [69, 0, 1, "", "searchsorted"], [69, 0, 1, "", "sort"]], "ivy.data_classes.array.statistical": [[70, 1, 1, "", "_ArrayWithStatistical"]], "ivy.data_classes.array.statistical._ArrayWithStatistical": [[70, 4, 1, "", "_abc_impl"], [70, 0, 1, "", "cumprod"], [70, 0, 1, "", "cumsum"], [70, 0, 1, "", "einsum"], [70, 0, 1, "", "max"], [70, 0, 1, "", "mean"], [70, 0, 1, "", "min"], [70, 0, 1, "", "prod"], [70, 0, 1, "", "std"], [70, 0, 1, "", "sum"], [70, 0, 1, "", "var"]], "ivy.data_classes.array.utility": [[71, 1, 1, "", "_ArrayWithUtility"]], "ivy.data_classes.array.utility._ArrayWithUtility": [[71, 4, 1, "", "_abc_impl"], [71, 0, 1, "", "all"], [71, 0, 1, "", "any"]], "ivy.data_classes.array.wrapping": [[72, 2, 1, "", "_wrap_function"], [72, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy.data_classes.container": [[73, 3, 0, "-", "activations"], [74, 3, 0, "-", "base"], [103, 3, 0, "-", "container"], [75, 3, 0, "-", "conversions"], [76, 3, 0, "-", "creation"], [77, 3, 0, "-", "data_type"], [78, 3, 0, "-", "device"], [79, 3, 0, "-", "elementwise"], [80, 3, 0, "-", "experimental"], [81, 3, 0, "-", "general"], [82, 3, 0, "-", "gradients"], [83, 3, 0, "-", "image"], [84, 3, 0, "-", "layers"], [85, 3, 0, "-", "linear_algebra"], [86, 3, 0, "-", "losses"], [87, 3, 0, "-", "manipulation"], [88, 3, 0, "-", "norms"], [89, 3, 0, "-", "random"], [90, 3, 0, "-", "searching"], [91, 3, 0, "-", "set"], [92, 3, 0, "-", "sorting"], [93, 3, 0, "-", "statistical"], [94, 3, 0, "-", "utility"], [95, 3, 0, "-", "wrapping"]], "ivy.data_classes.container.activations": [[73, 1, 1, "", "_ContainerWithActivations"]], "ivy.data_classes.container.activations._ContainerWithActivations": [[73, 4, 1, "", "_abc_impl"], [73, 0, 1, "", "_static_gelu"], [73, 0, 1, "", "_static_hardswish"], [73, 0, 1, "", "_static_leaky_relu"], [73, 0, 1, "", "_static_log_softmax"], [73, 0, 1, "", "_static_mish"], [73, 0, 1, "", "_static_relu"], [73, 0, 1, "", "_static_sigmoid"], [73, 0, 1, "", "_static_softmax"], [73, 0, 1, "", "_static_softplus"], [73, 0, 1, "", "gelu"], [73, 0, 1, "", "hardswish"], [73, 0, 1, "", "leaky_relu"], [73, 0, 1, "", "log_softmax"], [73, 0, 1, "", "mish"], [73, 0, 1, "", "relu"], [73, 0, 1, "", "sigmoid"], [73, 0, 1, "", "softmax"], [73, 0, 1, "", "softplus"]], "ivy.data_classes.container.base": [[74, 1, 1, "", "ContainerBase"], [74, 2, 1, "", "_is_jsonable"], [74, 2, 1, "", "_repr"]], "ivy.data_classes.container.base.ContainerBase": [[74, 0, 1, "", "__getitem__"], [74, 0, 1, "", "__init__"], [74, 0, 1, "", "__setitem__"], [74, 4, 1, "", "_abc_impl"], [74, 0, 1, "", "_cont_at_key_chains_input_as_dict"], [74, 0, 1, "", "_cont_at_key_chains_input_as_seq"], [74, 0, 1, "", "_cont_call_static_method_with_flexible_args"], [74, 0, 1, "", "_cont_concat_unify"], [74, 0, 1, "", "_cont_get_dev"], [74, 0, 1, "", "_cont_get_dtype"], [74, 0, 1, "", "_cont_get_shape"], [74, 0, 1, "", "_cont_get_shapes"], [74, 5, 1, "", "_cont_ivy"], [74, 0, 1, "", "_cont_mean_unify"], [74, 0, 1, "", "_cont_prune_key_chains_input_as_dict"], [74, 0, 1, "", "_cont_prune_key_chains_input_as_seq"], [74, 0, 1, "", "_cont_slice_keys"], [74, 0, 1, "", "_cont_sum_unify"], [74, 0, 1, "", "_get_queue_item"], [74, 0, 1, "", "cont_all_false"], [74, 0, 1, "", "cont_all_key_chains"], [74, 0, 1, "", "cont_all_true"], [74, 0, 1, "", "cont_as_bools"], [74, 0, 1, "", "cont_assert_contains_sub_container"], [74, 0, 1, "", "cont_assert_contains_sub_structure"], [74, 0, 1, "", "cont_assert_identical"], [74, 0, 1, "", "cont_assert_identical_structure"], [74, 0, 1, "", "cont_at_key_chain"], [74, 0, 1, "", "cont_at_key_chains"], [74, 0, 1, "", "cont_at_keys"], [74, 0, 1, "", "cont_combine"], [74, 0, 1, "", "cont_common_key_chains"], [74, 5, 1, "", "cont_config"], [74, 0, 1, "", "cont_contains_sub_container"], [74, 0, 1, "", "cont_contains_sub_structure"], [74, 0, 1, "", "cont_copy"], [74, 0, 1, "", "cont_create_if_absent"], [74, 0, 1, "", "cont_cutoff_at_depth"], [74, 0, 1, "", "cont_cutoff_at_height"], [74, 0, 1, "", "cont_deep_copy"], [74, 5, 1, "", "cont_dev"], [74, 5, 1, "", "cont_dev_str"], [74, 0, 1, "", "cont_diff"], [74, 5, 1, "", "cont_dtype"], [74, 0, 1, "", "cont_duplicate_array_keychains"], [74, 0, 1, "", "cont_find_sub_container"], [74, 0, 1, "", "cont_find_sub_structure"], [74, 0, 1, "", "cont_flatten_key_chain"], [74, 0, 1, "", "cont_flatten_key_chains"], [74, 0, 1, "", "cont_format_key_chains"], [74, 0, 1, "", "cont_from_disk_as_hdf5"], [74, 0, 1, "", "cont_from_disk_as_json"], [74, 0, 1, "", "cont_from_disk_as_pickled"], [74, 0, 1, "", "cont_from_flat_list"], [74, 0, 1, "", "cont_handle_inplace"], [74, 0, 1, "", "cont_has_key"], [74, 0, 1, "", "cont_has_key_chain"], [74, 0, 1, "", "cont_identical"], [74, 0, 1, "", "cont_identical_array_shapes"], [74, 0, 1, "", "cont_identical_configs"], [74, 0, 1, "", "cont_identical_structure"], [74, 0, 1, "", "cont_if_exists"], [74, 0, 1, "", "cont_inplace_update"], [74, 5, 1, "", "cont_ivy"], [74, 0, 1, "", "cont_key_chains_containing"], [74, 0, 1, "", "cont_list_join"], [74, 0, 1, "", "cont_list_stack"], [74, 0, 1, "", "cont_load"], [74, 0, 1, "", "cont_map"], [74, 0, 1, "", "cont_map_sub_conts"], [74, 5, 1, "", "cont_max_depth"], [74, 0, 1, "", "cont_multi_map"], [74, 0, 1, "", "cont_multi_map_in_function"], [74, 0, 1, "", "cont_num_arrays"], [74, 0, 1, "", "cont_overwrite_at_key_chain"], [74, 0, 1, "", "cont_overwrite_at_key_chains"], [74, 0, 1, "", "cont_prune_empty"], [74, 0, 1, "", "cont_prune_key_chain"], [74, 0, 1, "", "cont_prune_key_chains"], [74, 0, 1, "", "cont_prune_key_from_key_chains"], [74, 0, 1, "", "cont_prune_keys"], [74, 0, 1, "", "cont_prune_keys_from_key_chains"], [74, 0, 1, "", "cont_reduce"], [74, 0, 1, "", "cont_remove_key_length_limit"], [74, 0, 1, "", "cont_remove_print_limit"], [74, 0, 1, "", "cont_reshape_like"], [74, 0, 1, "", "cont_restructure"], [74, 0, 1, "", "cont_restructure_key_chains"], [74, 0, 1, "", "cont_save"], [74, 0, 1, "", "cont_set_at_key_chain"], [74, 0, 1, "", "cont_set_at_key_chains"], [74, 0, 1, "", "cont_set_at_keys"], [74, 5, 1, "", "cont_shape"], [74, 5, 1, "", "cont_shapes"], [74, 0, 1, "", "cont_show"], [74, 0, 1, "", "cont_show_sub_container"], [74, 0, 1, "", "cont_size_ordered_arrays"], [74, 0, 1, "", "cont_slice_keys"], [74, 0, 1, "", "cont_slice_via_key"], [74, 0, 1, "", "cont_sort_by_key"], [74, 0, 1, "", "cont_structural_diff"], [74, 0, 1, "", "cont_to_dict"], [74, 0, 1, "", "cont_to_disk_as_hdf5"], [74, 0, 1, "", "cont_to_disk_as_json"], [74, 0, 1, "", "cont_to_disk_as_pickled"], [74, 0, 1, "", "cont_to_flat_list"], [74, 0, 1, "", "cont_to_iterator"], [74, 0, 1, "", "cont_to_iterator_keys"], [74, 0, 1, "", "cont_to_iterator_values"], [74, 0, 1, "", "cont_to_jsonable"], [74, 0, 1, "", "cont_to_nested_list"], [74, 0, 1, "", "cont_to_raw"], [74, 0, 1, "", "cont_trim_key"], [74, 0, 1, "", "cont_try_kc"], [74, 0, 1, "", "cont_unify"], [74, 0, 1, "", "cont_unstack_conts"], [74, 0, 1, "", "cont_update_config"], [74, 0, 1, "", "cont_with_default_key_color"], [74, 0, 1, "", "cont_with_entries_as_lists"], [74, 0, 1, "", "cont_with_ivy_backend"], [74, 0, 1, "", "cont_with_key_length_limit"], [74, 0, 1, "", "cont_with_print_indent"], [74, 0, 1, "", "cont_with_print_limit"], [74, 0, 1, "", "cont_with_print_line_spacing"], [74, 5, 1, "", "dynamic_backend"], [74, 0, 1, "", "h5_file_size"], [74, 0, 1, "", "shuffle_h5_file"], [74, 0, 1, "", "split_conts"]], "ivy.data_classes.container.container": [[103, 1, 1, "", "Container"]], "ivy.data_classes.container.container.Container": [[103, 0, 1, "", "__abs__"], [103, 0, 1, "", "__add__"], [103, 0, 1, "", "__eq__"], [103, 0, 1, "", "__ge__"], [103, 0, 1, "", "__gt__"], [103, 0, 1, "", "__init__"], [103, 0, 1, "", "__le__"], [103, 0, 1, "", "__lt__"], [103, 0, 1, "", "__ne__"], [103, 0, 1, "", "__pow__"], [103, 0, 1, "", "__radd__"], [103, 0, 1, "", "__rrshift__"], [103, 0, 1, "", "__rshift__"], [103, 0, 1, "", "__rsub__"], [103, 0, 1, "", "__sub__"], [103, 0, 1, "", "__truediv__"], [103, 0, 1, "", "__xor__"]], "ivy.data_classes.container.conversions": [[75, 1, 1, "", "_ContainerWithConversions"]], "ivy.data_classes.container.conversions._ContainerWithConversions": [[75, 4, 1, "", "_abc_impl"], [75, 0, 1, "", "_static_to_ivy"], [75, 0, 1, "", "_static_to_native"], [75, 0, 1, "", "to_ivy"], [75, 0, 1, "", "to_native"]], "ivy.data_classes.container.creation": [[76, 1, 1, "", "_ContainerWithCreation"]], "ivy.data_classes.container.creation._ContainerWithCreation": [[76, 4, 1, "", "_abc_impl"], [76, 0, 1, "", "_static_arange"], [76, 0, 1, "", "_static_asarray"], [76, 0, 1, "", "_static_copy_array"], [76, 0, 1, "", "_static_empty"], [76, 0, 1, "", "_static_empty_like"], [76, 0, 1, "", "_static_eye"], [76, 0, 1, "", "_static_from_dlpack"], [76, 0, 1, "", "_static_full"], [76, 0, 1, "", "_static_full_like"], [76, 0, 1, "", "_static_linspace"], [76, 0, 1, "", "_static_logspace"], [76, 0, 1, "", "_static_meshgrid"], [76, 0, 1, "", "_static_native_array"], [76, 0, 1, "", "_static_one_hot"], [76, 0, 1, "", "_static_ones"], [76, 0, 1, "", "_static_ones_like"], [76, 0, 1, "", "_static_tril"], [76, 0, 1, "", "_static_triu"], [76, 0, 1, "", "_static_zeros"], [76, 0, 1, "", "_static_zeros_like"], [76, 0, 1, "", "asarray"], [76, 0, 1, "", "copy_array"], [76, 0, 1, "", "empty_like"], [76, 0, 1, "", "from_dlpack"], [76, 0, 1, "", "frombuffer"], [76, 0, 1, "", "full_like"], [76, 0, 1, "", "linspace"], [76, 0, 1, "", "logspace"], [76, 0, 1, "", "meshgrid"], [76, 0, 1, "", "native_array"], [76, 0, 1, "", "one_hot"], [76, 0, 1, "", "ones_like"], [76, 0, 1, "", "static_frombuffer"], [76, 0, 1, "", "static_triu_indices"], [76, 0, 1, "", "tril"], [76, 0, 1, "", "triu"], [76, 0, 1, "", "triu_indices"], [76, 0, 1, "", "zeros_like"]], "ivy.data_classes.container.data_type": [[77, 1, 1, "", "_ContainerWithDataTypes"]], "ivy.data_classes.container.data_type._ContainerWithDataTypes": [[77, 4, 1, "", "_abc_impl"], [77, 0, 1, "", "_static_astype"], [77, 0, 1, "", "_static_broadcast_arrays"], [77, 0, 1, "", "_static_broadcast_to"], [77, 0, 1, "", "_static_can_cast"], [77, 0, 1, "", "_static_default_complex_dtype"], [77, 0, 1, "", "_static_default_float_dtype"], [77, 0, 1, "", "_static_dtype"], [77, 0, 1, "", "_static_finfo"], [77, 0, 1, "", "_static_function_supported_dtypes"], [77, 0, 1, "", "_static_function_unsupported_dtypes"], [77, 0, 1, "", "_static_iinfo"], [77, 0, 1, "", "_static_is_bool_dtype"], [77, 0, 1, "", "_static_is_complex_dtype"], [77, 0, 1, "", "_static_is_float_dtype"], [77, 0, 1, "", "_static_is_int_dtype"], [77, 0, 1, "", "_static_is_uint_dtype"], [77, 0, 1, "", "_static_result_type"], [77, 0, 1, "", "astype"], [77, 0, 1, "", "broadcast_arrays"], [77, 0, 1, "", "broadcast_to"], [77, 0, 1, "", "can_cast"], [77, 0, 1, "", "dtype"], [77, 0, 1, "", "finfo"], [77, 0, 1, "", "iinfo"], [77, 0, 1, "", "is_bool_dtype"], [77, 0, 1, "", "is_complex_dtype"], [77, 0, 1, "", "is_float_dtype"], [77, 0, 1, "", "is_int_dtype"], [77, 0, 1, "", "is_uint_dtype"], [77, 0, 1, "", "result_type"]], "ivy.data_classes.container.device": [[78, 1, 1, "", "_ContainerWithDevice"]], "ivy.data_classes.container.device._ContainerWithDevice": [[78, 4, 1, "", "_abc_impl"], [78, 0, 1, "", "_static_dev"], [78, 0, 1, "", "_static_to_device"], [78, 0, 1, "", "dev"], [78, 0, 1, "", "to_device"]], "ivy.data_classes.container.elementwise": [[79, 1, 1, "", "_ContainerWithElementwise"]], "ivy.data_classes.container.elementwise._ContainerWithElementwise": [[79, 4, 1, "", "_abc_impl"], [79, 0, 1, "", "_static_abs"], [79, 0, 1, "", "_static_acos"], [79, 0, 1, "", "_static_acosh"], [79, 0, 1, "", "_static_add"], [79, 0, 1, "", "_static_asin"], [79, 0, 1, "", "_static_asinh"], [79, 0, 1, "", "_static_atan"], [79, 0, 1, "", "_static_atan2"], [79, 0, 1, "", "_static_atanh"], [79, 0, 1, "", "_static_bitwise_and"], [79, 0, 1, "", "_static_bitwise_invert"], [79, 0, 1, "", "_static_bitwise_left_shift"], [79, 0, 1, "", "_static_bitwise_or"], [79, 0, 1, "", "_static_bitwise_right_shift"], [79, 0, 1, "", "_static_bitwise_xor"], [79, 0, 1, "", "_static_ceil"], [79, 0, 1, "", "_static_cos"], [79, 0, 1, "", "_static_cosh"], [79, 0, 1, "", "_static_deg2rad"], [79, 0, 1, "", "_static_divide"], [79, 0, 1, "", "_static_equal"], [79, 0, 1, "", "_static_erf"], [79, 0, 1, "", "_static_exp"], [79, 0, 1, "", "_static_expm1"], [79, 0, 1, "", "_static_floor"], [79, 0, 1, "", "_static_floor_divide"], [79, 0, 1, "", "_static_greater"], [79, 0, 1, "", "_static_greater_equal"], [79, 0, 1, "", "_static_isfinite"], [79, 0, 1, "", "_static_isinf"], [79, 0, 1, "", "_static_isnan"], [79, 0, 1, "", "_static_isreal"], [79, 0, 1, "", "_static_lcm"], [79, 0, 1, "", "_static_less"], [79, 0, 1, "", "_static_less_equal"], [79, 0, 1, "", "_static_log"], [79, 0, 1, "", "_static_log10"], [79, 0, 1, "", "_static_log1p"], [79, 0, 1, "", "_static_log2"], [79, 0, 1, "", "_static_logaddexp"], [79, 0, 1, "", "_static_logical_and"], [79, 0, 1, "", "_static_logical_not"], [79, 0, 1, "", "_static_logical_or"], [79, 0, 1, "", "_static_logical_xor"], [79, 0, 1, "", "_static_maximum"], [79, 0, 1, "", "_static_minimum"], [79, 0, 1, "", "_static_multiply"], [79, 0, 1, "", "_static_negative"], [79, 0, 1, "", "_static_not_equal"], [79, 0, 1, "", "_static_positive"], [79, 0, 1, "", "_static_pow"], [79, 0, 1, "", "_static_rad2deg"], [79, 0, 1, "", "_static_reciprocal"], [79, 0, 1, "", "_static_remainder"], [79, 0, 1, "", "_static_round"], [79, 0, 1, "", "_static_sign"], [79, 0, 1, "", "_static_sin"], [79, 0, 1, "", "_static_sinh"], [79, 0, 1, "", "_static_sqrt"], [79, 0, 1, "", "_static_square"], [79, 0, 1, "", "_static_subtract"], [79, 0, 1, "", "_static_tan"], [79, 0, 1, "", "_static_tanh"], [79, 0, 1, "", "_static_trapz"], [79, 0, 1, "", "_static_trunc"], [79, 0, 1, "", "_static_trunc_divide"], [79, 0, 1, "", "abs"], [79, 0, 1, "", "acos"], [79, 0, 1, "", "acosh"], [79, 0, 1, "", "add"], [79, 0, 1, "", "angle"], [79, 0, 1, "", "asin"], [79, 0, 1, "", "asinh"], [79, 0, 1, "", "atan"], [79, 0, 1, "", "atan2"], [79, 0, 1, "", "atanh"], [79, 0, 1, "", "bitwise_and"], [79, 0, 1, "", "bitwise_invert"], [79, 0, 1, "", "bitwise_left_shift"], [79, 0, 1, "", "bitwise_or"], [79, 0, 1, "", "bitwise_right_shift"], [79, 0, 1, "", "bitwise_xor"], [79, 0, 1, "", "ceil"], [79, 0, 1, "", "cos"], [79, 0, 1, "", "cosh"], [79, 0, 1, "", "deg2rad"], [79, 0, 1, "", "divide"], [79, 0, 1, "", "equal"], [79, 0, 1, "", "erf"], [79, 0, 1, "", "exp"], [79, 0, 1, "", "exp2"], [79, 0, 1, "", "expm1"], [79, 0, 1, "", "floor"], [79, 0, 1, "", "floor_divide"], [79, 0, 1, "", "fmin"], [79, 0, 1, "", "gcd"], [79, 0, 1, "", "greater"], [79, 0, 1, "", "greater_equal"], [79, 0, 1, "", "imag"], [79, 0, 1, "", "isfinite"], [79, 0, 1, "", "isinf"], [79, 0, 1, "", "isnan"], [79, 0, 1, "", "isreal"], [79, 0, 1, "", "lcm"], [79, 0, 1, "", "less"], [79, 0, 1, "", "less_equal"], [79, 0, 1, "", "log"], [79, 0, 1, "", "log10"], [79, 0, 1, "", "log1p"], [79, 0, 1, "", "log2"], [79, 0, 1, "", "logaddexp"], [79, 0, 1, "", "logaddexp2"], [79, 0, 1, "", "logical_and"], [79, 0, 1, "", "logical_not"], [79, 0, 1, "", "logical_or"], [79, 0, 1, "", "logical_xor"], [79, 0, 1, "", "maximum"], [79, 0, 1, "", "minimum"], [79, 0, 1, "", "multiply"], [79, 0, 1, "", "nan_to_num"], [79, 0, 1, "", "negative"], [79, 0, 1, "", "not_equal"], [79, 0, 1, "", "positive"], [79, 0, 1, "", "pow"], [79, 0, 1, "", "rad2deg"], [79, 0, 1, "", "real"], [79, 0, 1, "", "reciprocal"], [79, 0, 1, "", "remainder"], [79, 0, 1, "", "round"], [79, 0, 1, "", "sign"], [79, 0, 1, "", "sin"], [79, 0, 1, "", "sinh"], [79, 0, 1, "", "sqrt"], [79, 0, 1, "", "square"], [79, 0, 1, "", "static_angle"], [79, 0, 1, "", "static_exp2"], [79, 0, 1, "", "static_fmin"], [79, 0, 1, "", "static_gcd"], [79, 0, 1, "", "static_imag"], [79, 0, 1, "", "static_logaddexp2"], [79, 0, 1, "", "static_nan_to_num"], [79, 0, 1, "", "static_real"], [79, 0, 1, "", "subtract"], [79, 0, 1, "", "tan"], [79, 0, 1, "", "tanh"], [79, 0, 1, "", "trapz"], [79, 0, 1, "", "trunc"], [79, 0, 1, "", "trunc_divide"]], "ivy.data_classes.container.experimental": [[80, 3, 0, "-", "activations"], [80, 3, 0, "-", "conversions"], [80, 3, 0, "-", "creation"], [80, 3, 0, "-", "data_type"], [80, 3, 0, "-", "device"], [80, 3, 0, "-", "elementwise"], [80, 3, 0, "-", "general"], [80, 3, 0, "-", "gradients"], [80, 3, 0, "-", "image"], [80, 3, 0, "-", "layers"], [80, 3, 0, "-", "linear_algebra"], [80, 3, 0, "-", "losses"], [80, 3, 0, "-", "manipulation"], [80, 3, 0, "-", "norms"], [80, 3, 0, "-", "random"], [80, 3, 0, "-", "searching"], [80, 3, 0, "-", "set"], [80, 3, 0, "-", "sorting"], [80, 3, 0, "-", "statistical"], [80, 3, 0, "-", "utility"]], "ivy.data_classes.container.experimental.activations": [[80, 1, 1, "", "_ContainerWithActivationExperimental"]], "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_celu"], [80, 0, 1, "", "_static_elu"], [80, 0, 1, "", "_static_hardshrink"], [80, 0, 1, "", "_static_hardsilu"], [80, 0, 1, "", "_static_hardtanh"], [80, 0, 1, "", "_static_scaled_tanh"], [80, 0, 1, "", "_static_silu"], [80, 0, 1, "", "_static_softshrink"], [80, 0, 1, "", "_static_tanhshrink"], [80, 0, 1, "", "_static_threshold"], [80, 0, 1, "", "celu"], [80, 0, 1, "", "elu"], [80, 0, 1, "", "hardshrink"], [80, 0, 1, "", "hardsilu"], [80, 0, 1, "", "hardtanh"], [80, 0, 1, "", "logit"], [80, 0, 1, "", "logsigmoid"], [80, 0, 1, "", "prelu"], [80, 0, 1, "", "relu6"], [80, 0, 1, "", "scaled_tanh"], [80, 0, 1, "", "selu"], [80, 0, 1, "", "silu"], [80, 0, 1, "", "softshrink"], [80, 0, 1, "", "static_logit"], [80, 0, 1, "", "static_logsigmoid"], [80, 0, 1, "", "static_prelu"], [80, 0, 1, "", "static_relu6"], [80, 0, 1, "", "static_selu"], [80, 0, 1, "", "static_thresholded_relu"], [80, 0, 1, "", "tanhshrink"], [80, 0, 1, "", "threshold"], [80, 0, 1, "", "thresholded_relu"]], "ivy.data_classes.container.experimental.conversions": [[80, 1, 1, "", "_ContainerWithConversionExperimental"]], "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.creation": [[80, 1, 1, "", "_ContainerWithCreationExperimental"]], "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_trilu"], [80, 0, 1, "", "blackman_window"], [80, 0, 1, "", "eye_like"], [80, 0, 1, "", "hamming_window"], [80, 0, 1, "", "hann_window"], [80, 0, 1, "", "kaiser_bessel_derived_window"], [80, 0, 1, "", "kaiser_window"], [80, 0, 1, "", "mel_weight_matrix"], [80, 0, 1, "", "polyval"], [80, 0, 1, "", "static_blackman_window"], [80, 0, 1, "", "static_eye_like"], [80, 0, 1, "", "static_hamming_window"], [80, 0, 1, "", "static_hann_window"], [80, 0, 1, "", "static_kaiser_bessel_derived_window"], [80, 0, 1, "", "static_kaiser_window"], [80, 0, 1, "", "static_mel_weight_matrix"], [80, 0, 1, "", "static_polyval"], [80, 0, 1, "", "static_tril_indices"], [80, 0, 1, "", "static_unsorted_segment_mean"], [80, 0, 1, "", "static_unsorted_segment_min"], [80, 0, 1, "", "static_unsorted_segment_sum"], [80, 0, 1, "", "static_vorbis_window"], [80, 0, 1, "", "tril_indices"], [80, 0, 1, "", "trilu"], [80, 0, 1, "", "unsorted_segment_mean"], [80, 0, 1, "", "unsorted_segment_min"], [80, 0, 1, "", "unsorted_segment_sum"], [80, 0, 1, "", "vorbis_window"]], "ivy.data_classes.container.experimental.data_type": [[80, 1, 1, "", "_ContainerWithData_typeExperimental"]], "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.device": [[80, 1, 1, "", "_ContainerWithDeviceExperimental"]], "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.elementwise": [[80, 1, 1, "", "_ContainerWithElementWiseExperimental"]], "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "allclose"], [80, 0, 1, "", "amax"], [80, 0, 1, "", "amin"], [80, 0, 1, "", "binarizer"], [80, 0, 1, "", "conj"], [80, 0, 1, "", "copysign"], [80, 0, 1, "", "count_nonzero"], [80, 0, 1, "", "diff"], [80, 0, 1, "", "digamma"], [80, 0, 1, "", "erfc"], [80, 0, 1, "", "erfinv"], [80, 0, 1, "", "fix"], [80, 0, 1, "", "float_power"], [80, 0, 1, "", "fmax"], [80, 0, 1, "", "fmod"], [80, 0, 1, "", "frexp"], [80, 0, 1, "", "gradient"], [80, 0, 1, "", "hypot"], [80, 0, 1, "", "isclose"], [80, 0, 1, "", "ldexp"], [80, 0, 1, "", "lerp"], [80, 0, 1, "", "modf"], [80, 0, 1, "", "nansum"], [80, 0, 1, "", "nextafter"], [80, 0, 1, "", "signbit"], [80, 0, 1, "", "sinc"], [80, 0, 1, "", "sparsify_tensor"], [80, 0, 1, "", "static_allclose"], [80, 0, 1, "", "static_amax"], [80, 0, 1, "", "static_amin"], [80, 0, 1, "", "static_binarizer"], [80, 0, 1, "", "static_conj"], [80, 0, 1, "", "static_copysign"], [80, 0, 1, "", "static_count_nonzero"], [80, 0, 1, "", "static_diff"], [80, 0, 1, "", "static_digamma"], [80, 0, 1, "", "static_erfc"], [80, 0, 1, "", "static_erfinv"], [80, 0, 1, "", "static_fix"], [80, 0, 1, "", "static_float_power"], [80, 0, 1, "", "static_fmax"], [80, 0, 1, "", "static_fmod"], [80, 0, 1, "", "static_frexp"], [80, 0, 1, "", "static_gradient"], [80, 0, 1, "", "static_hypot"], [80, 0, 1, "", "static_isclose"], [80, 0, 1, "", "static_ldexp"], [80, 0, 1, "", "static_lerp"], [80, 0, 1, "", "static_modf"], [80, 0, 1, "", "static_nansum"], [80, 0, 1, "", "static_nextafter"], [80, 0, 1, "", "static_signbit"], [80, 0, 1, "", "static_sinc"], [80, 0, 1, "", "static_sparsify_tensor"], [80, 0, 1, "", "static_xlogy"], [80, 0, 1, "", "static_zeta"], [80, 0, 1, "", "xlogy"], [80, 0, 1, "", "zeta"]], "ivy.data_classes.container.experimental.general": [[80, 1, 1, "", "_ContainerWithGeneralExperimental"]], "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_reduce"], [80, 0, 1, "", "reduce"]], "ivy.data_classes.container.experimental.gradients": [[80, 1, 1, "", "_ContainerWithGradientsExperimental"]], "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.image": [[80, 1, 1, "", "_ContainerWithImageExperimental"]], "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.layers": [[80, 1, 1, "", "_ContainerWithLayersExperimental"]], "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_fft"], [80, 0, 1, "", "_static_sliding_window"], [80, 0, 1, "", "adaptive_avg_pool1d"], [80, 0, 1, "", "adaptive_avg_pool2d"], [80, 0, 1, "", "adaptive_max_pool2d"], [80, 0, 1, "", "adaptive_max_pool3d"], [80, 0, 1, "", "avg_pool1d"], [80, 0, 1, "", "avg_pool2d"], [80, 0, 1, "", "avg_pool3d"], [80, 0, 1, "", "dct"], [80, 0, 1, "", "dft"], [80, 0, 1, "", "embedding"], [80, 0, 1, "", "fft"], [80, 0, 1, "", "idct"], [80, 0, 1, "", "ifft"], [80, 0, 1, "", "ifftn"], [80, 0, 1, "", "interpolate"], [80, 0, 1, "", "max_pool1d"], [80, 0, 1, "", "max_pool2d"], [80, 0, 1, "", "max_pool3d"], [80, 0, 1, "", "max_unpool1d"], [80, 0, 1, "", "rfft"], [80, 0, 1, "", "rfftn"], [80, 0, 1, "", "sliding_window"], [80, 0, 1, "", "static_adaptive_avg_pool1d"], [80, 0, 1, "", "static_adaptive_avg_pool2d"], [80, 0, 1, "", "static_adaptive_max_pool2d"], [80, 0, 1, "", "static_adaptive_max_pool3d"], [80, 0, 1, "", "static_avg_pool1d"], [80, 0, 1, "", "static_avg_pool2d"], [80, 0, 1, "", "static_avg_pool3d"], [80, 0, 1, "", "static_dct"], [80, 0, 1, "", "static_dft"], [80, 0, 1, "", "static_embedding"], [80, 0, 1, "", "static_idct"], [80, 0, 1, "", "static_ifft"], [80, 0, 1, "", "static_ifftn"], [80, 0, 1, "", "static_interpolate"], [80, 0, 1, "", "static_max_pool1d"], [80, 0, 1, "", "static_max_pool2d"], [80, 0, 1, "", "static_max_pool3d"], [80, 0, 1, "", "static_max_unpool1d"], [80, 0, 1, "", "static_rfft"], [80, 0, 1, "", "static_rfftn"], [80, 0, 1, "", "static_rnn"], [80, 0, 1, "", "static_stft"], [80, 0, 1, "", "stft"]], "ivy.data_classes.container.experimental.linear_algebra": [[80, 1, 1, "", "_ContainerWithLinearAlgebraExperimental"]], "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "adjoint"], [80, 0, 1, "", "batched_outer"], [80, 0, 1, "", "cond"], [80, 0, 1, "", "diagflat"], [80, 0, 1, "", "dot"], [80, 0, 1, "", "eig"], [80, 0, 1, "", "eigh_tridiagonal"], [80, 0, 1, "", "eigvals"], [80, 0, 1, "", "higher_order_moment"], [80, 0, 1, "", "initialize_tucker"], [80, 0, 1, "", "kron"], [80, 0, 1, "", "make_svd_non_negative"], [80, 0, 1, "", "matrix_exp"], [80, 0, 1, "", "mode_dot"], [80, 0, 1, "", "multi_dot"], [80, 0, 1, "", "multi_mode_dot"], [80, 0, 1, "", "partial_tucker"], [80, 0, 1, "", "static_adjoint"], [80, 0, 1, "", "static_batched_outer"], [80, 0, 1, "", "static_cond"], [80, 0, 1, "", "static_diagflat"], [80, 0, 1, "", "static_dot"], [80, 0, 1, "", "static_eig"], [80, 0, 1, "", "static_eigh_tridiagonal"], [80, 0, 1, "", "static_eigvals"], [80, 0, 1, "", "static_higher_order_moment"], [80, 0, 1, "", "static_initialize_tucker"], [80, 0, 1, "", "static_kron"], [80, 0, 1, "", "static_make_svd_non_negative"], [80, 0, 1, "", "static_matrix_exp"], [80, 0, 1, "", "static_mode_dot"], [80, 0, 1, "", "static_multi_dot"], [80, 0, 1, "", "static_multi_mode_dot"], [80, 0, 1, "", "static_partial_tucker"], [80, 0, 1, "", "static_svd_flip"], [80, 0, 1, "", "static_tensor_train"], [80, 0, 1, "", "static_truncated_svd"], [80, 0, 1, "", "static_tt_matrix_to_tensor"], [80, 0, 1, "", "static_tucker"], [80, 0, 1, "", "svd_flip"], [80, 0, 1, "", "tensor_train"], [80, 0, 1, "", "truncated_svd"], [80, 0, 1, "", "tt_matrix_to_tensor"], [80, 0, 1, "", "tucker"]], "ivy.data_classes.container.experimental.losses": [[80, 1, 1, "", "_ContainerWithLossesExperimental"]], "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_hinge_embedding_loss"], [80, 0, 1, "", "_static_huber_loss"], [80, 0, 1, "", "_static_kl_div"], [80, 0, 1, "", "_static_l1_loss"], [80, 0, 1, "", "_static_log_poisson_loss"], [80, 0, 1, "", "_static_poisson_nll_loss"], [80, 0, 1, "", "_static_smooth_l1_loss"], [80, 0, 1, "", "_static_soft_margin_loss"], [80, 0, 1, "", "hinge_embedding_loss"], [80, 0, 1, "", "huber_loss"], [80, 0, 1, "", "kl_div"], [80, 0, 1, "", "l1_loss"], [80, 0, 1, "", "log_poisson_loss"], [80, 0, 1, "", "poisson_nll_loss"], [80, 0, 1, "", "smooth_l1_loss"], [80, 0, 1, "", "soft_margin_loss"]], "ivy.data_classes.container.experimental.manipulation": [[80, 1, 1, "", "_ContainerWithManipulationExperimental"], [80, 2, 1, "", "concat_from_sequence"]], "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_fill_diagonal"], [80, 0, 1, "", "_static_put_along_axis"], [80, 0, 1, "", "_static_take"], [80, 0, 1, "", "_static_trim_zeros"], [80, 0, 1, "", "_static_unflatten"], [80, 0, 1, "", "_static_unique_consecutive"], [80, 0, 1, "", "as_strided"], [80, 0, 1, "", "associative_scan"], [80, 0, 1, "", "atleast_1d"], [80, 0, 1, "", "atleast_2d"], [80, 0, 1, "", "atleast_3d"], [80, 0, 1, "", "broadcast_shapes"], [80, 0, 1, "", "column_stack"], [80, 0, 1, "", "concat_from_sequence"], [80, 0, 1, "", "dsplit"], [80, 0, 1, "", "dstack"], [80, 0, 1, "", "expand"], [80, 0, 1, "", "fill_diagonal"], [80, 0, 1, "", "flatten"], [80, 0, 1, "", "fliplr"], [80, 0, 1, "", "flipud"], [80, 0, 1, "", "fold"], [80, 0, 1, "", "heaviside"], [80, 0, 1, "", "hsplit"], [80, 0, 1, "", "hstack"], [80, 0, 1, "", "i0"], [80, 0, 1, "", "matricize"], [80, 0, 1, "", "moveaxis"], [80, 0, 1, "", "pad"], [80, 0, 1, "", "partial_fold"], [80, 0, 1, "", "partial_tensor_to_vec"], [80, 0, 1, "", "partial_unfold"], [80, 0, 1, "", "partial_vec_to_tensor"], [80, 0, 1, "", "put_along_axis"], [80, 0, 1, "", "rot90"], [80, 0, 1, "", "soft_thresholding"], [80, 0, 1, "", "static_as_strided"], [80, 0, 1, "", "static_atleast_1d"], [80, 0, 1, "", "static_atleast_2d"], [80, 0, 1, "", "static_atleast_3d"], [80, 0, 1, "", "static_broadcast_shapes"], [80, 0, 1, "", "static_column_stack"], [80, 0, 1, "", "static_concat_from_sequence"], [80, 0, 1, "", "static_dsplit"], [80, 0, 1, "", "static_dstack"], [80, 0, 1, "", "static_expand"], [80, 0, 1, "", "static_flatten"], [80, 0, 1, "", "static_fliplr"], [80, 0, 1, "", "static_flipud"], [80, 0, 1, "", "static_fold"], [80, 0, 1, "", "static_heaviside"], [80, 0, 1, "", "static_hsplit"], [80, 0, 1, "", "static_hstack"], [80, 0, 1, "", "static_i0"], [80, 0, 1, "", "static_matricize"], [80, 0, 1, "", "static_moveaxis"], [80, 0, 1, "", "static_pad"], [80, 0, 1, "", "static_partial_fold"], [80, 0, 1, "", "static_partial_tensor_to_vec"], [80, 0, 1, "", "static_partial_unfold"], [80, 0, 1, "", "static_partial_vec_to_tensor"], [80, 0, 1, "", "static_rot90"], [80, 0, 1, "", "static_soft_thresholding"], [80, 0, 1, "", "static_take_along_axis"], [80, 0, 1, "", "static_top_k"], [80, 0, 1, "", "static_unfold"], [80, 0, 1, "", "static_vsplit"], [80, 0, 1, "", "static_vstack"], [80, 0, 1, "", "take"], [80, 0, 1, "", "take_along_axis"], [80, 0, 1, "", "top_k"], [80, 0, 1, "", "trim_zeros"], [80, 0, 1, "", "unflatten"], [80, 0, 1, "", "unfold"], [80, 0, 1, "", "unique_consecutive"], [80, 0, 1, "", "vsplit"], [80, 0, 1, "", "vstack"]], "ivy.data_classes.container.experimental.norms": [[80, 1, 1, "", "_ContainerWithNormsExperimental"]], "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "batch_norm"], [80, 0, 1, "", "group_norm"], [80, 0, 1, "", "instance_norm"], [80, 0, 1, "", "l1_normalize"], [80, 0, 1, "", "l2_normalize"], [80, 0, 1, "", "lp_normalize"], [80, 0, 1, "", "static_batch_norm"], [80, 0, 1, "", "static_group_norm"], [80, 0, 1, "", "static_instance_norm"], [80, 0, 1, "", "static_l1_normalize"], [80, 0, 1, "", "static_l2_normalize"], [80, 0, 1, "", "static_lp_normalize"]], "ivy.data_classes.container.experimental.random": [[80, 1, 1, "", "_ContainerWithRandomExperimental"]], "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "bernoulli"], [80, 0, 1, "", "beta"], [80, 0, 1, "", "dirichlet"], [80, 0, 1, "", "gamma"], [80, 0, 1, "", "poisson"], [80, 0, 1, "", "static_bernoulli"], [80, 0, 1, "", "static_beta"], [80, 0, 1, "", "static_dirichlet"], [80, 0, 1, "", "static_gamma"], [80, 0, 1, "", "static_poisson"]], "ivy.data_classes.container.experimental.searching": [[80, 1, 1, "", "_ContainerWithSearchingExperimental"]], "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "static_unravel_index"], [80, 0, 1, "", "unravel_index"]], "ivy.data_classes.container.experimental.set": [[80, 1, 1, "", "_ContainerWithSetExperimental"]], "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental": [[80, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.experimental.sorting": [[80, 1, 1, "", "_ContainerWithSortingExperimental"]], "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "invert_permutation"], [80, 0, 1, "", "lexsort"], [80, 0, 1, "", "static_invert_permutation"], [80, 0, 1, "", "static_lexsort"]], "ivy.data_classes.container.experimental.statistical": [[80, 1, 1, "", "_ContainerWithStatisticalExperimental"]], "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "_static_cummax"], [80, 0, 1, "", "_static_cummin"], [80, 0, 1, "", "_static_nanmin"], [80, 0, 1, "", "bincount"], [80, 0, 1, "", "corrcoef"], [80, 0, 1, "", "cov"], [80, 0, 1, "", "cummax"], [80, 0, 1, "", "cummin"], [80, 0, 1, "", "histogram"], [80, 0, 1, "", "igamma"], [80, 0, 1, "", "lgamma"], [80, 0, 1, "", "median"], [80, 0, 1, "", "nanmean"], [80, 0, 1, "", "nanmedian"], [80, 0, 1, "", "nanmin"], [80, 0, 1, "", "nanprod"], [80, 0, 1, "", "quantile"], [80, 0, 1, "", "static_bincount"], [80, 0, 1, "", "static_corrcoef"], [80, 0, 1, "", "static_cov"], [80, 0, 1, "", "static_histogram"], [80, 0, 1, "", "static_igamma"], [80, 0, 1, "", "static_lgamma"], [80, 0, 1, "", "static_median"], [80, 0, 1, "", "static_nanmean"], [80, 0, 1, "", "static_nanmedian"], [80, 0, 1, "", "static_nanprod"], [80, 0, 1, "", "static_quantile"]], "ivy.data_classes.container.experimental.utility": [[80, 1, 1, "", "_ContainerWithUtilityExperimental"]], "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental": [[80, 4, 1, "", "_abc_impl"], [80, 0, 1, "", "optional_get_element"], [80, 0, 1, "", "static_optional_get_element"]], "ivy.data_classes.container.general": [[81, 1, 1, "", "_ContainerWithGeneral"]], "ivy.data_classes.container.general._ContainerWithGeneral": [[81, 4, 1, "", "_abc_impl"], [81, 0, 1, "", "_static_all_equal"], [81, 0, 1, "", "_static_array_equal"], [81, 0, 1, "", "_static_assert_supports_inplace"], [81, 0, 1, "", "_static_clip_matrix_norm"], [81, 0, 1, "", "_static_clip_vector_norm"], [81, 0, 1, "", "_static_einops_rearrange"], [81, 0, 1, "", "_static_einops_reduce"], [81, 0, 1, "", "_static_einops_repeat"], [81, 0, 1, "", "_static_exists"], [81, 0, 1, "", "_static_fourier_encode"], [81, 0, 1, "", "_static_gather"], [81, 0, 1, "", "_static_gather_nd"], [81, 0, 1, "", "_static_get_num_dims"], [81, 0, 1, "", "_static_has_nans"], [81, 0, 1, "", "_static_inplace_decrement"], [81, 0, 1, "", "_static_inplace_increment"], [81, 0, 1, "", "_static_inplace_update"], [81, 0, 1, "", "_static_is_array"], [81, 0, 1, "", "_static_is_ivy_array"], [81, 0, 1, "", "_static_is_native_array"], [81, 0, 1, "", "_static_scatter_flat"], [81, 0, 1, "", "_static_scatter_nd"], [81, 0, 1, "", "_static_size"], [81, 0, 1, "", "_static_stable_divide"], [81, 0, 1, "", "_static_stable_pow"], [81, 0, 1, "", "_static_supports_inplace_updates"], [81, 0, 1, "", "_static_to_list"], [81, 0, 1, "", "_static_to_numpy"], [81, 0, 1, "", "_static_to_scalar"], [81, 0, 1, "", "_static_value_is_nan"], [81, 0, 1, "", "all_equal"], [81, 0, 1, "", "array_equal"], [81, 0, 1, "", "assert_supports_inplace"], [81, 0, 1, "", "clip_matrix_norm"], [81, 0, 1, "", "clip_vector_norm"], [81, 0, 1, "", "einops_rearrange"], [81, 0, 1, "", "einops_reduce"], [81, 0, 1, "", "einops_repeat"], [81, 0, 1, "", "exists"], [81, 0, 1, "", "fourier_encode"], [81, 0, 1, "", "gather"], [81, 0, 1, "", "gather_nd"], [81, 0, 1, "", "get_num_dims"], [81, 0, 1, "", "has_nans"], [81, 0, 1, "", "inplace_decrement"], [81, 0, 1, "", "inplace_increment"], [81, 0, 1, "", "inplace_update"], [81, 0, 1, "", "is_array"], [81, 0, 1, "", "is_ivy_array"], [81, 0, 1, "", "is_native_array"], [81, 0, 1, "", "isin"], [81, 0, 1, "", "itemsize"], [81, 0, 1, "", "scatter_flat"], [81, 0, 1, "", "scatter_nd"], [81, 0, 1, "", "size"], [81, 0, 1, "", "stable_divide"], [81, 0, 1, "", "stable_pow"], [81, 0, 1, "", "static_isin"], [81, 0, 1, "", "static_itemsize"], [81, 0, 1, "", "static_strides"], [81, 0, 1, "", "strides"], [81, 0, 1, "", "supports_inplace_updates"], [81, 0, 1, "", "to_list"], [81, 0, 1, "", "to_numpy"], [81, 0, 1, "", "to_scalar"], [81, 0, 1, "", "value_is_nan"]], "ivy.data_classes.container.gradients": [[82, 1, 1, "", "_ContainerWithGradients"]], "ivy.data_classes.container.gradients._ContainerWithGradients": [[82, 4, 1, "", "_abc_impl"], [82, 0, 1, "", "_static_stop_gradient"], [82, 0, 1, "", "adam_step"], [82, 0, 1, "", "adam_update"], [82, 0, 1, "", "gradient_descent_update"], [82, 0, 1, "", "lamb_update"], [82, 0, 1, "", "lars_update"], [82, 0, 1, "", "optimizer_update"], [82, 0, 1, "", "stop_gradient"]], "ivy.data_classes.container.image": [[83, 1, 1, "", "_ContainerWithImage"]], "ivy.data_classes.container.image._ContainerWithImage": [[83, 4, 1, "", "_abc_impl"]], "ivy.data_classes.container.layers": [[84, 1, 1, "", "_ContainerWithLayers"]], "ivy.data_classes.container.layers._ContainerWithLayers": [[84, 4, 1, "", "_abc_impl"], [84, 0, 1, "", "_static_conv1d"], [84, 0, 1, "", "_static_conv1d_transpose"], [84, 0, 1, "", "_static_conv2d"], [84, 0, 1, "", "_static_conv2d_transpose"], [84, 0, 1, "", "_static_conv3d"], [84, 0, 1, "", "_static_conv3d_transpose"], [84, 0, 1, "", "_static_depthwise_conv2d"], [84, 0, 1, "", "_static_dropout"], [84, 0, 1, "", "_static_dropout1d"], [84, 0, 1, "", "_static_dropout2d"], [84, 0, 1, "", "_static_dropout3d"], [84, 0, 1, "", "_static_linear"], [84, 0, 1, "", "_static_lstm_update"], [84, 0, 1, "", "_static_multi_head_attention"], [84, 0, 1, "", "_static_reduce_window"], [84, 0, 1, "", "_static_scaled_dot_product_attention"], [84, 0, 1, "", "conv1d"], [84, 0, 1, "", "conv1d_transpose"], [84, 0, 1, "", "conv2d"], [84, 0, 1, "", "conv2d_transpose"], [84, 0, 1, "", "conv3d"], [84, 0, 1, "", "conv3d_transpose"], [84, 0, 1, "", "depthwise_conv2d"], [84, 0, 1, "", "dropout"], [84, 0, 1, "", "dropout1d"], [84, 0, 1, "", "dropout2d"], [84, 0, 1, "", "dropout3d"], [84, 0, 1, "", "linear"], [84, 0, 1, "", "lstm_update"], [84, 0, 1, "", "multi_head_attention"], [84, 0, 1, "", "reduce_window"], [84, 0, 1, "", "scaled_dot_product_attention"]], "ivy.data_classes.container.linear_algebra": [[85, 1, 1, "", "_ContainerWithLinearAlgebra"]], "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra": [[85, 4, 1, "", "_abc_impl"], [85, 0, 1, "", "_static_cholesky"], [85, 0, 1, "", "_static_cross"], [85, 0, 1, "", "_static_det"], [85, 0, 1, "", "_static_diag"], [85, 0, 1, "", "_static_diagonal"], [85, 0, 1, "", "_static_eigh"], [85, 0, 1, "", "_static_eigvalsh"], [85, 0, 1, "", "_static_inner"], [85, 0, 1, "", "_static_inv"], [85, 0, 1, "", "_static_matmul"], [85, 0, 1, "", "_static_matrix_norm"], [85, 0, 1, "", "_static_matrix_power"], [85, 0, 1, "", "_static_matrix_rank"], [85, 0, 1, "", "_static_matrix_transpose"], [85, 0, 1, "", "_static_outer"], [85, 0, 1, "", "_static_pinv"], [85, 0, 1, "", "_static_qr"], [85, 0, 1, "", "_static_slogdet"], [85, 0, 1, "", "_static_solve"], [85, 0, 1, "", "_static_svd"], [85, 0, 1, "", "_static_svdvals"], [85, 0, 1, "", "_static_tensordot"], [85, 0, 1, "", "_static_tensorsolve"], [85, 0, 1, "", "_static_trace"], [85, 0, 1, "", "_static_vander"], [85, 0, 1, "", "_static_vecdot"], [85, 0, 1, "", "_static_vector_norm"], [85, 0, 1, "", "_static_vector_to_skew_symmetric_matrix"], [85, 0, 1, "", "cholesky"], [85, 0, 1, "", "cross"], [85, 0, 1, "", "det"], [85, 0, 1, "", "diag"], [85, 0, 1, "", "diagonal"], [85, 0, 1, "", "eigh"], [85, 0, 1, "", "eigvalsh"], [85, 0, 1, "", "general_inner_product"], [85, 0, 1, "", "inner"], [85, 0, 1, "", "inv"], [85, 0, 1, "", "matmul"], [85, 0, 1, "", "matrix_norm"], [85, 0, 1, "", "matrix_power"], [85, 0, 1, "", "matrix_rank"], [85, 0, 1, "", "matrix_transpose"], [85, 0, 1, "", "outer"], [85, 0, 1, "", "pinv"], [85, 0, 1, "", "qr"], [85, 0, 1, "", "slogdet"], [85, 0, 1, "", "solve"], [85, 0, 1, "", "static_general_inner_product"], [85, 0, 1, "", "svd"], [85, 0, 1, "", "svdvals"], [85, 0, 1, "", "tensordot"], [85, 0, 1, "", "tensorsolve"], [85, 0, 1, "", "trace"], [85, 0, 1, "", "vander"], [85, 0, 1, "", "vecdot"], [85, 0, 1, "", "vector_norm"], [85, 0, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.data_classes.container.losses": [[86, 1, 1, "", "_ContainerWithLosses"]], "ivy.data_classes.container.losses._ContainerWithLosses": [[86, 4, 1, "", "_abc_impl"], [86, 0, 1, "", "_static_binary_cross_entropy"], [86, 0, 1, "", "_static_cross_entropy"], [86, 0, 1, "", "_static_sparse_cross_entropy"], [86, 0, 1, "", "binary_cross_entropy"], [86, 0, 1, "", "cross_entropy"], [86, 0, 1, "", "sparse_cross_entropy"]], "ivy.data_classes.container.manipulation": [[87, 1, 1, "", "_ContainerWithManipulation"]], "ivy.data_classes.container.manipulation._ContainerWithManipulation": [[87, 4, 1, "", "_abc_impl"], [87, 0, 1, "", "_static_clip"], [87, 0, 1, "", "_static_concat"], [87, 0, 1, "", "_static_constant_pad"], [87, 0, 1, "", "_static_expand_dims"], [87, 0, 1, "", "_static_flip"], [87, 0, 1, "", "_static_permute_dims"], [87, 0, 1, "", "_static_repeat"], [87, 0, 1, "", "_static_reshape"], [87, 0, 1, "", "_static_roll"], [87, 0, 1, "", "_static_split"], [87, 0, 1, "", "_static_squeeze"], [87, 0, 1, "", "_static_stack"], [87, 0, 1, "", "_static_swapaxes"], [87, 0, 1, "", "_static_tile"], [87, 0, 1, "", "_static_unstack"], [87, 0, 1, "", "_static_zero_pad"], [87, 0, 1, "", "clip"], [87, 0, 1, "", "concat"], [87, 0, 1, "", "constant_pad"], [87, 0, 1, "", "expand_dims"], [87, 0, 1, "", "flip"], [87, 0, 1, "", "permute_dims"], [87, 0, 1, "", "repeat"], [87, 0, 1, "", "reshape"], [87, 0, 1, "", "roll"], [87, 0, 1, "", "split"], [87, 0, 1, "", "squeeze"], [87, 0, 1, "", "stack"], [87, 0, 1, "", "swapaxes"], [87, 0, 1, "", "tile"], [87, 0, 1, "", "unstack"], [87, 0, 1, "", "zero_pad"]], "ivy.data_classes.container.norms": [[88, 1, 1, "", "_ContainerWithNorms"]], "ivy.data_classes.container.norms._ContainerWithNorms": [[88, 4, 1, "", "_abc_impl"], [88, 0, 1, "", "layer_norm"]], "ivy.data_classes.container.random": [[89, 1, 1, "", "_ContainerWithRandom"]], "ivy.data_classes.container.random._ContainerWithRandom": [[89, 4, 1, "", "_abc_impl"], [89, 0, 1, "", "_static_multinomial"], [89, 0, 1, "", "_static_randint"], [89, 0, 1, "", "_static_random_normal"], [89, 0, 1, "", "_static_random_uniform"], [89, 0, 1, "", "_static_shuffle"], [89, 0, 1, "", "multinomial"], [89, 0, 1, "", "randint"], [89, 0, 1, "", "random_normal"], [89, 0, 1, "", "random_uniform"], [89, 0, 1, "", "shuffle"]], "ivy.data_classes.container.searching": [[90, 1, 1, "", "_ContainerWithSearching"]], "ivy.data_classes.container.searching._ContainerWithSearching": [[90, 4, 1, "", "_abc_impl"], [90, 0, 1, "", "_static_argmax"], [90, 0, 1, "", "_static_argmin"], [90, 0, 1, "", "_static_argwhere"], [90, 0, 1, "", "_static_nonzero"], [90, 0, 1, "", "_static_where"], [90, 0, 1, "", "argmax"], [90, 0, 1, "", "argmin"], [90, 0, 1, "", "argwhere"], [90, 0, 1, "", "nonzero"], [90, 0, 1, "", "where"]], "ivy.data_classes.container.set": [[91, 1, 1, "", "_ContainerWithSet"]], "ivy.data_classes.container.set._ContainerWithSet": [[91, 4, 1, "", "_abc_impl"], [91, 0, 1, "", "_static_unique_all"], [91, 0, 1, "", "_static_unique_counts"], [91, 0, 1, "", "_static_unique_inverse"], [91, 0, 1, "", "_static_unique_values"], [91, 0, 1, "", "unique_all"], [91, 0, 1, "", "unique_counts"], [91, 0, 1, "", "unique_inverse"], [91, 0, 1, "", "unique_values"]], "ivy.data_classes.container.sorting": [[92, 1, 1, "", "_ContainerWithSorting"]], "ivy.data_classes.container.sorting._ContainerWithSorting": [[92, 4, 1, "", "_abc_impl"], [92, 0, 1, "", "_static_argsort"], [92, 0, 1, "", "_static_searchsorted"], [92, 0, 1, "", "_static_sort"], [92, 0, 1, "", "argsort"], [92, 0, 1, "", "msort"], [92, 0, 1, "", "searchsorted"], [92, 0, 1, "", "sort"], [92, 0, 1, "", "static_msort"]], "ivy.data_classes.container.statistical": [[93, 1, 1, "", "_ContainerWithStatistical"]], "ivy.data_classes.container.statistical._ContainerWithStatistical": [[93, 4, 1, "", "_abc_impl"], [93, 0, 1, "", "_static_cumprod"], [93, 0, 1, "", "_static_cumsum"], [93, 0, 1, "", "_static_min"], [93, 0, 1, "", "_static_prod"], [93, 0, 1, "", "_static_sum"], [93, 0, 1, "", "_static_var"], [93, 0, 1, "", "cumprod"], [93, 0, 1, "", "cumsum"], [93, 0, 1, "", "einsum"], [93, 0, 1, "", "max"], [93, 0, 1, "", "mean"], [93, 0, 1, "", "min"], [93, 0, 1, "", "prod"], [93, 0, 1, "", "std"], [93, 0, 1, "", "sum"], [93, 0, 1, "", "var"]], "ivy.data_classes.container.utility": [[94, 1, 1, "", "_ContainerWithUtility"]], "ivy.data_classes.container.utility._ContainerWithUtility": [[94, 4, 1, "", "_abc_impl"], [94, 0, 1, "", "_static_all"], [94, 0, 1, "", "_static_any"], [94, 0, 1, "", "all"], [94, 0, 1, "", "any"]], "ivy.data_classes.container.wrapping": [[95, 2, 1, "", "_wrap_function"], [95, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.data_classes.factorized_tensor": [[96, 3, 0, "-", "base"], [97, 3, 0, "-", "cp_tensor"], [98, 3, 0, "-", "parafac2_tensor"], [99, 3, 0, "-", "tr_tensor"], [100, 3, 0, "-", "tt_tensor"], [101, 3, 0, "-", "tucker_tensor"]], "ivy.data_classes.factorized_tensor.base": [[96, 1, 1, "", "FactorizedTensor"]], "ivy.data_classes.factorized_tensor.base.FactorizedTensor": [[96, 0, 1, "", "__init__"], [96, 4, 1, "", "_abc_impl"], [96, 0, 1, "", "mode_dot"], [96, 0, 1, "", "norm"], [96, 0, 1, "", "to_tensor"], [96, 0, 1, "", "to_unfolded"], [96, 0, 1, "", "to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[97, 1, 1, "", "CPTensor"]], "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor": [[97, 0, 1, "", "__init__"], [97, 4, 1, "", "_abc_impl"], [97, 0, 1, "", "cp_copy"], [97, 0, 1, "", "cp_flip_sign"], [97, 0, 1, "", "cp_lstsq_grad"], [97, 0, 1, "", "cp_mode_dot"], [97, 0, 1, "", "cp_n_param"], [97, 0, 1, "", "cp_norm"], [97, 0, 1, "", "cp_normalize"], [97, 0, 1, "", "cp_to_tensor"], [97, 0, 1, "", "cp_to_unfolded"], [97, 0, 1, "", "cp_to_vec"], [97, 0, 1, "", "mode_dot"], [97, 5, 1, "", "n_param"], [97, 0, 1, "", "norm"], [97, 0, 1, "", "normalize"], [97, 0, 1, "", "to_tensor"], [97, 0, 1, "", "to_unfolded"], [97, 0, 1, "", "to_vec"], [97, 0, 1, "", "unfolding_dot_khatri_rao"], [97, 0, 1, "", "validate_cp_rank"], [97, 0, 1, "", "validate_cp_tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[98, 1, 1, "", "Parafac2Tensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor": [[98, 0, 1, "", "__init__"], [98, 4, 1, "", "_abc_impl"], [98, 0, 1, "", "apply_parafac2_projections"], [98, 0, 1, "", "from_CPTensor"], [98, 5, 1, "", "n_param"], [98, 0, 1, "", "parafac2_normalise"], [98, 0, 1, "", "parafac2_to_slice"], [98, 0, 1, "", "parafac2_to_slices"], [98, 0, 1, "", "parafac2_to_tensor"], [98, 0, 1, "", "parafac2_to_unfolded"], [98, 0, 1, "", "parafac2_to_vec"], [98, 0, 1, "", "to_tensor"], [98, 0, 1, "", "to_unfolded"], [98, 0, 1, "", "to_vec"], [98, 0, 1, "", "validate_parafac2_tensor"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[99, 1, 1, "", "TRTensor"]], "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor": [[99, 0, 1, "", "__init__"], [99, 4, 1, "", "_abc_impl"], [99, 5, 1, "", "n_param"], [99, 0, 1, "", "to_tensor"], [99, 0, 1, "", "to_unfolded"], [99, 0, 1, "", "to_vec"], [99, 0, 1, "", "tr_n_param"], [99, 0, 1, "", "tr_to_tensor"], [99, 0, 1, "", "tr_to_unfolded"], [99, 0, 1, "", "tr_to_vec"], [99, 0, 1, "", "validate_tr_rank"], [99, 0, 1, "", "validate_tr_tensor"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[100, 1, 1, "", "TTTensor"]], "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor": [[100, 0, 1, "", "__init__"], [100, 4, 1, "", "_abc_impl"], [100, 0, 1, "", "_tt_n_param"], [100, 0, 1, "", "index_update"], [100, 5, 1, "", "n_param"], [100, 0, 1, "", "pad_tt_rank"], [100, 0, 1, "", "to_tensor"], [100, 0, 1, "", "to_unfolding"], [100, 0, 1, "", "to_vec"], [100, 0, 1, "", "tt_to_tensor"], [100, 0, 1, "", "tt_to_unfolded"], [100, 0, 1, "", "tt_to_vec"], [100, 0, 1, "", "validate_tt_rank"], [100, 0, 1, "", "validate_tt_tensor"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[101, 1, 1, "", "TuckerTensor"], [101, 2, 1, "", "_bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor": [[101, 0, 1, "", "__init__"], [101, 4, 1, "", "_abc_impl"], [101, 0, 1, "", "mode_dot"], [101, 5, 1, "", "n_param"], [101, 0, 1, "", "to_tensor"], [101, 0, 1, "", "to_unfolded"], [101, 0, 1, "", "to_vec"], [101, 0, 1, "", "tucker_copy"], [101, 0, 1, "", "tucker_mode_dot"], [101, 0, 1, "", "tucker_n_param"], [101, 0, 1, "", "tucker_normalize"], [101, 0, 1, "", "tucker_to_tensor"], [101, 0, 1, "", "tucker_to_unfolded"], [101, 0, 1, "", "tucker_to_vec"], [101, 0, 1, "", "validate_tucker_rank"], [101, 0, 1, "", "validate_tucker_tensor"]], "ivy.data_classes.nested_array": [[106, 3, 0, "-", "base"], [107, 3, 0, "-", "elementwise"], [105, 3, 0, "-", "nested_array"]], "ivy.data_classes.nested_array.base": [[106, 1, 1, "", "NestedArrayBase"]], "ivy.data_classes.nested_array.base.NestedArrayBase": [[106, 0, 1, "", "__init__"], [106, 4, 1, "", "_abc_impl"], [106, 0, 1, "", "broadcast_shapes"], [106, 5, 1, "", "data"], [106, 5, 1, "", "device"], [106, 5, 1, "", "dtype"], [106, 5, 1, "", "inner_shape"], [106, 5, 1, "", "ndim"], [106, 0, 1, "", "nested_array"], [106, 5, 1, "", "nested_rank"], [106, 0, 1, "", "ragged_map"], [106, 0, 1, "", "ragged_multi_map"], [106, 0, 1, "", "ragged_multi_map_in_function"], [106, 0, 1, "", "replace_ivy_arrays"], [106, 5, 1, "", "shape"], [106, 0, 1, "", "unbind"]], "ivy.data_classes.nested_array.elementwise": [[107, 1, 1, "", "NestedArrayElementwise"]], "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise": [[107, 4, 1, "", "_abc_impl"], [107, 0, 1, "", "static_add"]], "ivy.data_classes.nested_array.nested_array": [[105, 1, 1, "", "NestedArray"]], "ivy.data_classes.nested_array.nested_array.NestedArray": [[105, 0, 1, "", "__init__"], [105, 0, 1, "", "from_row_lengths"], [105, 0, 1, "", "from_row_splits"]], "ivy.functional.ivy": [[626, 3, 0, "-", "activations"], [627, 3, 0, "-", "constants"], [628, 3, 0, "-", "control_flow_ops"], [629, 3, 0, "-", "creation"], [630, 3, 0, "-", "data_type"], [631, 3, 0, "-", "device"], [632, 3, 0, "-", "elementwise"], [633, 3, 0, "-", "experimental"], [634, 3, 0, "-", "general"], [635, 3, 0, "-", "gradients"], [636, 3, 0, "-", "layers"], [637, 3, 0, "-", "linear_algebra"], [638, 3, 0, "-", "losses"], [639, 3, 0, "-", "manipulation"], [640, 3, 0, "-", "meta"], [641, 3, 0, "-", "nest"], [642, 3, 0, "-", "norms"], [643, 3, 0, "-", "random"], [644, 3, 0, "-", "searching"], [645, 3, 0, "-", "set"], [646, 3, 0, "-", "sorting"], [647, 3, 0, "-", "statistical"], [648, 3, 0, "-", "utility"]], "ivy.functional.ivy.experimental": [[367, 3, 0, "-", "activations"], [368, 3, 0, "-", "constants"], [369, 3, 0, "-", "creation"], [370, 3, 0, "-", "data_type"], [371, 3, 0, "-", "device"], [372, 3, 0, "-", "elementwise"], [373, 3, 0, "-", "general"], [374, 3, 0, "-", "gradients"], [375, 3, 0, "-", "layers"], [376, 3, 0, "-", "linear_algebra"], [377, 3, 0, "-", "losses"], [378, 3, 0, "-", "manipulation"], [379, 3, 0, "-", "meta"], [380, 3, 0, "-", "nest"], [381, 3, 0, "-", "norms"], [382, 3, 0, "-", "random"], [383, 3, 0, "-", "searching"], [384, 3, 0, "-", "set"], [385, 3, 0, "-", "sorting"], [386, 3, 0, "-", "sparse_array"], [387, 3, 0, "-", "statistical"], [388, 3, 0, "-", "utility"]], "ivy.stateful": [[788, 3, 0, "-", "activations"], [789, 3, 0, "-", "converters"], [790, 3, 0, "-", "helpers"], [791, 3, 0, "-", "initializers"], [792, 3, 0, "-", "layers"], [793, 3, 0, "-", "losses"], [794, 3, 0, "-", "module"], [795, 3, 0, "-", "norms"], [796, 3, 0, "-", "optimizers"], [797, 3, 0, "-", "sequential"]], "ivy.stateful.activations": [[788, 1, 1, "", "ELU"], [788, 1, 1, "", "GEGLU"], [788, 1, 1, "", "GELU"], [788, 1, 1, "", "Hardswish"], [788, 1, 1, "", "LeakyReLU"], [788, 1, 1, "", "LogSigmoid"], [788, 1, 1, "", "LogSoftmax"], [788, 1, 1, "", "Logit"], [788, 1, 1, "", "Mish"], [788, 1, 1, "", "PReLU"], [788, 1, 1, "", "ReLU"], [788, 1, 1, "", "ReLU6"], [788, 1, 1, "", "SeLU"], [788, 1, 1, "", "SiLU"], [788, 1, 1, "", "Sigmoid"], [788, 1, 1, "", "Softmax"], [788, 1, 1, "", "Softplus"], [788, 1, 1, "", "Tanh"]], "ivy.stateful.activations.ELU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.GEGLU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Hardswish": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.LeakyReLU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSigmoid": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.LogSoftmax": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Logit": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Mish": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.PReLU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.ReLU6": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.SeLU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.SiLU": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Sigmoid": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softmax": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Softplus": [[788, 0, 1, "", "__init__"]], "ivy.stateful.activations.Tanh": [[788, 0, 1, "", "__init__"]], "ivy.stateful.converters": [[789, 1, 1, "", "ModuleConverters"], [789, 2, 1, "", "to_ivy_module"]], "ivy.stateful.converters.ModuleConverters": [[789, 0, 1, "", "from_flax_module"], [789, 0, 1, "", "from_haiku_module"], [789, 0, 1, "", "from_keras_module"], [789, 0, 1, "", "from_paddle_module"], [789, 0, 1, "", "from_torch_module"], [789, 0, 1, "", "to_keras_module"]], "ivy.stateful.helpers": [[790, 1, 1, "", "ModuleHelpers"]], "ivy.stateful.initializers": [[791, 1, 1, "", "Constant"], [791, 1, 1, "", "FirstLayerSiren"], [791, 1, 1, "", "GlorotUniform"], [791, 1, 1, "", "Initializer"], [791, 1, 1, "", "KaimingNormal"], [791, 1, 1, "", "Ones"], [791, 1, 1, "", "RandomNormal"], [791, 1, 1, "", "Siren"], [791, 1, 1, "", "Uniform"], [791, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[791, 0, 1, "", "__init__"], [791, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[791, 0, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[791, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Initializer": [[791, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.KaimingNormal": [[791, 0, 1, "", "__init__"], [791, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[791, 0, 1, "", "__init__"]], "ivy.stateful.initializers.RandomNormal": [[791, 0, 1, "", "__init__"], [791, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Siren": [[791, 0, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[791, 0, 1, "", "__init__"], [791, 0, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[791, 0, 1, "", "__init__"]], "ivy.stateful.layers": [[792, 1, 1, "", "AdaptiveAvgPool1d"], [792, 1, 1, "", "AdaptiveAvgPool2d"], [792, 1, 1, "", "AvgPool1D"], [792, 1, 1, "", "AvgPool2D"], [792, 1, 1, "", "AvgPool3D"], [792, 1, 1, "", "Conv1D"], [792, 1, 1, "", "Conv1DTranspose"], [792, 1, 1, "", "Conv2D"], [792, 1, 1, "", "Conv2DTranspose"], [792, 1, 1, "", "Conv3D"], [792, 1, 1, "", "Conv3DTranspose"], [792, 1, 1, "", "Dct"], [792, 1, 1, "", "DepthwiseConv2D"], [792, 1, 1, "", "Dropout"], [792, 1, 1, "", "Embedding"], [792, 1, 1, "", "FFT"], [792, 1, 1, "", "IFFT"], [792, 1, 1, "", "Identity"], [792, 1, 1, "", "LSTM"], [792, 1, 1, "", "Linear"], [792, 1, 1, "", "MaxPool1D"], [792, 1, 1, "", "MaxPool2D"], [792, 1, 1, "", "MaxPool3D"], [792, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.AdaptiveAvgPool1d": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.AdaptiveAvgPool2d": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool1D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool2D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.AvgPool3D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dct": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Embedding": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.FFT": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.IFFT": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.Identity": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[792, 0, 1, "", "__init__"], [792, 0, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool1D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool2D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.MaxPool3D": [[792, 0, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[792, 0, 1, "", "__init__"]], "ivy.stateful.losses": [[793, 1, 1, "", "BinaryCrossEntropyLoss"], [793, 1, 1, "", "CrossEntropyLoss"], [793, 1, 1, "", "LogPoissonLoss"]], "ivy.stateful.losses.BinaryCrossEntropyLoss": [[793, 0, 1, "", "__init__"]], "ivy.stateful.losses.CrossEntropyLoss": [[793, 0, 1, "", "__init__"]], "ivy.stateful.losses.LogPoissonLoss": [[793, 0, 1, "", "__init__"]], "ivy.stateful.module": [[794, 1, 1, "", "Module"], [794, 1, 1, "", "ModuleMeta"]], "ivy.stateful.module.Module": [[794, 0, 1, "", "__call__"], [794, 0, 1, "", "__init__"], [794, 5, 1, "", "buffers"], [794, 0, 1, "", "build"], [794, 5, 1, "", "build_mode"], [794, 5, 1, "", "built"], [794, 5, 1, "", "device"], [794, 5, 1, "", "dtype"], [794, 0, 1, "", "eval"], [794, 0, 1, "", "load"], [794, 5, 1, "", "module_dict"], [794, 0, 1, "", "register_buffer"], [794, 0, 1, "", "register_parameter"], [794, 0, 1, "", "save"], [794, 0, 1, "", "save_weights"], [794, 0, 1, "", "show_graph"], [794, 5, 1, "", "state_dict"], [794, 0, 1, "", "to_device"], [794, 0, 1, "", "trace_graph"], [794, 0, 1, "", "train"], [794, 5, 1, "", "training"], [794, 5, 1, "", "v"]], "ivy.stateful.norms": [[795, 1, 1, "", "BatchNorm2D"], [795, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.BatchNorm2D": [[795, 0, 1, "", "__init__"]], "ivy.stateful.norms.LayerNorm": [[795, 0, 1, "", "__init__"]], "ivy.stateful.optimizers": [[796, 1, 1, "", "Adam"], [796, 1, 1, "", "AdamW"], [796, 1, 1, "", "LAMB"], [796, 1, 1, "", "LARS"], [796, 1, 1, "", "Optimizer"], [796, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "set_state"], [796, 5, 1, "", "state"]], "ivy.stateful.optimizers.AdamW": [[796, 0, 1, "", "__init__"]], "ivy.stateful.optimizers.LAMB": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "set_state"], [796, 5, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "set_state"], [796, 5, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "set_state"], [796, 0, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[796, 0, 1, "", "__init__"], [796, 0, 1, "", "set_state"], [796, 5, 1, "", "state"]], "ivy.stateful.sequential": [[797, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[797, 0, 1, "", "__init__"]], "ivy.utils": [[798, 3, 0, "-", "assertions"], [799, 3, 0, "-", "backend"], [803, 3, 0, "-", "binaries"], [804, 3, 0, "-", "dynamic_import"], [805, 3, 0, "-", "einsum_parser"], [806, 3, 0, "-", "einsum_path_helpers"], [807, 3, 0, "-", "exceptions"], [808, 3, 0, "-", "inspection"], [809, 3, 0, "-", "logging"], [810, 3, 0, "-", "profiler"], [811, 3, 0, "-", "verbosity"]], "ivy.utils.assertions": [[798, 2, 1, "", "check_all"], [798, 2, 1, "", "check_all_or_any_fn"], [798, 2, 1, "", "check_any"], [798, 2, 1, "", "check_dev_correct_formatting"], [798, 2, 1, "", "check_dimensions"], [798, 2, 1, "", "check_elem_in_list"], [798, 2, 1, "", "check_equal"], [798, 2, 1, "", "check_exists"], [798, 2, 1, "", "check_false"], [798, 2, 1, "", "check_gather_input_valid"], [798, 2, 1, "", "check_gather_nd_input_valid"], [798, 2, 1, "", "check_greater"], [798, 2, 1, "", "check_inplace_sizes_valid"], [798, 2, 1, "", "check_isinstance"], [798, 2, 1, "", "check_kernel_padding_size"], [798, 2, 1, "", "check_less"], [798, 2, 1, "", "check_one_way_broadcastable"], [798, 2, 1, "", "check_same_dtype"], [798, 2, 1, "", "check_shape"], [798, 2, 1, "", "check_shapes_broadcastable"], [798, 2, 1, "", "check_true"], [798, 2, 1, "", "check_unsorted_segment_valid_params"]], "ivy.utils.backend": [[800, 3, 0, "-", "ast_helpers"], [801, 3, 0, "-", "handler"], [802, 3, 0, "-", "sub_backend_handler"]], "ivy.utils.backend.ast_helpers": [[800, 1, 1, "", "ImportTransformer"], [800, 1, 1, "", "IvyLoader"], [800, 1, 1, "", "IvyPathFinder"]], "ivy.utils.backend.ast_helpers.ImportTransformer": [[800, 0, 1, "", "__init__"], [800, 0, 1, "", "impersonate_import"], [800, 0, 1, "", "visit_Import"], [800, 0, 1, "", "visit_ImportFrom"]], "ivy.utils.backend.ast_helpers.IvyLoader": [[800, 0, 1, "", "__init__"], [800, 0, 1, "", "exec_module"]], "ivy.utils.backend.ast_helpers.IvyPathFinder": [[800, 0, 1, "", "find_spec"]], "ivy.utils.backend.handler": [[801, 1, 1, "", "ContextManager"], [801, 2, 1, "", "choose_random_backend"], [801, 2, 1, "", "current_backend"], [801, 2, 1, "", "dynamic_backend_converter"], [801, 2, 1, "", "prevent_access_locally"], [801, 2, 1, "", "previous_backend"], [801, 2, 1, "", "set_backend"], [801, 2, 1, "", "set_backend_to_specific_version"], [801, 2, 1, "", "set_jax_backend"], [801, 2, 1, "", "set_mxnet_backend"], [801, 2, 1, "", "set_numpy_backend"], [801, 2, 1, "", "set_paddle_backend"], [801, 2, 1, "", "set_tensorflow_backend"], [801, 2, 1, "", "set_torch_backend"], [801, 2, 1, "", "unset_backend"], [801, 2, 1, "", "with_backend"]], "ivy.utils.backend.handler.ContextManager": [[801, 0, 1, "", "__init__"]], "ivy.utils.backend.sub_backend_handler": [[802, 2, 1, "", "clear_sub_backends"], [802, 2, 1, "", "find_available_sub_backends"], [802, 2, 1, "", "fn_name_from_version_specific_fn_name"], [802, 2, 1, "", "fn_name_from_version_specific_fn_name_sub_backend"], [802, 2, 1, "", "set_sub_backend"], [802, 2, 1, "", "set_sub_backend_to_specific_version"], [802, 2, 1, "", "unset_sub_backend"]], "ivy.utils.binaries": [[803, 2, 1, "", "check_for_binaries"], [803, 2, 1, "", "cleanup_and_fetch_binaries"]], "ivy.utils.dynamic_import": [[804, 2, 1, "", "import_module"]], "ivy.utils.einsum_parser": [[805, 2, 1, "", "convert_interleaved_input"], [805, 2, 1, "", "convert_subscripts"], [805, 2, 1, "", "find_output_shape"], [805, 2, 1, "", "find_output_str"], [805, 2, 1, "", "gen_unused_symbols"], [805, 2, 1, "", "get_symbol"], [805, 2, 1, "", "has_valid_einsum_chars_only"], [805, 2, 1, "", "is_valid_einsum_char"], [805, 2, 1, "", "legalise_einsum_expr"], [805, 2, 1, "", "possibly_convert_to_numpy"]], "ivy.utils.einsum_path_helpers": [[806, 2, 1, "", "can_dot"], [806, 2, 1, "", "compute_size_by_dict"], [806, 2, 1, "", "find_contraction"], [806, 2, 1, "", "flop_count"], [806, 2, 1, "", "greedy_path"], [806, 2, 1, "", "optimal_path"], [806, 2, 1, "", "parse_einsum_input"], [806, 2, 1, "", "parse_possible_contraction"], [806, 2, 1, "", "update_other_results"]], "ivy.utils.exceptions": [[807, 7, 1, "", "InplaceUpdateException"], [807, 7, 1, "", "IvyAttributeError"], [807, 7, 1, "", "IvyBackendException"], [807, 7, 1, "", "IvyBroadcastShapeError"], [807, 7, 1, "", "IvyDeviceError"], [807, 7, 1, "", "IvyDtypePromotionError"], [807, 7, 1, "", "IvyError"], [807, 7, 1, "", "IvyException"], [807, 7, 1, "", "IvyIndexError"], [807, 7, 1, "", "IvyInvalidBackendException"], [807, 7, 1, "", "IvyNotImplementedException"], [807, 7, 1, "", "IvyValueError"], [807, 2, 1, "", "handle_exceptions"]], "ivy.utils.exceptions.InplaceUpdateException": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyAttributeError": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBackendException": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyBroadcastShapeError": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDeviceError": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyDtypePromotionError": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyError": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyException": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyIndexError": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyInvalidBackendException": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyNotImplementedException": [[807, 0, 1, "", "__init__"]], "ivy.utils.exceptions.IvyValueError": [[807, 0, 1, "", "__init__"]], "ivy.utils.inspection": [[808, 2, 1, "", "add_array_specs"], [808, 2, 1, "", "fn_array_spec"]], "ivy.utils.logging": [[809, 2, 1, "", "set_logging_mode"], [809, 2, 1, "", "unset_logging_mode"]], "ivy.utils.profiler": [[810, 1, 1, "", "Profiler"], [810, 2, 1, "", "tensorflow_profile_start"], [810, 2, 1, "", "tensorflow_profile_stop"], [810, 2, 1, "", "torch_profiler_init"], [810, 2, 1, "", "torch_profiler_start"], [810, 2, 1, "", "torch_profiler_stop"]], "ivy.utils.profiler.Profiler": [[810, 0, 1, "", "__init__"], [810, 4, 1, "", "print_stats"], [810, 4, 1, "", "viz"]], "ivy.utils.verbosity": [[811, 2, 1, "", "cprint"]], "ivy_tests.test_ivy.helpers": [[771, 3, 0, "-", "assertions"], [772, 3, 0, "-", "available_frameworks"], [773, 3, 0, "-", "function_testing"], [774, 3, 0, "-", "globals"], [775, 3, 0, "-", "hypothesis_helpers"], [780, 3, 0, "-", "multiprocessing"], [781, 3, 0, "-", "pipeline_helper"], [782, 3, 0, "-", "structs"], [783, 3, 0, "-", "test_parameter_flags"], [784, 3, 0, "-", "testing_helpers"]], "ivy_tests.test_ivy.helpers.assertions": [[771, 2, 1, "", "assert_all_close"], [771, 2, 1, "", "assert_same_type"], [771, 2, 1, "", "assert_same_type_and_shape"], [771, 2, 1, "", "check_unsupported_device"], [771, 2, 1, "", "check_unsupported_device_and_dtype"], [771, 2, 1, "", "check_unsupported_dtype"], [771, 2, 1, "", "test_unsupported_function"], [771, 2, 1, "", "value_test"]], "ivy_tests.test_ivy.helpers.function_testing": [[773, 2, 1, "", "args_to_container"], [773, 2, 1, "", "args_to_frontend"], [773, 2, 1, "", "arrays_to_frontend"], [773, 2, 1, "", "as_lists"], [773, 2, 1, "", "convtrue"], [773, 2, 1, "", "create_args_kwargs"], [773, 2, 1, "", "flatten"], [773, 2, 1, "", "flatten_and_to_np"], [773, 2, 1, "", "flatten_frontend"], [773, 2, 1, "", "flatten_frontend_fw_to_np"], [773, 2, 1, "", "flatten_frontend_to_np"], [773, 2, 1, "", "get_frontend_ret"], [773, 2, 1, "", "get_ret_and_flattened_np_array"], [773, 2, 1, "", "gradient_incompatible_function"], [773, 2, 1, "", "gradient_test"], [773, 2, 1, "", "gradient_unsupported_dtypes"], [773, 2, 1, "", "kwargs_to_args_n_kwargs"], [773, 2, 1, "", "test_frontend_function"], [773, 2, 1, "", "test_frontend_method"], [773, 2, 1, "", "test_function"], [773, 2, 1, "", "test_function_backend_computation"], [773, 2, 1, "", "test_function_ground_truth_computation"], [773, 2, 1, "", "test_gradient_backend_computation"], [773, 2, 1, "", "test_gradient_ground_truth_computation"], [773, 2, 1, "", "test_method"], [773, 2, 1, "", "test_method_backend_computation"], [773, 2, 1, "", "test_method_ground_truth_computation"], [773, 2, 1, "", "traced_if_required"], [773, 2, 1, "", "wrap_frontend_function_args"]], "ivy_tests.test_ivy.helpers.globals": [[774, 6, 1, "", "CURRENT_FRONTEND_CONFIG"], [774, 7, 1, "", "InterruptedTest"], [774, 1, 1, "", "TestData"], [774, 2, 1, "", "setup_api_test"], [774, 2, 1, "", "setup_frontend_test"], [774, 2, 1, "", "teardown_api_test"], [774, 2, 1, "", "teardown_frontend_test"]], "ivy_tests.test_ivy.helpers.globals.InterruptedTest": [[774, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.globals.TestData": [[774, 0, 1, "", "__init__"], [774, 4, 1, "", "fn_name"], [774, 4, 1, "", "fn_tree"], [774, 4, 1, "", "is_method"], [774, 4, 1, "", "supported_device_dtypes"], [774, 4, 1, "", "test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[776, 3, 0, "-", "array_helpers"], [777, 3, 0, "-", "dtype_helpers"], [778, 3, 0, "-", "general_helpers"], [779, 3, 0, "-", "number_helpers"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[776, 2, 1, "", "array_and_broadcastable_shape"], [776, 2, 1, "", "array_bools"], [776, 2, 1, "", "array_helpers_dtype_info_helper"], [776, 2, 1, "", "array_indices_axis"], [776, 2, 1, "", "array_indices_put_along_axis"], [776, 2, 1, "", "array_values"], [776, 2, 1, "", "arrays_and_axes"], [776, 2, 1, "", "arrays_for_pooling"], [776, 2, 1, "", "broadcast_shapes"], [776, 2, 1, "", "cond_data_gen_helper"], [776, 2, 1, "", "create_concatenable_arrays_dtypes"], [776, 2, 1, "", "create_nested_input"], [776, 2, 1, "", "dtype_and_values"], [776, 2, 1, "", "dtype_array_query"], [776, 2, 1, "", "dtype_array_query_val"], [776, 2, 1, "", "dtype_values_axis"], [776, 2, 1, "", "einsum_helper"], [776, 2, 1, "", "get_first_solve_batch_matrix"], [776, 2, 1, "", "get_first_solve_matrix"], [776, 2, 1, "", "get_second_solve_batch_matrix"], [776, 2, 1, "", "get_second_solve_matrix"], [776, 2, 1, "", "list_of_size"], [776, 2, 1, "", "lists"], [776, 2, 1, "", "mutually_broadcastable_shapes"], [776, 2, 1, "", "prod"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[777, 2, 1, "", "array_dtypes"], [777, 2, 1, "", "cast_filter"], [777, 2, 1, "", "cast_filter_helper"], [777, 2, 1, "", "get_castable_dtype"], [777, 2, 1, "", "get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[778, 7, 1, "", "BroadcastError"], [778, 2, 1, "", "apply_safety_factor"], [778, 2, 1, "", "broadcast_shapes"], [778, 2, 1, "", "dims_and_offset"], [778, 2, 1, "", "embedding_helper"], [778, 2, 1, "", "general_helpers_dtype_info_helper"], [778, 2, 1, "", "get_axis"], [778, 2, 1, "", "get_bounds"], [778, 2, 1, "", "get_mean_std"], [778, 2, 1, "", "get_shape"], [778, 2, 1, "", "matrix_is_stable"], [778, 2, 1, "", "reshape_shapes"], [778, 2, 1, "", "sizes_"], [778, 2, 1, "", "subsets"], [778, 2, 1, "", "two_broadcastable_shapes"], [778, 2, 1, "", "x_and_filters"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[779, 2, 1, "", "floats"], [779, 2, 1, "", "ints"], [779, 2, 1, "", "number"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[780, 2, 1, "", "backend_proc"], [780, 2, 1, "", "frontend_proc"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[781, 1, 1, "", "BackendHandler"], [781, 1, 1, "", "BackendHandlerMode"], [781, 1, 1, "", "WithBackendContext"], [781, 2, 1, "", "get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler": [[781, 0, 1, "", "update_backend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode": [[781, 4, 1, "", "SetBackend"], [781, 4, 1, "", "WithBackend"]], "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext": [[781, 0, 1, "", "__init__"]], "ivy_tests.test_ivy.helpers.structs": [[782, 1, 1, "", "FrontendMethodData"]], "ivy_tests.test_ivy.helpers.structs.FrontendMethodData": [[782, 0, 1, "", "__init__"], [782, 4, 1, "", "framework_init_module"], [782, 4, 1, "", "init_name"], [782, 4, 1, "", "ivy_init_module"], [782, 4, 1, "", "method_name"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[783, 1, 1, "", "DynamicFlag"], [783, 1, 1, "", "FrontendFunctionTestFlags"], [783, 1, 1, "", "FrontendInitTestFlags"], [783, 1, 1, "", "FrontendMethodTestFlags"], [783, 1, 1, "", "FunctionTestFlags"], [783, 1, 1, "", "InitMethodTestFlags"], [783, 1, 1, "", "MethodTestFlags"], [783, 1, 1, "", "TestFlags"], [783, 2, 1, "", "build_flag"], [783, 2, 1, "", "frontend_function_flags"], [783, 2, 1, "", "frontend_init_flags"], [783, 2, 1, "", "frontend_method_flags"], [783, 2, 1, "", "function_flags"], [783, 2, 1, "", "init_method_flags"], [783, 2, 1, "", "method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag": [[783, 0, 1, "", "__init__"], [783, 4, 1, "", "strategy"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags": [[783, 0, 1, "", "__init__"], [783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags": [[783, 0, 1, "", "__init__"], [783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags": [[783, 0, 1, "", "__init__"], [783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags": [[783, 0, 1, "", "__init__"], [783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags": [[783, 0, 1, "", "__init__"], [783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags": [[783, 0, 1, "", "__init__"], [783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags": [[783, 0, 1, "", "apply_flags"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[784, 2, 1, "", "handle_example"], [784, 2, 1, "", "handle_frontend_method"], [784, 2, 1, "", "handle_frontend_test"], [784, 2, 1, "", "handle_method"], [784, 2, 1, "", "handle_test"], [784, 2, 1, "", "num_positional_args"], [784, 2, 1, "", "num_positional_args_helper"], [784, 2, 1, "", "num_positional_args_method"], [784, 2, 1, "", "seed"]]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:function", "3": "py:module", "4": "py:attribute", "5": "py:property", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "module", "Python module"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"credit": 0, "card": 0, "fraud": 0, "detect": 0, "us": [0, 6, 8, 12, 19, 27, 30, 47, 49, 812, 814, 818, 819, 823, 839, 842, 852, 856, 863, 864], "ivi": [0, 4, 5, 8, 12, 19, 22, 30, 31, 32, 43, 44, 46, 47, 49, 812, 818, 820, 824, 826, 828, 831, 833, 839, 841, 842, 843, 844, 845, 846, 849, 850, 851, 852, 853, 854, 856, 863, 864, 865, 876], "framework": [0, 6, 31, 37, 43, 772, 785, 839, 842, 850, 870, 873, 876, 877], "librari": [0, 28, 31, 32, 47, 49, 864], "instal": [0, 4, 5, 12, 22, 43, 44, 46, 812, 856], "import": [0, 5, 8, 12, 14, 22, 43, 44, 47, 804], "configur": [0, 833, 842, 852], "environ": [0, 819], "load": [0, 8, 12, 14, 769, 852], "dataset": [0, 45, 47], "preview": 0, "inspect": [0, 808], "end": [0, 47], "inform": 0, "identifi": 0, "miss": 0, "valu": [0, 842], "transact": 0, "class": [0, 108, 785, 824, 833, 841, 851], "distribut": 0, "separ": 0, "data": [0, 4, 5, 8, 12, 14, 22, 31, 43, 54, 77, 108, 370, 630, 645, 749, 750, 751, 752, 829, 841, 844, 852, 855], "analysi": 0, "statist": [0, 70, 93, 387, 647], "measur": 0, "legitim": 0, "fraudul": 0, "compar": [0, 6, 7, 14], "metric": [0, 14, 47], "under": 0, "sampl": [0, 44], "balanc": [0, 847], "creat": [0, 1, 43, 44, 818], "split": [0, 708], "featur": [0, 844], "target": [0, 43], "train": [0, 14, 43, 45, 47], "test": [0, 14, 45, 773, 783, 784, 787, 818, 819, 820, 823, 828, 834, 842, 844], "set": [0, 6, 12, 39, 43, 44, 68, 91, 384, 645, 819, 825, 834, 846, 856], "convert": [0, 6, 7, 789, 854], "arrai": [0, 102, 105, 127, 386, 776, 823, 824, 828, 836, 851, 860, 863, 867], "displai": [0, 48], "dimens": 0, "prepar": [0, 4, 5, 8, 12], "function": [0, 8, 22, 31, 32, 43, 44, 45, 47, 49, 109, 773, 818, 827, 829, 830, 833, 836, 837, 838, 839, 841, 842, 844, 845, 846, 847, 849, 854, 855, 864], "process": 0, "enabl": 0, "soft": 0, "devic": [0, 55, 78, 371, 631, 830, 836, 841], "mode": [0, 39, 829, 833, 846], "xgboost": [0, 14], "classifi": [0, 12], "benchmark": 0, "model": [0, 5, 6, 7, 8, 11, 12, 13, 16, 17, 18, 29, 30, 31, 32, 43, 44, 45, 46, 47, 49, 854, 855], "time": [0, 14], "base": [0, 74, 96, 106], "predict": 0, "perform": 0, "implement": [0, 4, 8, 828, 839, 841, 861], "ha": 0, "demonstr": 0, "faster": 0, "standard": [0, 847, 860, 867, 876], "classif": [0, 5], "report": 0, "evalu": [0, 14], "ivyclassifi": 0, "xgbclassifi": [0, 14], "visual": [0, 48], "comparison": [0, 14, 852], "demo": [1, 3, 4, 5, 20, 31, 45, 46], "notebook": 1, "TO": 2, "replac": 2, "titl": 2, "exampl": [3, 8, 12, 14, 20, 39, 831, 836, 839, 842, 844, 847, 863, 864, 865], "alexnet": 4, "infer": [4, 5, 8, 12, 838], "torch": [4, 5, 8, 12, 39, 46, 870, 871], "tensorflow": [4, 5, 6, 8, 14, 18, 39, 46, 47, 48, 870], "jax": [4, 5, 8, 11, 13, 14, 39, 46, 870], "appendix": [4, 8], "code": [4, 22, 23, 24, 25, 32, 43, 835, 843, 845], "bert": 5, "dependeci": 5, "modul": [5, 794, 829, 830, 853, 864], "sequenc": [5, 836], "your": [6, 8, 12, 820, 844], "pytorch": [6, 7, 13, 14, 16, 45, 870], "project": 6, "incompat": 6, "transpil": [6, 7, 16, 17, 18, 25, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 39, 45, 49, 854, 856, 864], "about": [6, 7, 43], "up": [6, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 45, 819, 834, 843, 856], "sourc": [6, 856], "from": [6, 7, 39, 46, 856], "result": [6, 7, 44], "fine": [6, 7], "tune": [6, 7], "conclus": [6, 7], "how": [7, 27, 818, 826, 834, 843, 844], "To": [7, 49, 820], "paddlepaddl": 7, "imag": [8, 12, 60, 83, 253, 814, 826], "segment": 8, "unet": 8, "custom": [8, 824, 826, 839, 843, 852, 855], "preprocess": 8, "visualis": [8, 12], "initi": [8, 12, 791, 853], "nativ": [8, 12, 824, 847], "pretrain": [8, 12], "weight": [8, 12, 852], "mask": 8, "backend": [8, 14, 22, 31, 43, 44, 46, 47, 799, 802, 818, 825, 829, 839, 845, 849, 855], "acceler": [11, 13, 14], "mmpretrain": 11, "resnet": [12, 50], "label": 12, "resnet34": 12, "resnet50": 12, "xgb_frontend": 14, "xgb": 14, "more": [14, 819, 847, 861], "exhaust": 14, "v": [14, 26, 36, 39, 835, 855, 860, 863], "number": [14, 779, 836], "boost": 14, "round": [14, 16, 18, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 45, 283, 843], "fraction": 14, "guid": [15, 20], "build": [16, 17, 18, 47, 814, 826, 849], "top": [16, 17, 18, 821, 828, 878], "haiku": 17, "develop": 19, "convolut": 19, "network": [19, 44, 47, 852, 854], "tutori": [20, 47], "And": 20, "learn": [20, 21, 870], "basic": [20, 21, 43, 44, 820, 841], "write": [22, 30, 841, 844], "content": [22, 45], "handler": [22, 31, 801, 802, 849], "structur": [22, 31, 826, 839, 855], "api": [22, 31, 32, 818, 823, 827, 828, 839, 845, 849, 851, 853, 854, 856, 860, 863, 864, 865, 867, 874, 876], "state": [22, 31, 32, 853, 855, 863], "unifi": [23, 26, 27, 33, 36, 37, 38, 43, 812, 851, 861, 865, 872, 876], "trace": [24, 26, 27, 32, 691, 833], "lazi": [26, 36, 863], "eager": [26, 36, 863], "decor": [27, 38, 833, 838, 844], "ani": [28, 29, 31, 32, 768], "odsc": 31, "graph": [31, 48, 871, 876], "tracer": [31, 849, 854, 856, 863, 871, 876], "quickstart": 32, "get": [32, 812, 820, 856], "familiar": 32, "0": [33, 34, 35, 36, 40, 41], "1": [34, 36, 37, 38, 39, 42, 49, 870], "compil": [34, 36, 37, 38, 44, 863, 868, 873, 875, 876], "2": [35, 38, 40, 49, 870], "select": 37, "As": 38, "3": [39, 41, 42, 49], "dynam": [39, 47, 804, 825, 855], "static": 39, "todo": [39, 820], "explain": 39, "via": 39, "why": [39, 844, 861], "i": [39, 826, 847], "true": 39, "default": [39, 544], "when": 39, "numpi": [39, 46, 841, 870], "fals": 39, "kornia": 40, "perceiv": 41, "stabl": 42, "diffus": 42, "oper": [43, 836, 846, 851, 855], "ml": [43, 859, 872, 876], "chang": 43, "one": 43, "line": [43, 820], "No": [43, 819, 861], "need": [43, 844], "worri": 43, "type": [43, 54, 77, 370, 630, 829, 837, 841, 855], "differ": 43, "them": 43, "all": [43, 767], "standalon": [43, 837], "defin": [43, 44, 45, 47], "optim": [43, 796, 853], "input": [43, 44, 836], "loss": [43, 63, 86, 377, 638, 793], "loop": [43, 47], "check": [44, 835, 855], "simpl": 44, "neural": 44, "deepmind": [45, 46], "": [45, 47, 818, 826, 843, 856], "perceiverio": [45, 46], "tabl": [45, 826, 829, 867], "construct": [45, 852], "some": 45, "helper": [45, 775, 776, 777, 778, 779, 781, 784, 790, 800, 806, 842, 844, 845], "pipelin": [45, 47, 781, 826, 828, 844, 855], "download": 45, "dataload": 45, "gpu": [46, 855], "introduct": [46, 49, 841, 842], "python3": 46, "8": 46, "setup": [46, 835], "kernel": 46, "clone": [46, 819, 828], "repo": [46, 819], "ivy_model": 46, "run": [46, 820, 823, 826, 834, 844], "let": 47, "we": [47, 844], "ar": 47, "mnist": 47, "thi": 47, "temporari": 47, "loader": 47, "util": [47, 71, 94, 388, 648, 786], "plot": 47, "save": [47, 770, 852], "huggingfac": 48, "deit": 48, "can": 48, "html": 48, "file": 48, "browser": [48, 820], "interfac": 49, "telemetri": 49, "18": 50, "activ": [51, 73, 367, 626, 788], "convers": [52, 75, 838], "creation": [53, 76, 369, 629], "elementwis": [56, 79, 107, 372, 632], "experiment": [57, 80, 633, 818], "gener": [58, 81, 373, 634, 778, 839, 844, 847, 863], "gradient": [59, 82, 349, 374, 635, 839], "layer": [61, 84, 375, 636, 792], "linear": [62, 85, 376, 637, 660], "algebra": [62, 85, 376, 637], "manipul": [64, 87, 378, 639], "norm": [65, 88, 381, 642, 795], "random": [66, 89, 382, 643], "search": [67, 90, 383, 644], "sort": [69, 92, 385, 646, 756], "wrap": [72, 95, 838], "cp": 97, "tensor": [97, 98, 99, 100, 101, 104], "parafac2": 98, "tr": 99, "tt": 100, "tucker": [101, 451], "contain": [103, 820, 827, 852], "factor": 104, "nest": [105, 380, 641], "gelu": 110, "hardswish": 111, "leaky_relu": 112, "log_softmax": 113, "mish": 114, "relu": 115, "sigmoid": 116, "softmax": 117, "softplu": 118, "softsign": 119, "cmp_i": 120, "cmp_isnot": 121, "for_loop": 122, "if_els": 123, "try_except": 124, "while_loop": 125, "arang": 126, "asarrai": 128, "copy_arrai": 129, "empti": 130, "empty_lik": 131, "ey": 132, "from_dlpack": 133, "note": [133, 144, 629], "frombuff": 134, "full": [135, 842], "full_lik": 136, "linspac": 137, "logspac": 138, "meshgrid": 139, "native_arrai": 140, "one_hot": 141, "ones": 142, "ones_lik": 143, "to_dlpack": 144, "tril": 145, "triu": 146, "triu_indic": 147, "zero": 148, "zeros_lik": 149, "as_ivy_dtyp": 150, "as_native_dtyp": 151, "astyp": 152, "broadcast_arrai": 153, "broadcast_to": 154, "can_cast": 155, "check_float": 156, "closest_valid_dtyp": 157, "default_complex_dtyp": 158, "default_dtyp": 159, "default_float_dtyp": 160, "default_int_dtyp": 161, "default_uint_dtyp": 162, "dtype": [163, 777, 836], "dtype_bit": 164, "finfo": 165, "function_supported_dtyp": 166, "function_unsupported_dtyp": 167, "iinfo": 168, "infer_default_dtyp": 169, "invalid_dtyp": 170, "is_bool_dtyp": 171, "is_complex_dtyp": 172, "is_float_dtyp": 173, "is_hashable_dtyp": 174, "is_int_dtyp": 175, "is_native_dtyp": 176, "is_uint_dtyp": 177, "promote_typ": 178, "promote_types_of_input": 179, "result_typ": 180, "set_default_complex_dtyp": 181, "set_default_dtyp": 182, "set_default_float_dtyp": 183, "set_default_int_dtyp": 184, "set_default_uint_dtyp": 185, "type_promote_arrai": 186, "unset_default_complex_dtyp": 187, "unset_default_dtyp": 188, "unset_default_float_dtyp": 189, "unset_default_int_dtyp": 190, "unset_default_uint_dtyp": 191, "valid_dtyp": 192, "as_ivy_dev": 193, "as_native_dev": 194, "clear_cached_mem_on_dev": 195, "default_devic": 196, "dev": 197, "dev_util": 198, "function_supported_devic": 199, "function_unsupported_devic": 200, "get_all_ivy_arrays_on_dev": 201, "gpu_is_avail": 202, "handle_soft_device_vari": 203, "num_cpu_cor": 204, "num_gpu": 205, "num_ivy_arrays_on_dev": 206, "percent_used_mem_on_dev": 207, "print_all_ivy_arrays_on_dev": 208, "set_default_devic": 209, "set_soft_device_mod": 210, "paramet": [210, 578, 579, 584, 585, 587, 588, 631, 634, 783, 788, 846], "set_split_factor": 211, "split_factor": 212, "split_func_cal": 213, "to_devic": 214, "total_mem_on_dev": 215, "tpu_is_avail": 216, "unset_default_devic": 217, "unset_soft_device_mod": 218, "used_mem_on_dev": 219, "ab": 220, "aco": 221, "acosh": 222, "add": [223, 831, 842, 876], "angl": 224, "asin": 225, "asinh": 226, "atan": 227, "atan2": 228, "atanh": 229, "bitwise_and": 230, "bitwise_invert": 231, "bitwise_left_shift": 232, "bitwise_or": 233, "bitwise_right_shift": 234, "bitwise_xor": 235, "ceil": 236, "co": 237, "cosh": 238, "deg2rad": 239, "divid": 240, "equal": 241, "erf": 242, "exp": 243, "exp2": 244, "expm1": 245, "floor": 246, "floor_divid": 247, "fmin": 248, "fmod": 249, "gcd": 250, "greater": 251, "greater_equ": 252, "isfinit": 254, "isinf": 255, "isnan": 256, "isreal": 257, "lcm": 258, "less": 259, "less_equ": 260, "log": [261, 809, 819], "log10": 262, "log1p": 263, "log2": 264, "logaddexp": 265, "logaddexp2": 266, "logical_and": 267, "logical_not": 268, "logical_or": 269, "logical_xor": 270, "maximum": 271, "minimum": 272, "multipli": 273, "nan_to_num": 274, "neg": 275, "not_equ": 276, "posit": [277, 836], "pow": 278, "rad2deg": 279, "real": 280, "reciproc": 281, "remaind": 282, "sign": 284, "sin": 285, "sinh": 286, "sqrt": 287, "squar": 288, "subtract": 289, "tan": [290, 831, 842], "tanh": 291, "trapz": 292, "trunc": 293, "trunc_divid": 294, "celu": 295, "elu": 296, "hardshrink": 297, "hardsilu": 298, "hardtanh": 299, "logit": 300, "logsigmoid": 301, "prelu": 302, "relu6": 303, "scaled_tanh": 304, "selu": 305, "silu": 306, "softshrink": 307, "stanh": 308, "tanhshrink": 309, "threshold": 310, "thresholded_relu": 311, "blackman_window": 312, "eye_lik": 313, "hamming_window": 314, "hann_window": 315, "indic": 316, "kaiser_bessel_derived_window": 317, "kaiser_window": 318, "mel_weight_matrix": 319, "ndenumer": 320, "ndindex": 321, "polyv": 322, "random_cp": 323, "random_parafac2": 324, "random_tr": 325, "random_tt": 326, "random_tuck": 327, "tril_indic": 328, "trilu": 329, "unsorted_segment_mean": 330, "unsorted_segment_min": 331, "unsorted_segment_sum": 332, "vorbis_window": 333, "allclos": 334, "amax": 335, "amin": 336, "binar": 337, "conj": 338, "copysign": 339, "count_nonzero": 340, "diff": 341, "digamma": 342, "erfc": 343, "erfinv": 344, "fix": [345, 818, 834], "float_pow": 346, "fmax": 347, "frexp": 348, "hypot": 350, "isclos": 351, "ldexp": 352, "lerp": 353, "lgamma": 354, "modf": 355, "nansum": 356, "nextaft": 357, "signbit": 358, "sinc": 359, "sparsify_tensor": 360, "xlogi": 361, "zeta": 362, "reduc": 363, "bind_custom_gradient_funct": 364, "jvp": 365, "vjp": 366, "constant": [368, 627], "meta": [379, 640], "spars": 386, "adaptive_avg_pool1d": 389, "adaptive_avg_pool2d": 390, "adaptive_max_pool2d": 391, "adaptive_max_pool3d": 392, "area_interpol": 393, "avg_pool1d": 394, "avg_pool2d": 395, "avg_pool3d": 396, "dct": 397, "dft": 398, "dropout1d": 399, "dropout2d": 400, "dropout3d": 401, "embed": 402, "fft": 403, "fft2": 404, "generate_einsum_equ": 405, "get_interpolate_kernel": 406, "idct": 407, "ifft": 408, "ifftn": 409, "interp": 410, "interpol": 411, "max_pool1d": 412, "max_pool2d": 413, "max_pool3d": 414, "max_unpool1d": 415, "nearest_interpol": 416, "pool": 417, "reduce_window": 418, "rfft": 419, "rfftn": 420, "rnn": 421, "sliding_window": 422, "stft": 423, "adjoint": 424, "batched_out": 425, "cond": 426, "diagflat": 427, "dot": 428, "eig": [429, 672], "eigh_tridiagon": 430, "eigval": 431, "general_inner_product": 432, "higher_order_mo": 433, "initialize_tuck": 434, "khatri_rao": 435, "kron": 436, "kroneck": 437, "lu_factor": 438, "lu_solv": 439, "make_svd_non_neg": 440, "matrix_exp": 441, "mode_dot": 442, "multi_dot": 443, "multi_mode_dot": 444, "partial_tuck": 445, "solve_triangular": 446, "svd_flip": 447, "tensor_train": 448, "truncated_svd": 449, "tt_matrix_to_tensor": 450, "hinge_embedding_loss": 452, "huber_loss": 453, "kl_div": 454, "l1_loss": 455, "log_poisson_loss": 456, "poisson_nll_loss": 457, "smooth_l1_loss": 458, "soft_margin_loss": 459, "as_strid": 460, "associative_scan": 461, "atleast_1d": 462, "atleast_2d": 463, "atleast_3d": 464, "broadcast_shap": 465, "check_scalar": 466, "choos": 467, "column_stack": 468, "concat_from_sequ": 469, "dsplit": 470, "dstack": 471, "expand": 472, "fill_diagon": 473, "flatten": 474, "fliplr": 475, "flipud": 476, "fold": 477, "heavisid": 478, "hsplit": 479, "hstack": 480, "i0": 481, "matric": 482, "moveaxi": 483, "pad": 484, "partial_fold": 485, "partial_tensor_to_vec": 486, "partial_unfold": 487, "partial_vec_to_tensor": 488, "put_along_axi": 489, "rot90": 490, "soft_threshold": 491, "take": 492, "take_along_axi": 493, "top_k": 494, "trim_zero": 495, "unflatten": 496, "unfold": 497, "unique_consecut": 498, "vsplit": 499, "vstack": 500, "batch_norm": 501, "group_norm": 502, "instance_norm": 503, "l1_normal": 504, "l2_normal": 505, "local_response_norm": 506, "lp_normal": 507, "bernoulli": 508, "beta": 509, "dirichlet": 510, "gamma": 511, "poisson": 512, "unravel_index": 513, "invert_permut": 514, "lexsort": 515, "is_ivy_sparse_arrai": 516, "is_native_sparse_arrai": 517, "native_sparse_arrai": 518, "native_sparse_array_to_indices_values_and_shap": 519, "bincount": 520, "corrcoef": 521, "cov": 522, "cummax": 523, "cummin": 524, "histogram": 525, "igamma": 526, "median": 527, "nanmean": 528, "nanmedian": 529, "nanmin": 530, "nanprod": 531, "quantil": 532, "optional_get_el": 533, "all_equ": 534, "arg_info": 535, "arg_nam": 536, "array_equ": 537, "assert_supports_inplac": 538, "cache_fn": 539, "clip_matrix_norm": 540, "clip_vector_norm": 541, "container_typ": 542, "current_backend_str": 543, "einops_rearrang": 545, "einops_reduc": 546, "einops_repeat": 547, "exist": [548, 814, 843], "fourier_encod": 549, "function_supported_devices_and_dtyp": 550, "function_unsupported_devices_and_dtyp": 551, "gather": 552, "gather_nd": 553, "get_all_arrays_in_memori": 554, "get_item": 555, "get_num_dim": 556, "get_referrers_recurs": 557, "has_nan": 558, "inplace_arrays_support": 559, "inplace_decr": 560, "inplace_incr": 561, "inplace_upd": 562, "inplace_variables_support": 563, "is_arrai": 564, "is_ivy_arrai": 565, "is_ivy_contain": 566, "is_ivy_nested_arrai": 567, "is_native_arrai": 568, "isin": 569, "isscalar": 570, "items": 571, "match_kwarg": 572, "multiprocess": [573, 780], "num_arrays_in_memori": 574, "print_all_arrays_in_memori": 575, "scatter_flat": 576, "scatter_nd": 577, "set_array_mod": 578, "set_exception_trace_mod": 579, "set_inplace_mod": 580, "set_item": 581, "set_min_bas": 582, "set_min_denomin": 583, "set_nestable_mod": 584, "set_precise_mod": 585, "set_queue_timeout": 586, "set_shape_array_mod": 587, "set_show_func_wrapper_trace_mod": 588, "set_tmp_dir": 589, "shape": [590, 645, 749, 750, 751, 752, 838, 855], "size": [591, 855], "stable_divid": 592, "stable_pow": 593, "stride": 594, "supports_inplace_upd": 595, "to_ivy_shap": 596, "to_list": 597, "to_native_shap": 598, "to_numpi": 599, "to_scalar": 600, "try_else_non": 601, "unset_array_mod": 602, "unset_exception_trace_mod": 603, "unset_inplace_mod": 604, "unset_min_bas": 605, "unset_min_denomin": 606, "unset_nestable_mod": 607, "unset_precise_mod": 608, "unset_queue_timeout": 609, "unset_shape_array_mod": 610, "unset_show_func_wrapper_trace_mod": 611, "unset_tmp_dir": 612, "value_is_nan": 613, "vmap": 614, "adam_step": 615, "adam_upd": 616, "execute_with_gradi": [617, 839], "grad": 618, "gradient_descent_upd": 619, "jac": 620, "lamb_upd": 621, "lars_upd": 622, "optimizer_upd": 623, "stop_gradi": 624, "value_and_grad": 625, "control": [628, 855], "flow": [628, 855], "op": 628, "depend": [645, 749, 750, 751, 752], "output": [645, 749, 750, 751, 752], "conv": 649, "conv1d": 650, "conv1d_transpos": 651, "conv2d": 652, "conv2d_transpos": 653, "conv3d": 654, "conv3d_transpos": 655, "conv_general_dil": 656, "conv_general_transpos": 657, "depthwise_conv2d": 658, "dropout": 659, "lstm": 661, "lstm_updat": 662, "multi_head_attent": 663, "nm": 664, "roi_align": 665, "scaled_dot_product_attent": 666, "choleski": 667, "cross": 668, "det": 669, "diag": 670, "diagon": 671, "eigh": 673, "eigvalsh": 674, "inner": 675, "inv": 676, "matmul": 677, "matrix_norm": 678, "matrix_pow": 679, "matrix_rank": 680, "matrix_transpos": 681, "outer": 682, "pinv": 683, "qr": 684, "slogdet": 685, "solv": 686, "svd": 687, "svdval": 688, "tensordot": 689, "tensorsolv": 690, "vander": 692, "vecdot": 693, "vector_norm": 694, "vector_to_skew_symmetric_matrix": 695, "binary_cross_entropi": 696, "cross_entropi": 697, "sparse_cross_entropi": 698, "clip": 699, "concat": 700, "constant_pad": 701, "expand_dim": 702, "flip": 703, "permute_dim": 704, "repeat": 705, "reshap": 706, "roll": [707, 831], "squeez": 709, "stack": [710, 833], "swapax": 711, "tile": 712, "unstack": 713, "zero_pad": 714, "fomaml_step": 715, "maml_step": 716, "reptile_step": 717, "all_nested_indic": 718, "copy_nest": 719, "duplicate_array_index_chain": 720, "index_nest": 721, "insert_into_nest_at_index": 722, "insert_into_nest_at_indic": 723, "map": [724, 828], "map_nest_at_index": 725, "map_nest_at_indic": 726, "multi_index_nest": 727, "nested_ani": 728, "nested_argwher": 729, "nested_map": 730, "nested_multi_map": 731, "prune_empti": 732, "prune_nest_at_index": 733, "prune_nest_at_indic": 734, "set_nest_at_index": 735, "set_nest_at_indic": 736, "layer_norm": 737, "multinomi": 738, "randint": 739, "random_norm": 740, "random_uniform": 741, "seed": 742, "shuffl": 743, "argmax": 744, "argmin": 745, "argwher": 746, "nonzero": 747, "where": [748, 818, 834], "unique_al": 749, "unique_count": 750, "unique_invers": 751, "unique_valu": 752, "argsort": 753, "msort": 754, "searchsort": 755, "cumprod": 757, "cumsum": 758, "einsum": [759, 805, 806], "max": 760, "mean": 761, "min": 762, "prod": 763, "std": 764, "sum": 765, "var": 766, "assert": [771, 798, 833], "avail": 772, "global": [774, 846], "hypothesi": [775, 819, 842, 844], "struct": 782, "flag": 783, "sequenti": 797, "ast": 800, "sub": 802, "binari": [803, 819], "parser": 805, "path": 806, "except": [807, 833, 838], "profil": 810, "verbos": 811, "statu": 812, "ai": 812, "start": [812, 856], "document": 812, "contribut": [812, 813, 818, 843], "commun": 812, "citat": 812, "doc": [814, 826], "docker": [814, 819, 820, 826, 856], "conveni": [814, 826, 837], "script": [814, 826], "hub": 814, "local": [814, 820, 835], "without": [814, 842], "contributor": [815, 821, 878], "reward": 815, "badg": 815, "tier": 815, "error": [816, 833, 834], "handl": [816, 824, 830, 833, 838, 855], "help": [817, 820, 834], "resourc": 817, "open": 818, "task": 818, "fail": [818, 834, 844], "frontend": [818, 825, 841, 842, 854], "place": 818, "checklist": 818, "format": [818, 835, 869, 876], "extend": [818, 844, 847], "an": [818, 839], "issu": [818, 820, 835, 856], "github": [818, 819], "templat": 818, "fork": [819, 820], "pre": [819, 835], "commit": [819, 820, 828, 835], "pycharm": [819, 820, 835], "virtual": 819, "miniconda": 819, "venv": 819, "interpret": 819, "window": 819, "maco": 819, "ubuntu": 819, "detail": 819, "free": 819, "wsl": 819, "codespac": 819, "The": [819, 820, 826, 839, 841, 851, 855, 860], "list": 820, "manag": 820, "who": 820, "ask": [820, 834], "With": 820, "command": 820, "pull": [820, 828], "request": [820, 828], "small": 820, "often": 820, "interact": 820, "most": 820, "out": [820, 836, 838, 840], "id": [820, 823], "program": 821, "core": [821, 878], "rise": [821, 878], "deep": 822, "dive": 822, "termin": 823, "regener": 823, "failur": 823, "skip": 823, "integr": [824, 828, 835, 843, 844], "version": [825, 845, 855], "support": [825, 829, 838, 841, 855], "builder": 826, "being": 826, "option": 826, "index": 826, "rst": 826, "partial_conf": 826, "py": 826, "prebuild": 826, "sh": 826, "extens": 826, "custom_autosummari": 826, "hide": 826, "discussion_link": 826, "skippable_funct": 826, "ivy_data": 826, "instanc": [827, 841, 842, 851], "method": [827, 841, 842, 851, 852], "special": [827, 829, 841], "nestabl": [827, 836, 837, 838], "continu": [828, 835], "push": 828, "pr": 828, "trigger": 828, "A": [828, 847], "down": 828, "view": [828, 838, 840], "store": 828, "retriev": 828, "repositori": 828, "nitti": 828, "gritti": 828, "storag": 828, "space": 828, "unifyai": 828, "determin": 828, "coverag": 828, "workflow": 828, "multipl": 828, "runner": 828, "race": 828, "condit": 828, "period": 828, "manual": 828, "dispatch": 828, "ci": 828, "dashboard": 828, "promot": [829, 841], "precis": 829, "non": [829, 847], "argument": [829, 830, 836, 838, 840, 841], "other": [829, 830], "unsupport": 829, "attribut": [829, 846], "case": [829, 852], "bug": 829, "cast": [829, 841], "superset": [829, 847], "docstr": [831, 832], "func_wrapp": 833, "prune": 833, "handle_except": 833, "consist": [833, 844], "prerequir": 834, "common": [834, 835], "lint": [835, 843], "keyword": 836, "integ": 836, "primari": 837, "composit": 837, "mix": [837, 838, 844], "partial": [837, 838, 844], "order": 838, "wrapper": [838, 876, 877], "miscellan": 838, "overview": [839, 843], "usag": [839, 843, 847, 865], "signatur": 839, "design": [839, 845, 848], "our": 839, "polici": [839, 841], "specif": [839, 874, 875, 876], "consider": 839, "inplac": 840, "updat": 840, "copi": 840, "short": 841, "unus": 841, "rule": 841, "duplic": [841, 847], "alia": 842, "formatt": 843, "functionorderingformatt": 843, "work": [843, 860, 866], "own": 844, "strategi": 844, "ad": 844, "explicit": 844, "do": [844, 860], "effect": 844, "bonu": 844, "self": 844, "test_array_funct": 844, "re": [844, 861], "navig": 845, "categor": 845, "submodul": 845, "unpin": 845, "properti": 846, "getter": 846, "setter": 846, "set_": 846, "unset_": 846, "behaviour": 847, "what": [847, 876], "effici": 847, "maxim": 847, "block": 849, "monkei": 851, "patch": 851, "represent": 852, "recurs": 852, "built": 852, "ins": 852, "access": 852, "compartment": 852, "role": 854, "faq": 855, "maintain": 855, "deploy": 855, "auto": 855, "differenti": 855, "replica": 855, "parallel": 855, "altern": 855, "pip": 856, "folder": 856, "kei": 856, "question": 856, "glossari": 857, "motiv": 858, "explos": 859, "skeptic": 860, "complimentari": 860, "competit": 860, "infinit": 861, "shelf": 861, "life": 861, "One": 862, "liner": 862, "trace_graph": 863, "cach": 863, "sharp": [863, 864, 865], "bit": [863, 864, 865], "relat": 866, "infrastructur": [868, 876], "llvm": 868, "mlir": 868, "oneapi": 868, "exchang": [869, 876], "onnx": 869, "nnef": 869, "coreml": 869, "matlab": 870, "scipi": 870, "scikit": 870, "theano": 870, "panda": 870, "julia": 870, "apach": [870, 873], "spark": 870, "mllib": 870, "caff": 870, "chainer": 870, "mxnet": 870, "cntk": 870, "flux": 870, "dex": 870, "languag": 870, "tf": 871, "jaxpr": 871, "jit": 871, "fx": 871, "compani": [872, 876], "quansight": 872, "modular": 872, "octoml": 872, "multi": [873, 876], "vendor": [873, 874, 875, 876], "tvm": 873, "xla": 873, "gcc": 873, "tensorrt": 874, "cuda": 874, "icc": 875, "icx": 875, "nvcc": 875, "doe": 876, "eagerpi": 877, "kera": 877, "thinc": 877, "tensorli": 877, "neuropod": 877, "leaderboard": 878}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx": 60}, "alltitles": {"can_cast": [[155, "can-cast"]], "set_default_complex_dtype": [[181, "set-default-complex-dtype"]], "default_dtype": [[159, "default-dtype"]], "is_uint_dtype": [[177, "is-uint-dtype"]], "zeros_like": [[149, "zeros-like"]], "broadcast_arrays": [[153, "broadcast-arrays"]], "broadcast_to": [[154, "broadcast-to"]], "logspace": [[138, "logspace"]], "set_default_float_dtype": [[183, "set-default-float-dtype"]], "is_hashable_dtype": [[174, "is-hashable-dtype"]], "check_float": [[156, "check-float"]], "ones": [[142, "ones"]], "default_float_dtype": [[160, "default-float-dtype"]], "is_float_dtype": [[173, "is-float-dtype"]], "dtype": [[163, "dtype"]], "is_bool_dtype": [[171, "is-bool-dtype"]], "to_dlpack": [[144, "to-dlpack"]], "Note": [[144, null], [133, null], [629, null], [629, null]], "as_native_dtype": [[151, "as-native-dtype"]], "default_int_dtype": [[161, "default-int-dtype"]], "is_int_dtype": [[175, "is-int-dtype"]], "function_supported_dtypes": [[166, "function-supported-dtypes"]], "is_native_dtype": [[176, "is-native-dtype"]], "infer_default_dtype": [[169, "infer-default-dtype"]], "native_array": [[140, "native-array"]], "one_hot": [[141, "one-hot"]], "zeros": [[148, "zeros"]], "promote_types": [[178, "promote-types"]], "set_default_dtype": [[182, "set-default-dtype"]], "meshgrid": [[139, "meshgrid"]], "promote_types_of_inputs": [[179, "promote-types-of-inputs"]], "default_complex_dtype": [[158, "default-complex-dtype"]], "default_uint_dtype": [[162, "default-uint-dtype"]], "tril": [[145, "tril"]], "function_unsupported_dtypes": [[167, "function-unsupported-dtypes"]], "is_complex_dtype": [[172, "is-complex-dtype"]], "triu": [[146, "triu"]], "ones_like": [[143, "ones-like"]], "triu_indices": [[147, "triu-indices"]], "astype": [[152, "astype"]], "as_ivy_dtype": [[150, "as-ivy-dtype"]], "iinfo": [[168, "iinfo"]], "invalid_dtype": [[170, "invalid-dtype"]], "dtype_bits": [[164, "dtype-bits"]], "result_type": [[180, "result-type"]], "closest_valid_dtype": [[157, "closest-valid-dtype"]], "finfo": [[165, "finfo"]], "Wrapper Frameworks": [[877, "wrapper-frameworks"], [876, "wrapper-frameworks"]], "EagerPy eagerpy": [[877, "eagerpy-eagerpy"]], "Keras keras": [[877, "keras-keras"]], "Thinc thinc": [[877, "thinc-thinc"]], "TensorLy tensorly": [[877, "tensorly-tensorly"]], "NeuroPod": [[877, "id1"]], "Contributor Leaderboard": [[878, "contributor-leaderboard"]], "Top Contributors": [[878, "top-contributors"]], "Rising Contributors": [[878, "rising-contributors"]], "Core Contributors": [[878, "core-contributors"]], "Contributors": [[878, "contributors"]], "Vendor-Specific Compilers": [[875, "vendor-specific-compilers"], [876, "vendor-specific-compilers"]], "ICC": [[875, "id1"]], "ICX": [[875, "icx"]], "NVCC": [[875, "nvcc"]], "What does Ivy Add?": [[876, "what-does-ivy-add"]], "API Standards": [[876, "api-standards"], [867, "api-standards"]], "Frameworks": [[876, "frameworks"], [870, "frameworks"]], "Graph Tracers": [[876, "graph-tracers"], [871, "graph-tracers"]], "Exchange Formats": [[876, "exchange-formats"], [869, "exchange-formats"]], "Compiler Infrastructure": [[876, "compiler-infrastructure"], [868, "compiler-infrastructure"]], "Multi-Vendor Compiler Frameworks": [[876, "multi-vendor-compiler-frameworks"], [873, "multi-vendor-compiler-frameworks"]], "Vendor-Specific APIs": [[876, "vendor-specific-apis"], [874, "vendor-specific-apis"]], "ML-Unifying Companies": [[876, "ml-unifying-companies"], [872, "ml-unifying-companies"]], "TensorRT tensorrt": [[874, "tensorrt-tensorrt"]], "CUDA cuda": [[874, "cuda-cuda"]], "Function Wrapping": [[838, "function-wrapping"]], "Decorator order": [[838, "decorator-order"]], "Conversion Wrappers": [[838, "conversion-wrappers"]], "Inference Wrappers": [[838, "inference-wrappers"]], "Out Argument Support": [[838, "out-argument-support"]], "Nestable Support": [[838, "nestable-support"]], "Partial Mixed Function Support": [[838, "partial-mixed-function-support"]], "Shape Conversion": [[838, "shape-conversion"]], "View Handling": [[838, "view-handling"]], "Exception Handling": [[838, "exception-handling"], [833, "exception-handling"]], "Miscellaneous Wrappers": [[838, "miscellaneous-wrappers"]], "Inplace Updates": [[840, "inplace-updates"]], "out argument": [[840, "out-argument"]], "copy argument": [[840, "copy-argument"]], "Views": [[840, "views"]], "Ivy Frontends": [[841, "ivy-frontends"]], "Introduction": [[841, "introduction"], [842, "introduction"], [46, "Introduction"]], "The Frontend Basics": [[841, "the-frontend-basics"]], "Writing Frontend Functions": [[841, "writing-frontend-functions"]], "Short Frontend Implementations": [[841, "short-frontend-implementations"]], "Unused Arguments": [[841, "unused-arguments"]], "Supported Data Types and Devices": [[841, "supported-data-types-and-devices"]], "Classes and Instance Methods": [[841, "classes-and-instance-methods"]], "Frontend Data Type Promotion Rules": [[841, "frontend-data-type-promotion-rules"]], "NumPy Special Argument - Casting": [[841, "numpy-special-argument-casting"]], "Frontends Duplicate Policy": [[841, "frontends-duplicate-policy"]], "Function Types": [[837, "function-types"]], "Primary Functions": [[837, "primary-functions"]], "Compositional Functions": [[837, "compositional-functions"]], "Mixed Functions": [[837, "mixed-functions"]], "Partial Mixed Functions": [[837, "partial-mixed-functions"]], "Standalone Functions": [[837, "standalone-functions"]], "Nestable Functions": [[837, "nestable-functions"], [836, "nestable-functions"], [827, "nestable-functions"]], "Convenience Functions": [[837, "convenience-functions"]], "Navigating the Code": [[845, "navigating-the-code"]], "Categorization": [[845, "categorization"]], "Submodule Design": [[845, "submodule-design"]], "Ivy API": [[845, "ivy-api"]], "Backend API": [[845, "backend-api"]], "Submodule Helper Functions": [[845, "submodule-helper-functions"]], "Version Unpinning": [[845, "version-unpinning"]], "Ivy as a Framework": [[850, "ivy-as-a-framework"], [31, "Ivy-as-a-Framework"]], "Function Arguments": [[836, "function-arguments"]], "Examples": [[836, "examples"], [863, "examples"], [865, "examples"], [864, "examples"]], "Positional and Keyword Arguments": [[836, "positional-and-keyword-arguments"]], "Input Arrays": [[836, "input-arrays"]], "out Argument": [[836, "out-argument"]], "dtype and device arguments": [[836, "dtype-and-device-arguments"]], "Numbers in Operator Functions": [[836, "numbers-in-operator-functions"]], "Integer Sequences": [[836, "integer-sequences"]], "Ivy as a Transpiler": [[854, "ivy-as-a-transpiler"], [31, "Ivy-as-a-Transpiler"], [32, "Ivy-as-a-Transpiler"]], "Frontend Functional APIs \ud83d\udea7": [[854, "frontend-functional-apis"]], "Role of the Tracer \ud83d\udea7": [[854, "role-of-the-tracer"]], "Converting Network Models \ud83d\udea7": [[854, "converting-network-models"]], "Ivy Stateful API": [[853, "ivy-stateful-api"], [22, "Ivy-Stateful-API"], [31, "Ivy-Stateful-API"]], "Modules": [[853, "modules"]], "Initializers": [[853, "initializers"], [791, "module-ivy.stateful.initializers"]], "Optimizers": [[853, "optimizers"], [796, "module-ivy.stateful.optimizers"]], "Operating Modes": [[846, "operating-modes"]], "Global Parameter Properties": [[846, "global-parameter-properties"]], "Getter: ivy.<setting> attribute": [[846, "getter-ivy-setting-attribute"]], "Setter: ivy.set_<setting> and ivy.unset_<setting> functions": [[846, "setter-ivy-set-setting-and-ivy-unset-setting-functions"]], "FAQ": [[855, "faq"]], "Maintaining Backend Versions": [[855, "maintaining-backend-versions"]], "Dynamic Sizes": [[855, "dynamic-sizes"]], "Type and Shape Checking": [[855, "type-and-shape-checking"]], "GPU handling": [[855, "gpu-handling"]], "Model Deployment": [[855, "model-deployment"]], "Dynamic Control Flow": [[855, "dynamic-control-flow"]], "Auto-Differentiation": [[855, "auto-differentiation"]], "Replicas, and Data vs Model Parallelism": [[855, "replicas-and-data-vs-model-parallelism"]], "Support for Functions": [[855, "support-for-functions"]], "Alternative Data Structures": [[855, "alternative-data-structures"]], "Custom Operations": [[855, "custom-operations"]], "The Pipeline": [[855, "the-pipeline"]], "State": [[855, "state"]], "MATLAB matlab": [[870, "matlab-matlab"]], "SciPy scipy": [[870, "scipy-scipy"]], "Torch torch": [[870, "torch-torch"]], "NumPy numpy": [[870, "numpy-numpy"]], "SciKit Learn scikit-learn": [[870, "scikit-learn-scikit-learn"]], "Theano theano": [[870, "theano-theano"]], "Pandas pandas": [[870, "pandas-pandas"]], "Julia julia": [[870, "julia-julia"]], "Apache Spark MLlib apache-spark-mllib": [[870, "apache-spark-mllib-apache-spark-mllib"]], "Caffe caffe": [[870, "caffe-caffe"]], "Chainer chainer": [[870, "chainer-chainer"]], "TensorFlow 1 tensorflow-1": [[870, "tensorflow-1-tensorflow-1"]], "MXNet mxnet": [[870, "mxnet-mxnet"]], "CNTK cntk": [[870, "cntk-cntk"]], "PyTorch pytorch": [[870, "pytorch-pytorch"]], "Flux flux": [[870, "flux-flux"]], "JAX jax": [[870, "jax-jax"]], "TensorFlow 2 tensorflow-2": [[870, "tensorflow-2-tensorflow-2"]], "DEX Language dex-language": [[870, "dex-language-dex-language"]], "tf.Graph": [[871, "tf-graph"]], "Jaxpr": [[871, "jaxpr"]], "torch.jit": [[871, "torch-jit"]], "torch.fx": [[871, "torch-fx"]], "Array API Standard": [[867, "id1"]], "Table:": [[867, "table"]], "Continuous Integration": [[828, "continuous-integration"], [835, "continuous-integration"]], "Commit (Push/PR) Triggered Testing": [[828, "commit-push-pr-triggered-testing"]], "Ivy Tests": [[828, "ivy-tests"], [844, "ivy-tests"]], "Implementation": [[828, "implementation"]], "A Top-Down View": [[828, "a-top-down-view"]], "Storing (and retrieving) the Mapping": [[828, "storing-and-retrieving-the-mapping"]], "Cloning and Pushing to the Repository": [[828, "cloning-and-pushing-to-the-repository"]], "Implementational Nitty Gritties": [[828, "implementational-nitty-gritties"]], "Storage Space (unifyai/Mapping)": [[828, "storage-space-unifyai-mapping"]], "Determine Test Coverage Workflow": [[828, "determine-test-coverage-workflow"]], "Multiple Runners": [[828, "multiple-runners"]], "Race Condition": [[828, "race-condition"]], "Array API Tests": [[828, "array-api-tests"], [823, "array-api-tests"]], "Periodic Testing": [[828, "periodic-testing"]], "Manually Dispatched Workflows": [[828, "manually-dispatched-workflows"]], "CI Pipeline \u27a1\ufe0f": [[828, "ci-pipeline"]], "Push": [[828, "push"]], "Pull Request": [[828, "pull-request"]], "Dashboard": [[828, "dashboard"]], "ONNX onnx": [[869, "onnx-onnx"]], "NNEF nnef": [[869, "nnef-nnef"]], "CoreML coreml": [[869, "coreml-coreml"]], "Gradients": [[839, "gradients"], [635, "gradients"], [374, "gradients"], [59, "module-ivy.data_classes.array.gradients"], [82, "module-ivy.data_classes.container.gradients"]], "Overview": [[839, "overview"], [843, "overview"]], "Example Usage of the Gradient API": [[839, "example-usage-of-the-gradient-api"]], "The ivy.execute_with_gradients() function signature": [[839, "the-ivy-execute-with-gradients-function-signature"]], "An example using ivy.execute_with_gradients()": [[839, "an-example-using-ivy-execute-with-gradients"]], "Custom Gradient Functions": [[839, "custom-gradient-functions"]], "Design of the Gradient API": [[839, "design-of-the-gradient-api"]], "Our policy on gradients": [[839, "our-policy-on-gradients"]], "Gradient APIs of frameworks": [[839, "gradient-apis-of-frameworks"]], "General Structure of Backend-specific implementations": [[839, "general-structure-of-backend-specific-implementations"]], "Framework-specific Considerations": [[839, "framework-specific-considerations"]], "Related Work": [[866, "related-work"]], "ivy.trace_graph()": [[863, "ivy-trace-graph"]], "Tracer API": [[863, "tracer-api"]], "Using the tracer": [[863, "using-the-tracer"]], "Eager vs lazy Compilation": [[863, "eager-vs-lazy-compilation"]], "Array caching": [[863, "array-caching"]], "Generators": [[863, "generators"]], "Stateful": [[863, "stateful"]], "Sharp bits": [[863, "sharp-bits"], [865, "sharp-bits"], [864, "sharp-bits"]], "Data Types": [[829, "data-types"]], "Data Type Module": [[829, "data-type-module"]], "Data Type Promotion": [[829, "data-type-promotion"]], "Precise Mode": [[829, "precise-mode"]], "Precise Promotion Table": [[829, "precise-promotion-table"]], "Non-Precise Promotion Table": [[829, "non-precise-promotion-table"]], "Arguments in other Functions": [[829, "arguments-in-other-functions"], [830, "arguments-in-other-functions"]], "Supported and Unsupported Data Types": [[829, "supported-and-unsupported-data-types"]], "Supported and Unsupported Data Types Attributes": [[829, "supported-and-unsupported-data-types-attributes"]], "Special Case": [[829, "special-case"]], "Backend Data Type Bugs": [[829, "backend-data-type-bugs"]], "Data Type Casting Modes": [[829, "data-type-casting-modes"]], "Superset Data Type Support": [[829, "superset-data-type-support"]], "Ivy-Lint: Ivy\u2019s Custom Code Formatters": [[843, "ivy-lint-ivy-s-custom-code-formatters"]], "Existing Formatters": [[843, "existing-formatters"]], "FunctionOrderingFormatter": [[843, "functionorderingformatter"]], "How the Formatter Works:": [[843, "how-the-formatter-works"]], "Integration and Usage": [[843, "integration-and-usage"]], "Contribution": [[843, "contribution"]], "Round Up": [[843, "round-up"], [36, "Round-Up"], [24, "Round-Up"], [22, "Round-Up"], [28, "Round-Up"], [25, "Round-Up"], [16, "Round-Up"], [37, "Round-Up"], [33, "Round-Up"], [35, "Round-Up"], [32, "Round-Up"], [45, "Round-Up"], [38, "Round-Up"], [26, "Round-Up"], [18, "Round-Up"], [34, "Round-Up"], [27, "Round-Up"], [23, "Round-Up"]], "Why Unify?": [[861, "why-unify"]], "No More Re-implementations \ud83d\udea7": [[861, "no-more-re-implementations"]], "\u201cInfinite\u201d Shelf-Life \u2705": [[861, "infinite-shelf-life"]], "Fix Failing Tests:": [[834, "fix-failing-tests"]], "Prerequirement:": [[834, "prerequirement"]], "Setting Up": [[834, "setting-up"], [819, "setting-up"]], "How to run tests": [[834, "how-to-run-tests"]], "Common Errors": [[834, "common-errors"]], "Where to ask for Help": [[834, "where-to-ask-for-help"]], "LLVM": [[868, "id1"]], "MLIR": [[868, "id2"]], "OneAPI": [[868, "id3"]], "One liners": [[862, "one-liners"]], "Get Started": [[856, "get-started"]], "Installing using pip": [[856, "installing-using-pip"]], "Docker": [[856, "docker"]], "Installing from source": [[856, "installing-from-source"]], "Ivy\u2019s tracer and transpiler": [[856, "ivy-s-tracer-and-transpiler"]], "Ivy Folder": [[856, "ivy-folder"]], "Setting Up the API key": [[856, "setting-up-the-api-key"]], "Issues and Questions": [[856, "issues-and-questions"]], "Building Blocks": [[849, "building-blocks"]], "Backend Functional APIs \u2705": [[849, "backend-functional-apis"]], "Ivy Functional API \u2705": [[849, "ivy-functional-api"]], "Backend Handler \u2705": [[849, "backend-handler"]], "Tracer \ud83d\udea7": [[849, "tracer"]], "Superset Behaviour": [[847, "superset-behaviour"]], "Extending the Standard": [[847, "extending-the-standard"]], "What is the Superset?": [[847, "what-is-the-superset"]], "A Non-Duplicate Superset": [[847, "a-non-duplicate-superset"]], "What is not the Superset?": [[847, "what-is-not-the-superset"]], "Balancing Generalization with Efficiency": [[847, "balancing-generalization-with-efficiency"]], "More Examples": [[847, "more-examples"]], "Maximizing Usage of Native Functionality": [[847, "maximizing-usage-of-native-functionality"]], "Formatting": [[835, "formatting"]], "Lint Checks": [[835, "lint-checks"], [835, "id2"]], "Setup Formatting Locally": [[835, "setup-formatting-locally"]], "Pre-commit": [[835, "pre-commit"]], "VS Code": [[835, "vs-code"]], "PyCharm": [[835, "pycharm"], [819, "pycharm"]], "Common Issues with Pre-Commit": [[835, "common-issues-with-pre-commit"]], "Lint Formatting": [[835, "lint-formatting"]], "Testing Pipeline": [[844, "testing-pipeline"]], "Hypothesis": [[844, "id2"]], "Data Generation": [[844, "id3"]], "Writing your own strategy": [[844, "writing-your-own-strategy"]], "Writing Hypothesis Tests": [[844, "writing-hypothesis-tests"]], "Ivy Test Decorators": [[844, "ivy-test-decorators"]], "Writing Ivy Tests": [[844, "writing-ivy-tests"]], "Integration of Strategies into Ivy Tests": [[844, "integration-of-strategies-into-ivy-tests"]], "Adding Explicit Examples to tests": [[844, "adding-explicit-examples-to-tests"]], "Why do we need helper functions?": [[844, "why-do-we-need-helper-functions"]], "How to write Hypothesis Tests effectively": [[844, "how-to-write-hypothesis-tests-effectively"]], "Testing Partial Mixed Functions": [[844, "testing-partial-mixed-functions"]], "Bonus: Hypothesis\u2019 Extended Features": [[844, "bonus-hypothesis-extended-features"]], "Self-Consistent and Explicit Testing": [[844, "self-consistent-and-explicit-testing"]], "test_array_function": [[844, "id5"]], "Running Ivy Tests": [[844, "running-ivy-tests"]], "Re-Running Failed Ivy Tests": [[844, "re-running-failed-ivy-tests"]], "Ivy Array": [[851, "ivy-array"], [824, "ivy-array"]], "The Array Class": [[851, "the-array-class"]], "Unifying Operators": [[851, "unifying-operators"]], "API Monkey Patching": [[851, "api-monkey-patching"]], "Instance Methods": [[851, "instance-methods"]], "ivy.unify()": [[865, "ivy-unify"]], "Unify API": [[865, "unify-api"]], "Usage": [[865, "usage"]], "Ivy Container": [[852, "ivy-container"]], "Construction": [[852, "construction"]], "Representation": [[852, "representation"]], "Recursive Methods": [[852, "recursive-methods"]], "Built-ins": [[852, "built-ins"]], "Access": [[852, "access"]], "Saving and Loading": [[852, "saving-and-loading"]], "Comparisons": [[852, "comparisons"]], "Customized Representations": [[852, "customized-representations"]], "Use Cases": [[852, "use-cases"]], "Compartmentalization": [[852, "compartmentalization"]], "Configuration": [[852, "configuration"]], "Data loading": [[852, "data-loading"]], "Network weights": [[852, "network-weights"]], "Ivy Exception Class": [[833, "ivy-exception-class"]], "Configurable Mode for Stack Trace": [[833, "configurable-mode-for-stack-trace"]], "Ivy func_wrapper Pruning": [[833, "ivy-func-wrapper-pruning"]], "@handle_exceptions Decorator": [[833, "handle-exceptions-decorator"]], "Consistency in Errors": [[833, "consistency-in-errors"]], "Assertion Function": [[833, "assertion-function"]], "Quansight": [[872, "id1"]], "Modular": [[872, "id2"]], "OctoML": [[872, "id3"]], "ivy.transpile()": [[864, "ivy-transpile"]], "Transpiler API": [[864, "transpiler-api"]], "Using the transpiler": [[864, "using-the-transpiler"]], "Transpiling functions": [[864, "transpiling-functions"]], "Transpiling Libraries": [[864, "transpiling-libraries"]], "Transpiling Modules": [[864, "transpiling-modules"]], "Standardization": [[860, "standardization"]], "Skepticism": [[860, "skepticism"]], "Complimentary vs Competitive": [[860, "complimentary-vs-competitive"]], "Do Standards Work?": [[860, "do-standards-work"]], "The Array API Standard": [[860, "the-array-api-standard"]], "Design": [[848, "design"]], "Motivation": [[858, "motivation"]], "Apache TVM": [[873, "apache-tvm"]], "XLA": [[873, "xla"]], "GCC": [[873, "gcc"]], "Docstring Examples": [[831, "docstring-examples"]], "ivy.tan": [[831, "ivy-tan"]], "ivy.roll": [[831, "ivy-roll"]], "ivy.add": [[831, "ivy-add"]], "Devices": [[830, "devices"]], "Device Module": [[830, "device-module"]], "Device handling": [[830, "device-handling"]], "ML Explosion": [[859, "ml-explosion"]], "Docstrings": [[832, "docstrings"]], "Ivy Frontend Tests": [[842, "ivy-frontend-tests"]], "Frontend Test Examples": [[842, "frontend-test-examples"]], "ivy.tan()": [[842, "ivy-tan"]], "ivy.full()": [[842, "ivy-full"]], "Testing Without Using Tests Values": [[842, "testing-without-using-tests-values"]], "Alias functions": [[842, "alias-functions"]], "Frontend Instance Method Tests": [[842, "frontend-instance-method-tests"]], "Frontend Instance Method Test Examples": [[842, "frontend-instance-method-test-examples"]], "ivy.add()": [[842, "ivy-add"]], "Hypothesis Helpers": [[842, "hypothesis-helpers"]], "Frontend Framework Testing Configuration": [[842, "frontend-framework-testing-configuration"]], "Glossary": [[857, "glossary"]], "empty": [[130, "empty"]], "Elementwise": [[107, "module-ivy.data_classes.nested_array.elementwise"], [632, "elementwise"], [372, "elementwise"], [56, "module-ivy.data_classes.array.elementwise"], [79, "module-ivy.data_classes.container.elementwise"]], "sigmoid": [[116, "sigmoid"]], "mish": [[114, "mish"]], "log_softmax": [[113, "log-softmax"]], "Tr tensor": [[99, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "eye": [[132, "eye"]], "Container": [[103, "container"]], "hardswish": [[111, "hardswish"]], "Parafac2 tensor": [[98, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "cmp_is": [[120, "cmp-is"]], "array": [[127, "array"]], "Factorized tensor": [[104, "factorized-tensor"]], "Nested array": [[105, "nested-array"]], "gelu": [[110, "gelu"]], "empty_like": [[131, "empty-like"]], "Functions": [[109, "functions"]], "softsign": [[119, "softsign"]], "from_dlpack": [[133, "from-dlpack"]], "copy_array": [[129, "copy-array"]], "Statistical": [[93, "module-ivy.data_classes.container.statistical"], [647, "statistical"], [387, "statistical"], [70, "module-ivy.data_classes.array.statistical"]], "for_loop": [[122, "for-loop"]], "relu": [[115, "relu"]], "Cp tensor": [[97, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "Wrapping": [[95, "module-ivy.data_classes.container.wrapping"], [72, "module-ivy.data_classes.array.wrapping"]], "softplus": [[118, "softplus"]], "cmp_isnot": [[121, "cmp-isnot"]], "full": [[135, "full"]], "frombuffer": [[134, "frombuffer"]], "Utility": [[94, "module-ivy.data_classes.container.utility"], [648, "utility"], [388, "utility"], [71, "module-ivy.data_classes.array.utility"]], "arange": [[126, "arange"]], "Sorting": [[92, "module-ivy.data_classes.container.sorting"], [646, "sorting"], [385, "sorting"], [69, "module-ivy.data_classes.array.sorting"]], "Base": [[106, "module-ivy.data_classes.nested_array.base"], [96, "module-ivy.data_classes.factorized_tensor.base"], [74, "module-ivy.data_classes.container.base"]], "full_like": [[136, "full-like"]], "while_loop": [[125, "while-loop"]], "Tt tensor": [[100, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "if_else": [[123, "if-else"]], "leaky_relu": [[112, "leaky-relu"]], "try_except": [[124, "try-except"]], "asarray": [[128, "asarray"]], "Array": [[102, "array"]], "linspace": [[137, "linspace"]], "Data classes": [[108, "data-classes"]], "Tucker tensor": [[101, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "softmax": [[117, "softmax"]], "random_uniform": [[741, "random-uniform"]], "std": [[764, "std"]], "multinomial": [[738, "multinomial"]], "einsum": [[759, "einsum"]], "Multiprocessing": [[780, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "nonzero": [[747, "nonzero"]], "shuffle": [[743, "shuffle"]], "max": [[760, "max"]], "cumsum": [[758, "cumsum"]], "Function testing": [[773, "module-ivy_tests.test_ivy.helpers.function_testing"]], "all": [[767, "all"]], "unique_values": [[752, "unique-values"]], "Data-dependent output shape": [[752, null], [751, null], [749, null], [750, null], [645, null], [645, null], [645, null], [645, null]], "unique_inverse": [[751, "unique-inverse"]], "Assertions": [[771, "module-ivy_tests.test_ivy.helpers.assertions"], [798, "module-ivy.utils.assertions"]], "Array helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "min": [[762, "min"]], "randint": [[739, "randint"]], "msort": [[754, "msort"]], "unique_all": [[749, "unique-all"]], "cumprod": [[757, "cumprod"]], "searchsorted": [[755, "searchsorted"]], "mean": [[761, "mean"]], "argsort": [[753, "argsort"]], "any": [[768, "any"]], "Dtype helpers": [[777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "set_nest_at_indices": [[736, "set-nest-at-indices"]], "seed": [[742, "seed"]], "Globals": [[774, "module-ivy_tests.test_ivy.helpers.globals"]], "var": [[766, "var"]], "General helpers": [[778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "prod": [[763, "prod"]], "argwhere": [[746, "argwhere"]], "Number helpers": [[779, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "where": [[748, "where"]], "save": [[770, "save"]], "unique_counts": [[750, "unique-counts"]], "Hypothesis helpers": [[775, "hypothesis-helpers"]], "sort": [[756, "sort"]], "load": [[769, "load"]], "argmax": [[744, "argmax"]], "sum": [[765, "sum"]], "layer_norm": [[737, "layer-norm"]], "argmin": [[745, "argmin"]], "random_normal": [[740, "random-normal"]], "Available frameworks": [[772, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "Pipeline helper": [[781, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "Framework classes": [[785, "framework-classes"]], "Testing": [[787, "testing"], [45, "Testing"]], "Verbosity": [[811, "module-ivy.utils.verbosity"]], "Dynamic import": [[804, "module-ivy.utils.dynamic_import"]], "Backend Setting": [[825, "backend-setting"]], "Dynamic Backend Setting": [[825, "dynamic-backend-setting"]], "Backend and Frontend Version Support": [[825, "backend-and-frontend-version-support"]], "Losses": [[793, "module-ivy.stateful.losses"], [638, "losses"], [377, "losses"], [86, "module-ivy.data_classes.container.losses"], [63, "module-ivy.data_classes.array.losses"]], "Backend": [[799, "backend"]], "Status": [[812, "status"]], "Unified AI": [[812, "unified-ai"]], "Getting started": [[812, "getting-started"]], "Installing ivy": [[812, "installing-ivy"]], "Using Ivy": [[812, "using-ivy"]], "Documentation": [[812, "documentation"]], "Contributing": [[812, "contributing"], [813, "contributing"]], "Community": [[812, "community"]], "Citation": [[812, "citation"]], "Helpers": [[790, "module-ivy.stateful.helpers"]], "Contributor Program": [[821, "contributor-program"]], "Contributor": [[821, "contributor"]], "Core Contributor": [[821, "core-contributor"]], "Rising Contributor": [[821, "rising-contributor"]], "Top Contributor": [[821, "top-contributor"]], "Contributor Rewards": [[815, "contributor-rewards"]], "Badges": [[815, "badges"]], "Badge Tiers": [[815, "badge-tiers"]], "Test parameter flags": [[783, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "Arrays": [[824, "arrays"]], "Native Array": [[824, "native-array"]], "Array Handling": [[824, "array-handling"]], "Integrating custom classes with Ivy": [[824, "integrating-custom-classes-with-ivy"]], "Activations": [[788, "module-ivy.stateful.activations"], [626, "activations"], [367, "activations"], [73, "module-ivy.data_classes.container.activations"], [51, "module-ivy.data_classes.array.activations"]], "Parameter": [[788, "parameter"], [788, "id1"], [578, "parameter"], [584, "parameter"], [585, "parameter"], [587, "parameter"], [588, "parameter"], [579, "parameter"], [634, "parameter"], [634, "id1"], [634, "id2"], [634, "id3"], [634, "id4"], [634, "id5"], [631, "parameter"], [210, "parameter"]], "Profiler": [[810, "module-ivy.utils.profiler"]], "Binaries": [[803, "module-ivy.utils.binaries"]], "Handler": [[801, "module-ivy.utils.backend.handler"]], "Layers": [[792, "module-ivy.stateful.layers"], [636, "layers"], [375, "layers"], [84, "module-ivy.data_classes.container.layers"], [61, "module-ivy.data_classes.array.layers"]], "Helpful Resources": [[817, "helpful-resources"]], "Sequential": [[797, "module-ivy.stateful.sequential"]], "Structs": [[782, "module-ivy_tests.test_ivy.helpers.structs"]], "Logging": [[809, "module-ivy.utils.logging"]], "The Basics": [[820, "the-basics"]], "Getting Help": [[820, "getting-help"]], "ToDo List Issues": [[820, "todo-list-issues"]], "Managing Your Fork": [[820, "managing-your-fork"]], "Who To Ask": [[820, "who-to-ask"]], "With Command Line:": [[820, "with-command-line"]], "With Browser:": [[820, "with-browser"]], "Pull Requests": [[820, "pull-requests"]], "Small Commits Often": [[820, "small-commits-often"]], "Interactive Ivy Docker Container": [[820, "interactive-ivy-docker-container"]], "Running Tests Locally": [[820, "running-tests-locally"]], "With Docker": [[820, "with-docker"]], "Getting the most out of IDE": [[820, "getting-the-most-out-of-ide"]], "with PyCharm": [[820, "with-pycharm"]], "Running the Tests": [[823, "running-the-tests"]], "Using Terminal": [[823, "using-terminal"]], "Using the IDE": [[823, "using-the-ide"]], "Regenerating Test Failures": [[823, "regenerating-test-failures"]], "Test Skipping": [[823, "test-skipping"]], "Exceptions": [[807, "module-ivy.utils.exceptions"]], "Forking and cloning the repo": [[819, "forking-and-cloning-the-repo"]], "Pre-Commit": [[819, "pre-commit"]], "Virtual environments - No Docker": [[819, "virtual-environments-no-docker"]], "Using miniconda": [[819, "using-miniconda"]], "Using venv": [[819, "using-venv"]], "Docker Interpreter with PyCharm": [[819, "docker-interpreter-with-pycharm"]], "Windows": [[819, "windows"], [819, "id6"]], "MacOS": [[819, "macos"]], "Ubuntu": [[819, "ubuntu"], [819, "id8"]], "Setting Up Testing in PyCharm": [[819, "setting-up-testing-in-pycharm"]], "More Detailed Hypothesis Logs in PyCharm": [[819, "more-detailed-hypothesis-logs-in-pycharm"]], "Setting up for Free": [[819, "setting-up-for-free"]], "WSL": [[819, "wsl"]], "GitHub Codespaces": [[819, "github-codespaces"]], "The Binaries": [[819, "the-binaries"]], "Deep Dive": [[822, "deep-dive"]], "Einsum parser": [[805, "module-ivy.utils.einsum_parser"]], "Norms": [[795, "module-ivy.stateful.norms"], [642, "norms"], [381, "norms"], [88, "module-ivy.data_classes.container.norms"], [65, "module-ivy.data_classes.array.norms"]], "Building the Docs": [[814, "building-the-docs"]], "Building the Docs using Docker": [[814, "building-the-docs-using-docker"]], "Using convenience script": [[814, "using-convenience-script"]], "Using existing image on Docker Hub": [[814, "using-existing-image-on-docker-hub"]], "Building the image locally": [[814, "building-the-image-locally"]], "Building the Docs without Docker": [[814, "building-the-docs-without-docker"]], "Module": [[794, "module-ivy.stateful.module"]], "Einsum path helpers": [[806, "module-ivy.utils.einsum_path_helpers"]], "Containers": [[827, "containers"]], "Container Instance Methods": [[827, "container-instance-methods"]], "API Instance Methods": [[827, "api-instance-methods"]], "API Special Methods": [[827, "api-special-methods"]], "Error Handling": [[816, "error-handling"]], "Sub backend handler": [[802, "module-ivy.utils.backend.sub_backend_handler"]], "Ast helpers": [[800, "module-ivy.utils.backend.ast_helpers"]], "Utils": [[786, "utils"]], "Converters": [[789, "module-ivy.stateful.converters"]], "Testing helpers": [[784, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "Inspection": [[808, "module-ivy.utils.inspection"]], "Building the Docs Pipeline": [[826, "building-the-docs-pipeline"]], "How the doc-builder is being run": [[826, "how-the-doc-builder-is-being-run"]], "The convenience script": [[826, "the-convenience-script"]], "Options": [[826, "options"]], "The Docker image": [[826, "the-docker-image"]], "How Ivy\u2019s docs is structured": [[826, "how-ivy-s-docs-is-structured"]], "index.rst": [[826, "index-rst"]], "partial_conf.py": [[826, "partial-conf-py"]], "prebuild.sh": [[826, "prebuild-sh"]], "Custom Extensions": [[826, "custom-extensions"]], "custom_autosummary": [[826, "custom-autosummary"]], ":hide-table:": [[826, "hide-table"]], "discussion_linker": [[826, "discussion-linker"]], "skippable_function": [[826, "skippable-function"]], "ivy_data": [[826, "ivy-data"]], "Open Tasks": [[818, "open-tasks"]], "Fixing Failing Tests": [[818, "fixing-failing-tests"]], "How to Contribute": [[818, "how-to-contribute"]], "Frontend APIs": [[818, "frontend-apis"]], "Where to place a frontend function": [[818, "where-to-place-a-frontend-function"]], "Frontend checklist": [[818, "frontend-checklist"]], "Function Formatting": [[818, "function-formatting"]], "Formatting checklist": [[818, "formatting-checklist"]], "Ivy Experimental API": [[818, "ivy-experimental-api"]], "Extending the Ivy API": [[818, "extending-the-ivy-api"]], "Where to place a backend function": [[818, "where-to-place-a-backend-function"]], "Creating an Issue on Ivy\u2019s GitHub using a Template": [[818, "creating-an-issue-on-ivy-s-github-using-a-template"]], "zero_pad": [[714, "zero-pad"]], "clip": [[699, "clip"]], "concat": [[700, "concat"]], "index_nest": [[721, "index-nest"]], "constant_pad": [[701, "constant-pad"]], "multi_index_nest": [[727, "multi-index-nest"]], "fomaml_step": [[715, "fomaml-step"]], "repeat": [[705, "repeat"]], "vander": [[692, "vander"]], "vecdot": [[693, "vecdot"]], "tile": [[712, "tile"]], "map_nest_at_indices": [[726, "map-nest-at-indices"]], "nested_map": [[730, "nested-map"]], "unstack": [[713, "unstack"]], "insert_into_nest_at_index": [[722, "insert-into-nest-at-index"]], "expand_dims": [[702, "expand-dims"]], "stack": [[710, "stack"]], "maml_step": [[716, "maml-step"]], "nested_any": [[728, "nested-any"]], "duplicate_array_index_chains": [[720, "duplicate-array-index-chains"]], "nested_multi_map": [[731, "nested-multi-map"]], "squeeze": [[709, "squeeze"]], "flip": [[703, "flip"]], "map_nest_at_index": [[725, "map-nest-at-index"]], "nested_argwhere": [[729, "nested-argwhere"]], "map": [[724, "map"]], "tensorsolve": [[690, "tensorsolve"]], "all_nested_indices": [[718, "all-nested-indices"]], "insert_into_nest_at_indices": [[723, "insert-into-nest-at-indices"]], "reshape": [[706, "reshape"]], "binary_cross_entropy": [[696, "binary-cross-entropy"]], "split": [[708, "split"]], "sparse_cross_entropy": [[698, "sparse-cross-entropy"]], "prune_nest_at_index": [[733, "prune-nest-at-index"]], "prune_empty": [[732, "prune-empty"]], "permute_dims": [[704, "permute-dims"]], "trace": [[691, "trace"]], "prune_nest_at_indices": [[734, "prune-nest-at-indices"]], "reptile_step": [[717, "reptile-step"]], "vector_norm": [[694, "vector-norm"]], "copy_nest": [[719, "copy-nest"]], "roll": [[707, "roll"]], "vector_to_skew_symmetric_matrix": [[695, "vector-to-skew-symmetric-matrix"]], "cross_entropy": [[697, "cross-entropy"]], "set_nest_at_index": [[735, "set-nest-at-index"]], "swapaxes": [[711, "swapaxes"]], "slogdet": [[685, "slogdet"]], "inv": [[676, "inv"]], "lstm": [[661, "lstm"]], "conv1d": [[650, "conv1d"]], "pinv": [[683, "pinv"]], "cholesky": [[667, "cholesky"]], "lstm_update": [[662, "lstm-update"]], "nms": [[664, "nms"]], "det": [[669, "det"]], "conv": [[649, "conv"]], "cross": [[668, "cross"]], "matrix_rank": [[680, "matrix-rank"]], "Searching": [[644, "searching"], [383, "searching"], [67, "module-ivy.data_classes.array.searching"], [90, "module-ivy.data_classes.container.searching"]], "conv2d": [[652, "conv2d"]], "depthwise_conv2d": [[658, "depthwise-conv2d"]], "multi_head_attention": [[663, "multi-head-attention"]], "outer": [[682, "outer"]], "matmul": [[677, "matmul"]], "conv3d_transpose": [[655, "conv3d-transpose"]], "Set": [[645, "set"], [384, "module-ivy.functional.ivy.experimental.set"], [91, "module-ivy.data_classes.container.set"], [68, "module-ivy.data_classes.array.set"]], "linear": [[660, "linear"]], "eigvalsh": [[674, "eigvalsh"]], "matrix_norm": [[678, "matrix-norm"]], "matrix_power": [[679, "matrix-power"]], "diag": [[670, "diag"]], "conv1d_transpose": [[651, "conv1d-transpose"]], "conv3d": [[654, "conv3d"]], "matrix_transpose": [[681, "matrix-transpose"]], "dropout": [[659, "dropout"]], "conv2d_transpose": [[653, "conv2d-transpose"]], "inner": [[675, "inner"]], "conv_general_dilated": [[656, "conv-general-dilated"]], "roi_align": [[665, "roi-align"]], "qr": [[684, "qr"]], "eigh": [[673, "eigh"]], "svd": [[687, "svd"]], "svdvals": [[688, "svdvals"]], "scaled_dot_product_attention": [[666, "scaled-dot-product-attention"]], "eig": [[672, "eig"], [429, "eig"]], "diagonal": [[671, "diagonal"]], "tensordot": [[689, "tensordot"]], "conv_general_transpose": [[657, "conv-general-transpose"]], "solve": [[686, "solve"]], "multiprocessing": [[573, "multiprocessing"]], "get_item": [[555, "get-item"]], "set_array_mode": [[578, "set-array-mode"]], "has_nans": [[558, "has-nans"]], "is_ivy_array": [[565, "is-ivy-array"]], "itemsize": [[571, "itemsize"]], "set_min_denominator": [[583, "set-min-denominator"]], "set_nestable_mode": [[584, "set-nestable-mode"]], "set_precise_mode": [[585, "set-precise-mode"]], "get_referrers_recursive": [[557, "get-referrers-recursive"]], "isin": [[569, "isin"]], "set_shape_array_mode": [[587, "set-shape-array-mode"]], "shape": [[590, "shape"]], "strides": [[594, "strides"]], "print_all_arrays_in_memory": [[575, "print-all-arrays-in-memory"]], "gather_nd": [[553, "gather-nd"]], "is_ivy_nested_array": [[567, "is-ivy-nested-array"]], "match_kwargs": [[572, "match-kwargs"]], "set_item": [[581, "set-item"]], "set_tmp_dir": [[589, "set-tmp-dir"]], "supports_inplace_updates": [[595, "supports-inplace-updates"]], "set_min_base": [[582, "set-min-base"]], "set_show_func_wrapper_trace_mode": [[588, "set-show-func-wrapper-trace-mode"]], "set_inplace_mode": [[580, "set-inplace-mode"]], "to_ivy_shape": [[596, "to-ivy-shape"]], "inplace_update": [[562, "inplace-update"]], "stable_divide": [[592, "stable-divide"]], "size": [[591, "size"]], "is_ivy_container": [[566, "is-ivy-container"]], "num_arrays_in_memory": [[574, "num-arrays-in-memory"]], "inplace_increment": [[561, "inplace-increment"]], "scatter_nd": [[577, "scatter-nd"]], "inplace_arrays_supported": [[559, "inplace-arrays-supported"]], "is_native_array": [[568, "is-native-array"]], "get_all_arrays_in_memory": [[554, "get-all-arrays-in-memory"]], "is_array": [[564, "is-array"]], "stable_pow": [[593, "stable-pow"]], "inplace_decrement": [[560, "inplace-decrement"]], "set_queue_timeout": [[586, "set-queue-timeout"]], "get_num_dims": [[556, "get-num-dims"]], "inplace_variables_supported": [[563, "inplace-variables-supported"]], "gather": [[552, "gather"]], "isscalar": [[570, "isscalar"]], "to_list": [[597, "to-list"]], "set_exception_trace_mode": [[579, "set-exception-trace-mode"]], "scatter_flat": [[576, "scatter-flat"]], "histogram": [[525, "histogram"]], "quantile": [[532, "quantile"]], "array_equal": [[537, "array-equal"]], "invert_permutation": [[514, "invert-permutation"]], "function_unsupported_devices_and_dtypes": [[551, "function-unsupported-devices-and-dtypes"]], "cov": [[522, "cov"]], "dirichlet": [[510, "dirichlet"]], "local_response_norm": [[506, "local-response-norm"]], "exists": [[548, "exists"]], "native_sparse_array": [[518, "native-sparse-array"]], "arg_names": [[536, "arg-names"]], "gamma": [[511, "gamma"]], "nanprod": [[531, "nanprod"]], "cache_fn": [[539, "cache-fn"]], "cummin": [[524, "cummin"]], "cummax": [[523, "cummax"]], "function_supported_devices_and_dtypes": [[550, "function-supported-devices-and-dtypes"]], "all_equal": [[534, "all-equal"]], "lexsort": [[515, "lexsort"]], "nanmin": [[530, "nanmin"]], "nanmean": [[528, "nanmean"]], "poisson": [[512, "poisson"]], "unravel_index": [[513, "unravel-index"]], "current_backend_str": [[543, "current-backend-str"]], "lp_normalize": [[507, "lp-normalize"]], "clip_matrix_norm": [[540, "clip-matrix-norm"]], "beta": [[509, "beta"]], "median": [[527, "median"]], "arg_info": [[535, "arg-info"]], "einops_rearrange": [[545, "einops-rearrange"]], "fourier_encode": [[549, "fourier-encode"]], "is_ivy_sparse_array": [[516, "is-ivy-sparse-array"]], "corrcoef": [[521, "corrcoef"]], "assert_supports_inplace": [[538, "assert-supports-inplace"]], "is_native_sparse_array": [[517, "is-native-sparse-array"]], "native_sparse_array_to_indices_values_and_shape": [[519, "native-sparse-array-to-indices-values-and-shape"]], "nanmedian": [[529, "nanmedian"]], "bincount": [[520, "bincount"]], "container_types": [[542, "container-types"]], "igamma": [[526, "igamma"]], "default": [[544, "default"]], "einops_repeat": [[547, "einops-repeat"]], "einops_reduce": [[546, "einops-reduce"]], "optional_get_element": [[533, "optional-get-element"]], "bernoulli": [[508, "bernoulli"]], "clip_vector_norm": [[541, "clip-vector-norm"]], "moveaxis": [[483, "moveaxis"]], "take": [[492, "take"]], "atleast_2d": [[463, "atleast-2d"]], "flatten": [[474, "flatten"]], "vsplit": [[499, "vsplit"]], "unique_consecutive": [[498, "unique-consecutive"]], "column_stack": [[468, "column-stack"]], "choose": [[467, "choose"]], "matricize": [[482, "matricize"]], "group_norm": [[502, "group-norm"]], "l2_normalize": [[505, "l2-normalize"]], "put_along_axis": [[489, "put-along-axis"]], "partial_unfold": [[487, "partial-unfold"]], "partial_fold": [[485, "partial-fold"]], "top_k": [[494, "top-k"]], "dsplit": [[470, "dsplit"]], "dstack": [[471, "dstack"]], "broadcast_shapes": [[465, "broadcast-shapes"]], "hstack": [[480, "hstack"]], "pad": [[484, "pad"]], "concat_from_sequence": [[469, "concat-from-sequence"]], "check_scalar": [[466, "check-scalar"]], "partial_vec_to_tensor": [[488, "partial-vec-to-tensor"]], "fliplr": [[475, "fliplr"]], "unfold": [[497, "unfold"]], "as_strided": [[460, "as-strided"]], "instance_norm": [[503, "instance-norm"]], "l1_normalize": [[504, "l1-normalize"]], "flipud": [[476, "flipud"]], "fold": [[477, "fold"]], "associative_scan": [[461, "associative-scan"]], "batch_norm": [[501, "batch-norm"]], "unflatten": [[496, "unflatten"]], "soft_thresholding": [[491, "soft-thresholding"]], "i0": [[481, "i0"]], "heaviside": [[478, "heaviside"]], "hsplit": [[479, "hsplit"]], "vstack": [[500, "vstack"]], "partial_tensor_to_vec": [[486, "partial-tensor-to-vec"]], "fill_diagonal": [[473, "fill-diagonal"]], "rot90": [[490, "rot90"]], "trim_zeros": [[495, "trim-zeros"]], "take_along_axis": [[493, "take-along-axis"]], "expand": [[472, "expand"]], "atleast_1d": [[462, "atleast-1d"]], "atleast_3d": [[464, "atleast-3d"]], "jac": [[620, "jac"]], "to_numpy": [[599, "to-numpy"]], "unset_queue_timeout": [[609, "unset-queue-timeout"]], "Random": [[643, "random"], [382, "random"], [66, "module-ivy.data_classes.array.random"], [89, "module-ivy.data_classes.container.random"]], "adam_update": [[616, "adam-update"]], "unset_show_func_wrapper_trace_mode": [[611, "unset-show-func-wrapper-trace-mode"]], "unset_exception_trace_mode": [[603, "unset-exception-trace-mode"]], "unset_inplace_mode": [[604, "unset-inplace-mode"]], "unset_array_mode": [[602, "unset-array-mode"]], "Data type": [[630, "data-type"], [370, "module-ivy.functional.ivy.experimental.data_type"], [54, "module-ivy.data_classes.array.data_type"], [77, "module-ivy.data_classes.container.data_type"]], "unset_min_denominator": [[606, "unset-min-denominator"]], "General": [[634, "general"], [373, "general"], [81, "module-ivy.data_classes.container.general"], [58, "module-ivy.data_classes.array.general"]], "Nest": [[641, "nest"], [380, "module-ivy.functional.ivy.experimental.nest"]], "execute_with_gradients": [[617, "execute-with-gradients"]], "Manipulation": [[639, "manipulation"], [378, "manipulation"], [64, "module-ivy.data_classes.array.manipulation"], [87, "module-ivy.data_classes.container.manipulation"]], "unset_shape_array_mode": [[610, "unset-shape-array-mode"]], "try_else_none": [[601, "try-else-none"]], "Constants": [[627, "module-ivy.functional.ivy.constants"], [368, "module-ivy.functional.ivy.experimental.constants"]], "Linear algebra": [[637, "linear-algebra"], [376, "linear-algebra"], [62, "module-ivy.data_classes.array.linear_algebra"], [85, "module-ivy.data_classes.container.linear_algebra"]], "unset_nestable_mode": [[607, "unset-nestable-mode"]], "Meta": [[640, "meta"], [379, "module-ivy.functional.ivy.experimental.meta"]], "Experimental": [[633, "experimental"], [57, "module-ivy.data_classes.array.experimental"], [80, "module-ivy.data_classes.container.experimental"]], "Creation": [[629, "creation"], [369, "creation"], [76, "module-ivy.data_classes.container.creation"], [53, "module-ivy.data_classes.array.creation"]], "Device": [[631, "device"], [371, "module-ivy.functional.ivy.experimental.device"], [78, "module-ivy.data_classes.container.device"], [55, "module-ivy.data_classes.array.device"]], "adam_step": [[615, "adam-step"]], "lars_update": [[622, "lars-update"]], "value_and_grad": [[625, "value-and-grad"]], "unset_precise_mode": [[608, "unset-precise-mode"]], "value_is_nan": [[613, "value-is-nan"]], "gradient_descent_update": [[619, "gradient-descent-update"]], "vmap": [[614, "vmap"]], "to_native_shape": [[598, "to-native-shape"]], "grad": [[618, "grad"]], "unset_min_base": [[605, "unset-min-base"]], "Control flow ops": [[628, "control-flow-ops"]], "unset_tmp_dir": [[612, "unset-tmp-dir"]], "stop_gradient": [[624, "stop-gradient"]], "to_scalar": [[600, "to-scalar"]], "optimizer_update": [[623, "optimizer-update"]], "lamb_update": [[621, "lamb-update"]], "eigvals": [[431, "eigvals"]], "smooth_l1_loss": [[458, "smooth-l1-loss"]], "tucker": [[451, "tucker"]], "hinge_embedding_loss": [[452, "hinge-embedding-loss"]], "tensor_train": [[448, "tensor-train"]], "rfftn": [[420, "rfftn"]], "tt_matrix_to_tensor": [[450, "tt-matrix-to-tensor"]], "adjoint": [[424, "adjoint"]], "log_poisson_loss": [[456, "log-poisson-loss"]], "rfft": [[419, "rfft"]], "pool": [[417, "pool"]], "khatri_rao": [[435, "khatri-rao"]], "make_svd_non_negative": [[440, "make-svd-non-negative"]], "stft": [[423, "stft"]], "truncated_svd": [[449, "truncated-svd"]], "l1_loss": [[455, "l1-loss"]], "poisson_nll_loss": [[457, "poisson-nll-loss"]], "general_inner_product": [[432, "general-inner-product"]], "max_pool3d": [[414, "max-pool3d"]], "partial_tucker": [[445, "partial-tucker"]], "eigh_tridiagonal": [[430, "eigh-tridiagonal"]], "kron": [[436, "kron"]], "multi_mode_dot": [[444, "multi-mode-dot"]], "max_unpool1d": [[415, "max-unpool1d"]], "soft_margin_loss": [[459, "soft-margin-loss"]], "lu_factor": [[438, "lu-factor"]], "sliding_window": [[422, "sliding-window"]], "kronecker": [[437, "kronecker"]], "mode_dot": [[442, "mode-dot"]], "diagflat": [[427, "diagflat"]], "multi_dot": [[443, "multi-dot"]], "reduce_window": [[418, "reduce-window"]], "dot": [[428, "dot"]], "higher_order_moment": [[433, "higher-order-moment"]], "solve_triangular": [[446, "solve-triangular"]], "svd_flip": [[447, "svd-flip"]], "initialize_tucker": [[434, "initialize-tucker"]], "matrix_exp": [[441, "matrix-exp"]], "rnn": [[421, "rnn"]], "huber_loss": [[453, "huber-loss"]], "kl_div": [[454, "kl-div"]], "lu_solve": [[439, "lu-solve"]], "cond": [[426, "cond"]], "batched_outer": [[425, "batched-outer"]], "nearest_interpolate": [[416, "nearest-interpolate"]], "lerp": [[353, "lerp"]], "random_cp": [[323, "random-cp"]], "copysign": [[339, "copysign"]], "fix": [[345, "fix"]], "nansum": [[356, "nansum"]], "zeta": [[362, "zeta"]], "frexp": [[348, "frexp"]], "sparsify_tensor": [[360, "sparsify-tensor"]], "random_parafac2": [[324, "random-parafac2"]], "modf": [[355, "modf"]], "signbit": [[358, "signbit"]], "vorbis_window": [[333, "vorbis-window"]], "xlogy": [[361, "xlogy"]], "amin": [[336, "amin"]], "count_nonzero": [[340, "count-nonzero"]], "unsorted_segment_min": [[331, "unsorted-segment-min"]], "allclose": [[334, "allclose"]], "binarizer": [[337, "binarizer"]], "gradient": [[349, "gradient"]], "vjp": [[366, "vjp"]], "sinc": [[359, "sinc"]], "nextafter": [[357, "nextafter"]], "reduce": [[363, "reduce"]], "trilu": [[329, "trilu"]], "random_tr": [[325, "random-tr"]], "tril_indices": [[328, "tril-indices"]], "float_power": [[346, "float-power"]], "diff": [[341, "diff"]], "isclose": [[351, "isclose"]], "polyval": [[322, "polyval"]], "ldexp": [[352, "ldexp"]], "erfc": [[343, "erfc"]], "random_tucker": [[327, "random-tucker"]], "jvp": [[365, "jvp"]], "amax": [[335, "amax"]], "lgamma": [[354, "lgamma"]], "erfinv": [[344, "erfinv"]], "unsorted_segment_mean": [[330, "unsorted-segment-mean"]], "unsorted_segment_sum": [[332, "unsorted-segment-sum"]], "digamma": [[342, "digamma"]], "bind_custom_gradient_function": [[364, "bind-custom-gradient-function"]], "conj": [[338, "conj"]], "hypot": [[350, "hypot"]], "fmax": [[347, "fmax"]], "random_tt": [[326, "random-tt"]], "adaptive_avg_pool1d": [[389, "adaptive-avg-pool1d"]], "area_interpolate": [[393, "area-interpolate"]], "avg_pool1d": [[394, "avg-pool1d"]], "dropout3d": [[401, "dropout3d"]], "embedding": [[402, "embedding"]], "ifftn": [[409, "ifftn"]], "adaptive_avg_pool2d": [[390, "adaptive-avg-pool2d"]], "generate_einsum_equation": [[405, "generate-einsum-equation"]], "interp": [[410, "interp"]], "adaptive_max_pool3d": [[392, "adaptive-max-pool3d"]], "max_pool1d": [[412, "max-pool1d"]], "Sparse array": [[386, "sparse-array"]], "avg_pool3d": [[396, "avg-pool3d"]], "adaptive_max_pool2d": [[391, "adaptive-max-pool2d"]], "fft": [[403, "fft"]], "dft": [[398, "dft"]], "dropout2d": [[400, "dropout2d"]], "interpolate": [[411, "interpolate"]], "dropout1d": [[399, "dropout1d"]], "dct": [[397, "dct"]], "avg_pool2d": [[395, "avg-pool2d"]], "get_interpolate_kernel": [[406, "get-interpolate-kernel"]], "ifft": [[408, "ifft"]], "max_pool2d": [[413, "max-pool2d"]], "fft2": [[404, "fft2"]], "idct": [[407, "idct"]], "scaled_tanh": [[304, "scaled-tanh"]], "hardtanh": [[299, "hardtanh"]], "softshrink": [[307, "softshrink"]], "round": [[283, "round"]], "subtract": [[289, "subtract"]], "logsigmoid": [[301, "logsigmoid"]], "trunc_divide": [[294, "trunc-divide"]], "elu": [[296, "elu"]], "celu": [[295, "celu"]], "remainder": [[282, "remainder"]], "sinh": [[286, "sinh"]], "blackman_window": [[312, "blackman-window"]], "mel_weight_matrix": [[319, "mel-weight-matrix"]], "threshold": [[310, "threshold"]], "kaiser_bessel_derived_window": [[317, "kaiser-bessel-derived-window"]], "not_equal": [[276, "not-equal"]], "positive": [[277, "positive"]], "hann_window": [[315, "hann-window"]], "sign": [[284, "sign"]], "sin": [[285, "sin"]], "relu6": [[303, "relu6"]], "hamming_window": [[314, "hamming-window"]], "tanhshrink": [[309, "tanhshrink"]], "kaiser_window": [[318, "kaiser-window"]], "tanh": [[291, "tanh"]], "prelu": [[302, "prelu"]], "ndindex": [[321, "ndindex"]], "hardshrink": [[297, "hardshrink"]], "trunc": [[293, "trunc"]], "logit": [[300, "logit"]], "selu": [[305, "selu"]], "thresholded_relu": [[311, "thresholded-relu"]], "indices": [[316, "indices"]], "trapz": [[292, "trapz"]], "square": [[288, "square"]], "hardsilu": [[298, "hardsilu"]], "eye_like": [[313, "eye-like"]], "rad2deg": [[279, "rad2deg"]], "tan": [[290, "tan"]], "pow": [[278, "pow"]], "stanh": [[308, "stanh"]], "ndenumerate": [[320, "ndenumerate"]], "reciprocal": [[281, "reciprocal"]], "silu": [[306, "silu"]], "real": [[280, "real"]], "sqrt": [[287, "sqrt"]], "nan_to_num": [[274, "nan-to-num"]], "equal": [[241, "equal"]], "bitwise_right_shift": [[234, "bitwise-right-shift"]], "cos": [[237, "cos"]], "isinf": [[255, "isinf"]], "floor_divide": [[247, "floor-divide"]], "isfinite": [[254, "isfinite"]], "maximum": [[271, "maximum"]], "bitwise_xor": [[235, "bitwise-xor"]], "expm1": [[245, "expm1"]], "log1p": [[263, "log1p"]], "less_equal": [[260, "less-equal"]], "logaddexp2": [[266, "logaddexp2"]], "less": [[259, "less"]], "log": [[261, "log"]], "deg2rad": [[239, "deg2rad"]], "logaddexp": [[265, "logaddexp"]], "bitwise_or": [[233, "bitwise-or"]], "exp": [[243, "exp"]], "floor": [[246, "floor"]], "greater": [[251, "greater"]], "negative": [[275, "negative"]], "divide": [[240, "divide"]], "cosh": [[238, "cosh"]], "minimum": [[272, "minimum"]], "exp2": [[244, "exp2"]], "logical_or": [[269, "logical-or"]], "isreal": [[257, "isreal"]], "fmin": [[248, "fmin"]], "lcm": [[258, "lcm"]], "bitwise_left_shift": [[232, "bitwise-left-shift"]], "logical_xor": [[270, "logical-xor"]], "multiply": [[273, "multiply"]], "logical_not": [[268, "logical-not"]], "ceil": [[236, "ceil"]], "fmod": [[249, "fmod"]], "bitwise_and": [[230, "bitwise-and"]], "erf": [[242, "erf"]], "log10": [[262, "log10"]], "logical_and": [[267, "logical-and"]], "imag": [[253, "imag"]], "gcd": [[250, "gcd"]], "greater_equal": [[252, "greater-equal"]], "log2": [[264, "log2"]], "isnan": [[256, "isnan"]], "bitwise_invert": [[231, "bitwise-invert"]], "unset_default_uint_dtype": [[191, "unset-default-uint-dtype"]], "unset_default_int_dtype": [[190, "unset-default-int-dtype"]], "handle_soft_device_variable": [[203, "handle-soft-device-variable"]], "atanh": [[229, "atanh"]], "unset_soft_device_mode": [[218, "unset-soft-device-mode"]], "add": [[223, "add"]], "acosh": [[222, "acosh"]], "used_mem_on_dev": [[219, "used-mem-on-dev"]], "to_device": [[214, "to-device"]], "as_native_dev": [[194, "as-native-dev"]], "tpu_is_available": [[216, "tpu-is-available"]], "dev": [[197, "dev"]], "set_default_uint_dtype": [[185, "set-default-uint-dtype"]], "split_factor": [[212, "split-factor"]], "type_promote_arrays": [[186, "type-promote-arrays"]], "valid_dtype": [[192, "valid-dtype"]], "asinh": [[226, "asinh"]], "num_gpus": [[205, "num-gpus"]], "print_all_ivy_arrays_on_dev": [[208, "print-all-ivy-arrays-on-dev"]], "split_func_call": [[213, "split-func-call"]], "asin": [[225, "asin"]], "function_unsupported_devices": [[200, "function-unsupported-devices"]], "unset_default_device": [[217, "unset-default-device"]], "default_device": [[196, "default-device"]], "num_cpu_cores": [[204, "num-cpu-cores"]], "set_default_device": [[209, "set-default-device"]], "atan": [[227, "atan"]], "set_default_int_dtype": [[184, "set-default-int-dtype"]], "num_ivy_arrays_on_dev": [[206, "num-ivy-arrays-on-dev"]], "total_mem_on_dev": [[215, "total-mem-on-dev"]], "function_supported_devices": [[199, "function-supported-devices"]], "set_split_factor": [[211, "set-split-factor"]], "dev_util": [[198, "dev-util"]], "unset_default_complex_dtype": [[187, "unset-default-complex-dtype"]], "atan2": [[228, "atan2"]], "gpu_is_available": [[202, "gpu-is-available"]], "angle": [[224, "angle"]], "percent_used_mem_on_dev": [[207, "percent-used-mem-on-dev"]], "as_ivy_dev": [[193, "as-ivy-dev"]], "set_soft_device_mode": [[210, "set-soft-device-mode"]], "unset_default_float_dtype": [[189, "unset-default-float-dtype"]], "abs": [[220, "abs"]], "unset_default_dtype": [[188, "unset-default-dtype"]], "acos": [[221, "acos"]], "get_all_ivy_arrays_on_dev": [[201, "get-all-ivy-arrays-on-dev"]], "clear_cached_mem_on_dev": [[195, "clear-cached-mem-on-dev"]], "End-to-End Training Pipeline in Ivy": [[47, "End-to-End-Training-Pipeline-in-Ivy"]], "Importing libraries": [[47, "Importing-libraries"]], "Let\u2019s build the pipeline with a Tensorflow backend": [[47, "Let's-build-the-pipeline-with-a-Tensorflow-backend"]], "We are using MNIST dataset for this Tutorial": [[47, "We-are-using-MNIST-dataset-for-this-Tutorial"]], "Temporary Dataset and Dynamic loader": [[47, "Temporary-Dataset-and-Dynamic-loader"]], "Defining the Ivy Network": [[47, "Defining-the-Ivy-Network"]], "Training Loop with utility functions": [[47, "Training-Loop-with-utility-functions"]], "Plotting the training metrics": [[47, "Plotting-the-training-metrics"]], "Save the trained Model": [[47, "Save-the-trained-Model"]], "HuggingFace Tensorflow DeiT": [[48, "HuggingFace-Tensorflow-DeiT"]], "Graph can be visualized and displayed as html file on browser": [[48, "Graph-can-be-visualized-and-displayed-as-html-file-on-browser"]], "Deepmind PerceiverIO on GPU": [[46, "Deepmind-PerceiverIO-on-GPU"]], "Install Python3.8 and setup the kernel": [[46, "Install-Python3.8-and-setup-the-kernel"]], "Clone the ivy and ivy-models repo": [[46, "Clone-the-ivy-and-ivy-models-repo"]], "Install ivy and ivy_models from the repos": [[46, "Install-ivy-and-ivy_models-from-the-repos"]], "Run the demo\u2026": [[46, "Run-the-demo..."]], "\u2026with torch backend": [[46, "...with-torch-backend"]], "\u2026.with tensorflow backend": [[46, "....with-tensorflow-backend"]], "\u2026with jax backend": [[46, "...with-jax-backend"]], "\u2026with numpy backend": [[46, "...with-numpy-backend"]], "Conversions": [[75, "module-ivy.data_classes.container.conversions"], [52, "module-ivy.data_classes.array.conversions"]], "Ivy as a Transpiler Introduction": [[49, "Ivy-as-a-Transpiler-Introduction"]], "To use the transpiler:": [[49, "To-use-the-transpiler:"]], "Transpiler Interface": [[49, "Transpiler-Interface"]], "Telemetry": [[49, "Telemetry"]], "1. Transpile Functions \ud83d\udd22": [[49, "1.-Transpile-Functions-\ud83d\udd22"]], "2. Transpile Libraries \ud83d\udcda": [[49, "2.-Transpile-Libraries-\ud83d\udcda"]], "3. Transpile Models \ud83c\udf10": [[49, "3.-Transpile-Models-\ud83c\udf10"]], "Image": [[83, "module-ivy.data_classes.container.image"], [60, "module-ivy.data_classes.array.image"]], "Resnet 18": [[50, "Resnet-18"]], "Write a model using Ivy": [[30, "Write-a-model-using-Ivy"]], "Demos": [[1, "demos"]], "Creating a Notebook for Demo": [[1, "creating-a-notebook-for-demo"]], "1.0: Lazy vs Eager": [[36, "1.0:-Lazy-vs-Eager"]], "Unify": [[36, "Unify"], [37, "Unify"], [38, "Unify"], [26, "Unify"], [27, "Unify"]], "Compile": [[36, "Compile"], [37, "Compile"], [38, "Compile"]], "Transpile": [[36, "Transpile"], [37, "Transpile"], [38, "Transpile"], [26, "Transpile"], [27, "Transpile"]], "Examples and Demos": [[3, "examples-and-demos"], [20, "examples-and-demos"]], "3.0: Perceiver": [[41, "3.0:-Perceiver"]], "Using TensorFlow Models in your PyTorch Projects": [[6, "Using-TensorFlow-Models-in-your-PyTorch-Projects"]], "Framework Incompatibility": [[6, "Framework-Incompatibility"]], "Transpiling a TensorFlow model to PyTorch": [[6, "Transpiling-a-TensorFlow-model-to-PyTorch"]], "About the transpiled model": [[6, "About-the-transpiled-model"]], "Setting-up the source model": [[6, "Setting-up-the-source-model"]], "Converting the model from TensorFlow to PyTorch": [[6, "Converting-the-model-from-TensorFlow-to-PyTorch"]], "Comparing the results": [[6, "Comparing-the-results"], [7, "Comparing-the-results"]], "Fine-tuning the transpiled model": [[6, "Fine-tuning-the-transpiled-model"], [7, "Fine-tuning-the-transpiled-model"]], "Conclusion": [[6, "Conclusion"], [7, "Conclusion"]], "Accelerating MMPreTrain models with JAX": [[11, "Accelerating-MMPreTrain-models-with-JAX"]], "Trace code": [[24, "Trace-code"]], "Write Ivy code": [[22, "Write-Ivy-code"]], "Contents": [[22, "Contents"]], "Installing Ivy": [[22, "Installing-Ivy"]], "Importing Ivy": [[22, "Importing-Ivy"], [0, "Importing-Ivy"]], "Ivy Backend Handler": [[22, "Ivy-Backend-Handler"], [31, "Ivy-Backend-Handler"]], "Data Structures": [[22, "Data-Structures"], [31, "Data-Structures"]], "Ivy Functional API": [[22, "Ivy-Functional-API"], [31, "Ivy-Functional-API"]], "Tutorials And Examples": [[20, "tutorials-and-examples"]], "Learn the basics": [[20, "learn-the-basics"], [21, "learn-the-basics"]], "Guides": [[20, "guides"], [15, "guides"]], "ODSC Ivy Demo": [[31, "ODSC-Ivy-Demo"]], "Graph Tracer": [[31, "Graph-Tracer"]], "Any function": [[31, "Any-function"], [32, "Any-function"]], "Any library": [[31, "Any-library"], [32, "Any-library"]], "Any model": [[31, "Any-model"], [32, "Any-model"]], "3.1: Stable Diffusion": [[42, "3.1:-Stable-Diffusion"]], "1.3: Dynamic vs Static": [[39, "1.3:-Dynamic-vs-Static"]], "Dynamic": [[39, "Dynamic"]], "Static": [[39, "Static"]], "ToDo: explain via examples why dynamic mode is set to True by default when transpiling to and from numpy and torch, but set to False by default when transpiling to and from tensorflow and jax.": [[39, "ToDo:-explain-via-examples-why-dynamic-mode-is-set-to-True-by-default-when-transpiling-to-and-from-numpy-and-torch,-but-set-to-False-by-default-when-transpiling-to-and-from-tensorflow-and-jax."]], "Transpile any library": [[28, "Transpile-any-library"]], "Basic Operations with Ivy": [[43, "Basic-Operations-with-Ivy"]], "Installs \ud83d\udcbe": [[43, "Installs-\ud83d\udcbe"], [44, "Installs-\ud83d\udcbe"]], "Imports \ud83d\udec3": [[43, "Imports-\ud83d\udec3"], [44, "Imports-\ud83d\udec3"]], "Ivy as a Unified ML Framework \ud83d\udd00": [[43, "Ivy-as-a-Unified-ML-Framework-\ud83d\udd00"]], "Change frameworks by one line of code \u261d": [[43, "Change-frameworks-by-one-line-of-code-\u261d"]], "No need to worry about data types \ud83c\udfa8": [[43, "No-need-to-worry-about-data-types-\ud83c\udfa8"]], "No need to worry about framework differences \ud83d\udcb1": [[43, "No-need-to-worry-about-framework-differences-\ud83d\udcb1"]], "Unifying them all! \ud83c\udf72": [[43, "Unifying-them-all!-\ud83c\udf72"]], "Ivy as a standalone ML framework \ud83c\udf00": [[43, "Ivy-as-a-standalone-ML-framework-\ud83c\udf00"]], "Set Backend Framework": [[43, "Set-Backend-Framework"]], "Define Model": [[43, "Define-Model"], [44, "Define-Model"]], "Create Model": [[43, "Create-Model"]], "Create Optimizer": [[43, "Create-Optimizer"]], "Input and Target": [[43, "Input-and-Target"]], "Loss Function": [[43, "Loss-Function"]], "Training Loop": [[43, "Training-Loop"]], "TO REPLACE: Title": [[2, "TO-REPLACE:-Title"]], "Transpile code": [[25, "Transpile-code"]], "Transpiling a PyTorch model to build on top": [[16, "Transpiling-a-PyTorch-model-to-build-on-top"]], "1.1: Framework Selection": [[37, "1.1:-Framework-Selection"]], "0.0: Unify": [[33, "0.0:-Unify"]], "Transpile any model": [[29, "Transpile-any-model"]], "Round up": [[29, "Round-up"]], "Accelerating PyTorch models with JAX": [[13, "Accelerating-PyTorch-models-with-JAX"]], "Compilation of a Basic Function": [[44, "Compilation-of-a-Basic-Function"]], "Import Ivy compiler": [[44, "Import-Ivy-compiler"]], "Function compilation \ud83d\udee0": [[44, "Function-compilation-\ud83d\udee0"]], "Set backend": [[44, "Set-backend"]], "Sample input": [[44, "Sample-input"]], "Define function to compile": [[44, "Define-function-to-compile"]], "Compile the function": [[44, "Compile-the-function"]], "Check results": [[44, "Check-results"], [44, "id1"]], "Compiling simple neural network \ud83e\udde0": [[44, "Compiling-simple-neural-network-\ud83e\udde0"]], "Create model": [[44, "Create-model"]], "Define input": [[44, "Define-input"]], "Compile network": [[44, "Compile-network"]], "Credit Card Fraud Detection using Ivy Framework": [[0, "Credit-Card-Fraud-Detection-using-Ivy-Framework"]], "Library Installation": [[0, "Library-Installation"]], "Importing Libraries and Configuring the Environment": [[0, "Importing-Libraries-and-Configuring-the-Environment"]], "Loading the Dataset": [[0, "Loading-the-Dataset"]], "Previewing the Dataset": [[0, "Previewing-the-Dataset"]], "Inspecting the End of the Dataset": [[0, "Inspecting-the-End-of-the-Dataset"]], "Dataset Information": [[0, "Dataset-Information"]], "Identifying Missing Values": [[0, "Identifying-Missing-Values"]], "Transaction Class Distribution": [[0, "Transaction-Class-Distribution"]], "Separating Data for Analysis": [[0, "Separating-Data-for-Analysis"]], "Statistical Measures of Legitimate Transactions": [[0, "Statistical-Measures-of-Legitimate-Transactions"]], "Statistical Measures of Fraudulent Transactions": [[0, "Statistical-Measures-of-Fraudulent-Transactions"]], "Comparing Transaction Metrics": [[0, "Comparing-Transaction-Metrics"]], "Under-Sampling for Balanced Dataset": [[0, "Under-Sampling-for-Balanced-Dataset"]], "Creating a Balanced Dataset": [[0, "Creating-a-Balanced-Dataset"]], "Splitting Data into Features and Targets": [[0, "Splitting-Data-into-Features-and-Targets"]], "Splitting Data into Training and Testing Sets": [[0, "Splitting-Data-into-Training-and-Testing-Sets"]], "Converting Data to Ivy Arrays": [[0, "Converting-Data-to-Ivy-Arrays"]], "Displaying Data Dimensions": [[0, "Displaying-Data-Dimensions"]], "Data Preparation Function": [[0, "Data-Preparation-Function"]], "Processing Training Data": [[0, "Processing-Training-Data"]], "Enabling Soft Device Mode in Ivy": [[0, "Enabling-Soft-Device-Mode-in-Ivy"]], "Configuring the XGBoost Classifier": [[0, "Configuring-the-XGBoost-Classifier"]], "Benchmarking XGBoost Model Training Time": [[0, "Benchmarking-XGBoost-Model-Training-Time"]], "Benchmarking Ivy-based XGBoost Model Training Time": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Training-Time"]], "Benchmarking XGBoost Model Prediction Time": [[0, "Benchmarking-XGBoost-Model-Prediction-Time"]], "Benchmarking Ivy-based XGBoost Model Prediction Performance": [[0, "Benchmarking-Ivy-based-XGBoost-Model-Prediction-Performance"]], "Based on benchmark tests, the Ivy-based XGBoost implementation has demonstrated faster performance times compared to the standard XGBoost.": [[0, "Based-on-benchmark-tests,-the-Ivy-based-XGBoost-implementation-has-demonstrated-faster-performance-times-compared-to-the-standard-XGBoost."]], "Model Predictions and Classification Reports": [[0, "Model-Predictions-and-Classification-Reports"]], "Evaluation of Classifier Performance": [[0, "Evaluation-of-Classifier-Performance"]], "IvyClassifier Performance Metrics": [[0, "IvyClassifier-Performance-Metrics"]], "XGBClassifier Performance Metrics": [[0, "XGBClassifier-Performance-Metrics"]], "Visualization of Classification Reports": [[0, "Visualization-of-Classification-Reports"]], "Comparison of Ivy XGBoost and Standard XGBoost Classifiers": [[0, "Comparison-of-Ivy-XGBoost-and-Standard-XGBoost-Classifiers"]], "Ivy XGBoost Classifier:": [[0, "Ivy-XGBoost-Classifier:"]], "Standard XGBoost Classifier:": [[0, "Standard-XGBoost-Classifier:"]], "Accelerating XGBoost with JAX": [[14, "Accelerating-XGBoost-with-JAX"]], "Imports": [[14, "Imports"], [8, "Imports"], [12, "Imports"]], "Tests": [[14, "Tests"]], "Loading the Data": [[14, "Loading-the-Data"]], "Comparing xgb_frontend.XGBClassifier and xgb.XGBClassifier": [[14, "Comparing-xgb_frontend.XGBClassifier-and-xgb.XGBClassifier"]], "JAX backend": [[14, "JAX-backend"]], "Tensorflow backend": [[14, "Tensorflow-backend"]], "PyTorch backend": [[14, "PyTorch-backend"]], "More exhaustive example": [[14, "More-exhaustive-example"]], "Evaluating Training Time vs. Number of Boosting Rounds": [[14, "Evaluating-Training-Time-vs.-Number-of-Boosting-Rounds"]], "Training Time vs. Fractions of Data": [[14, "Training-Time-vs.-Fractions-of-Data"]], "Comparison of Metrics": [[14, "Comparison-of-Metrics"]], "0.2: Transpile": [[35, "0.2:-Transpile"]], "Ivy AlexNet demo": [[4, "Ivy-AlexNet-demo"]], "Installation": [[4, "Installation"], [12, "Installation"]], "Data Preparation": [[4, "Data-Preparation"], [5, "Data-Preparation"], [8, "Data-Preparation"], [12, "Data-Preparation"]], "Ivy AlexNet inference in Torch": [[4, "Ivy-AlexNet-inference-in-Torch"]], "TensorFlow inference": [[4, "TensorFlow-inference"]], "JAX inference": [[4, "JAX-inference"]], "Appendix (Ivy code for AlexNet implementation)": [[4, "Appendix-(Ivy-code-for-AlexNet-implementation)"]], "Quickstart": [[32, "Quickstart"]], "Get familiar with Ivy": [[32, "Get-familiar-with-Ivy"]], "Functional API": [[32, "Functional-API"]], "Stateful API": [[32, "Stateful-API"]], "Tracing code": [[32, "Tracing-code"]], "Demo: Transpiling DeepMind\u2019s PerceiverIO": [[45, "Demo:-Transpiling-DeepMind's-PerceiverIO"]], "Table of Contents": [[45, "Table-of-Contents"]], "Defining the model": [[45, "Defining-the-model"]], "Model construction": [[45, "Model-construction"]], "Some helper functions": [[45, "Some-helper-functions"]], "Transpiling the model": [[45, "Transpiling-the-model"]], "PyTorch pipeline": [[45, "PyTorch-pipeline"]], "Dataset download": [[45, "Dataset-download"]], "DataLoader": [[45, "DataLoader"]], "Training": [[45, "Training"]], "Developing a convolutional network using Ivy": [[19, "Developing-a-convolutional-network-using-Ivy"]], "1.2: As a Decorator": [[38, "1.2:-As-a-Decorator"]], "Lazy vs Eager": [[26, "Lazy-vs-Eager"]], "Trace": [[26, "Trace"], [27, "Trace"]], "# Ivy Bert Demo": [[5, "#-Ivy-Bert-Demo"]], "Install the dependecies": [[5, "Install-the-dependecies"]], "Import the modules": [[5, "Import-the-modules"]], "Ivy inference with Sequence Classification": [[5, "Ivy-inference-with-Sequence-Classification"]], "Ivy model inference with tensorflow": [[5, "Ivy-model-inference-with-tensorflow"]], "Ivy model inference with Jax": [[5, "Ivy-model-inference-with-Jax"]], "Ivy model inference with torch": [[5, "Ivy-model-inference-with-torch"]], "Transpiling a Tensorflow model to build on top": [[18, "Transpiling-a-Tensorflow-model-to-build-on-top"]], "2.0: Kornia": [[40, "2.0:-Kornia"]], "Image Segmentation with Ivy UNet": [[8, "Image-Segmentation-with-Ivy-UNet"]], "Custom Preprocessing": [[8, "Custom-Preprocessing"]], "Load the image example \ud83d\uddbc\ufe0f": [[8, "Load-the-image-example-\ud83d\uddbc\ufe0f"], [12, "Load-the-image-example-\ud83d\uddbc\ufe0f"]], "Visualise image": [[8, "Visualise-image"], [12, "Visualise-image"]], "Model Inference": [[8, "Model-Inference"]], "Initializing Native Torch UNet": [[8, "Initializing-Native-Torch-UNet"]], "Initializing Ivy UNet with Pretrained Weights \u2b07\ufe0f": [[8, "Initializing-Ivy-UNet-with-Pretrained-Weights-\u2b07\ufe0f"]], "Custom masking function": [[8, "Custom-masking-function"]], "Use the model to segment your images \ud83d\ude80": [[8, "Use-the-model-to-segment-your-images-\ud83d\ude80"]], "TensorFlow backend": [[8, "TensorFlow-backend"]], "JAX": [[8, "JAX"]], "Appendix: the Ivy native implementation of UNet": [[8, "Appendix:-the-Ivy-native-implementation-of-UNet"]], "Using Ivy ResNet": [[12, "Using-Ivy-ResNet"]], "Prepare the set of labels": [[12, "Prepare-the-set-of-labels"]], "Model Inference ResNet34": [[12, "Model-Inference-ResNet34"]], "Initializing Native Torch ResNet34": [[12, "Initializing-Native-Torch-ResNet34"]], "Initializing Ivy ResNet34 with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-ResNet34-with-Pretrained-Weights-\u2b07\ufe0f"]], "Use the model to classify your images \ud83d\ude80": [[12, "Use-the-model-to-classify-your-images-\ud83d\ude80"], [12, "id1"]], "Model Inference ResNet50": [[12, "Model-Inference-ResNet50"]], "Initializing Native Torch ResNet50": [[12, "Initializing-Native-Torch-ResNet50"]], "Initializing Ivy ResNet50 with Pretrained Weights \u2b07\ufe0f": [[12, "Initializing-Ivy-ResNet50-with-Pretrained-Weights-\u2b07\ufe0f"]], "0.1: Compile": [[34, "0.1:-Compile"]], "How to use decorators": [[27, "How-to-use-decorators"]], "Transpiling a haiku model to build on top": [[17, "Transpiling-a-haiku-model-to-build-on-top"]], "How To Convert Models from PyTorch to PaddlePaddle": [[7, "How-To-Convert-Models-from-PyTorch-to-PaddlePaddle"]], "About the Model": [[7, "About-the-Model"]], "Transpiling the Model": [[7, "Transpiling-the-Model"]], "Unify code": [[23, "Unify-code"]]}, "indexentries": {"_arraywithactivations (class in ivy.data_classes.array.activations)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations"]], "_abc_impl (ivy.data_classes.array.activations._arraywithactivations attribute)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations._abc_impl"]], "gelu() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.gelu"]], "hardswish() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.hardswish"]], "ivy.data_classes.array.activations": [[51, "module-ivy.data_classes.array.activations"]], "leaky_relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.log_softmax"]], "mish() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.mish"]], "module": [[51, "module-ivy.data_classes.array.activations"], [52, "module-ivy.data_classes.array.conversions"], [53, "module-ivy.data_classes.array.creation"], [54, "module-ivy.data_classes.array.data_type"], [55, "module-ivy.data_classes.array.device"], [56, "module-ivy.data_classes.array.elementwise"], [57, "module-ivy.data_classes.array.experimental"], [57, "module-ivy.data_classes.array.experimental.activations"], [57, "module-ivy.data_classes.array.experimental.conversions"], [57, "module-ivy.data_classes.array.experimental.creation"], [57, "module-ivy.data_classes.array.experimental.data_type"], [57, "module-ivy.data_classes.array.experimental.device"], [57, "module-ivy.data_classes.array.experimental.elementwise"], [57, "module-ivy.data_classes.array.experimental.general"], [57, "module-ivy.data_classes.array.experimental.gradients"], [57, "module-ivy.data_classes.array.experimental.image"], [57, "module-ivy.data_classes.array.experimental.layers"], [57, "module-ivy.data_classes.array.experimental.linear_algebra"], [57, "module-ivy.data_classes.array.experimental.losses"], [57, "module-ivy.data_classes.array.experimental.manipulation"], [57, "module-ivy.data_classes.array.experimental.norms"], [57, "module-ivy.data_classes.array.experimental.random"], [57, "module-ivy.data_classes.array.experimental.searching"], [57, "module-ivy.data_classes.array.experimental.set"], [57, "module-ivy.data_classes.array.experimental.sorting"], [57, "module-ivy.data_classes.array.experimental.statistical"], [57, "module-ivy.data_classes.array.experimental.utility"], [58, "module-ivy.data_classes.array.general"], [59, "module-ivy.data_classes.array.gradients"], [60, "module-ivy.data_classes.array.image"], [61, "module-ivy.data_classes.array.layers"], [62, "module-ivy.data_classes.array.linear_algebra"], [63, "module-ivy.data_classes.array.losses"], [64, "module-ivy.data_classes.array.manipulation"], [65, "module-ivy.data_classes.array.norms"], [66, "module-ivy.data_classes.array.random"], [67, "module-ivy.data_classes.array.searching"], [68, "module-ivy.data_classes.array.set"], [69, "module-ivy.data_classes.array.sorting"], [70, "module-ivy.data_classes.array.statistical"], [71, "module-ivy.data_classes.array.utility"], [72, "module-ivy.data_classes.array.wrapping"], [73, "module-ivy.data_classes.container.activations"], [74, "module-ivy.data_classes.container.base"], [75, "module-ivy.data_classes.container.conversions"], [76, "module-ivy.data_classes.container.creation"], [77, "module-ivy.data_classes.container.data_type"], [78, "module-ivy.data_classes.container.device"], [79, "module-ivy.data_classes.container.elementwise"], [80, "module-ivy.data_classes.container.experimental"], [80, "module-ivy.data_classes.container.experimental.activations"], [80, "module-ivy.data_classes.container.experimental.conversions"], [80, "module-ivy.data_classes.container.experimental.creation"], [80, "module-ivy.data_classes.container.experimental.data_type"], [80, "module-ivy.data_classes.container.experimental.device"], [80, "module-ivy.data_classes.container.experimental.elementwise"], [80, "module-ivy.data_classes.container.experimental.general"], [80, "module-ivy.data_classes.container.experimental.gradients"], [80, "module-ivy.data_classes.container.experimental.image"], [80, "module-ivy.data_classes.container.experimental.layers"], [80, "module-ivy.data_classes.container.experimental.linear_algebra"], [80, "module-ivy.data_classes.container.experimental.losses"], [80, "module-ivy.data_classes.container.experimental.manipulation"], [80, "module-ivy.data_classes.container.experimental.norms"], [80, "module-ivy.data_classes.container.experimental.random"], [80, "module-ivy.data_classes.container.experimental.searching"], [80, "module-ivy.data_classes.container.experimental.set"], [80, "module-ivy.data_classes.container.experimental.sorting"], [80, "module-ivy.data_classes.container.experimental.statistical"], [80, "module-ivy.data_classes.container.experimental.utility"], [81, "module-ivy.data_classes.container.general"], [82, "module-ivy.data_classes.container.gradients"], [83, "module-ivy.data_classes.container.image"], [84, "module-ivy.data_classes.container.layers"], [85, "module-ivy.data_classes.container.linear_algebra"], [86, "module-ivy.data_classes.container.losses"], [87, "module-ivy.data_classes.container.manipulation"], [88, "module-ivy.data_classes.container.norms"], [89, "module-ivy.data_classes.container.random"], [90, "module-ivy.data_classes.container.searching"], [91, "module-ivy.data_classes.container.set"], [92, "module-ivy.data_classes.container.sorting"], [93, "module-ivy.data_classes.container.statistical"], [94, "module-ivy.data_classes.container.utility"], [95, "module-ivy.data_classes.container.wrapping"], [96, "module-ivy.data_classes.factorized_tensor.base"], [97, "module-ivy.data_classes.factorized_tensor.cp_tensor"], [98, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"], [99, "module-ivy.data_classes.factorized_tensor.tr_tensor"], [100, "module-ivy.data_classes.factorized_tensor.tt_tensor"], [101, "module-ivy.data_classes.factorized_tensor.tucker_tensor"], [102, "module-ivy.data_classes.array.array"], [103, "module-ivy.data_classes.container.container"], [105, "module-ivy.data_classes.nested_array.nested_array"], [106, "module-ivy.data_classes.nested_array.base"], [107, "module-ivy.data_classes.nested_array.elementwise"], [367, "module-ivy.functional.ivy.experimental.activations"], [368, "module-ivy.functional.ivy.experimental.constants"], [369, "module-ivy.functional.ivy.experimental.creation"], [370, "module-ivy.functional.ivy.experimental.data_type"], [371, "module-ivy.functional.ivy.experimental.device"], [372, "module-ivy.functional.ivy.experimental.elementwise"], [373, "module-ivy.functional.ivy.experimental.general"], [374, "module-ivy.functional.ivy.experimental.gradients"], [375, "module-ivy.functional.ivy.experimental.layers"], [376, "module-ivy.functional.ivy.experimental.linear_algebra"], [377, "module-ivy.functional.ivy.experimental.losses"], [378, "module-ivy.functional.ivy.experimental.manipulation"], [379, "module-ivy.functional.ivy.experimental.meta"], [380, "module-ivy.functional.ivy.experimental.nest"], [381, "module-ivy.functional.ivy.experimental.norms"], [382, "module-ivy.functional.ivy.experimental.random"], [383, "module-ivy.functional.ivy.experimental.searching"], [384, "module-ivy.functional.ivy.experimental.set"], [385, "module-ivy.functional.ivy.experimental.sorting"], [386, "module-ivy.functional.ivy.experimental.sparse_array"], [387, "module-ivy.functional.ivy.experimental.statistical"], [388, "module-ivy.functional.ivy.experimental.utility"], [626, "module-ivy.functional.ivy.activations"], [627, "module-ivy.functional.ivy.constants"], [628, "module-ivy.functional.ivy.control_flow_ops"], [629, "module-ivy.functional.ivy.creation"], [630, "module-ivy.functional.ivy.data_type"], [631, "module-ivy.functional.ivy.device"], [632, "module-ivy.functional.ivy.elementwise"], [633, "module-ivy.functional.ivy.experimental"], [634, "module-ivy.functional.ivy.general"], [635, "module-ivy.functional.ivy.gradients"], [636, "module-ivy.functional.ivy.layers"], [637, "module-ivy.functional.ivy.linear_algebra"], [638, "module-ivy.functional.ivy.losses"], [639, "module-ivy.functional.ivy.manipulation"], [640, "module-ivy.functional.ivy.meta"], [641, "module-ivy.functional.ivy.nest"], [642, "module-ivy.functional.ivy.norms"], [643, "module-ivy.functional.ivy.random"], [644, "module-ivy.functional.ivy.searching"], [645, "module-ivy.functional.ivy.set"], [646, "module-ivy.functional.ivy.sorting"], [647, "module-ivy.functional.ivy.statistical"], [648, "module-ivy.functional.ivy.utility"], [771, "module-ivy_tests.test_ivy.helpers.assertions"], [772, "module-ivy_tests.test_ivy.helpers.available_frameworks"], [773, "module-ivy_tests.test_ivy.helpers.function_testing"], [774, "module-ivy_tests.test_ivy.helpers.globals"], [775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"], [776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"], [777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"], [778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"], [779, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"], [780, "module-ivy_tests.test_ivy.helpers.multiprocessing"], [781, "module-ivy_tests.test_ivy.helpers.pipeline_helper"], [782, "module-ivy_tests.test_ivy.helpers.structs"], [783, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"], [784, "module-ivy_tests.test_ivy.helpers.testing_helpers"], [788, "module-ivy.stateful.activations"], [789, "module-ivy.stateful.converters"], [790, "module-ivy.stateful.helpers"], [791, "module-ivy.stateful.initializers"], [792, "module-ivy.stateful.layers"], [793, "module-ivy.stateful.losses"], [794, "module-ivy.stateful.module"], [795, "module-ivy.stateful.norms"], [796, "module-ivy.stateful.optimizers"], [797, "module-ivy.stateful.sequential"], [798, "module-ivy.utils.assertions"], [799, "module-ivy.utils.backend"], [800, "module-ivy.utils.backend.ast_helpers"], [801, "module-ivy.utils.backend.handler"], [802, "module-ivy.utils.backend.sub_backend_handler"], [803, "module-ivy.utils.binaries"], [804, "module-ivy.utils.dynamic_import"], [805, "module-ivy.utils.einsum_parser"], [806, "module-ivy.utils.einsum_path_helpers"], [807, "module-ivy.utils.exceptions"], [808, "module-ivy.utils.inspection"], [809, "module-ivy.utils.logging"], [810, "module-ivy.utils.profiler"], [811, "module-ivy.utils.verbosity"]], "relu() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.relu"]], "sigmoid() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.sigmoid"]], "softmax() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.softmax"]], "softplus() (ivy.data_classes.array.activations._arraywithactivations method)": [[51, "ivy.data_classes.array.activations._ArrayWithActivations.softplus"]], "_array_to_new_backend() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions._array_to_new_backend"]], "_to_ivy() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions._to_ivy"]], "_to_native() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions._to_native"]], "_to_new_backend() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions._to_new_backend"]], "args_to_ivy() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions.args_to_ivy"]], "args_to_native() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions.args_to_native"]], "args_to_new_backend() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions.args_to_new_backend"]], "ivy.data_classes.array.conversions": [[52, "module-ivy.data_classes.array.conversions"]], "to_ivy() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions.to_ivy"]], "to_native() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions.to_native"]], "to_new_backend() (in module ivy.data_classes.array.conversions)": [[52, "ivy.data_classes.array.conversions.to_new_backend"]], "_arraywithcreation (class in ivy.data_classes.array.creation)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation"]], "_abc_impl (ivy.data_classes.array.creation._arraywithcreation attribute)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation._abc_impl"]], "asarray() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.asarray"]], "copy_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.copy_array"]], "empty_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.from_dlpack"]], "full_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.full_like"]], "ivy.data_classes.array.creation": [[53, "module-ivy.data_classes.array.creation"]], "linspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.linspace"]], "logspace() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.logspace"]], "meshgrid() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.meshgrid"]], "native_array() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.native_array"]], "one_hot() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.one_hot"]], "ones_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.ones_like"]], "tril() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.tril"]], "triu() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.triu"]], "zeros_like() (ivy.data_classes.array.creation._arraywithcreation method)": [[53, "ivy.data_classes.array.creation._ArrayWithCreation.zeros_like"]], "_arraywithdatatypes (class in ivy.data_classes.array.data_type)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes"]], "_abc_impl (ivy.data_classes.array.data_type._arraywithdatatypes attribute)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes._abc_impl"]], "astype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.dtype"]], "finfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_bool_dtype"]], "is_float_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.is_uint_dtype"]], "ivy.data_classes.array.data_type": [[54, "module-ivy.data_classes.array.data_type"]], "result_type() (ivy.data_classes.array.data_type._arraywithdatatypes method)": [[54, "ivy.data_classes.array.data_type._ArrayWithDataTypes.result_type"]], "_arraywithdevice (class in ivy.data_classes.array.device)": [[55, "ivy.data_classes.array.device._ArrayWithDevice"]], "_abc_impl (ivy.data_classes.array.device._arraywithdevice attribute)": [[55, "ivy.data_classes.array.device._ArrayWithDevice._abc_impl"]], "dev() (ivy.data_classes.array.device._arraywithdevice method)": [[55, "ivy.data_classes.array.device._ArrayWithDevice.dev"]], "ivy.data_classes.array.device": [[55, "module-ivy.data_classes.array.device"]], "to_device() (ivy.data_classes.array.device._arraywithdevice method)": [[55, "ivy.data_classes.array.device._ArrayWithDevice.to_device"]], "_arraywithelementwise (class in ivy.data_classes.array.elementwise)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise"]], "_abc_impl (ivy.data_classes.array.elementwise._arraywithelementwise attribute)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise._abc_impl"]], "abs() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.abs"]], "acos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acos"]], "acosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.acosh"]], "add() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.add"]], "angle() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.angle"]], "asin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asin"]], "asinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.asinh"]], "atan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan"]], "atan2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atan2"]], "atanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.ceil"]], "cos() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cos"]], "cosh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.deg2rad"]], "divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.divide"]], "equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.equal"]], "erf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.erf"]], "exp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp"]], "exp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.exp2"]], "expm1() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.expm1"]], "floor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor"]], "floor_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.fmin"]], "gcd() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.gcd"]], "greater() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater"]], "greater_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.greater_equal"]], "isfinite() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isfinite"]], "isinf() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isinf"]], "isnan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isnan"]], "isreal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.isreal"]], "ivy.data_classes.array.elementwise": [[56, "module-ivy.data_classes.array.elementwise"]], "lcm() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.lcm"]], "less() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less"]], "less_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.less_equal"]], "log() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log"]], "log10() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log10"]], "log1p() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log1p"]], "log2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.log2"]], "logaddexp() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.maximum"]], "minimum() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.minimum"]], "multiply() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.negative"]], "not_equal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.not_equal"]], "positive() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.positive"]], "pow() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.pow"]], "rad2deg() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.rad2deg"]], "real() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.real"]], "reciprocal() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.remainder"]], "round() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.round"]], "sign() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sign"]], "sin() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sin"]], "sinh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sinh"]], "sqrt() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.sqrt"]], "square() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.square"]], "subtract() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.subtract"]], "tan() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tan"]], "tanh() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.tanh"]], "trapz() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trapz"]], "trunc() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.array.elementwise._arraywithelementwise method)": [[56, "ivy.data_classes.array.elementwise._ArrayWithElementwise.trunc_divide"]], "_arraywithactivationsexperimental (class in ivy.data_classes.array.experimental.activations)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental"]], "_arraywithconversionsexperimental (class in ivy.data_classes.array.experimental.conversions)": [[57, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental"]], "_arraywithcreationexperimental (class in ivy.data_classes.array.experimental.creation)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental"]], "_arraywithdata_typeexperimental (class in ivy.data_classes.array.experimental.data_type)": [[57, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental"]], "_arraywithdeviceexperimental (class in ivy.data_classes.array.experimental.device)": [[57, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental"]], "_arraywithelementwiseexperimental (class in ivy.data_classes.array.experimental.elementwise)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental"]], "_arraywithgeneralexperimental (class in ivy.data_classes.array.experimental.general)": [[57, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental"]], "_arraywithgradientsexperimental (class in ivy.data_classes.array.experimental.gradients)": [[57, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental"]], "_arraywithimageexperimental (class in ivy.data_classes.array.experimental.image)": [[57, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental"]], "_arraywithlayersexperimental (class in ivy.data_classes.array.experimental.layers)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental"]], "_arraywithlinearalgebraexperimental (class in ivy.data_classes.array.experimental.linear_algebra)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental"]], "_arraywithlossesexperimental (class in ivy.data_classes.array.experimental.losses)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental"]], "_arraywithmanipulationexperimental (class in ivy.data_classes.array.experimental.manipulation)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental"]], "_arraywithnormsexperimental (class in ivy.data_classes.array.experimental.norms)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental"]], "_arraywithrandomexperimental (class in ivy.data_classes.array.experimental.random)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental"]], "_arraywithsearchingexperimental (class in ivy.data_classes.array.experimental.searching)": [[57, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental"]], "_arraywithsetexperimental (class in ivy.data_classes.array.experimental.set)": [[57, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental"]], "_arraywithsortingexperimental (class in ivy.data_classes.array.experimental.sorting)": [[57, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental"]], "_arraywithstatisticalexperimental (class in ivy.data_classes.array.experimental.statistical)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental"]], "_arraywithutilityexperimental (class in ivy.data_classes.array.experimental.utility)": [[57, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental attribute)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.conversions._arraywithconversionsexperimental attribute)": [[57, "ivy.data_classes.array.experimental.conversions._ArrayWithConversionsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental attribute)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.data_type._arraywithdata_typeexperimental attribute)": [[57, "ivy.data_classes.array.experimental.data_type._ArrayWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.device._arraywithdeviceexperimental attribute)": [[57, "ivy.data_classes.array.experimental.device._ArrayWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental attribute)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental attribute)": [[57, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.gradients._arraywithgradientsexperimental attribute)": [[57, "ivy.data_classes.array.experimental.gradients._ArrayWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.image._arraywithimageexperimental attribute)": [[57, "ivy.data_classes.array.experimental.image._ArrayWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental attribute)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental attribute)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental attribute)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental attribute)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental attribute)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.random._arraywithrandomexperimental attribute)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental attribute)": [[57, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.set._arraywithsetexperimental attribute)": [[57, "ivy.data_classes.array.experimental.set._ArrayWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental attribute)": [[57, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental attribute)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental attribute)": [[57, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental._abc_impl"]], "adaptive_avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.blackman_window"]], "celu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.celu"]], "column_stack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.column_stack"]], "concat_from_sequence() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dct"]], "dft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.elu"]], "embedding() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft"]], "fft2() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.fft2"]], "fill_diagonal() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.gamma"]], "general_inner_product() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.general_inner_product"]], "gradient() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.group_norm"]], "hardshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.hardtanh"]], "heaviside() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.interpolate"]], "isclose() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.isclose"]], "ivy.data_classes.array.experimental": [[57, "module-ivy.data_classes.array.experimental"]], "ivy.data_classes.array.experimental.activations": [[57, "module-ivy.data_classes.array.experimental.activations"]], "ivy.data_classes.array.experimental.conversions": [[57, "module-ivy.data_classes.array.experimental.conversions"]], "ivy.data_classes.array.experimental.creation": [[57, "module-ivy.data_classes.array.experimental.creation"]], "ivy.data_classes.array.experimental.data_type": [[57, "module-ivy.data_classes.array.experimental.data_type"]], "ivy.data_classes.array.experimental.device": [[57, "module-ivy.data_classes.array.experimental.device"]], "ivy.data_classes.array.experimental.elementwise": [[57, "module-ivy.data_classes.array.experimental.elementwise"]], "ivy.data_classes.array.experimental.general": [[57, "module-ivy.data_classes.array.experimental.general"]], "ivy.data_classes.array.experimental.gradients": [[57, "module-ivy.data_classes.array.experimental.gradients"]], "ivy.data_classes.array.experimental.image": [[57, "module-ivy.data_classes.array.experimental.image"]], "ivy.data_classes.array.experimental.layers": [[57, "module-ivy.data_classes.array.experimental.layers"]], "ivy.data_classes.array.experimental.linear_algebra": [[57, "module-ivy.data_classes.array.experimental.linear_algebra"]], "ivy.data_classes.array.experimental.losses": [[57, "module-ivy.data_classes.array.experimental.losses"]], "ivy.data_classes.array.experimental.manipulation": [[57, "module-ivy.data_classes.array.experimental.manipulation"]], "ivy.data_classes.array.experimental.norms": [[57, "module-ivy.data_classes.array.experimental.norms"]], "ivy.data_classes.array.experimental.random": [[57, "module-ivy.data_classes.array.experimental.random"]], "ivy.data_classes.array.experimental.searching": [[57, "module-ivy.data_classes.array.experimental.searching"]], "ivy.data_classes.array.experimental.set": [[57, "module-ivy.data_classes.array.experimental.set"]], "ivy.data_classes.array.experimental.sorting": [[57, "module-ivy.data_classes.array.experimental.sorting"]], "ivy.data_classes.array.experimental.statistical": [[57, "module-ivy.data_classes.array.experimental.statistical"]], "ivy.data_classes.array.experimental.utility": [[57, "module-ivy.data_classes.array.experimental.utility"]], "kl_div() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.array.experimental.sorting._arraywithsortingexperimental method)": [[57, "ivy.data_classes.array.experimental.sorting._ArrayWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logit"]], "logsigmoid() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.array.experimental.norms._arraywithnormsexperimental method)": [[57, "ivy.data_classes.array.experimental.norms._ArrayWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental static method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.array.experimental.utility._arraywithutilityexperimental method)": [[57, "ivy.data_classes.array.experimental.utility._ArrayWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.array.experimental.random._arraywithrandomexperimental method)": [[57, "ivy.data_classes.array.experimental.random._ArrayWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.poisson_nll_loss"]], "polyval() (in module ivy.data_classes.array.experimental.creation)": [[57, "ivy.data_classes.array.experimental.creation.polyval"]], "prelu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.prelu"]], "put_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.array.experimental.statistical._arraywithstatisticalexperimental method)": [[57, "ivy.data_classes.array.experimental.statistical._ArrayWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.array.experimental.general._arraywithgeneralexperimental method)": [[57, "ivy.data_classes.array.experimental.general._ArrayWithGeneralExperimental.reduce"]], "reduce_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.reduce_window"]], "relu6() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.relu6"]], "rfft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.scaled_tanh"]], "selu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.selu"]], "signbit() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.silu"]], "sinc() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.array.experimental.losses._arraywithlossesexperimental method)": [[57, "ivy.data_classes.array.experimental.losses._ArrayWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.sparsify_tensor"]], "stft() (ivy.data_classes.array.experimental.layers._arraywithlayersexperimental method)": [[57, "ivy.data_classes.array.experimental.layers._ArrayWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.array.experimental.activations._arraywithactivationsexperimental method)": [[57, "ivy.data_classes.array.experimental.activations._ArrayWithActivationsExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.top_k"]], "trilu() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.array.experimental.linear_algebra._arraywithlinearalgebraexperimental method)": [[57, "ivy.data_classes.array.experimental.linear_algebra._ArrayWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.array.experimental.searching._arraywithsearchingexperimental method)": [[57, "ivy.data_classes.array.experimental.searching._ArrayWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.array.experimental.creation._arraywithcreationexperimental method)": [[57, "ivy.data_classes.array.experimental.creation._ArrayWithCreationExperimental.unsorted_segment_sum"]], "vsplit() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.array.experimental.manipulation._arraywithmanipulationexperimental method)": [[57, "ivy.data_classes.array.experimental.manipulation._ArrayWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.array.experimental.elementwise._arraywithelementwiseexperimental method)": [[57, "ivy.data_classes.array.experimental.elementwise._ArrayWithElementWiseExperimental.zeta"]], "_arraywithgeneral (class in ivy.data_classes.array.general)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral"]], "_abc_impl (ivy.data_classes.array.general._arraywithgeneral attribute)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral._abc_impl"]], "all_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.clip_vector_norm"]], "default() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.default"]], "einops_rearrange() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.gather"]], "gather_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_array"]], "is_ivy_container() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.is_ivy_container"]], "is_native_array() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.is_native_array"]], "isin() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.isin"]], "ivy.data_classes.array.general": [[58, "module-ivy.data_classes.array.general"]], "scatter_flat() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.scatter_nd"]], "stable_divide() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.stable_pow"]], "supports_inplace_updates() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.supports_inplace_updates"]], "to_file() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.to_file"]], "to_list() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.array.general._arraywithgeneral method)": [[58, "ivy.data_classes.array.general._ArrayWithGeneral.value_is_nan"]], "_arraywithgradients (class in ivy.data_classes.array.gradients)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients"]], "_abc_impl (ivy.data_classes.array.gradients._arraywithgradients attribute)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients._abc_impl"]], "adam_step() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_step"]], "adam_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.gradient_descent_update"]], "ivy.data_classes.array.gradients": [[59, "module-ivy.data_classes.array.gradients"]], "lamb_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.array.gradients._arraywithgradients method)": [[59, "ivy.data_classes.array.gradients._ArrayWithGradients.stop_gradient"]], "_arraywithimage (class in ivy.data_classes.array.image)": [[60, "ivy.data_classes.array.image._ArrayWithImage"]], "_abc_impl (ivy.data_classes.array.image._arraywithimage attribute)": [[60, "ivy.data_classes.array.image._ArrayWithImage._abc_impl"]], "ivy.data_classes.array.image": [[60, "module-ivy.data_classes.array.image"]], "_arraywithlayers (class in ivy.data_classes.array.layers)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers"]], "_abc_impl (ivy.data_classes.array.layers._arraywithlayers attribute)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers._abc_impl"]], "conv1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.dropout"]], "dropout1d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.dropout3d"]], "ivy.data_classes.array.layers": [[61, "module-ivy.data_classes.array.layers"]], "linear() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.linear"]], "lstm_update() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.multi_head_attention"]], "scaled_dot_product_attention() (ivy.data_classes.array.layers._arraywithlayers method)": [[61, "ivy.data_classes.array.layers._ArrayWithLayers.scaled_dot_product_attention"]], "_arraywithlinearalgebra (class in ivy.data_classes.array.linear_algebra)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra attribute)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra._abc_impl"]], "cholesky() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.cross"]], "det() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.det"]], "diag() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.diagonal"]], "eig() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eig"]], "eigh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.eigvalsh"]], "inner() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.inv"]], "ivy.data_classes.array.linear_algebra": [[62, "module-ivy.data_classes.array.linear_algebra"]], "matmul() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.solve"]], "svd() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.array.linear_algebra._arraywithlinearalgebra method)": [[62, "ivy.data_classes.array.linear_algebra._ArrayWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_arraywithlosses (class in ivy.data_classes.array.losses)": [[63, "ivy.data_classes.array.losses._ArrayWithLosses"]], "_abc_impl (ivy.data_classes.array.losses._arraywithlosses attribute)": [[63, "ivy.data_classes.array.losses._ArrayWithLosses._abc_impl"]], "binary_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[63, "ivy.data_classes.array.losses._ArrayWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[63, "ivy.data_classes.array.losses._ArrayWithLosses.cross_entropy"]], "ivy.data_classes.array.losses": [[63, "module-ivy.data_classes.array.losses"]], "sparse_cross_entropy() (ivy.data_classes.array.losses._arraywithlosses method)": [[63, "ivy.data_classes.array.losses._ArrayWithLosses.sparse_cross_entropy"]], "_arraywithmanipulation (class in ivy.data_classes.array.manipulation)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation"]], "_abc_impl (ivy.data_classes.array.manipulation._arraywithmanipulation attribute)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation._abc_impl"]], "clip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.clip"]], "concat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.concat"]], "constant_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.expand_dims"]], "flip() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.flip"]], "ivy.data_classes.array.manipulation": [[64, "module-ivy.data_classes.array.manipulation"]], "permute_dims() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.repeat"]], "reshape() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.reshape"]], "roll() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.roll"]], "split() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.split"]], "squeeze() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.squeeze"]], "stack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.stack"]], "swapaxes() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.swapaxes"]], "tile() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.tile"]], "unstack() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.unstack"]], "view() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.view"]], "zero_pad() (ivy.data_classes.array.manipulation._arraywithmanipulation method)": [[64, "ivy.data_classes.array.manipulation._ArrayWithManipulation.zero_pad"]], "_arraywithnorms (class in ivy.data_classes.array.norms)": [[65, "ivy.data_classes.array.norms._ArrayWithNorms"]], "_abc_impl (ivy.data_classes.array.norms._arraywithnorms attribute)": [[65, "ivy.data_classes.array.norms._ArrayWithNorms._abc_impl"]], "ivy.data_classes.array.norms": [[65, "module-ivy.data_classes.array.norms"]], "layer_norm() (ivy.data_classes.array.norms._arraywithnorms method)": [[65, "ivy.data_classes.array.norms._ArrayWithNorms.layer_norm"]], "_arraywithrandom (class in ivy.data_classes.array.random)": [[66, "ivy.data_classes.array.random._ArrayWithRandom"]], "_abc_impl (ivy.data_classes.array.random._arraywithrandom attribute)": [[66, "ivy.data_classes.array.random._ArrayWithRandom._abc_impl"]], "ivy.data_classes.array.random": [[66, "module-ivy.data_classes.array.random"]], "multinomial() (ivy.data_classes.array.random._arraywithrandom method)": [[66, "ivy.data_classes.array.random._ArrayWithRandom.multinomial"]], "randint() (ivy.data_classes.array.random._arraywithrandom method)": [[66, "ivy.data_classes.array.random._ArrayWithRandom.randint"]], "random_normal() (ivy.data_classes.array.random._arraywithrandom method)": [[66, "ivy.data_classes.array.random._ArrayWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.array.random._arraywithrandom method)": [[66, "ivy.data_classes.array.random._ArrayWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.array.random._arraywithrandom method)": [[66, "ivy.data_classes.array.random._ArrayWithRandom.shuffle"]], "_arraywithsearching (class in ivy.data_classes.array.searching)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching"]], "_abc_impl (ivy.data_classes.array.searching._arraywithsearching attribute)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching._abc_impl"]], "argmax() (ivy.data_classes.array.searching._arraywithsearching method)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching.argmax"]], "argmin() (ivy.data_classes.array.searching._arraywithsearching method)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching.argmin"]], "argwhere() (ivy.data_classes.array.searching._arraywithsearching method)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching.argwhere"]], "ivy.data_classes.array.searching": [[67, "module-ivy.data_classes.array.searching"]], "nonzero() (ivy.data_classes.array.searching._arraywithsearching method)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching.nonzero"]], "where() (ivy.data_classes.array.searching._arraywithsearching method)": [[67, "ivy.data_classes.array.searching._ArrayWithSearching.where"]], "_arraywithset (class in ivy.data_classes.array.set)": [[68, "ivy.data_classes.array.set._ArrayWithSet"]], "_abc_impl (ivy.data_classes.array.set._arraywithset attribute)": [[68, "ivy.data_classes.array.set._ArrayWithSet._abc_impl"]], "ivy.data_classes.array.set": [[68, "module-ivy.data_classes.array.set"]], "unique_all() (ivy.data_classes.array.set._arraywithset method)": [[68, "ivy.data_classes.array.set._ArrayWithSet.unique_all"]], "unique_counts() (ivy.data_classes.array.set._arraywithset method)": [[68, "ivy.data_classes.array.set._ArrayWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.array.set._arraywithset method)": [[68, "ivy.data_classes.array.set._ArrayWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.array.set._arraywithset method)": [[68, "ivy.data_classes.array.set._ArrayWithSet.unique_values"]], "_arraywithsorting (class in ivy.data_classes.array.sorting)": [[69, "ivy.data_classes.array.sorting._ArrayWithSorting"]], "_abc_impl (ivy.data_classes.array.sorting._arraywithsorting attribute)": [[69, "ivy.data_classes.array.sorting._ArrayWithSorting._abc_impl"]], "argsort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[69, "ivy.data_classes.array.sorting._ArrayWithSorting.argsort"]], "ivy.data_classes.array.sorting": [[69, "module-ivy.data_classes.array.sorting"]], "msort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[69, "ivy.data_classes.array.sorting._ArrayWithSorting.msort"]], "searchsorted() (ivy.data_classes.array.sorting._arraywithsorting method)": [[69, "ivy.data_classes.array.sorting._ArrayWithSorting.searchsorted"]], "sort() (ivy.data_classes.array.sorting._arraywithsorting method)": [[69, "ivy.data_classes.array.sorting._ArrayWithSorting.sort"]], "_arraywithstatistical (class in ivy.data_classes.array.statistical)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical"]], "_abc_impl (ivy.data_classes.array.statistical._arraywithstatistical attribute)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical._abc_impl"]], "cumprod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.cumsum"]], "einsum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.einsum"]], "ivy.data_classes.array.statistical": [[70, "module-ivy.data_classes.array.statistical"]], "max() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.max"]], "mean() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.mean"]], "min() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.min"]], "prod() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.prod"]], "std() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.std"]], "sum() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.sum"]], "var() (ivy.data_classes.array.statistical._arraywithstatistical method)": [[70, "ivy.data_classes.array.statistical._ArrayWithStatistical.var"]], "_arraywithutility (class in ivy.data_classes.array.utility)": [[71, "ivy.data_classes.array.utility._ArrayWithUtility"]], "_abc_impl (ivy.data_classes.array.utility._arraywithutility attribute)": [[71, "ivy.data_classes.array.utility._ArrayWithUtility._abc_impl"]], "all() (ivy.data_classes.array.utility._arraywithutility method)": [[71, "ivy.data_classes.array.utility._ArrayWithUtility.all"]], "any() (ivy.data_classes.array.utility._arraywithutility method)": [[71, "ivy.data_classes.array.utility._ArrayWithUtility.any"]], "ivy.data_classes.array.utility": [[71, "module-ivy.data_classes.array.utility"]], "_wrap_function() (in module ivy.data_classes.array.wrapping)": [[72, "ivy.data_classes.array.wrapping._wrap_function"]], "add_ivy_array_instance_methods() (in module ivy.data_classes.array.wrapping)": [[72, "ivy.data_classes.array.wrapping.add_ivy_array_instance_methods"]], "ivy.data_classes.array.wrapping": [[72, "module-ivy.data_classes.array.wrapping"]], "_containerwithactivations (class in ivy.data_classes.container.activations)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations"]], "_abc_impl (ivy.data_classes.container.activations._containerwithactivations attribute)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._abc_impl"]], "_static_gelu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_gelu"]], "_static_hardswish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_hardswish"]], "_static_leaky_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_leaky_relu"]], "_static_log_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_log_softmax"]], "_static_mish() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_mish"]], "_static_relu() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_relu"]], "_static_sigmoid() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_sigmoid"]], "_static_softmax() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_softmax"]], "_static_softplus() (ivy.data_classes.container.activations._containerwithactivations static method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations._static_softplus"]], "gelu() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.gelu"]], "hardswish() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.hardswish"]], "ivy.data_classes.container.activations": [[73, "module-ivy.data_classes.container.activations"]], "leaky_relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.leaky_relu"]], "log_softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.log_softmax"]], "mish() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.mish"]], "relu() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.relu"]], "sigmoid() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.sigmoid"]], "softmax() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.softmax"]], "softplus() (ivy.data_classes.container.activations._containerwithactivations method)": [[73, "ivy.data_classes.container.activations._ContainerWithActivations.softplus"]], "containerbase (class in ivy.data_classes.container.base)": [[74, "ivy.data_classes.container.base.ContainerBase"]], "__getitem__() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.__getitem__"]], "__init__() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.__init__"]], "__setitem__() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.__setitem__"]], "_abc_impl (ivy.data_classes.container.base.containerbase attribute)": [[74, "ivy.data_classes.container.base.ContainerBase._abc_impl"]], "_cont_at_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_dict"]], "_cont_at_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_at_key_chains_input_as_seq"]], "_cont_call_static_method_with_flexible_args() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_call_static_method_with_flexible_args"]], "_cont_concat_unify() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_concat_unify"]], "_cont_get_dev() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_get_dev"]], "_cont_get_dtype() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_get_dtype"]], "_cont_get_shape() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_get_shape"]], "_cont_get_shapes() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_get_shapes"]], "_cont_ivy (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_ivy"]], "_cont_mean_unify() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_mean_unify"]], "_cont_prune_key_chains_input_as_dict() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_dict"]], "_cont_prune_key_chains_input_as_seq() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_prune_key_chains_input_as_seq"]], "_cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_slice_keys"]], "_cont_sum_unify() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase._cont_sum_unify"]], "_get_queue_item() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase._get_queue_item"]], "_is_jsonable() (in module ivy.data_classes.container.base)": [[74, "ivy.data_classes.container.base._is_jsonable"]], "_repr() (in module ivy.data_classes.container.base)": [[74, "ivy.data_classes.container.base._repr"]], "cont_all_false() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_all_false"]], "cont_all_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_all_key_chains"]], "cont_all_true() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_all_true"]], "cont_as_bools() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_as_bools"]], "cont_assert_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_container"]], "cont_assert_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_assert_contains_sub_structure"]], "cont_assert_identical() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical"]], "cont_assert_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_assert_identical_structure"]], "cont_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chain"]], "cont_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_at_key_chains"]], "cont_at_keys() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_at_keys"]], "cont_combine() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_combine"]], "cont_common_key_chains() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_common_key_chains"]], "cont_config (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_config"]], "cont_contains_sub_container() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_container"]], "cont_contains_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_contains_sub_structure"]], "cont_copy() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_copy"]], "cont_create_if_absent() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_create_if_absent"]], "cont_cutoff_at_depth() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_depth"]], "cont_cutoff_at_height() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_cutoff_at_height"]], "cont_deep_copy() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_deep_copy"]], "cont_dev (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_dev"]], "cont_dev_str (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_dev_str"]], "cont_diff() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_diff"]], "cont_dtype (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_dtype"]], "cont_duplicate_array_keychains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_duplicate_array_keychains"]], "cont_find_sub_container() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_container"]], "cont_find_sub_structure() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_find_sub_structure"]], "cont_flatten_key_chain() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chain"]], "cont_flatten_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_flatten_key_chains"]], "cont_format_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_format_key_chains"]], "cont_from_disk_as_hdf5() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_hdf5"]], "cont_from_disk_as_json() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_json"]], "cont_from_disk_as_pickled() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_from_disk_as_pickled"]], "cont_from_flat_list() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_from_flat_list"]], "cont_handle_inplace() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_handle_inplace"]], "cont_has_key() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_has_key"]], "cont_has_key_chain() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_has_key_chain"]], "cont_identical() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_identical"]], "cont_identical_array_shapes() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_identical_array_shapes"]], "cont_identical_configs() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_identical_configs"]], "cont_identical_structure() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_identical_structure"]], "cont_if_exists() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_if_exists"]], "cont_inplace_update() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_inplace_update"]], "cont_ivy (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_ivy"]], "cont_key_chains_containing() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_key_chains_containing"]], "cont_list_join() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_list_join"]], "cont_list_stack() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_list_stack"]], "cont_load() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_load"]], "cont_map() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_map"]], "cont_map_sub_conts() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_map_sub_conts"]], "cont_max_depth (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_max_depth"]], "cont_multi_map() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_multi_map"]], "cont_multi_map_in_function() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_multi_map_in_function"]], "cont_num_arrays() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_num_arrays"]], "cont_overwrite_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chain"]], "cont_overwrite_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_overwrite_at_key_chains"]], "cont_prune_empty() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_prune_empty"]], "cont_prune_key_chain() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chain"]], "cont_prune_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_chains"]], "cont_prune_key_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_prune_key_from_key_chains"]], "cont_prune_keys() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys"]], "cont_prune_keys_from_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_prune_keys_from_key_chains"]], "cont_reduce() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_reduce"]], "cont_remove_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_remove_key_length_limit"]], "cont_remove_print_limit() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_remove_print_limit"]], "cont_reshape_like() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_reshape_like"]], "cont_restructure() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_restructure"]], "cont_restructure_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_restructure_key_chains"]], "cont_save() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_save"]], "cont_set_at_key_chain() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chain"]], "cont_set_at_key_chains() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_set_at_key_chains"]], "cont_set_at_keys() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_set_at_keys"]], "cont_shape (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_shape"]], "cont_shapes (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_shapes"]], "cont_show() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_show"]], "cont_show_sub_container() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_show_sub_container"]], "cont_size_ordered_arrays() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_size_ordered_arrays"]], "cont_slice_keys() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_slice_keys"]], "cont_slice_via_key() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_slice_via_key"]], "cont_sort_by_key() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_sort_by_key"]], "cont_structural_diff() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_structural_diff"]], "cont_to_dict() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_dict"]], "cont_to_disk_as_hdf5() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_hdf5"]], "cont_to_disk_as_json() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_json"]], "cont_to_disk_as_pickled() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_disk_as_pickled"]], "cont_to_flat_list() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_flat_list"]], "cont_to_iterator() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator"]], "cont_to_iterator_keys() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_keys"]], "cont_to_iterator_values() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_iterator_values"]], "cont_to_jsonable() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_jsonable"]], "cont_to_nested_list() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_nested_list"]], "cont_to_raw() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_to_raw"]], "cont_trim_key() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_trim_key"]], "cont_try_kc() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_try_kc"]], "cont_unify() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_unify"]], "cont_unstack_conts() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_unstack_conts"]], "cont_update_config() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_update_config"]], "cont_with_default_key_color() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_default_key_color"]], "cont_with_entries_as_lists() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_entries_as_lists"]], "cont_with_ivy_backend() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_ivy_backend"]], "cont_with_key_length_limit() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_key_length_limit"]], "cont_with_print_indent() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_print_indent"]], "cont_with_print_limit() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_print_limit"]], "cont_with_print_line_spacing() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.cont_with_print_line_spacing"]], "dynamic_backend (ivy.data_classes.container.base.containerbase property)": [[74, "ivy.data_classes.container.base.ContainerBase.dynamic_backend"]], "h5_file_size() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.h5_file_size"]], "ivy.data_classes.container.base": [[74, "module-ivy.data_classes.container.base"]], "shuffle_h5_file() (ivy.data_classes.container.base.containerbase static method)": [[74, "ivy.data_classes.container.base.ContainerBase.shuffle_h5_file"]], "split_conts() (ivy.data_classes.container.base.containerbase method)": [[74, "ivy.data_classes.container.base.ContainerBase.split_conts"]], "_containerwithconversions (class in ivy.data_classes.container.conversions)": [[75, "ivy.data_classes.container.conversions._ContainerWithConversions"]], "_abc_impl (ivy.data_classes.container.conversions._containerwithconversions attribute)": [[75, "ivy.data_classes.container.conversions._ContainerWithConversions._abc_impl"]], "_static_to_ivy() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[75, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_ivy"]], "_static_to_native() (ivy.data_classes.container.conversions._containerwithconversions static method)": [[75, "ivy.data_classes.container.conversions._ContainerWithConversions._static_to_native"]], "ivy.data_classes.container.conversions": [[75, "module-ivy.data_classes.container.conversions"]], "to_ivy() (ivy.data_classes.container.conversions._containerwithconversions method)": [[75, "ivy.data_classes.container.conversions._ContainerWithConversions.to_ivy"]], "to_native() (ivy.data_classes.container.conversions._containerwithconversions method)": [[75, "ivy.data_classes.container.conversions._ContainerWithConversions.to_native"]], "_containerwithcreation (class in ivy.data_classes.container.creation)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation"]], "_abc_impl (ivy.data_classes.container.creation._containerwithcreation attribute)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._abc_impl"]], "_static_arange() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_arange"]], "_static_asarray() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_asarray"]], "_static_copy_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_copy_array"]], "_static_empty() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty"]], "_static_empty_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_empty_like"]], "_static_eye() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_eye"]], "_static_from_dlpack() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_from_dlpack"]], "_static_full() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_full"]], "_static_full_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_full_like"]], "_static_linspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_linspace"]], "_static_logspace() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_logspace"]], "_static_meshgrid() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_meshgrid"]], "_static_native_array() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_native_array"]], "_static_one_hot() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_one_hot"]], "_static_ones() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones"]], "_static_ones_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_ones_like"]], "_static_tril() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_tril"]], "_static_triu() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_triu"]], "_static_zeros() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros"]], "_static_zeros_like() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation._static_zeros_like"]], "asarray() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.asarray"]], "copy_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.copy_array"]], "empty_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.empty_like"]], "from_dlpack() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.from_dlpack"]], "frombuffer() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.frombuffer"]], "full_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.full_like"]], "ivy.data_classes.container.creation": [[76, "module-ivy.data_classes.container.creation"]], "linspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.linspace"]], "logspace() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.logspace"]], "meshgrid() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.meshgrid"]], "native_array() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.native_array"]], "one_hot() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.one_hot"]], "ones_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.ones_like"]], "static_frombuffer() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.static_frombuffer"]], "static_triu_indices() (ivy.data_classes.container.creation._containerwithcreation static method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.static_triu_indices"]], "tril() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.tril"]], "triu() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.triu"]], "triu_indices() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.triu_indices"]], "zeros_like() (ivy.data_classes.container.creation._containerwithcreation method)": [[76, "ivy.data_classes.container.creation._ContainerWithCreation.zeros_like"]], "_containerwithdatatypes (class in ivy.data_classes.container.data_type)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes"]], "_abc_impl (ivy.data_classes.container.data_type._containerwithdatatypes attribute)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._abc_impl"]], "_static_astype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_astype"]], "_static_broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_arrays"]], "_static_broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_broadcast_to"]], "_static_can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_can_cast"]], "_static_default_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_complex_dtype"]], "_static_default_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_default_float_dtype"]], "_static_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_dtype"]], "_static_finfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_finfo"]], "_static_function_supported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_supported_dtypes"]], "_static_function_unsupported_dtypes() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_function_unsupported_dtypes"]], "_static_iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_iinfo"]], "_static_is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_bool_dtype"]], "_static_is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_complex_dtype"]], "_static_is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_float_dtype"]], "_static_is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_int_dtype"]], "_static_is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_is_uint_dtype"]], "_static_result_type() (ivy.data_classes.container.data_type._containerwithdatatypes static method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes._static_result_type"]], "astype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.astype"]], "broadcast_arrays() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_arrays"]], "broadcast_to() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.broadcast_to"]], "can_cast() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.can_cast"]], "dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.dtype"]], "finfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.finfo"]], "iinfo() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.iinfo"]], "is_bool_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_bool_dtype"]], "is_complex_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_complex_dtype"]], "is_float_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_float_dtype"]], "is_int_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_int_dtype"]], "is_uint_dtype() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.is_uint_dtype"]], "ivy.data_classes.container.data_type": [[77, "module-ivy.data_classes.container.data_type"]], "result_type() (ivy.data_classes.container.data_type._containerwithdatatypes method)": [[77, "ivy.data_classes.container.data_type._ContainerWithDataTypes.result_type"]], "_containerwithdevice (class in ivy.data_classes.container.device)": [[78, "ivy.data_classes.container.device._ContainerWithDevice"]], "_abc_impl (ivy.data_classes.container.device._containerwithdevice attribute)": [[78, "ivy.data_classes.container.device._ContainerWithDevice._abc_impl"]], "_static_dev() (ivy.data_classes.container.device._containerwithdevice static method)": [[78, "ivy.data_classes.container.device._ContainerWithDevice._static_dev"]], "_static_to_device() (ivy.data_classes.container.device._containerwithdevice static method)": [[78, "ivy.data_classes.container.device._ContainerWithDevice._static_to_device"]], "dev() (ivy.data_classes.container.device._containerwithdevice method)": [[78, "ivy.data_classes.container.device._ContainerWithDevice.dev"]], "ivy.data_classes.container.device": [[78, "module-ivy.data_classes.container.device"]], "to_device() (ivy.data_classes.container.device._containerwithdevice method)": [[78, "ivy.data_classes.container.device._ContainerWithDevice.to_device"]], "_containerwithelementwise (class in ivy.data_classes.container.elementwise)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise"]], "_abc_impl (ivy.data_classes.container.elementwise._containerwithelementwise attribute)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._abc_impl"]], "_static_abs() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_abs"]], "_static_acos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acos"]], "_static_acosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_acosh"]], "_static_add() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_add"]], "_static_asin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asin"]], "_static_asinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_asinh"]], "_static_atan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan"]], "_static_atan2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atan2"]], "_static_atanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_atanh"]], "_static_bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_and"]], "_static_bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_invert"]], "_static_bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_left_shift"]], "_static_bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_or"]], "_static_bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_right_shift"]], "_static_bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_bitwise_xor"]], "_static_ceil() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_ceil"]], "_static_cos() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cos"]], "_static_cosh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_cosh"]], "_static_deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_deg2rad"]], "_static_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_divide"]], "_static_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_equal"]], "_static_erf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_erf"]], "_static_exp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_exp"]], "_static_expm1() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_expm1"]], "_static_floor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor"]], "_static_floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_floor_divide"]], "_static_greater() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater"]], "_static_greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_greater_equal"]], "_static_isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isfinite"]], "_static_isinf() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isinf"]], "_static_isnan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isnan"]], "_static_isreal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_isreal"]], "_static_lcm() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_lcm"]], "_static_less() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less"]], "_static_less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_less_equal"]], "_static_log() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log"]], "_static_log10() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log10"]], "_static_log1p() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log1p"]], "_static_log2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_log2"]], "_static_logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logaddexp"]], "_static_logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_and"]], "_static_logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_not"]], "_static_logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_or"]], "_static_logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_logical_xor"]], "_static_maximum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_maximum"]], "_static_minimum() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_minimum"]], "_static_multiply() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_multiply"]], "_static_negative() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_negative"]], "_static_not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_not_equal"]], "_static_positive() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_positive"]], "_static_pow() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_pow"]], "_static_rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_rad2deg"]], "_static_reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_reciprocal"]], "_static_remainder() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_remainder"]], "_static_round() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_round"]], "_static_sign() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sign"]], "_static_sin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sin"]], "_static_sinh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sinh"]], "_static_sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_sqrt"]], "_static_square() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_square"]], "_static_subtract() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_subtract"]], "_static_tan() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tan"]], "_static_tanh() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_tanh"]], "_static_trapz() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trapz"]], "_static_trunc() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc"]], "_static_trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise._static_trunc_divide"]], "abs() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.abs"]], "acos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acos"]], "acosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.acosh"]], "add() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.add"]], "angle() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.angle"]], "asin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asin"]], "asinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.asinh"]], "atan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan"]], "atan2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atan2"]], "atanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.atanh"]], "bitwise_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_and"]], "bitwise_invert() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_invert"]], "bitwise_left_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_left_shift"]], "bitwise_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_or"]], "bitwise_right_shift() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_right_shift"]], "bitwise_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.bitwise_xor"]], "ceil() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.ceil"]], "cos() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cos"]], "cosh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.cosh"]], "deg2rad() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.deg2rad"]], "divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.divide"]], "equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.equal"]], "erf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.erf"]], "exp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp"]], "exp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.exp2"]], "expm1() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.expm1"]], "floor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor"]], "floor_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.floor_divide"]], "fmin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.fmin"]], "gcd() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.gcd"]], "greater() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater"]], "greater_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.greater_equal"]], "imag() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.imag"]], "isfinite() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isfinite"]], "isinf() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isinf"]], "isnan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isnan"]], "isreal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.isreal"]], "ivy.data_classes.container.elementwise": [[79, "module-ivy.data_classes.container.elementwise"]], "lcm() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.lcm"]], "less() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less"]], "less_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.less_equal"]], "log() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log"]], "log10() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log10"]], "log1p() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log1p"]], "log2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.log2"]], "logaddexp() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp"]], "logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logaddexp2"]], "logical_and() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_and"]], "logical_not() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_not"]], "logical_or() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_or"]], "logical_xor() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.logical_xor"]], "maximum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.maximum"]], "minimum() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.minimum"]], "multiply() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.multiply"]], "nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.nan_to_num"]], "negative() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.negative"]], "not_equal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.not_equal"]], "positive() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.positive"]], "pow() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.pow"]], "rad2deg() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.rad2deg"]], "real() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.real"]], "reciprocal() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.reciprocal"]], "remainder() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.remainder"]], "round() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.round"]], "sign() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sign"]], "sin() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sin"]], "sinh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sinh"]], "sqrt() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.sqrt"]], "square() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.square"]], "static_angle() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_angle"]], "static_exp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_exp2"]], "static_fmin() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_fmin"]], "static_gcd() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_gcd"]], "static_imag() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_imag"]], "static_logaddexp2() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_logaddexp2"]], "static_nan_to_num() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_nan_to_num"]], "static_real() (ivy.data_classes.container.elementwise._containerwithelementwise static method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.static_real"]], "subtract() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.subtract"]], "tan() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tan"]], "tanh() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.tanh"]], "trapz() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trapz"]], "trunc() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc"]], "trunc_divide() (ivy.data_classes.container.elementwise._containerwithelementwise method)": [[79, "ivy.data_classes.container.elementwise._ContainerWithElementwise.trunc_divide"]], "_containerwithactivationexperimental (class in ivy.data_classes.container.experimental.activations)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental"]], "_containerwithconversionexperimental (class in ivy.data_classes.container.experimental.conversions)": [[80, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental"]], "_containerwithcreationexperimental (class in ivy.data_classes.container.experimental.creation)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental"]], "_containerwithdata_typeexperimental (class in ivy.data_classes.container.experimental.data_type)": [[80, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental"]], "_containerwithdeviceexperimental (class in ivy.data_classes.container.experimental.device)": [[80, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental"]], "_containerwithelementwiseexperimental (class in ivy.data_classes.container.experimental.elementwise)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental"]], "_containerwithgeneralexperimental (class in ivy.data_classes.container.experimental.general)": [[80, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental"]], "_containerwithgradientsexperimental (class in ivy.data_classes.container.experimental.gradients)": [[80, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental"]], "_containerwithimageexperimental (class in ivy.data_classes.container.experimental.image)": [[80, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental"]], "_containerwithlayersexperimental (class in ivy.data_classes.container.experimental.layers)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental"]], "_containerwithlinearalgebraexperimental (class in ivy.data_classes.container.experimental.linear_algebra)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental"]], "_containerwithlossesexperimental (class in ivy.data_classes.container.experimental.losses)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental"]], "_containerwithmanipulationexperimental (class in ivy.data_classes.container.experimental.manipulation)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental"]], "_containerwithnormsexperimental (class in ivy.data_classes.container.experimental.norms)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental"]], "_containerwithrandomexperimental (class in ivy.data_classes.container.experimental.random)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental"]], "_containerwithsearchingexperimental (class in ivy.data_classes.container.experimental.searching)": [[80, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental"]], "_containerwithsetexperimental (class in ivy.data_classes.container.experimental.set)": [[80, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental"]], "_containerwithsortingexperimental (class in ivy.data_classes.container.experimental.sorting)": [[80, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental"]], "_containerwithstatisticalexperimental (class in ivy.data_classes.container.experimental.statistical)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental"]], "_containerwithutilityexperimental (class in ivy.data_classes.container.experimental.utility)": [[80, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental"]], "_abc_impl (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental attribute)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.conversions._containerwithconversionexperimental attribute)": [[80, "ivy.data_classes.container.experimental.conversions._ContainerWithConversionExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental attribute)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.data_type._containerwithdata_typeexperimental attribute)": [[80, "ivy.data_classes.container.experimental.data_type._ContainerWithData_typeExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.device._containerwithdeviceexperimental attribute)": [[80, "ivy.data_classes.container.experimental.device._ContainerWithDeviceExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental attribute)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental attribute)": [[80, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.gradients._containerwithgradientsexperimental attribute)": [[80, "ivy.data_classes.container.experimental.gradients._ContainerWithGradientsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.image._containerwithimageexperimental attribute)": [[80, "ivy.data_classes.container.experimental.image._ContainerWithImageExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental attribute)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental attribute)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental attribute)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental attribute)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental attribute)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.random._containerwithrandomexperimental attribute)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental attribute)": [[80, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.set._containerwithsetexperimental attribute)": [[80, "ivy.data_classes.container.experimental.set._ContainerWithSetExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental attribute)": [[80, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental attribute)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._abc_impl"]], "_abc_impl (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental attribute)": [[80, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental._abc_impl"]], "_static_celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_celu"]], "_static_cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummax"]], "_static_cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_cummin"]], "_static_elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_elu"]], "_static_fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_fft"]], "_static_fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_fill_diagonal"]], "_static_hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardshrink"]], "_static_hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardsilu"]], "_static_hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_hardtanh"]], "_static_hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_hinge_embedding_loss"]], "_static_huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_huber_loss"]], "_static_kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_kl_div"]], "_static_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_l1_loss"]], "_static_log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_log_poisson_loss"]], "_static_nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental._static_nanmin"]], "_static_poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_poisson_nll_loss"]], "_static_put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_put_along_axis"]], "_static_reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental static method)": [[80, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental._static_reduce"]], "_static_scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_scaled_tanh"]], "_static_silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_silu"]], "_static_sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental._static_sliding_window"]], "_static_smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_smooth_l1_loss"]], "_static_soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental static method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental._static_soft_margin_loss"]], "_static_softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_softshrink"]], "_static_take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_take"]], "_static_tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_tanhshrink"]], "_static_threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental._static_threshold"]], "_static_trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental._static_trilu"]], "_static_trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_trim_zeros"]], "_static_unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unflatten"]], "_static_unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental._static_unique_consecutive"]], "adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.adaptive_max_pool3d"]], "adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.adjoint"]], "allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.allclose"]], "amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amax"]], "amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.amin"]], "as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.as_strided"]], "associative_scan() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.associative_scan"]], "atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_1d"]], "atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_2d"]], "atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.atleast_3d"]], "avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool1d"]], "avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool2d"]], "avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.avg_pool3d"]], "batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.batch_norm"]], "batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.batched_outer"]], "bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.bernoulli"]], "beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.beta"]], "binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.binarizer"]], "bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.bincount"]], "blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.blackman_window"]], "broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.broadcast_shapes"]], "celu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.celu"]], "column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.column_stack"]], "concat_from_sequence() (in module ivy.data_classes.container.experimental.manipulation)": [[80, "ivy.data_classes.container.experimental.manipulation.concat_from_sequence"]], "concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.concat_from_sequence"]], "cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.cond"]], "conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.conj"]], "copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.copysign"]], "corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.corrcoef"]], "count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.count_nonzero"]], "cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cov"]], "cummax() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummax"]], "cummin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.cummin"]], "dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dct"]], "dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.dft"]], "diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.diagflat"]], "diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.diff"]], "digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.digamma"]], "dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.dirichlet"]], "dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.dot"]], "dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dsplit"]], "dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.dstack"]], "eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eig"]], "eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigh_tridiagonal"]], "eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.eigvals"]], "elu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.elu"]], "embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.embedding"]], "erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfc"]], "erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.erfinv"]], "expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.expand"]], "eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.eye_like"]], "fft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.fft"]], "fill_diagonal() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fill_diagonal"]], "fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fix"]], "flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flatten"]], "fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fliplr"]], "flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.flipud"]], "float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.float_power"]], "fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmax"]], "fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.fmod"]], "fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.fold"]], "frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.frexp"]], "gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.gamma"]], "gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.gradient"]], "group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.group_norm"]], "hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hamming_window"]], "hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.hann_window"]], "hardshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardshrink"]], "hardsilu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardsilu"]], "hardtanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.hardtanh"]], "heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.heaviside"]], "higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.higher_order_moment"]], "hinge_embedding_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.hinge_embedding_loss"]], "histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.histogram"]], "hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hsplit"]], "hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.hstack"]], "huber_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.huber_loss"]], "hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.hypot"]], "i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.i0"]], "idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.idct"]], "ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifft"]], "ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.ifftn"]], "igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.igamma"]], "initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.initialize_tucker"]], "instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.instance_norm"]], "interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.interpolate"]], "invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[80, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.invert_permutation"]], "isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.isclose"]], "ivy.data_classes.container.experimental": [[80, "module-ivy.data_classes.container.experimental"]], "ivy.data_classes.container.experimental.activations": [[80, "module-ivy.data_classes.container.experimental.activations"]], "ivy.data_classes.container.experimental.conversions": [[80, "module-ivy.data_classes.container.experimental.conversions"]], "ivy.data_classes.container.experimental.creation": [[80, "module-ivy.data_classes.container.experimental.creation"]], "ivy.data_classes.container.experimental.data_type": [[80, "module-ivy.data_classes.container.experimental.data_type"]], "ivy.data_classes.container.experimental.device": [[80, "module-ivy.data_classes.container.experimental.device"]], "ivy.data_classes.container.experimental.elementwise": [[80, "module-ivy.data_classes.container.experimental.elementwise"]], "ivy.data_classes.container.experimental.general": [[80, "module-ivy.data_classes.container.experimental.general"]], "ivy.data_classes.container.experimental.gradients": [[80, "module-ivy.data_classes.container.experimental.gradients"]], "ivy.data_classes.container.experimental.image": [[80, "module-ivy.data_classes.container.experimental.image"]], "ivy.data_classes.container.experimental.layers": [[80, "module-ivy.data_classes.container.experimental.layers"]], "ivy.data_classes.container.experimental.linear_algebra": [[80, "module-ivy.data_classes.container.experimental.linear_algebra"]], "ivy.data_classes.container.experimental.losses": [[80, "module-ivy.data_classes.container.experimental.losses"]], "ivy.data_classes.container.experimental.manipulation": [[80, "module-ivy.data_classes.container.experimental.manipulation"]], "ivy.data_classes.container.experimental.norms": [[80, "module-ivy.data_classes.container.experimental.norms"]], "ivy.data_classes.container.experimental.random": [[80, "module-ivy.data_classes.container.experimental.random"]], "ivy.data_classes.container.experimental.searching": [[80, "module-ivy.data_classes.container.experimental.searching"]], "ivy.data_classes.container.experimental.set": [[80, "module-ivy.data_classes.container.experimental.set"]], "ivy.data_classes.container.experimental.sorting": [[80, "module-ivy.data_classes.container.experimental.sorting"]], "ivy.data_classes.container.experimental.statistical": [[80, "module-ivy.data_classes.container.experimental.statistical"]], "ivy.data_classes.container.experimental.utility": [[80, "module-ivy.data_classes.container.experimental.utility"]], "kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_bessel_derived_window"]], "kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.kaiser_window"]], "kl_div() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.kl_div"]], "kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.kron"]], "l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.l1_loss"]], "l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l1_normalize"]], "l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.l2_normalize"]], "ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.ldexp"]], "lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.lerp"]], "lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental method)": [[80, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.lexsort"]], "lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.lgamma"]], "log_poisson_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.log_poisson_loss"]], "logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logit"]], "logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.logsigmoid"]], "lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.lp_normalize"]], "make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.make_svd_non_negative"]], "matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.matricize"]], "matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.matrix_exp"]], "max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool1d"]], "max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool2d"]], "max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_pool3d"]], "max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.max_unpool1d"]], "median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.median"]], "mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.mel_weight_matrix"]], "mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.mode_dot"]], "modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.modf"]], "moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.moveaxis"]], "multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_dot"]], "multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.multi_mode_dot"]], "nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmean"]], "nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmedian"]], "nanmin() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanmin"]], "nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.nanprod"]], "nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nansum"]], "nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.nextafter"]], "optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental method)": [[80, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.optional_get_element"]], "pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.pad"]], "partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_fold"]], "partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_tensor_to_vec"]], "partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.partial_tucker"]], "partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_unfold"]], "partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.partial_vec_to_tensor"]], "poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.poisson"]], "poisson_nll_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.poisson_nll_loss"]], "polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.polyval"]], "prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.prelu"]], "put_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.put_along_axis"]], "quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.quantile"]], "reduce() (ivy.data_classes.container.experimental.general._containerwithgeneralexperimental method)": [[80, "ivy.data_classes.container.experimental.general._ContainerWithGeneralExperimental.reduce"]], "relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.relu6"]], "rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfft"]], "rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.rfftn"]], "rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.rot90"]], "scaled_tanh() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.scaled_tanh"]], "selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.selu"]], "signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.signbit"]], "silu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.silu"]], "sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sinc"]], "sliding_window() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.sliding_window"]], "smooth_l1_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.smooth_l1_loss"]], "soft_margin_loss() (ivy.data_classes.container.experimental.losses._containerwithlossesexperimental method)": [[80, "ivy.data_classes.container.experimental.losses._ContainerWithLossesExperimental.soft_margin_loss"]], "soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.soft_thresholding"]], "softshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.softshrink"]], "sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.sparsify_tensor"]], "static_adaptive_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool1d"]], "static_adaptive_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_avg_pool2d"]], "static_adaptive_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool2d"]], "static_adaptive_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_adaptive_max_pool3d"]], "static_adjoint() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_adjoint"]], "static_allclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_allclose"]], "static_amax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amax"]], "static_amin() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_amin"]], "static_as_strided() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_as_strided"]], "static_atleast_1d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_1d"]], "static_atleast_2d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_2d"]], "static_atleast_3d() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_atleast_3d"]], "static_avg_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool1d"]], "static_avg_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool2d"]], "static_avg_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_avg_pool3d"]], "static_batch_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_batch_norm"]], "static_batched_outer() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_batched_outer"]], "static_bernoulli() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_bernoulli"]], "static_beta() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_beta"]], "static_binarizer() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_binarizer"]], "static_bincount() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_bincount"]], "static_blackman_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_blackman_window"]], "static_broadcast_shapes() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_broadcast_shapes"]], "static_column_stack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_column_stack"]], "static_concat_from_sequence() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_concat_from_sequence"]], "static_cond() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_cond"]], "static_conj() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_conj"]], "static_copysign() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_copysign"]], "static_corrcoef() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_corrcoef"]], "static_count_nonzero() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_count_nonzero"]], "static_cov() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_cov"]], "static_dct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dct"]], "static_dft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_dft"]], "static_diagflat() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_diagflat"]], "static_diff() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_diff"]], "static_digamma() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_digamma"]], "static_dirichlet() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_dirichlet"]], "static_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_dot"]], "static_dsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dsplit"]], "static_dstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_dstack"]], "static_eig() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eig"]], "static_eigh_tridiagonal() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigh_tridiagonal"]], "static_eigvals() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_eigvals"]], "static_embedding() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_embedding"]], "static_erfc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfc"]], "static_erfinv() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_erfinv"]], "static_expand() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_expand"]], "static_eye_like() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_eye_like"]], "static_fix() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fix"]], "static_flatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flatten"]], "static_fliplr() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fliplr"]], "static_flipud() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_flipud"]], "static_float_power() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_float_power"]], "static_fmax() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmax"]], "static_fmod() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_fmod"]], "static_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_fold"]], "static_frexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_frexp"]], "static_gamma() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_gamma"]], "static_gradient() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_gradient"]], "static_group_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_group_norm"]], "static_hamming_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hamming_window"]], "static_hann_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_hann_window"]], "static_heaviside() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_heaviside"]], "static_higher_order_moment() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_higher_order_moment"]], "static_histogram() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_histogram"]], "static_hsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hsplit"]], "static_hstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_hstack"]], "static_hypot() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_hypot"]], "static_i0() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_i0"]], "static_idct() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_idct"]], "static_ifft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifft"]], "static_ifftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_ifftn"]], "static_igamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_igamma"]], "static_initialize_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_initialize_tucker"]], "static_instance_norm() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_instance_norm"]], "static_interpolate() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_interpolate"]], "static_invert_permutation() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[80, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_invert_permutation"]], "static_isclose() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_isclose"]], "static_kaiser_bessel_derived_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_bessel_derived_window"]], "static_kaiser_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_kaiser_window"]], "static_kron() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_kron"]], "static_l1_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l1_normalize"]], "static_l2_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_l2_normalize"]], "static_ldexp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_ldexp"]], "static_lerp() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_lerp"]], "static_lexsort() (ivy.data_classes.container.experimental.sorting._containerwithsortingexperimental static method)": [[80, "ivy.data_classes.container.experimental.sorting._ContainerWithSortingExperimental.static_lexsort"]], "static_lgamma() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_lgamma"]], "static_logit() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logit"]], "static_logsigmoid() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_logsigmoid"]], "static_lp_normalize() (ivy.data_classes.container.experimental.norms._containerwithnormsexperimental static method)": [[80, "ivy.data_classes.container.experimental.norms._ContainerWithNormsExperimental.static_lp_normalize"]], "static_make_svd_non_negative() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_make_svd_non_negative"]], "static_matricize() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_matricize"]], "static_matrix_exp() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_matrix_exp"]], "static_max_pool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool1d"]], "static_max_pool2d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool2d"]], "static_max_pool3d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_pool3d"]], "static_max_unpool1d() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_max_unpool1d"]], "static_median() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_median"]], "static_mel_weight_matrix() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_mel_weight_matrix"]], "static_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_mode_dot"]], "static_modf() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_modf"]], "static_moveaxis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_moveaxis"]], "static_multi_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_dot"]], "static_multi_mode_dot() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_multi_mode_dot"]], "static_nanmean() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmean"]], "static_nanmedian() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanmedian"]], "static_nanprod() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_nanprod"]], "static_nansum() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nansum"]], "static_nextafter() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_nextafter"]], "static_optional_get_element() (ivy.data_classes.container.experimental.utility._containerwithutilityexperimental static method)": [[80, "ivy.data_classes.container.experimental.utility._ContainerWithUtilityExperimental.static_optional_get_element"]], "static_pad() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_pad"]], "static_partial_fold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_fold"]], "static_partial_tensor_to_vec() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_tensor_to_vec"]], "static_partial_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_partial_tucker"]], "static_partial_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_unfold"]], "static_partial_vec_to_tensor() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_partial_vec_to_tensor"]], "static_poisson() (ivy.data_classes.container.experimental.random._containerwithrandomexperimental static method)": [[80, "ivy.data_classes.container.experimental.random._ContainerWithRandomExperimental.static_poisson"]], "static_polyval() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_polyval"]], "static_prelu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_prelu"]], "static_quantile() (ivy.data_classes.container.experimental.statistical._containerwithstatisticalexperimental static method)": [[80, "ivy.data_classes.container.experimental.statistical._ContainerWithStatisticalExperimental.static_quantile"]], "static_relu6() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_relu6"]], "static_rfft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfft"]], "static_rfftn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rfftn"]], "static_rnn() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_rnn"]], "static_rot90() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_rot90"]], "static_selu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_selu"]], "static_signbit() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_signbit"]], "static_sinc() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sinc"]], "static_soft_thresholding() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_soft_thresholding"]], "static_sparsify_tensor() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_sparsify_tensor"]], "static_stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental static method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.static_stft"]], "static_svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_svd_flip"]], "static_take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_take_along_axis"]], "static_tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tensor_train"]], "static_thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental static method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.static_thresholded_relu"]], "static_top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_top_k"]], "static_tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_tril_indices"]], "static_truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_truncated_svd"]], "static_tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tt_matrix_to_tensor"]], "static_tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental static method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.static_tucker"]], "static_unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_unfold"]], "static_unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental static method)": [[80, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.static_unravel_index"]], "static_unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_mean"]], "static_unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_min"]], "static_unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_unsorted_segment_sum"]], "static_vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental static method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.static_vorbis_window"]], "static_vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vsplit"]], "static_vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental static method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.static_vstack"]], "static_xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_xlogy"]], "static_zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental static method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.static_zeta"]], "stft() (ivy.data_classes.container.experimental.layers._containerwithlayersexperimental method)": [[80, "ivy.data_classes.container.experimental.layers._ContainerWithLayersExperimental.stft"]], "svd_flip() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.svd_flip"]], "take() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take"]], "take_along_axis() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.take_along_axis"]], "tanhshrink() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.tanhshrink"]], "tensor_train() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tensor_train"]], "threshold() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.threshold"]], "thresholded_relu() (ivy.data_classes.container.experimental.activations._containerwithactivationexperimental method)": [[80, "ivy.data_classes.container.experimental.activations._ContainerWithActivationExperimental.thresholded_relu"]], "top_k() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.top_k"]], "tril_indices() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.tril_indices"]], "trilu() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.trilu"]], "trim_zeros() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.trim_zeros"]], "truncated_svd() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.truncated_svd"]], "tt_matrix_to_tensor() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tt_matrix_to_tensor"]], "tucker() (ivy.data_classes.container.experimental.linear_algebra._containerwithlinearalgebraexperimental method)": [[80, "ivy.data_classes.container.experimental.linear_algebra._ContainerWithLinearAlgebraExperimental.tucker"]], "unflatten() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unflatten"]], "unfold() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unfold"]], "unique_consecutive() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.unique_consecutive"]], "unravel_index() (ivy.data_classes.container.experimental.searching._containerwithsearchingexperimental method)": [[80, "ivy.data_classes.container.experimental.searching._ContainerWithSearchingExperimental.unravel_index"]], "unsorted_segment_mean() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_mean"]], "unsorted_segment_min() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_min"]], "unsorted_segment_sum() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.unsorted_segment_sum"]], "vorbis_window() (ivy.data_classes.container.experimental.creation._containerwithcreationexperimental method)": [[80, "ivy.data_classes.container.experimental.creation._ContainerWithCreationExperimental.vorbis_window"]], "vsplit() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vsplit"]], "vstack() (ivy.data_classes.container.experimental.manipulation._containerwithmanipulationexperimental method)": [[80, "ivy.data_classes.container.experimental.manipulation._ContainerWithManipulationExperimental.vstack"]], "xlogy() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.xlogy"]], "zeta() (ivy.data_classes.container.experimental.elementwise._containerwithelementwiseexperimental method)": [[80, "ivy.data_classes.container.experimental.elementwise._ContainerWithElementWiseExperimental.zeta"]], "_containerwithgeneral (class in ivy.data_classes.container.general)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral"]], "_abc_impl (ivy.data_classes.container.general._containerwithgeneral attribute)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._abc_impl"]], "_static_all_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_all_equal"]], "_static_array_equal() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_array_equal"]], "_static_assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_assert_supports_inplace"]], "_static_clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_matrix_norm"]], "_static_clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_clip_vector_norm"]], "_static_einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_rearrange"]], "_static_einops_reduce() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_reduce"]], "_static_einops_repeat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_einops_repeat"]], "_static_exists() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_exists"]], "_static_fourier_encode() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_fourier_encode"]], "_static_gather() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather"]], "_static_gather_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_gather_nd"]], "_static_get_num_dims() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_get_num_dims"]], "_static_has_nans() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_has_nans"]], "_static_inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_decrement"]], "_static_inplace_increment() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_increment"]], "_static_inplace_update() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_inplace_update"]], "_static_is_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_array"]], "_static_is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_ivy_array"]], "_static_is_native_array() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_is_native_array"]], "_static_scatter_flat() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_flat"]], "_static_scatter_nd() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_scatter_nd"]], "_static_size() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_size"]], "_static_stable_divide() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_divide"]], "_static_stable_pow() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_stable_pow"]], "_static_supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_supports_inplace_updates"]], "_static_to_list() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_list"]], "_static_to_numpy() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_numpy"]], "_static_to_scalar() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_to_scalar"]], "_static_value_is_nan() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral._static_value_is_nan"]], "all_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.all_equal"]], "array_equal() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.array_equal"]], "assert_supports_inplace() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.assert_supports_inplace"]], "clip_matrix_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.clip_matrix_norm"]], "clip_vector_norm() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.clip_vector_norm"]], "einops_rearrange() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.einops_rearrange"]], "einops_reduce() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.einops_reduce"]], "einops_repeat() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.einops_repeat"]], "exists() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.exists"]], "fourier_encode() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.fourier_encode"]], "gather() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.gather"]], "gather_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.gather_nd"]], "get_num_dims() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.get_num_dims"]], "has_nans() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.has_nans"]], "inplace_decrement() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_decrement"]], "inplace_increment() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_increment"]], "inplace_update() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.inplace_update"]], "is_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.is_array"]], "is_ivy_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.is_ivy_array"]], "is_native_array() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.is_native_array"]], "isin() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.isin"]], "itemsize() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.itemsize"]], "ivy.data_classes.container.general": [[81, "module-ivy.data_classes.container.general"]], "scatter_flat() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_flat"]], "scatter_nd() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.scatter_nd"]], "size() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.size"]], "stable_divide() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.stable_divide"]], "stable_pow() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.stable_pow"]], "static_isin() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.static_isin"]], "static_itemsize() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.static_itemsize"]], "static_strides() (ivy.data_classes.container.general._containerwithgeneral static method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.static_strides"]], "strides() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.strides"]], "supports_inplace_updates() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.supports_inplace_updates"]], "to_list() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.to_list"]], "to_numpy() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.to_numpy"]], "to_scalar() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.to_scalar"]], "value_is_nan() (ivy.data_classes.container.general._containerwithgeneral method)": [[81, "ivy.data_classes.container.general._ContainerWithGeneral.value_is_nan"]], "_containerwithgradients (class in ivy.data_classes.container.gradients)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients"]], "_abc_impl (ivy.data_classes.container.gradients._containerwithgradients attribute)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients._abc_impl"]], "_static_stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients static method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients._static_stop_gradient"]], "adam_step() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_step"]], "adam_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.adam_update"]], "gradient_descent_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.gradient_descent_update"]], "ivy.data_classes.container.gradients": [[82, "module-ivy.data_classes.container.gradients"]], "lamb_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.lamb_update"]], "lars_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.lars_update"]], "optimizer_update() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.optimizer_update"]], "stop_gradient() (ivy.data_classes.container.gradients._containerwithgradients method)": [[82, "ivy.data_classes.container.gradients._ContainerWithGradients.stop_gradient"]], "_containerwithimage (class in ivy.data_classes.container.image)": [[83, "ivy.data_classes.container.image._ContainerWithImage"]], "_abc_impl (ivy.data_classes.container.image._containerwithimage attribute)": [[83, "ivy.data_classes.container.image._ContainerWithImage._abc_impl"]], "ivy.data_classes.container.image": [[83, "module-ivy.data_classes.container.image"]], "_containerwithlayers (class in ivy.data_classes.container.layers)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers"]], "_abc_impl (ivy.data_classes.container.layers._containerwithlayers attribute)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._abc_impl"]], "_static_conv1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d"]], "_static_conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv1d_transpose"]], "_static_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d"]], "_static_conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv2d_transpose"]], "_static_conv3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d"]], "_static_conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_conv3d_transpose"]], "_static_depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_depthwise_conv2d"]], "_static_dropout() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout"]], "_static_dropout1d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout1d"]], "_static_dropout2d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout2d"]], "_static_dropout3d() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_dropout3d"]], "_static_linear() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_linear"]], "_static_lstm_update() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_lstm_update"]], "_static_multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_multi_head_attention"]], "_static_reduce_window() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_reduce_window"]], "_static_scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers static method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers._static_scaled_dot_product_attention"]], "conv1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d"]], "conv1d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.conv1d_transpose"]], "conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d"]], "conv2d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.conv2d_transpose"]], "conv3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d"]], "conv3d_transpose() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.conv3d_transpose"]], "depthwise_conv2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.depthwise_conv2d"]], "dropout() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.dropout"]], "dropout1d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.dropout1d"]], "dropout2d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.dropout2d"]], "dropout3d() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.dropout3d"]], "ivy.data_classes.container.layers": [[84, "module-ivy.data_classes.container.layers"]], "linear() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.linear"]], "lstm_update() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.lstm_update"]], "multi_head_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.multi_head_attention"]], "reduce_window() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.reduce_window"]], "scaled_dot_product_attention() (ivy.data_classes.container.layers._containerwithlayers method)": [[84, "ivy.data_classes.container.layers._ContainerWithLayers.scaled_dot_product_attention"]], "_containerwithlinearalgebra (class in ivy.data_classes.container.linear_algebra)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra"]], "_abc_impl (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra attribute)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._abc_impl"]], "_static_cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cholesky"]], "_static_cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_cross"]], "_static_det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_det"]], "_static_diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diag"]], "_static_diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_diagonal"]], "_static_eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigh"]], "_static_eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_eigvalsh"]], "_static_inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inner"]], "_static_inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_inv"]], "_static_matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matmul"]], "_static_matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_norm"]], "_static_matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_power"]], "_static_matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_rank"]], "_static_matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_matrix_transpose"]], "_static_outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_outer"]], "_static_pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_pinv"]], "_static_qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_qr"]], "_static_slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_slogdet"]], "_static_solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_solve"]], "_static_svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svd"]], "_static_svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_svdvals"]], "_static_tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensordot"]], "_static_tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_tensorsolve"]], "_static_trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_trace"]], "_static_vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vander"]], "_static_vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vecdot"]], "_static_vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_norm"]], "_static_vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra._static_vector_to_skew_symmetric_matrix"]], "cholesky() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cholesky"]], "cross() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.cross"]], "det() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.det"]], "diag() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diag"]], "diagonal() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.diagonal"]], "eigh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigh"]], "eigvalsh() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.eigvalsh"]], "general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.general_inner_product"]], "inner() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inner"]], "inv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.inv"]], "ivy.data_classes.container.linear_algebra": [[85, "module-ivy.data_classes.container.linear_algebra"]], "matmul() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matmul"]], "matrix_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_norm"]], "matrix_power() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_power"]], "matrix_rank() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_rank"]], "matrix_transpose() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.matrix_transpose"]], "outer() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.outer"]], "pinv() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.pinv"]], "qr() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.qr"]], "slogdet() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.slogdet"]], "solve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.solve"]], "static_general_inner_product() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra static method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.static_general_inner_product"]], "svd() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svd"]], "svdvals() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.svdvals"]], "tensordot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensordot"]], "tensorsolve() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.tensorsolve"]], "trace() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.trace"]], "vander() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vander"]], "vecdot() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vecdot"]], "vector_norm() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.data_classes.container.linear_algebra._containerwithlinearalgebra method)": [[85, "ivy.data_classes.container.linear_algebra._ContainerWithLinearAlgebra.vector_to_skew_symmetric_matrix"]], "_containerwithlosses (class in ivy.data_classes.container.losses)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses"]], "_abc_impl (ivy.data_classes.container.losses._containerwithlosses attribute)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses._abc_impl"]], "_static_binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses._static_binary_cross_entropy"]], "_static_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses._static_cross_entropy"]], "_static_sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses static method)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses._static_sparse_cross_entropy"]], "binary_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses.binary_cross_entropy"]], "cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses.cross_entropy"]], "ivy.data_classes.container.losses": [[86, "module-ivy.data_classes.container.losses"]], "sparse_cross_entropy() (ivy.data_classes.container.losses._containerwithlosses method)": [[86, "ivy.data_classes.container.losses._ContainerWithLosses.sparse_cross_entropy"]], "_containerwithmanipulation (class in ivy.data_classes.container.manipulation)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation"]], "_abc_impl (ivy.data_classes.container.manipulation._containerwithmanipulation attribute)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._abc_impl"]], "_static_clip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_clip"]], "_static_concat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_concat"]], "_static_constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_constant_pad"]], "_static_expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_expand_dims"]], "_static_flip() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_flip"]], "_static_permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_permute_dims"]], "_static_repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_repeat"]], "_static_reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_reshape"]], "_static_roll() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_roll"]], "_static_split() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_split"]], "_static_squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_squeeze"]], "_static_stack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_stack"]], "_static_swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_swapaxes"]], "_static_tile() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_tile"]], "_static_unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_unstack"]], "_static_zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation static method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation._static_zero_pad"]], "clip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.clip"]], "concat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.concat"]], "constant_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.constant_pad"]], "expand_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.expand_dims"]], "flip() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.flip"]], "ivy.data_classes.container.manipulation": [[87, "module-ivy.data_classes.container.manipulation"]], "permute_dims() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.permute_dims"]], "repeat() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.repeat"]], "reshape() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.reshape"]], "roll() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.roll"]], "split() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.split"]], "squeeze() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.squeeze"]], "stack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.stack"]], "swapaxes() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.swapaxes"]], "tile() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.tile"]], "unstack() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.unstack"]], "zero_pad() (ivy.data_classes.container.manipulation._containerwithmanipulation method)": [[87, "ivy.data_classes.container.manipulation._ContainerWithManipulation.zero_pad"]], "_containerwithnorms (class in ivy.data_classes.container.norms)": [[88, "ivy.data_classes.container.norms._ContainerWithNorms"]], "_abc_impl (ivy.data_classes.container.norms._containerwithnorms attribute)": [[88, "ivy.data_classes.container.norms._ContainerWithNorms._abc_impl"]], "ivy.data_classes.container.norms": [[88, "module-ivy.data_classes.container.norms"]], "layer_norm() (ivy.data_classes.container.norms._containerwithnorms method)": [[88, "ivy.data_classes.container.norms._ContainerWithNorms.layer_norm"]], "_containerwithrandom (class in ivy.data_classes.container.random)": [[89, "ivy.data_classes.container.random._ContainerWithRandom"]], "_abc_impl (ivy.data_classes.container.random._containerwithrandom attribute)": [[89, "ivy.data_classes.container.random._ContainerWithRandom._abc_impl"]], "_static_multinomial() (ivy.data_classes.container.random._containerwithrandom static method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom._static_multinomial"]], "_static_randint() (ivy.data_classes.container.random._containerwithrandom static method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom._static_randint"]], "_static_random_normal() (ivy.data_classes.container.random._containerwithrandom static method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom._static_random_normal"]], "_static_random_uniform() (ivy.data_classes.container.random._containerwithrandom static method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom._static_random_uniform"]], "_static_shuffle() (ivy.data_classes.container.random._containerwithrandom static method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom._static_shuffle"]], "ivy.data_classes.container.random": [[89, "module-ivy.data_classes.container.random"]], "multinomial() (ivy.data_classes.container.random._containerwithrandom method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom.multinomial"]], "randint() (ivy.data_classes.container.random._containerwithrandom method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom.randint"]], "random_normal() (ivy.data_classes.container.random._containerwithrandom method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom.random_normal"]], "random_uniform() (ivy.data_classes.container.random._containerwithrandom method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom.random_uniform"]], "shuffle() (ivy.data_classes.container.random._containerwithrandom method)": [[89, "ivy.data_classes.container.random._ContainerWithRandom.shuffle"]], "_containerwithsearching (class in ivy.data_classes.container.searching)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching"]], "_abc_impl (ivy.data_classes.container.searching._containerwithsearching attribute)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching._abc_impl"]], "_static_argmax() (ivy.data_classes.container.searching._containerwithsearching static method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmax"]], "_static_argmin() (ivy.data_classes.container.searching._containerwithsearching static method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching._static_argmin"]], "_static_argwhere() (ivy.data_classes.container.searching._containerwithsearching static method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching._static_argwhere"]], "_static_nonzero() (ivy.data_classes.container.searching._containerwithsearching static method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching._static_nonzero"]], "_static_where() (ivy.data_classes.container.searching._containerwithsearching static method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching._static_where"]], "argmax() (ivy.data_classes.container.searching._containerwithsearching method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching.argmax"]], "argmin() (ivy.data_classes.container.searching._containerwithsearching method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching.argmin"]], "argwhere() (ivy.data_classes.container.searching._containerwithsearching method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching.argwhere"]], "ivy.data_classes.container.searching": [[90, "module-ivy.data_classes.container.searching"]], "nonzero() (ivy.data_classes.container.searching._containerwithsearching method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching.nonzero"]], "where() (ivy.data_classes.container.searching._containerwithsearching method)": [[90, "ivy.data_classes.container.searching._ContainerWithSearching.where"]], "_containerwithset (class in ivy.data_classes.container.set)": [[91, "ivy.data_classes.container.set._ContainerWithSet"]], "_abc_impl (ivy.data_classes.container.set._containerwithset attribute)": [[91, "ivy.data_classes.container.set._ContainerWithSet._abc_impl"]], "_static_unique_all() (ivy.data_classes.container.set._containerwithset static method)": [[91, "ivy.data_classes.container.set._ContainerWithSet._static_unique_all"]], "_static_unique_counts() (ivy.data_classes.container.set._containerwithset static method)": [[91, "ivy.data_classes.container.set._ContainerWithSet._static_unique_counts"]], "_static_unique_inverse() (ivy.data_classes.container.set._containerwithset static method)": [[91, "ivy.data_classes.container.set._ContainerWithSet._static_unique_inverse"]], "_static_unique_values() (ivy.data_classes.container.set._containerwithset static method)": [[91, "ivy.data_classes.container.set._ContainerWithSet._static_unique_values"]], "ivy.data_classes.container.set": [[91, "module-ivy.data_classes.container.set"]], "unique_all() (ivy.data_classes.container.set._containerwithset method)": [[91, "ivy.data_classes.container.set._ContainerWithSet.unique_all"]], "unique_counts() (ivy.data_classes.container.set._containerwithset method)": [[91, "ivy.data_classes.container.set._ContainerWithSet.unique_counts"]], "unique_inverse() (ivy.data_classes.container.set._containerwithset method)": [[91, "ivy.data_classes.container.set._ContainerWithSet.unique_inverse"]], "unique_values() (ivy.data_classes.container.set._containerwithset method)": [[91, "ivy.data_classes.container.set._ContainerWithSet.unique_values"]], "_containerwithsorting (class in ivy.data_classes.container.sorting)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting"]], "_abc_impl (ivy.data_classes.container.sorting._containerwithsorting attribute)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting._abc_impl"]], "_static_argsort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting._static_argsort"]], "_static_searchsorted() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting._static_searchsorted"]], "_static_sort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting._static_sort"]], "argsort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting.argsort"]], "ivy.data_classes.container.sorting": [[92, "module-ivy.data_classes.container.sorting"]], "msort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting.msort"]], "searchsorted() (ivy.data_classes.container.sorting._containerwithsorting method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting.searchsorted"]], "sort() (ivy.data_classes.container.sorting._containerwithsorting method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting.sort"]], "static_msort() (ivy.data_classes.container.sorting._containerwithsorting static method)": [[92, "ivy.data_classes.container.sorting._ContainerWithSorting.static_msort"]], "_containerwithstatistical (class in ivy.data_classes.container.statistical)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical"]], "_abc_impl (ivy.data_classes.container.statistical._containerwithstatistical attribute)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._abc_impl"]], "_static_cumprod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumprod"]], "_static_cumsum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_cumsum"]], "_static_min() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_min"]], "_static_prod() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_prod"]], "_static_sum() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_sum"]], "_static_var() (ivy.data_classes.container.statistical._containerwithstatistical static method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical._static_var"]], "cumprod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumprod"]], "cumsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.cumsum"]], "einsum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.einsum"]], "ivy.data_classes.container.statistical": [[93, "module-ivy.data_classes.container.statistical"]], "max() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.max"]], "mean() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.mean"]], "min() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.min"]], "prod() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.prod"]], "std() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.std"]], "sum() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.sum"]], "var() (ivy.data_classes.container.statistical._containerwithstatistical method)": [[93, "ivy.data_classes.container.statistical._ContainerWithStatistical.var"]], "_containerwithutility (class in ivy.data_classes.container.utility)": [[94, "ivy.data_classes.container.utility._ContainerWithUtility"]], "_abc_impl (ivy.data_classes.container.utility._containerwithutility attribute)": [[94, "ivy.data_classes.container.utility._ContainerWithUtility._abc_impl"]], "_static_all() (ivy.data_classes.container.utility._containerwithutility static method)": [[94, "ivy.data_classes.container.utility._ContainerWithUtility._static_all"]], "_static_any() (ivy.data_classes.container.utility._containerwithutility static method)": [[94, "ivy.data_classes.container.utility._ContainerWithUtility._static_any"]], "all() (ivy.data_classes.container.utility._containerwithutility method)": [[94, "ivy.data_classes.container.utility._ContainerWithUtility.all"]], "any() (ivy.data_classes.container.utility._containerwithutility method)": [[94, "ivy.data_classes.container.utility._ContainerWithUtility.any"]], "ivy.data_classes.container.utility": [[94, "module-ivy.data_classes.container.utility"]], "_wrap_function() (in module ivy.data_classes.container.wrapping)": [[95, "ivy.data_classes.container.wrapping._wrap_function"]], "add_ivy_container_instance_methods() (in module ivy.data_classes.container.wrapping)": [[95, "ivy.data_classes.container.wrapping.add_ivy_container_instance_methods"]], "ivy.data_classes.container.wrapping": [[95, "module-ivy.data_classes.container.wrapping"]], "factorizedtensor (class in ivy.data_classes.factorized_tensor.base)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor"]], "__init__() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.base.factorizedtensor attribute)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.base": [[96, "module-ivy.data_classes.factorized_tensor.base"]], "mode_dot() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.mode_dot"]], "norm() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.norm"]], "to_tensor() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.base.factorizedtensor method)": [[96, "ivy.data_classes.factorized_tensor.base.FactorizedTensor.to_vec"]], "cptensor (class in ivy.data_classes.factorized_tensor.cp_tensor)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor"]], "__init__() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.cp_tensor.cptensor attribute)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor._abc_impl"]], "cp_copy() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_copy"]], "cp_flip_sign() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_flip_sign"]], "cp_lstsq_grad() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_lstsq_grad"]], "cp_mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_mode_dot"]], "cp_n_param() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_n_param"]], "cp_norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_norm"]], "cp_normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_normalize"]], "cp_to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_tensor"]], "cp_to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_unfolded"]], "cp_to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.cp_to_vec"]], "ivy.data_classes.factorized_tensor.cp_tensor": [[97, "module-ivy.data_classes.factorized_tensor.cp_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.cp_tensor.cptensor property)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.n_param"]], "norm() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.norm"]], "normalize() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.normalize"]], "to_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.to_vec"]], "unfolding_dot_khatri_rao() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.unfolding_dot_khatri_rao"]], "validate_cp_rank() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_rank"]], "validate_cp_tensor() (ivy.data_classes.factorized_tensor.cp_tensor.cptensor static method)": [[97, "ivy.data_classes.factorized_tensor.cp_tensor.CPTensor.validate_cp_tensor"]], "parafac2tensor (class in ivy.data_classes.factorized_tensor.parafac2_tensor)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor"]], "__init__() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor attribute)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor._abc_impl"]], "apply_parafac2_projections() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.apply_parafac2_projections"]], "from_cptensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor class method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.from_CPTensor"]], "ivy.data_classes.factorized_tensor.parafac2_tensor": [[98, "module-ivy.data_classes.factorized_tensor.parafac2_tensor"]], "n_param (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor property)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.n_param"]], "parafac2_normalise() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_normalise"]], "parafac2_to_slice() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slice"]], "parafac2_to_slices() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_slices"]], "parafac2_to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_tensor"]], "parafac2_to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_unfolded"]], "parafac2_to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.parafac2_to_vec"]], "to_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.to_vec"]], "validate_parafac2_tensor() (ivy.data_classes.factorized_tensor.parafac2_tensor.parafac2tensor static method)": [[98, "ivy.data_classes.factorized_tensor.parafac2_tensor.Parafac2Tensor.validate_parafac2_tensor"]], "trtensor (class in ivy.data_classes.factorized_tensor.tr_tensor)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tr_tensor.trtensor attribute)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor._abc_impl"]], "ivy.data_classes.factorized_tensor.tr_tensor": [[99, "module-ivy.data_classes.factorized_tensor.tr_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tr_tensor.trtensor property)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.to_vec"]], "tr_n_param() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_n_param"]], "tr_to_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_tensor"]], "tr_to_unfolded() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_unfolded"]], "tr_to_vec() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.tr_to_vec"]], "validate_tr_rank() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_rank"]], "validate_tr_tensor() (ivy.data_classes.factorized_tensor.tr_tensor.trtensor static method)": [[99, "ivy.data_classes.factorized_tensor.tr_tensor.TRTensor.validate_tr_tensor"]], "tttensor (class in ivy.data_classes.factorized_tensor.tt_tensor)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tt_tensor.tttensor attribute)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._abc_impl"]], "_tt_n_param() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor._tt_n_param"]], "index_update() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.index_update"]], "ivy.data_classes.factorized_tensor.tt_tensor": [[100, "module-ivy.data_classes.factorized_tensor.tt_tensor"]], "n_param (ivy.data_classes.factorized_tensor.tt_tensor.tttensor property)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.n_param"]], "pad_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.pad_tt_rank"]], "to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_tensor"]], "to_unfolding() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_unfolding"]], "to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.to_vec"]], "tt_to_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_tensor"]], "tt_to_unfolded() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_unfolded"]], "tt_to_vec() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.tt_to_vec"]], "validate_tt_rank() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_rank"]], "validate_tt_tensor() (ivy.data_classes.factorized_tensor.tt_tensor.tttensor static method)": [[100, "ivy.data_classes.factorized_tensor.tt_tensor.TTTensor.validate_tt_tensor"]], "tuckertensor (class in ivy.data_classes.factorized_tensor.tucker_tensor)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor"]], "__init__() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.__init__"]], "_abc_impl (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor attribute)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor._abc_impl"]], "_bisection_root_finder() (in module ivy.data_classes.factorized_tensor.tucker_tensor)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor._bisection_root_finder"]], "ivy.data_classes.factorized_tensor.tucker_tensor": [[101, "module-ivy.data_classes.factorized_tensor.tucker_tensor"]], "mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.mode_dot"]], "n_param (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor property)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.n_param"]], "to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_tensor"]], "to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_unfolded"]], "to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.to_vec"]], "tucker_copy() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_copy"]], "tucker_mode_dot() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_mode_dot"]], "tucker_n_param() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_n_param"]], "tucker_normalize() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_normalize"]], "tucker_to_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_tensor"]], "tucker_to_unfolded() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_unfolded"]], "tucker_to_vec() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.tucker_to_vec"]], "validate_tucker_rank() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_rank"]], "validate_tucker_tensor() (ivy.data_classes.factorized_tensor.tucker_tensor.tuckertensor static method)": [[101, "ivy.data_classes.factorized_tensor.tucker_tensor.TuckerTensor.validate_tucker_tensor"]], "array (class in ivy.data_classes.array.array)": [[102, "ivy.data_classes.array.array.Array"]], "t (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.T"]], "__abs__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__abs__"]], "__add__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__add__"]], "__eq__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__eq__"]], "__ge__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__ge__"]], "__gt__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__gt__"]], "__init__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__init__"]], "__le__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__le__"]], "__lt__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__lt__"]], "__ne__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__ne__"]], "__pow__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__pow__"]], "__radd__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__radd__"]], "__rrshift__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__rrshift__"]], "__rshift__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__rshift__"]], "__rsub__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__rsub__"]], "__sub__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__sub__"]], "__truediv__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__truediv__"]], "__xor__() (ivy.data_classes.array.array.array method)": [[102, "ivy.data_classes.array.array.Array.__xor__"]], "backend (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.backend"]], "base (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.base"]], "data (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.data"]], "device (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.device"]], "dtype (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.dtype"]], "dynamic_backend (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.dynamic_backend"]], "imag (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.imag"]], "itemsize (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.itemsize"]], "ivy.data_classes.array.array": [[102, "module-ivy.data_classes.array.array"]], "mt (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.mT"]], "ndim (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.ndim"]], "real (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.real"]], "shape (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.shape"]], "size (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.size"]], "strides (ivy.data_classes.array.array.array property)": [[102, "ivy.data_classes.array.array.Array.strides"]], "container (class in ivy.data_classes.container.container)": [[103, "ivy.data_classes.container.container.Container"]], "__abs__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__abs__"]], "__add__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__add__"]], "__eq__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__eq__"]], "__ge__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__ge__"]], "__gt__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__gt__"]], "__init__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__init__"]], "__le__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__le__"]], "__lt__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__lt__"]], "__ne__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__ne__"]], "__pow__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__pow__"]], "__radd__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__radd__"]], "__rrshift__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__rrshift__"]], "__rshift__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__rshift__"]], "__rsub__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__rsub__"]], "__sub__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__sub__"]], "__truediv__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__truediv__"]], "__xor__() (ivy.data_classes.container.container.container method)": [[103, "ivy.data_classes.container.container.Container.__xor__"]], "ivy.data_classes.container.container": [[103, "module-ivy.data_classes.container.container"]], "nestedarray (class in ivy.data_classes.nested_array.nested_array)": [[105, "ivy.data_classes.nested_array.nested_array.NestedArray"]], "__init__() (ivy.data_classes.nested_array.nested_array.nestedarray method)": [[105, "ivy.data_classes.nested_array.nested_array.NestedArray.__init__"]], "from_row_lengths() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[105, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_lengths"]], "from_row_splits() (ivy.data_classes.nested_array.nested_array.nestedarray class method)": [[105, "ivy.data_classes.nested_array.nested_array.NestedArray.from_row_splits"]], "ivy.data_classes.nested_array.nested_array": [[105, "module-ivy.data_classes.nested_array.nested_array"]], "nestedarraybase (class in ivy.data_classes.nested_array.base)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase"]], "__init__() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.__init__"]], "_abc_impl (ivy.data_classes.nested_array.base.nestedarraybase attribute)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase._abc_impl"]], "broadcast_shapes() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.broadcast_shapes"]], "data (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.data"]], "device (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.device"]], "dtype (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.dtype"]], "inner_shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.inner_shape"]], "ivy.data_classes.nested_array.base": [[106, "module-ivy.data_classes.nested_array.base"]], "ndim (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.ndim"]], "nested_array() (ivy.data_classes.nested_array.base.nestedarraybase class method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_array"]], "nested_rank (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.nested_rank"]], "ragged_map() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_map"]], "ragged_multi_map() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map"]], "ragged_multi_map_in_function() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.ragged_multi_map_in_function"]], "replace_ivy_arrays() (ivy.data_classes.nested_array.base.nestedarraybase static method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.replace_ivy_arrays"]], "shape (ivy.data_classes.nested_array.base.nestedarraybase property)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.shape"]], "unbind() (ivy.data_classes.nested_array.base.nestedarraybase method)": [[106, "ivy.data_classes.nested_array.base.NestedArrayBase.unbind"]], "nestedarrayelementwise (class in ivy.data_classes.nested_array.elementwise)": [[107, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise"]], "_abc_impl (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise attribute)": [[107, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise._abc_impl"]], "ivy.data_classes.nested_array.elementwise": [[107, "module-ivy.data_classes.nested_array.elementwise"]], "static_add() (ivy.data_classes.nested_array.elementwise.nestedarrayelementwise static method)": [[107, "ivy.data_classes.nested_array.elementwise.NestedArrayElementwise.static_add"]], "gelu() (in module ivy)": [[110, "ivy.gelu"], [626, "ivy.gelu"]], "gelu() (ivy.array method)": [[110, "ivy.Array.gelu"]], "gelu() (ivy.container method)": [[110, "ivy.Container.gelu"]], "hardswish() (in module ivy)": [[111, "ivy.hardswish"], [626, "ivy.hardswish"]], "hardswish() (ivy.array method)": [[111, "ivy.Array.hardswish"]], "hardswish() (ivy.container method)": [[111, "ivy.Container.hardswish"]], "leaky_relu() (in module ivy)": [[112, "ivy.leaky_relu"], [626, "ivy.leaky_relu"]], "leaky_relu() (ivy.array method)": [[112, "ivy.Array.leaky_relu"]], "leaky_relu() (ivy.container method)": [[112, "ivy.Container.leaky_relu"]], "log_softmax() (in module ivy)": [[113, "ivy.log_softmax"], [626, "ivy.log_softmax"]], "log_softmax() (ivy.array method)": [[113, "ivy.Array.log_softmax"]], "log_softmax() (ivy.container method)": [[113, "ivy.Container.log_softmax"]], "mish() (in module ivy)": [[114, "ivy.mish"], [626, "ivy.mish"]], "mish() (ivy.array method)": [[114, "ivy.Array.mish"]], "mish() (ivy.container method)": [[114, "ivy.Container.mish"]], "relu() (in module ivy)": [[115, "ivy.relu"], [626, "ivy.relu"]], "relu() (ivy.array method)": [[115, "ivy.Array.relu"]], "relu() (ivy.container method)": [[115, "ivy.Container.relu"]], "sigmoid() (in module ivy)": [[116, "ivy.sigmoid"], [626, "ivy.sigmoid"]], "sigmoid() (ivy.array method)": [[116, "ivy.Array.sigmoid"]], "sigmoid() (ivy.container method)": [[116, "ivy.Container.sigmoid"]], "softmax() (in module ivy)": [[117, "ivy.softmax"], [626, "ivy.softmax"]], "softmax() (ivy.array method)": [[117, "ivy.Array.softmax"]], "softmax() (ivy.container method)": [[117, "ivy.Container.softmax"]], "softplus() (in module ivy)": [[118, "ivy.softplus"], [626, "ivy.softplus"]], "softplus() (ivy.array method)": [[118, "ivy.Array.softplus"]], "softplus() (ivy.container method)": [[118, "ivy.Container.softplus"]], "softsign() (in module ivy)": [[119, "ivy.softsign"], [626, "ivy.softsign"]], "cmp_is() (in module ivy)": [[120, "ivy.cmp_is"], [628, "ivy.cmp_is"]], "cmp_isnot() (in module ivy)": [[121, "ivy.cmp_isnot"], [628, "ivy.cmp_isnot"]], "for_loop() (in module ivy)": [[122, "ivy.for_loop"], [628, "ivy.for_loop"]], "if_else() (in module ivy)": [[123, "ivy.if_else"], [628, "ivy.if_else"]], "try_except() (in module ivy)": [[124, "ivy.try_except"], [628, "ivy.try_except"]], "while_loop() (in module ivy)": [[125, "ivy.while_loop"], [628, "ivy.while_loop"]], "arange() (in module ivy)": [[126, "ivy.arange"], [629, "ivy.arange"]], "array() (in module ivy)": [[127, "ivy.array"], [629, "ivy.array"]], "asarray() (in module ivy)": [[128, "ivy.asarray"], [629, "ivy.asarray"]], "asarray() (ivy.array method)": [[128, "ivy.Array.asarray"]], "asarray() (ivy.container method)": [[128, "ivy.Container.asarray"]], "copy_array() (in module ivy)": [[129, "ivy.copy_array"], [629, "ivy.copy_array"]], "copy_array() (ivy.array method)": [[129, "ivy.Array.copy_array"]], "copy_array() (ivy.container method)": [[129, "ivy.Container.copy_array"]], "empty() (in module ivy)": [[130, "ivy.empty"], [629, "ivy.empty"]], "empty_like() (in module ivy)": [[131, "ivy.empty_like"], [629, "ivy.empty_like"]], "empty_like() (ivy.array method)": [[131, "ivy.Array.empty_like"]], "empty_like() (ivy.container method)": [[131, "ivy.Container.empty_like"]], "eye() (in module ivy)": [[132, "ivy.eye"], [629, "ivy.eye"]], "from_dlpack() (in module ivy)": [[133, "ivy.from_dlpack"], [629, "ivy.from_dlpack"]], "from_dlpack() (ivy.array method)": [[133, "ivy.Array.from_dlpack"]], "from_dlpack() (ivy.container method)": [[133, "ivy.Container.from_dlpack"]], "frombuffer() (in module ivy)": [[134, "ivy.frombuffer"], [629, "ivy.frombuffer"]], "frombuffer() (ivy.container method)": [[134, "ivy.Container.frombuffer"]], "full() (in module ivy)": [[135, "ivy.full"], [629, "ivy.full"]], "full_like() (in module ivy)": [[136, "ivy.full_like"], [629, "ivy.full_like"]], "full_like() (ivy.array method)": [[136, "ivy.Array.full_like"]], "full_like() (ivy.container method)": [[136, "ivy.Container.full_like"]], "linspace() (in module ivy)": [[137, "ivy.linspace"], [629, "ivy.linspace"]], "linspace() (ivy.array method)": [[137, "ivy.Array.linspace"]], "linspace() (ivy.container method)": [[137, "ivy.Container.linspace"]], "logspace() (in module ivy)": [[138, "ivy.logspace"], [629, "ivy.logspace"]], "logspace() (ivy.array method)": [[138, "ivy.Array.logspace"]], "logspace() (ivy.container method)": [[138, "ivy.Container.logspace"]], "meshgrid() (in module ivy)": [[139, "ivy.meshgrid"], [629, "ivy.meshgrid"]], "meshgrid() (ivy.array method)": [[139, "ivy.Array.meshgrid"]], "meshgrid() (ivy.container method)": [[139, "ivy.Container.meshgrid"]], "native_array() (in module ivy)": [[140, "ivy.native_array"], [629, "ivy.native_array"]], "native_array() (ivy.array method)": [[140, "ivy.Array.native_array"]], "native_array() (ivy.container method)": [[140, "ivy.Container.native_array"]], "one_hot() (in module ivy)": [[141, "ivy.one_hot"], [629, "ivy.one_hot"]], "one_hot() (ivy.array method)": [[141, "ivy.Array.one_hot"]], "one_hot() (ivy.container method)": [[141, "ivy.Container.one_hot"]], "ones() (in module ivy)": [[142, "ivy.ones"], [629, "ivy.ones"]], "ones_like() (in module ivy)": [[143, "ivy.ones_like"], [629, "ivy.ones_like"]], "ones_like() (ivy.array method)": [[143, "ivy.Array.ones_like"]], "ones_like() (ivy.container method)": [[143, "ivy.Container.ones_like"]], "to_dlpack() (in module ivy)": [[144, "ivy.to_dlpack"], [629, "ivy.to_dlpack"]], "tril() (in module ivy)": [[145, "ivy.tril"], [629, "ivy.tril"]], "tril() (ivy.array method)": [[145, "ivy.Array.tril"]], "tril() (ivy.container method)": [[145, "ivy.Container.tril"]], "triu() (in module ivy)": [[146, "ivy.triu"], [629, "ivy.triu"]], "triu() (ivy.array method)": [[146, "ivy.Array.triu"]], "triu() (ivy.container method)": [[146, "ivy.Container.triu"]], "triu_indices() (in module ivy)": [[147, "ivy.triu_indices"], [629, "ivy.triu_indices"]], "triu_indices() (ivy.container method)": [[147, "ivy.Container.triu_indices"]], "zeros() (in module ivy)": [[148, "ivy.zeros"], [629, "ivy.zeros"]], "zeros_like() (in module ivy)": [[149, "ivy.zeros_like"], [629, "ivy.zeros_like"]], "zeros_like() (ivy.array method)": [[149, "ivy.Array.zeros_like"]], "zeros_like() (ivy.container method)": [[149, "ivy.Container.zeros_like"]], "as_ivy_dtype() (in module ivy)": [[150, "ivy.as_ivy_dtype"], [630, "ivy.as_ivy_dtype"]], "as_native_dtype() (in module ivy)": [[151, "ivy.as_native_dtype"], [630, "ivy.as_native_dtype"]], "astype() (in module ivy)": [[152, "ivy.astype"], [630, "ivy.astype"]], "astype() (ivy.array method)": [[152, "ivy.Array.astype"]], "astype() (ivy.container method)": [[152, "ivy.Container.astype"]], "broadcast_arrays() (in module ivy)": [[153, "ivy.broadcast_arrays"], [630, "ivy.broadcast_arrays"]], "broadcast_arrays() (ivy.array method)": [[153, "ivy.Array.broadcast_arrays"]], "broadcast_arrays() (ivy.container method)": [[153, "ivy.Container.broadcast_arrays"]], "broadcast_to() (in module ivy)": [[154, "ivy.broadcast_to"], [630, "ivy.broadcast_to"]], "broadcast_to() (ivy.array method)": [[154, "ivy.Array.broadcast_to"]], "broadcast_to() (ivy.container method)": [[154, "ivy.Container.broadcast_to"]], "can_cast() (in module ivy)": [[155, "ivy.can_cast"], [630, "ivy.can_cast"]], "can_cast() (ivy.array method)": [[155, "ivy.Array.can_cast"]], "can_cast() (ivy.container method)": [[155, "ivy.Container.can_cast"]], "check_float() (in module ivy)": [[156, "ivy.check_float"], [630, "ivy.check_float"]], "closest_valid_dtype() (in module ivy)": [[157, "ivy.closest_valid_dtype"], [630, "ivy.closest_valid_dtype"]], "default_complex_dtype() (in module ivy)": [[158, "ivy.default_complex_dtype"], [630, "ivy.default_complex_dtype"]], "default_dtype() (in module ivy)": [[159, "ivy.default_dtype"], [630, "ivy.default_dtype"]], "default_float_dtype() (in module ivy)": [[160, "ivy.default_float_dtype"], [630, "ivy.default_float_dtype"]], "default_int_dtype() (in module ivy)": [[161, "ivy.default_int_dtype"], [630, "ivy.default_int_dtype"]], "default_uint_dtype() (in module ivy)": [[162, "ivy.default_uint_dtype"], [630, "ivy.default_uint_dtype"]], "dtype() (in module ivy)": [[163, "ivy.dtype"], [630, "ivy.dtype"]], "dtype() (ivy.array method)": [[163, "ivy.Array.dtype"]], "dtype() (ivy.container method)": [[163, "ivy.Container.dtype"]], "dtype_bits() (in module ivy)": [[164, "ivy.dtype_bits"], [630, "ivy.dtype_bits"]], "finfo() (in module ivy)": [[165, "ivy.finfo"], [630, "ivy.finfo"]], "finfo() (ivy.array method)": [[165, "ivy.Array.finfo"]], "finfo() (ivy.container method)": [[165, "ivy.Container.finfo"]], "function_supported_dtypes() (in module ivy)": [[166, "ivy.function_supported_dtypes"], [630, "ivy.function_supported_dtypes"]], "function_unsupported_dtypes() (in module ivy)": [[167, "ivy.function_unsupported_dtypes"], [630, "ivy.function_unsupported_dtypes"]], "iinfo() (in module ivy)": [[168, "ivy.iinfo"], [630, "ivy.iinfo"]], "iinfo() (ivy.array method)": [[168, "ivy.Array.iinfo"]], "iinfo() (ivy.container method)": [[168, "ivy.Container.iinfo"]], "infer_default_dtype() (in module ivy)": [[169, "ivy.infer_default_dtype"], [630, "ivy.infer_default_dtype"]], "invalid_dtype() (in module ivy)": [[170, "ivy.invalid_dtype"], [630, "ivy.invalid_dtype"]], "is_bool_dtype() (in module ivy)": [[171, "ivy.is_bool_dtype"], [630, "ivy.is_bool_dtype"]], "is_bool_dtype() (ivy.array method)": [[171, "ivy.Array.is_bool_dtype"]], "is_bool_dtype() (ivy.container method)": [[171, "ivy.Container.is_bool_dtype"]], "is_complex_dtype() (in module ivy)": [[172, "ivy.is_complex_dtype"], [630, "ivy.is_complex_dtype"]], "is_complex_dtype() (ivy.container method)": [[172, "ivy.Container.is_complex_dtype"]], "is_float_dtype() (in module ivy)": [[173, "ivy.is_float_dtype"], [630, "ivy.is_float_dtype"]], "is_float_dtype() (ivy.array method)": [[173, "ivy.Array.is_float_dtype"]], "is_float_dtype() (ivy.container method)": [[173, "ivy.Container.is_float_dtype"]], "is_hashable_dtype() (in module ivy)": [[174, "ivy.is_hashable_dtype"], [630, "ivy.is_hashable_dtype"]], "is_int_dtype() (in module ivy)": [[175, "ivy.is_int_dtype"], [630, "ivy.is_int_dtype"]], "is_int_dtype() (ivy.array method)": [[175, "ivy.Array.is_int_dtype"]], "is_int_dtype() (ivy.container method)": [[175, "ivy.Container.is_int_dtype"]], "is_native_dtype() (in module ivy)": [[176, "ivy.is_native_dtype"], [630, "ivy.is_native_dtype"]], "is_uint_dtype() (in module ivy)": [[177, "ivy.is_uint_dtype"], [630, "ivy.is_uint_dtype"]], "is_uint_dtype() (ivy.array method)": [[177, "ivy.Array.is_uint_dtype"]], "is_uint_dtype() (ivy.container method)": [[177, "ivy.Container.is_uint_dtype"]], "promote_types() (in module ivy)": [[178, "ivy.promote_types"], [630, "ivy.promote_types"]], "promote_types_of_inputs() (in module ivy)": [[179, "ivy.promote_types_of_inputs"], [630, "ivy.promote_types_of_inputs"]], "result_type() (in module ivy)": [[180, "ivy.result_type"], [630, "ivy.result_type"]], "result_type() (ivy.array method)": [[180, "ivy.Array.result_type"]], "result_type() (ivy.container method)": [[180, "ivy.Container.result_type"]], "set_default_complex_dtype() (in module ivy)": [[181, "ivy.set_default_complex_dtype"], [630, "ivy.set_default_complex_dtype"]], "set_default_dtype() (in module ivy)": [[182, "ivy.set_default_dtype"], [630, "ivy.set_default_dtype"]], "set_default_float_dtype() (in module ivy)": [[183, "ivy.set_default_float_dtype"], [630, "ivy.set_default_float_dtype"]], "set_default_int_dtype() (in module ivy)": [[184, "ivy.set_default_int_dtype"], [630, "ivy.set_default_int_dtype"]], "set_default_uint_dtype() (in module ivy)": [[185, "ivy.set_default_uint_dtype"], [630, "ivy.set_default_uint_dtype"]], "type_promote_arrays() (in module ivy)": [[186, "ivy.type_promote_arrays"], [630, "ivy.type_promote_arrays"]], "unset_default_complex_dtype() (in module ivy)": [[187, "ivy.unset_default_complex_dtype"], [630, "ivy.unset_default_complex_dtype"]], "unset_default_dtype() (in module ivy)": [[188, "ivy.unset_default_dtype"], [630, "ivy.unset_default_dtype"]], "unset_default_float_dtype() (in module ivy)": [[189, "ivy.unset_default_float_dtype"], [630, "ivy.unset_default_float_dtype"]], "unset_default_int_dtype() (in module ivy)": [[190, "ivy.unset_default_int_dtype"], [630, "ivy.unset_default_int_dtype"]], "unset_default_uint_dtype() (in module ivy)": [[191, "ivy.unset_default_uint_dtype"], [630, "ivy.unset_default_uint_dtype"]], "valid_dtype() (in module ivy)": [[192, "ivy.valid_dtype"], [630, "ivy.valid_dtype"]], "as_ivy_dev() (in module ivy)": [[193, "ivy.as_ivy_dev"], [631, "ivy.as_ivy_dev"]], "as_native_dev() (in module ivy)": [[194, "ivy.as_native_dev"], [631, "ivy.as_native_dev"]], "clear_cached_mem_on_dev() (in module ivy)": [[195, "ivy.clear_cached_mem_on_dev"], [631, "ivy.clear_cached_mem_on_dev"]], "default_device() (in module ivy)": [[196, "ivy.default_device"], [631, "ivy.default_device"]], "dev() (in module ivy)": [[197, "ivy.dev"], [631, "ivy.dev"]], "dev() (ivy.array method)": [[197, "ivy.Array.dev"]], "dev() (ivy.container method)": [[197, "ivy.Container.dev"]], "dev_util() (in module ivy)": [[198, "ivy.dev_util"], [631, "ivy.dev_util"]], "function_supported_devices() (in module ivy)": [[199, "ivy.function_supported_devices"], [631, "ivy.function_supported_devices"]], "function_unsupported_devices() (in module ivy)": [[200, "ivy.function_unsupported_devices"], [631, "ivy.function_unsupported_devices"]], "get_all_ivy_arrays_on_dev() (in module ivy)": [[201, "ivy.get_all_ivy_arrays_on_dev"], [631, "ivy.get_all_ivy_arrays_on_dev"]], "gpu_is_available() (in module ivy)": [[202, "ivy.gpu_is_available"], [631, "ivy.gpu_is_available"]], "handle_soft_device_variable() (in module ivy)": [[203, "ivy.handle_soft_device_variable"], [631, "ivy.handle_soft_device_variable"]], "num_cpu_cores() (in module ivy)": [[204, "ivy.num_cpu_cores"], [631, "ivy.num_cpu_cores"]], "num_gpus() (in module ivy)": [[205, "ivy.num_gpus"], [631, "ivy.num_gpus"]], "num_ivy_arrays_on_dev() (in module ivy)": [[206, "ivy.num_ivy_arrays_on_dev"], [631, "ivy.num_ivy_arrays_on_dev"]], "percent_used_mem_on_dev() (in module ivy)": [[207, "ivy.percent_used_mem_on_dev"], [631, "ivy.percent_used_mem_on_dev"]], "print_all_ivy_arrays_on_dev() (in module ivy)": [[208, "ivy.print_all_ivy_arrays_on_dev"], [631, "ivy.print_all_ivy_arrays_on_dev"]], "set_default_device() (in module ivy)": [[209, "ivy.set_default_device"], [631, "ivy.set_default_device"]], "set_soft_device_mode() (in module ivy)": [[210, "ivy.set_soft_device_mode"], [631, "ivy.set_soft_device_mode"]], "set_split_factor() (in module ivy)": [[211, "ivy.set_split_factor"], [631, "ivy.set_split_factor"]], "split_factor() (in module ivy)": [[212, "ivy.split_factor"], [631, "ivy.split_factor"]], "split_func_call() (in module ivy)": [[213, "ivy.split_func_call"], [631, "ivy.split_func_call"]], "to_device() (in module ivy)": [[214, "ivy.to_device"], [631, "ivy.to_device"]], "to_device() (ivy.array method)": [[214, "ivy.Array.to_device"]], "to_device() (ivy.container method)": [[214, "ivy.Container.to_device"]], "total_mem_on_dev() (in module ivy)": [[215, "ivy.total_mem_on_dev"], [631, "ivy.total_mem_on_dev"]], "tpu_is_available() (in module ivy)": [[216, "ivy.tpu_is_available"], [631, "ivy.tpu_is_available"]], "unset_default_device() (in module ivy)": [[217, "ivy.unset_default_device"], [631, "ivy.unset_default_device"]], "unset_soft_device_mode() (in module ivy)": [[218, "ivy.unset_soft_device_mode"], [631, "ivy.unset_soft_device_mode"]], "used_mem_on_dev() (in module ivy)": [[219, "ivy.used_mem_on_dev"], [631, "ivy.used_mem_on_dev"]], "abs() (in module ivy)": [[220, "ivy.abs"], [632, "ivy.abs"]], "abs() (ivy.array method)": [[220, "ivy.Array.abs"]], "abs() (ivy.container method)": [[220, "ivy.Container.abs"]], "acos() (in module ivy)": [[221, "ivy.acos"], [632, "ivy.acos"]], "acos() (ivy.array method)": [[221, "ivy.Array.acos"]], "acos() (ivy.container method)": [[221, "ivy.Container.acos"]], "acosh() (in module ivy)": [[222, "ivy.acosh"], [632, "ivy.acosh"]], "acosh() (ivy.array method)": [[222, "ivy.Array.acosh"]], "acosh() (ivy.container method)": [[222, "ivy.Container.acosh"]], "add() (in module ivy)": [[223, "ivy.add"], [632, "ivy.add"]], "add() (ivy.array method)": [[223, "ivy.Array.add"]], "add() (ivy.container method)": [[223, "ivy.Container.add"]], "angle() (in module ivy)": [[224, "ivy.angle"], [632, "ivy.angle"]], "angle() (ivy.array method)": [[224, "ivy.Array.angle"]], "angle() (ivy.container method)": [[224, "ivy.Container.angle"]], "asin() (in module ivy)": [[225, "ivy.asin"], [632, "ivy.asin"]], "asin() (ivy.array method)": [[225, "ivy.Array.asin"]], "asin() (ivy.container method)": [[225, "ivy.Container.asin"]], "asinh() (in module ivy)": [[226, "ivy.asinh"], [632, "ivy.asinh"]], "asinh() (ivy.array method)": [[226, "ivy.Array.asinh"]], "asinh() (ivy.container method)": [[226, "ivy.Container.asinh"]], "atan() (in module ivy)": [[227, "ivy.atan"], [632, "ivy.atan"]], "atan() (ivy.array method)": [[227, "ivy.Array.atan"]], "atan() (ivy.container method)": [[227, "ivy.Container.atan"]], "atan2() (in module ivy)": [[228, "ivy.atan2"], [632, "ivy.atan2"]], "atan2() (ivy.array method)": [[228, "ivy.Array.atan2"]], "atan2() (ivy.container method)": [[228, "ivy.Container.atan2"]], "atanh() (in module ivy)": [[229, "ivy.atanh"], [632, "ivy.atanh"]], "atanh() (ivy.array method)": [[229, "ivy.Array.atanh"]], "atanh() (ivy.container method)": [[229, "ivy.Container.atanh"]], "bitwise_and() (in module ivy)": [[230, "ivy.bitwise_and"], [632, "ivy.bitwise_and"]], "bitwise_and() (ivy.array method)": [[230, "ivy.Array.bitwise_and"]], "bitwise_and() (ivy.container method)": [[230, "ivy.Container.bitwise_and"]], "bitwise_invert() (in module ivy)": [[231, "ivy.bitwise_invert"], [632, "ivy.bitwise_invert"]], "bitwise_invert() (ivy.array method)": [[231, "ivy.Array.bitwise_invert"]], "bitwise_invert() (ivy.container method)": [[231, "ivy.Container.bitwise_invert"]], "bitwise_left_shift() (in module ivy)": [[232, "ivy.bitwise_left_shift"], [632, "ivy.bitwise_left_shift"]], "bitwise_left_shift() (ivy.array method)": [[232, "ivy.Array.bitwise_left_shift"]], "bitwise_left_shift() (ivy.container method)": [[232, "ivy.Container.bitwise_left_shift"]], "bitwise_or() (in module ivy)": [[233, "ivy.bitwise_or"], [632, "ivy.bitwise_or"]], "bitwise_or() (ivy.array method)": [[233, "ivy.Array.bitwise_or"]], "bitwise_or() (ivy.container method)": [[233, "ivy.Container.bitwise_or"]], "bitwise_right_shift() (in module ivy)": [[234, "ivy.bitwise_right_shift"], [632, "ivy.bitwise_right_shift"]], "bitwise_right_shift() (ivy.array method)": [[234, "ivy.Array.bitwise_right_shift"]], "bitwise_right_shift() (ivy.container method)": [[234, "ivy.Container.bitwise_right_shift"]], "bitwise_xor() (in module ivy)": [[235, "ivy.bitwise_xor"], [632, "ivy.bitwise_xor"]], "bitwise_xor() (ivy.array method)": [[235, "ivy.Array.bitwise_xor"]], "bitwise_xor() (ivy.container method)": [[235, "ivy.Container.bitwise_xor"]], "ceil() (in module ivy)": [[236, "ivy.ceil"], [632, "ivy.ceil"]], "ceil() (ivy.array method)": [[236, "ivy.Array.ceil"]], "ceil() (ivy.container method)": [[236, "ivy.Container.ceil"]], "cos() (in module ivy)": [[237, "ivy.cos"], [632, "ivy.cos"]], "cos() (ivy.array method)": [[237, "ivy.Array.cos"]], "cos() (ivy.container method)": [[237, "ivy.Container.cos"]], "cosh() (in module ivy)": [[238, "ivy.cosh"], [632, "ivy.cosh"]], "cosh() (ivy.array method)": [[238, "ivy.Array.cosh"]], "cosh() (ivy.container method)": [[238, "ivy.Container.cosh"]], "deg2rad() (in module ivy)": [[239, "ivy.deg2rad"], [632, "ivy.deg2rad"]], "deg2rad() (ivy.array method)": [[239, "ivy.Array.deg2rad"]], "deg2rad() (ivy.container method)": [[239, "ivy.Container.deg2rad"]], "divide() (in module ivy)": [[240, "ivy.divide"], [632, "ivy.divide"]], "divide() (ivy.array method)": [[240, "ivy.Array.divide"]], "divide() (ivy.container method)": [[240, "ivy.Container.divide"]], "equal() (in module ivy)": [[241, "ivy.equal"], [632, "ivy.equal"]], "equal() (ivy.array method)": [[241, "ivy.Array.equal"]], "equal() (ivy.container method)": [[241, "ivy.Container.equal"]], "erf() (in module ivy)": [[242, "ivy.erf"], [632, "ivy.erf"]], "erf() (ivy.array method)": [[242, "ivy.Array.erf"]], "erf() (ivy.container method)": [[242, "ivy.Container.erf"]], "exp() (in module ivy)": [[243, "ivy.exp"], [632, "ivy.exp"]], "exp() (ivy.array method)": [[243, "ivy.Array.exp"]], "exp() (ivy.container method)": [[243, "ivy.Container.exp"]], "exp2() (in module ivy)": [[244, "ivy.exp2"], [632, "ivy.exp2"]], "exp2() (ivy.array method)": [[244, "ivy.Array.exp2"]], "exp2() (ivy.container method)": [[244, "ivy.Container.exp2"]], "expm1() (in module ivy)": [[245, "ivy.expm1"], [632, "ivy.expm1"]], "expm1() (ivy.array method)": [[245, "ivy.Array.expm1"]], "expm1() (ivy.container method)": [[245, "ivy.Container.expm1"]], "floor() (in module ivy)": [[246, "ivy.floor"], [632, "ivy.floor"]], "floor() (ivy.array method)": [[246, "ivy.Array.floor"]], "floor() (ivy.container method)": [[246, "ivy.Container.floor"]], "floor_divide() (in module ivy)": [[247, "ivy.floor_divide"], [632, "ivy.floor_divide"]], "floor_divide() (ivy.array method)": [[247, "ivy.Array.floor_divide"]], "floor_divide() (ivy.container method)": [[247, "ivy.Container.floor_divide"]], "fmin() (in module ivy)": [[248, "ivy.fmin"], [632, "ivy.fmin"]], "fmin() (ivy.array method)": [[248, "ivy.Array.fmin"]], "fmin() (ivy.container method)": [[248, "ivy.Container.fmin"]], "fmod() (in module ivy)": [[249, "ivy.fmod"], [632, "ivy.fmod"]], "fmod() (ivy.array method)": [[249, "ivy.Array.fmod"]], "fmod() (ivy.container method)": [[249, "ivy.Container.fmod"]], "gcd() (in module ivy)": [[250, "ivy.gcd"], [632, "ivy.gcd"]], "gcd() (ivy.array method)": [[250, "ivy.Array.gcd"]], "gcd() (ivy.container method)": [[250, "ivy.Container.gcd"]], "greater() (in module ivy)": [[251, "ivy.greater"], [632, "ivy.greater"]], "greater() (ivy.array method)": [[251, "ivy.Array.greater"]], "greater() (ivy.container method)": [[251, "ivy.Container.greater"]], "greater_equal() (in module ivy)": [[252, "ivy.greater_equal"], [632, "ivy.greater_equal"]], "greater_equal() (ivy.array method)": [[252, "ivy.Array.greater_equal"]], "greater_equal() (ivy.container method)": [[252, "ivy.Container.greater_equal"]], "imag() (in module ivy)": [[253, "ivy.imag"], [632, "ivy.imag"]], "imag() (ivy.array method)": [[253, "ivy.Array.imag"]], "imag() (ivy.container method)": [[253, "ivy.Container.imag"]], "isfinite() (in module ivy)": [[254, "ivy.isfinite"], [632, "ivy.isfinite"]], "isfinite() (ivy.array method)": [[254, "ivy.Array.isfinite"]], "isfinite() (ivy.container method)": [[254, "ivy.Container.isfinite"]], "isinf() (in module ivy)": [[255, "ivy.isinf"], [632, "ivy.isinf"]], "isinf() (ivy.array method)": [[255, "ivy.Array.isinf"]], "isinf() (ivy.container method)": [[255, "ivy.Container.isinf"]], "isnan() (in module ivy)": [[256, "ivy.isnan"], [632, "ivy.isnan"]], "isnan() (ivy.array method)": [[256, "ivy.Array.isnan"]], "isnan() (ivy.container method)": [[256, "ivy.Container.isnan"]], "isreal() (in module ivy)": [[257, "ivy.isreal"], [632, "ivy.isreal"]], "isreal() (ivy.array method)": [[257, "ivy.Array.isreal"]], "isreal() (ivy.container method)": [[257, "ivy.Container.isreal"]], "lcm() (in module ivy)": [[258, "ivy.lcm"], [632, "ivy.lcm"]], "lcm() (ivy.array method)": [[258, "ivy.Array.lcm"]], "lcm() (ivy.container method)": [[258, "ivy.Container.lcm"]], "less() (in module ivy)": [[259, "ivy.less"], [632, "ivy.less"]], "less() (ivy.array method)": [[259, "ivy.Array.less"]], "less() (ivy.container method)": [[259, "ivy.Container.less"]], "less_equal() (in module ivy)": [[260, "ivy.less_equal"], [632, "ivy.less_equal"]], "less_equal() (ivy.array method)": [[260, "ivy.Array.less_equal"]], "less_equal() (ivy.container method)": [[260, "ivy.Container.less_equal"]], "log() (in module ivy)": [[261, "ivy.log"], [632, "ivy.log"]], "log() (ivy.array method)": [[261, "ivy.Array.log"]], "log() (ivy.container method)": [[261, "ivy.Container.log"]], "log10() (in module ivy)": [[262, "ivy.log10"], [632, "ivy.log10"]], "log10() (ivy.array method)": [[262, "ivy.Array.log10"]], "log10() (ivy.container method)": [[262, "ivy.Container.log10"]], "log1p() (in module ivy)": [[263, "ivy.log1p"], [632, "ivy.log1p"]], "log1p() (ivy.array method)": [[263, "ivy.Array.log1p"]], "log1p() (ivy.container method)": [[263, "ivy.Container.log1p"]], "log2() (in module ivy)": [[264, "ivy.log2"], [632, "ivy.log2"]], "log2() (ivy.array method)": [[264, "ivy.Array.log2"]], "log2() (ivy.container method)": [[264, "ivy.Container.log2"]], "logaddexp() (in module ivy)": [[265, "ivy.logaddexp"], [632, "ivy.logaddexp"]], "logaddexp() (ivy.array method)": [[265, "ivy.Array.logaddexp"]], "logaddexp() (ivy.container method)": [[265, "ivy.Container.logaddexp"]], "logaddexp2() (in module ivy)": [[266, "ivy.logaddexp2"], [632, "ivy.logaddexp2"]], "logaddexp2() (ivy.array method)": [[266, "ivy.Array.logaddexp2"]], "logaddexp2() (ivy.container method)": [[266, "ivy.Container.logaddexp2"]], "logical_and() (in module ivy)": [[267, "ivy.logical_and"], [632, "ivy.logical_and"]], "logical_and() (ivy.array method)": [[267, "ivy.Array.logical_and"]], "logical_and() (ivy.container method)": [[267, "ivy.Container.logical_and"]], "logical_not() (in module ivy)": [[268, "ivy.logical_not"], [632, "ivy.logical_not"]], "logical_not() (ivy.array method)": [[268, "ivy.Array.logical_not"]], "logical_not() (ivy.container method)": [[268, "ivy.Container.logical_not"]], "logical_or() (in module ivy)": [[269, "ivy.logical_or"], [632, "ivy.logical_or"]], "logical_or() (ivy.array method)": [[269, "ivy.Array.logical_or"]], "logical_or() (ivy.container method)": [[269, "ivy.Container.logical_or"]], "logical_xor() (in module ivy)": [[270, "ivy.logical_xor"], [632, "ivy.logical_xor"]], "logical_xor() (ivy.array method)": [[270, "ivy.Array.logical_xor"]], "logical_xor() (ivy.container method)": [[270, "ivy.Container.logical_xor"]], "maximum() (in module ivy)": [[271, "ivy.maximum"], [632, "ivy.maximum"]], "maximum() (ivy.array method)": [[271, "ivy.Array.maximum"]], "maximum() (ivy.container method)": [[271, "ivy.Container.maximum"]], "minimum() (in module ivy)": [[272, "ivy.minimum"], [632, "ivy.minimum"]], "minimum() (ivy.array method)": [[272, "ivy.Array.minimum"]], "minimum() (ivy.container method)": [[272, "ivy.Container.minimum"]], "multiply() (in module ivy)": [[273, "ivy.multiply"], [632, "ivy.multiply"]], "multiply() (ivy.array method)": [[273, "ivy.Array.multiply"]], "multiply() (ivy.container method)": [[273, "ivy.Container.multiply"]], "nan_to_num() (in module ivy)": [[274, "ivy.nan_to_num"], [632, "ivy.nan_to_num"]], "nan_to_num() (ivy.array method)": [[274, "ivy.Array.nan_to_num"]], "nan_to_num() (ivy.container method)": [[274, "ivy.Container.nan_to_num"]], "negative() (in module ivy)": [[275, "ivy.negative"], [632, "ivy.negative"]], "negative() (ivy.array method)": [[275, "ivy.Array.negative"]], "negative() (ivy.container method)": [[275, "ivy.Container.negative"]], "not_equal() (in module ivy)": [[276, "ivy.not_equal"], [632, "ivy.not_equal"]], "not_equal() (ivy.array method)": [[276, "ivy.Array.not_equal"]], "not_equal() (ivy.container method)": [[276, "ivy.Container.not_equal"]], "positive() (in module ivy)": [[277, "ivy.positive"], [632, "ivy.positive"]], "positive() (ivy.array method)": [[277, "ivy.Array.positive"]], "positive() (ivy.container method)": [[277, "ivy.Container.positive"]], "pow() (in module ivy)": [[278, "ivy.pow"], [632, "ivy.pow"]], "pow() (ivy.array method)": [[278, "ivy.Array.pow"]], "pow() (ivy.container method)": [[278, "ivy.Container.pow"]], "rad2deg() (in module ivy)": [[279, "ivy.rad2deg"], [632, "ivy.rad2deg"]], "rad2deg() (ivy.array method)": [[279, "ivy.Array.rad2deg"]], "rad2deg() (ivy.container method)": [[279, "ivy.Container.rad2deg"]], "real() (in module ivy)": [[280, "ivy.real"], [632, "ivy.real"]], "real() (ivy.array method)": [[280, "ivy.Array.real"]], "real() (ivy.container method)": [[280, "ivy.Container.real"]], "reciprocal() (in module ivy)": [[281, "ivy.reciprocal"], [632, "ivy.reciprocal"]], "reciprocal() (ivy.array method)": [[281, "ivy.Array.reciprocal"]], "reciprocal() (ivy.container method)": [[281, "ivy.Container.reciprocal"]], "remainder() (in module ivy)": [[282, "ivy.remainder"], [632, "ivy.remainder"]], "remainder() (ivy.array method)": [[282, "ivy.Array.remainder"]], "remainder() (ivy.container method)": [[282, "ivy.Container.remainder"]], "round() (in module ivy)": [[283, "ivy.round"], [632, "ivy.round"]], "round() (ivy.array method)": [[283, "ivy.Array.round"]], "round() (ivy.container method)": [[283, "ivy.Container.round"]], "sign() (in module ivy)": [[284, "ivy.sign"], [632, "ivy.sign"]], "sign() (ivy.array method)": [[284, "ivy.Array.sign"]], "sign() (ivy.container method)": [[284, "ivy.Container.sign"]], "sin() (in module ivy)": [[285, "ivy.sin"], [632, "ivy.sin"]], "sin() (ivy.array method)": [[285, "ivy.Array.sin"]], "sin() (ivy.container method)": [[285, "ivy.Container.sin"]], "sinh() (in module ivy)": [[286, "ivy.sinh"], [632, "ivy.sinh"]], "sinh() (ivy.array method)": [[286, "ivy.Array.sinh"]], "sinh() (ivy.container method)": [[286, "ivy.Container.sinh"]], "sqrt() (in module ivy)": [[287, "ivy.sqrt"], [632, "ivy.sqrt"]], "sqrt() (ivy.array method)": [[287, "ivy.Array.sqrt"]], "sqrt() (ivy.container method)": [[287, "ivy.Container.sqrt"]], "square() (in module ivy)": [[288, "ivy.square"], [632, "ivy.square"]], "square() (ivy.array method)": [[288, "ivy.Array.square"]], "square() (ivy.container method)": [[288, "ivy.Container.square"]], "subtract() (in module ivy)": [[289, "ivy.subtract"], [632, "ivy.subtract"]], "subtract() (ivy.array method)": [[289, "ivy.Array.subtract"]], "subtract() (ivy.container method)": [[289, "ivy.Container.subtract"]], "tan() (in module ivy)": [[290, "ivy.tan"], [632, "ivy.tan"]], "tan() (ivy.array method)": [[290, "ivy.Array.tan"]], "tan() (ivy.container method)": [[290, "ivy.Container.tan"]], "tanh() (in module ivy)": [[291, "ivy.tanh"], [632, "ivy.tanh"]], "tanh() (ivy.array method)": [[291, "ivy.Array.tanh"]], "tanh() (ivy.container method)": [[291, "ivy.Container.tanh"]], "trapz() (in module ivy)": [[292, "ivy.trapz"], [632, "ivy.trapz"]], "trapz() (ivy.array method)": [[292, "ivy.Array.trapz"]], "trapz() (ivy.container method)": [[292, "ivy.Container.trapz"]], "trunc() (in module ivy)": [[293, "ivy.trunc"], [632, "ivy.trunc"]], "trunc() (ivy.array method)": [[293, "ivy.Array.trunc"]], "trunc() (ivy.container method)": [[293, "ivy.Container.trunc"]], "trunc_divide() (in module ivy)": [[294, "ivy.trunc_divide"], [632, "ivy.trunc_divide"]], "trunc_divide() (ivy.array method)": [[294, "ivy.Array.trunc_divide"]], "trunc_divide() (ivy.container method)": [[294, "ivy.Container.trunc_divide"]], "celu() (in module ivy)": [[295, "ivy.celu"], [367, "ivy.celu"]], "celu() (ivy.array method)": [[295, "ivy.Array.celu"]], "celu() (ivy.container method)": [[295, "ivy.Container.celu"]], "elu() (in module ivy)": [[296, "ivy.elu"], [367, "ivy.elu"]], "elu() (ivy.array method)": [[296, "ivy.Array.elu"]], "elu() (ivy.container method)": [[296, "ivy.Container.elu"]], "hardshrink() (in module ivy)": [[297, "ivy.hardshrink"], [367, "ivy.hardshrink"]], "hardshrink() (ivy.array method)": [[297, "ivy.Array.hardshrink"]], "hardshrink() (ivy.container method)": [[297, "ivy.Container.hardshrink"]], "hardsilu() (in module ivy)": [[298, "ivy.hardsilu"], [367, "ivy.hardsilu"]], "hardsilu() (ivy.array method)": [[298, "ivy.Array.hardsilu"]], "hardsilu() (ivy.container method)": [[298, "ivy.Container.hardsilu"]], "hardtanh() (in module ivy)": [[299, "ivy.hardtanh"], [367, "ivy.hardtanh"]], "hardtanh() (ivy.array method)": [[299, "ivy.Array.hardtanh"]], "hardtanh() (ivy.container method)": [[299, "ivy.Container.hardtanh"]], "logit() (in module ivy)": [[300, "ivy.logit"], [367, "ivy.logit"]], "logit() (ivy.array method)": [[300, "ivy.Array.logit"]], "logit() (ivy.container method)": [[300, "ivy.Container.logit"]], "logsigmoid() (in module ivy)": [[301, "ivy.logsigmoid"], [367, "ivy.logsigmoid"]], "logsigmoid() (ivy.array method)": [[301, "ivy.Array.logsigmoid"]], "logsigmoid() (ivy.container method)": [[301, "ivy.Container.logsigmoid"]], "prelu() (in module ivy)": [[302, "ivy.prelu"], [367, "ivy.prelu"]], "prelu() (ivy.array method)": [[302, "ivy.Array.prelu"]], "prelu() (ivy.container method)": [[302, "ivy.Container.prelu"]], "relu6() (in module ivy)": [[303, "ivy.relu6"], [367, "ivy.relu6"]], "relu6() (ivy.array method)": [[303, "ivy.Array.relu6"]], "relu6() (ivy.container method)": [[303, "ivy.Container.relu6"]], "scaled_tanh() (in module ivy)": [[304, "ivy.scaled_tanh"], [367, "ivy.scaled_tanh"]], "scaled_tanh() (ivy.array method)": [[304, "ivy.Array.scaled_tanh"]], "scaled_tanh() (ivy.container method)": [[304, "ivy.Container.scaled_tanh"]], "selu() (in module ivy)": [[305, "ivy.selu"], [367, "ivy.selu"]], "selu() (ivy.array method)": [[305, "ivy.Array.selu"]], "selu() (ivy.container method)": [[305, "ivy.Container.selu"]], "silu() (in module ivy)": [[306, "ivy.silu"], [367, "ivy.silu"]], "silu() (ivy.array method)": [[306, "ivy.Array.silu"]], "silu() (ivy.container method)": [[306, "ivy.Container.silu"]], "softshrink() (in module ivy)": [[307, "ivy.softshrink"], [367, "ivy.softshrink"]], "softshrink() (ivy.array method)": [[307, "ivy.Array.softshrink"]], "softshrink() (ivy.container method)": [[307, "ivy.Container.softshrink"]], "stanh() (in module ivy)": [[308, "ivy.stanh"], [367, "ivy.stanh"]], "tanhshrink() (in module ivy)": [[309, "ivy.tanhshrink"], [367, "ivy.tanhshrink"]], "tanhshrink() (ivy.array method)": [[309, "ivy.Array.tanhshrink"]], "tanhshrink() (ivy.container method)": [[309, "ivy.Container.tanhshrink"]], "threshold() (in module ivy)": [[310, "ivy.threshold"], [367, "ivy.threshold"]], "threshold() (ivy.array method)": [[310, "ivy.Array.threshold"]], "threshold() (ivy.container method)": [[310, "ivy.Container.threshold"]], "thresholded_relu() (in module ivy)": [[311, "ivy.thresholded_relu"], [367, "ivy.thresholded_relu"]], "thresholded_relu() (ivy.array method)": [[311, "ivy.Array.thresholded_relu"]], "thresholded_relu() (ivy.container method)": [[311, "ivy.Container.thresholded_relu"]], "blackman_window() (in module ivy)": [[312, "ivy.blackman_window"], [369, "ivy.blackman_window"]], "blackman_window() (ivy.array method)": [[312, "ivy.Array.blackman_window"]], "blackman_window() (ivy.container method)": [[312, "ivy.Container.blackman_window"]], "eye_like() (in module ivy)": [[313, "ivy.eye_like"], [369, "ivy.eye_like"]], "eye_like() (ivy.array method)": [[313, "ivy.Array.eye_like"]], "eye_like() (ivy.container method)": [[313, "ivy.Container.eye_like"]], "hamming_window() (in module ivy)": [[314, "ivy.hamming_window"], [369, "ivy.hamming_window"]], "hamming_window() (ivy.container method)": [[314, "ivy.Container.hamming_window"]], "hann_window() (in module ivy)": [[315, "ivy.hann_window"], [369, "ivy.hann_window"]], "hann_window() (ivy.container method)": [[315, "ivy.Container.hann_window"]], "indices() (in module ivy)": [[316, "ivy.indices"], [369, "ivy.indices"]], "kaiser_bessel_derived_window() (in module ivy)": [[317, "ivy.kaiser_bessel_derived_window"], [369, "ivy.kaiser_bessel_derived_window"]], "kaiser_bessel_derived_window() (ivy.container method)": [[317, "ivy.Container.kaiser_bessel_derived_window"]], "kaiser_window() (in module ivy)": [[318, "ivy.kaiser_window"], [369, "ivy.kaiser_window"]], "kaiser_window() (ivy.container method)": [[318, "ivy.Container.kaiser_window"]], "mel_weight_matrix() (in module ivy)": [[319, "ivy.mel_weight_matrix"], [369, "ivy.mel_weight_matrix"]], "mel_weight_matrix() (ivy.array static method)": [[319, "ivy.Array.mel_weight_matrix"]], "mel_weight_matrix() (ivy.container method)": [[319, "ivy.Container.mel_weight_matrix"]], "ndenumerate() (in module ivy)": [[320, "ivy.ndenumerate"], [369, "ivy.ndenumerate"]], "ndindex() (in module ivy)": [[321, "ivy.ndindex"], [369, "ivy.ndindex"]], "polyval() (in module ivy)": [[322, "ivy.polyval"], [369, "ivy.polyval"]], "polyval() (ivy.container method)": [[322, "ivy.Container.polyval"]], "random_cp() (in module ivy)": [[323, "ivy.random_cp"], [369, "ivy.random_cp"]], "random_parafac2() (in module ivy)": [[324, "ivy.random_parafac2"], [369, "ivy.random_parafac2"]], "random_tr() (in module ivy)": [[325, "ivy.random_tr"], [369, "ivy.random_tr"]], "random_tt() (in module ivy)": [[326, "ivy.random_tt"], [369, "ivy.random_tt"]], "random_tucker() (in module ivy)": [[327, "ivy.random_tucker"], [369, "ivy.random_tucker"]], "tril_indices() (in module ivy)": [[328, "ivy.tril_indices"], [369, "ivy.tril_indices"]], "tril_indices() (ivy.container method)": [[328, "ivy.Container.tril_indices"]], "trilu() (in module ivy)": [[329, "ivy.trilu"], [369, "ivy.trilu"]], "trilu() (ivy.array method)": [[329, "ivy.Array.trilu"]], "trilu() (ivy.container method)": [[329, "ivy.Container.trilu"]], "unsorted_segment_mean() (in module ivy)": [[330, "ivy.unsorted_segment_mean"], [369, "ivy.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.array method)": [[330, "ivy.Array.unsorted_segment_mean"]], "unsorted_segment_mean() (ivy.container method)": [[330, "ivy.Container.unsorted_segment_mean"]], "unsorted_segment_min() (in module ivy)": [[331, "ivy.unsorted_segment_min"], [369, "ivy.unsorted_segment_min"]], "unsorted_segment_min() (ivy.array method)": [[331, "ivy.Array.unsorted_segment_min"]], "unsorted_segment_min() (ivy.container method)": [[331, "ivy.Container.unsorted_segment_min"]], "unsorted_segment_sum() (in module ivy)": [[332, "ivy.unsorted_segment_sum"], [369, "ivy.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.array method)": [[332, "ivy.Array.unsorted_segment_sum"]], "unsorted_segment_sum() (ivy.container method)": [[332, "ivy.Container.unsorted_segment_sum"]], "vorbis_window() (in module ivy)": [[333, "ivy.vorbis_window"], [369, "ivy.vorbis_window"]], "vorbis_window() (ivy.container method)": [[333, "ivy.Container.vorbis_window"]], "allclose() (in module ivy)": [[334, "ivy.allclose"], [372, "ivy.allclose"]], "allclose() (ivy.array method)": [[334, "ivy.Array.allclose"]], "allclose() (ivy.container method)": [[334, "ivy.Container.allclose"]], "amax() (in module ivy)": [[335, "ivy.amax"], [372, "ivy.amax"]], "amax() (ivy.array method)": [[335, "ivy.Array.amax"]], "amax() (ivy.container method)": [[335, "ivy.Container.amax"]], "amin() (in module ivy)": [[336, "ivy.amin"], [372, "ivy.amin"]], "amin() (ivy.array method)": [[336, "ivy.Array.amin"]], "amin() (ivy.container method)": [[336, "ivy.Container.amin"]], "binarizer() (in module ivy)": [[337, "ivy.binarizer"], [372, "ivy.binarizer"]], "binarizer() (ivy.array method)": [[337, "ivy.Array.binarizer"]], "binarizer() (ivy.container method)": [[337, "ivy.Container.binarizer"]], "conj() (in module ivy)": [[338, "ivy.conj"], [372, "ivy.conj"]], "conj() (ivy.array method)": [[338, "ivy.Array.conj"]], "conj() (ivy.container method)": [[338, "ivy.Container.conj"]], "copysign() (in module ivy)": [[339, "ivy.copysign"], [372, "ivy.copysign"]], "copysign() (ivy.array method)": [[339, "ivy.Array.copysign"]], "copysign() (ivy.container method)": [[339, "ivy.Container.copysign"]], "count_nonzero() (in module ivy)": [[340, "ivy.count_nonzero"], [372, "ivy.count_nonzero"]], "count_nonzero() (ivy.array method)": [[340, "ivy.Array.count_nonzero"]], "count_nonzero() (ivy.container method)": [[340, "ivy.Container.count_nonzero"]], "diff() (in module ivy)": [[341, "ivy.diff"], [372, "ivy.diff"]], "diff() (ivy.array method)": [[341, "ivy.Array.diff"]], "diff() (ivy.container method)": [[341, "ivy.Container.diff"]], "digamma() (in module ivy)": [[342, "ivy.digamma"], [372, "ivy.digamma"]], "digamma() (ivy.array method)": [[342, "ivy.Array.digamma"]], "digamma() (ivy.container method)": [[342, "ivy.Container.digamma"]], "erfc() (in module ivy)": [[343, "ivy.erfc"], [372, "ivy.erfc"]], "erfc() (ivy.array method)": [[343, "ivy.Array.erfc"]], "erfc() (ivy.container method)": [[343, "ivy.Container.erfc"]], "erfinv() (in module ivy)": [[344, "ivy.erfinv"], [372, "ivy.erfinv"]], "erfinv() (ivy.array method)": [[344, "ivy.Array.erfinv"]], "erfinv() (ivy.container method)": [[344, "ivy.Container.erfinv"]], "fix() (in module ivy)": [[345, "ivy.fix"], [372, "ivy.fix"]], "fix() (ivy.array method)": [[345, "ivy.Array.fix"]], "fix() (ivy.container method)": [[345, "ivy.Container.fix"]], "float_power() (in module ivy)": [[346, "ivy.float_power"], [372, "ivy.float_power"]], "float_power() (ivy.array method)": [[346, "ivy.Array.float_power"]], "float_power() (ivy.container method)": [[346, "ivy.Container.float_power"]], "fmax() (in module ivy)": [[347, "ivy.fmax"], [372, "ivy.fmax"]], "fmax() (ivy.array method)": [[347, "ivy.Array.fmax"]], "fmax() (ivy.container method)": [[347, "ivy.Container.fmax"]], "frexp() (in module ivy)": [[348, "ivy.frexp"], [372, "ivy.frexp"]], "frexp() (ivy.array method)": [[348, "ivy.Array.frexp"]], "frexp() (ivy.container method)": [[348, "ivy.Container.frexp"]], "gradient() (in module ivy)": [[349, "ivy.gradient"], [372, "ivy.gradient"]], "gradient() (ivy.array method)": [[349, "ivy.Array.gradient"]], "gradient() (ivy.container method)": [[349, "ivy.Container.gradient"]], "hypot() (in module ivy)": [[350, "ivy.hypot"], [372, "ivy.hypot"]], "hypot() (ivy.array method)": [[350, "ivy.Array.hypot"]], "hypot() (ivy.container method)": [[350, "ivy.Container.hypot"]], "isclose() (in module ivy)": [[351, "ivy.isclose"], [372, "ivy.isclose"]], "isclose() (ivy.array method)": [[351, "ivy.Array.isclose"]], "isclose() (ivy.container method)": [[351, "ivy.Container.isclose"]], "ldexp() (in module ivy)": [[352, "ivy.ldexp"], [372, "ivy.ldexp"]], "ldexp() (ivy.array method)": [[352, "ivy.Array.ldexp"]], "ldexp() (ivy.container method)": [[352, "ivy.Container.ldexp"]], "lerp() (in module ivy)": [[353, "ivy.lerp"], [372, "ivy.lerp"]], "lerp() (ivy.array method)": [[353, "ivy.Array.lerp"]], "lerp() (ivy.container method)": [[353, "ivy.Container.lerp"]], "lgamma() (in module ivy)": [[354, "ivy.lgamma"], [372, "ivy.lgamma"]], "lgamma() (ivy.array method)": [[354, "ivy.Array.lgamma"]], "lgamma() (ivy.container method)": [[354, "ivy.Container.lgamma"]], "modf() (in module ivy)": [[355, "ivy.modf"], [372, "ivy.modf"]], "modf() (ivy.array method)": [[355, "ivy.Array.modf"]], "modf() (ivy.container method)": [[355, "ivy.Container.modf"]], "nansum() (in module ivy)": [[356, "ivy.nansum"], [372, "ivy.nansum"]], "nansum() (ivy.array method)": [[356, "ivy.Array.nansum"]], "nansum() (ivy.container method)": [[356, "ivy.Container.nansum"]], "nextafter() (in module ivy)": [[357, "ivy.nextafter"], [372, "ivy.nextafter"]], "nextafter() (ivy.array method)": [[357, "ivy.Array.nextafter"]], "nextafter() (ivy.container method)": [[357, "ivy.Container.nextafter"]], "signbit() (in module ivy)": [[358, "ivy.signbit"], [372, "ivy.signbit"]], "signbit() (ivy.array method)": [[358, "ivy.Array.signbit"]], "signbit() (ivy.container method)": [[358, "ivy.Container.signbit"]], "sinc() (in module ivy)": [[359, "ivy.sinc"], [372, "ivy.sinc"]], "sinc() (ivy.array method)": [[359, "ivy.Array.sinc"]], "sinc() (ivy.container method)": [[359, "ivy.Container.sinc"]], "sparsify_tensor() (in module ivy)": [[360, "ivy.sparsify_tensor"], [372, "ivy.sparsify_tensor"]], "sparsify_tensor() (ivy.array method)": [[360, "ivy.Array.sparsify_tensor"]], "sparsify_tensor() (ivy.container method)": [[360, "ivy.Container.sparsify_tensor"]], "xlogy() (in module ivy)": [[361, "ivy.xlogy"], [372, "ivy.xlogy"]], "xlogy() (ivy.array method)": [[361, "ivy.Array.xlogy"]], "xlogy() (ivy.container method)": [[361, "ivy.Container.xlogy"]], "zeta() (in module ivy)": [[362, "ivy.zeta"], [372, "ivy.zeta"]], "zeta() (ivy.array method)": [[362, "ivy.Array.zeta"]], "zeta() (ivy.container method)": [[362, "ivy.Container.zeta"]], "reduce() (in module ivy)": [[363, "ivy.reduce"], [373, "ivy.reduce"]], "reduce() (ivy.array method)": [[363, "ivy.Array.reduce"]], "reduce() (ivy.container method)": [[363, "ivy.Container.reduce"]], "bind_custom_gradient_function() (in module ivy)": [[364, "ivy.bind_custom_gradient_function"], [374, "ivy.bind_custom_gradient_function"]], "jvp() (in module ivy)": [[365, "ivy.jvp"], [374, "ivy.jvp"]], "vjp() (in module ivy)": [[366, "ivy.vjp"], [374, "ivy.vjp"]], "ivy.functional.ivy.experimental.activations": [[367, "module-ivy.functional.ivy.experimental.activations"]], "ivy.functional.ivy.experimental.constants": [[368, "module-ivy.functional.ivy.experimental.constants"]], "ivy.functional.ivy.experimental.creation": [[369, "module-ivy.functional.ivy.experimental.creation"]], "ivy.functional.ivy.experimental.data_type": [[370, "module-ivy.functional.ivy.experimental.data_type"]], "ivy.functional.ivy.experimental.device": [[371, "module-ivy.functional.ivy.experimental.device"]], "ivy.functional.ivy.experimental.elementwise": [[372, "module-ivy.functional.ivy.experimental.elementwise"]], "ivy.functional.ivy.experimental.general": [[373, "module-ivy.functional.ivy.experimental.general"]], "ivy.functional.ivy.experimental.gradients": [[374, "module-ivy.functional.ivy.experimental.gradients"]], "adaptive_avg_pool1d() (in module ivy)": [[375, "ivy.adaptive_avg_pool1d"], [389, "ivy.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (in module ivy)": [[375, "ivy.adaptive_avg_pool2d"], [390, "ivy.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (in module ivy)": [[375, "ivy.adaptive_max_pool2d"], [391, "ivy.adaptive_max_pool2d"]], "adaptive_max_pool3d() (in module ivy)": [[375, "ivy.adaptive_max_pool3d"], [392, "ivy.adaptive_max_pool3d"]], "area_interpolate() (in module ivy)": [[375, "ivy.area_interpolate"], [393, "ivy.area_interpolate"]], "avg_pool1d() (in module ivy)": [[375, "ivy.avg_pool1d"], [394, "ivy.avg_pool1d"]], "avg_pool2d() (in module ivy)": [[375, "ivy.avg_pool2d"], [395, "ivy.avg_pool2d"]], "avg_pool3d() (in module ivy)": [[375, "ivy.avg_pool3d"], [396, "ivy.avg_pool3d"]], "dct() (in module ivy)": [[375, "ivy.dct"], [397, "ivy.dct"]], "dft() (in module ivy)": [[375, "ivy.dft"], [398, "ivy.dft"]], "dropout1d() (in module ivy)": [[375, "ivy.dropout1d"], [399, "ivy.dropout1d"]], "dropout2d() (in module ivy)": [[375, "ivy.dropout2d"], [400, "ivy.dropout2d"]], "dropout3d() (in module ivy)": [[375, "ivy.dropout3d"], [401, "ivy.dropout3d"]], "embedding() (in module ivy)": [[375, "ivy.embedding"], [402, "ivy.embedding"]], "fft() (in module ivy)": [[375, "ivy.fft"], [403, "ivy.fft"]], "fft2() (in module ivy)": [[375, "ivy.fft2"], [404, "ivy.fft2"]], "generate_einsum_equation() (in module ivy)": [[375, "ivy.generate_einsum_equation"], [405, "ivy.generate_einsum_equation"]], "get_interpolate_kernel() (in module ivy)": [[375, "ivy.get_interpolate_kernel"], [406, "ivy.get_interpolate_kernel"]], "idct() (in module ivy)": [[375, "ivy.idct"], [407, "ivy.idct"]], "ifft() (in module ivy)": [[375, "ivy.ifft"], [408, "ivy.ifft"]], "ifftn() (in module ivy)": [[375, "ivy.ifftn"], [409, "ivy.ifftn"]], "interp() (in module ivy)": [[375, "ivy.interp"], [410, "ivy.interp"]], "interpolate() (in module ivy)": [[375, "ivy.interpolate"], [411, "ivy.interpolate"]], "ivy.functional.ivy.experimental.layers": [[375, "module-ivy.functional.ivy.experimental.layers"]], "max_pool1d() (in module ivy)": [[375, "ivy.max_pool1d"], [412, "ivy.max_pool1d"]], "max_pool2d() (in module ivy)": [[375, "ivy.max_pool2d"], [413, "ivy.max_pool2d"]], "max_pool3d() (in module ivy)": [[375, "ivy.max_pool3d"], [414, "ivy.max_pool3d"]], "max_unpool1d() (in module ivy)": [[375, "ivy.max_unpool1d"], [415, "ivy.max_unpool1d"]], "nearest_interpolate() (in module ivy)": [[375, "ivy.nearest_interpolate"], [416, "ivy.nearest_interpolate"]], "pool() (in module ivy)": [[375, "ivy.pool"], [417, "ivy.pool"]], "reduce_window() (in module ivy)": [[375, "ivy.reduce_window"], [418, "ivy.reduce_window"]], "rfft() (in module ivy)": [[375, "ivy.rfft"], [419, "ivy.rfft"]], "rfftn() (in module ivy)": [[375, "ivy.rfftn"], [420, "ivy.rfftn"]], "rnn() (in module ivy)": [[375, "ivy.rnn"], [421, "ivy.rnn"]], "sliding_window() (in module ivy)": [[375, "ivy.sliding_window"], [422, "ivy.sliding_window"]], "stft() (in module ivy)": [[375, "ivy.stft"], [423, "ivy.stft"]], "adjoint() (in module ivy)": [[376, "ivy.adjoint"], [424, "ivy.adjoint"]], "batched_outer() (in module ivy)": [[376, "ivy.batched_outer"], [425, "ivy.batched_outer"]], "cond() (in module ivy)": [[376, "ivy.cond"], [426, "ivy.cond"]], "diagflat() (in module ivy)": [[376, "ivy.diagflat"], [427, "ivy.diagflat"]], "dot() (in module ivy)": [[376, "ivy.dot"], [428, "ivy.dot"]], "eig() (in module ivy)": [[376, "ivy.eig"], [429, "ivy.eig"], [637, "ivy.eig"], [672, "ivy.eig"]], "eigh_tridiagonal() (in module ivy)": [[376, "ivy.eigh_tridiagonal"], [430, "ivy.eigh_tridiagonal"]], "eigvals() (in module ivy)": [[376, "ivy.eigvals"], [431, "ivy.eigvals"]], "general_inner_product() (in module ivy)": [[376, "ivy.general_inner_product"], [432, "ivy.general_inner_product"]], "higher_order_moment() (in module ivy)": [[376, "ivy.higher_order_moment"], [433, "ivy.higher_order_moment"]], "initialize_tucker() (in module ivy)": [[376, "ivy.initialize_tucker"], [434, "ivy.initialize_tucker"]], "ivy.functional.ivy.experimental.linear_algebra": [[376, "module-ivy.functional.ivy.experimental.linear_algebra"]], "khatri_rao() (in module ivy)": [[376, "ivy.khatri_rao"], [435, "ivy.khatri_rao"]], "kron() (in module ivy)": [[376, "ivy.kron"], [436, "ivy.kron"]], "kronecker() (in module ivy)": [[376, "ivy.kronecker"], [437, "ivy.kronecker"]], "lu_factor() (in module ivy)": [[376, "ivy.lu_factor"], [438, "ivy.lu_factor"]], "lu_solve() (in module ivy)": [[376, "ivy.lu_solve"], [439, "ivy.lu_solve"]], "make_svd_non_negative() (in module ivy)": [[376, "ivy.make_svd_non_negative"], [440, "ivy.make_svd_non_negative"]], "matrix_exp() (in module ivy)": [[376, "ivy.matrix_exp"], [441, "ivy.matrix_exp"]], "mode_dot() (in module ivy)": [[376, "ivy.mode_dot"], [442, "ivy.mode_dot"]], "multi_dot() (in module ivy)": [[376, "ivy.multi_dot"], [443, "ivy.multi_dot"]], "multi_mode_dot() (in module ivy)": [[376, "ivy.multi_mode_dot"], [444, "ivy.multi_mode_dot"]], "partial_tucker() (in module ivy)": [[376, "ivy.partial_tucker"], [445, "ivy.partial_tucker"]], "solve_triangular() (in module ivy)": [[376, "ivy.solve_triangular"], [446, "ivy.solve_triangular"]], "svd_flip() (in module ivy)": [[376, "ivy.svd_flip"], [447, "ivy.svd_flip"]], "tensor_train() (in module ivy)": [[376, "ivy.tensor_train"], [448, "ivy.tensor_train"]], "truncated_svd() (in module ivy)": [[376, "ivy.truncated_svd"], [449, "ivy.truncated_svd"]], "tt_matrix_to_tensor() (in module ivy)": [[376, "ivy.tt_matrix_to_tensor"], [450, "ivy.tt_matrix_to_tensor"]], "tucker() (in module ivy)": [[376, "ivy.tucker"], [451, "ivy.tucker"]], "hinge_embedding_loss() (in module ivy)": [[377, "ivy.hinge_embedding_loss"], [452, "ivy.hinge_embedding_loss"]], "huber_loss() (in module ivy)": [[377, "ivy.huber_loss"], [453, "ivy.huber_loss"]], "ivy.functional.ivy.experimental.losses": [[377, "module-ivy.functional.ivy.experimental.losses"]], "kl_div() (in module ivy)": [[377, "ivy.kl_div"], [454, "ivy.kl_div"]], "l1_loss() (in module ivy)": [[377, "ivy.l1_loss"], [455, "ivy.l1_loss"]], "log_poisson_loss() (in module ivy)": [[377, "ivy.log_poisson_loss"], [456, "ivy.log_poisson_loss"]], "poisson_nll_loss() (in module ivy)": [[377, "ivy.poisson_nll_loss"], [457, "ivy.poisson_nll_loss"]], "smooth_l1_loss() (in module ivy)": [[377, "ivy.smooth_l1_loss"], [458, "ivy.smooth_l1_loss"]], "soft_margin_loss() (in module ivy)": [[377, "ivy.soft_margin_loss"], [459, "ivy.soft_margin_loss"]], "as_strided() (in module ivy)": [[378, "ivy.as_strided"], [460, "ivy.as_strided"]], "associative_scan() (in module ivy)": [[378, "ivy.associative_scan"], [461, "ivy.associative_scan"]], "atleast_1d() (in module ivy)": [[378, "ivy.atleast_1d"], [462, "ivy.atleast_1d"]], "atleast_2d() (in module ivy)": [[378, "ivy.atleast_2d"], [463, "ivy.atleast_2d"]], "atleast_3d() (in module ivy)": [[378, "ivy.atleast_3d"], [464, "ivy.atleast_3d"]], "broadcast_shapes() (in module ivy)": [[378, "ivy.broadcast_shapes"], [465, "ivy.broadcast_shapes"]], "check_scalar() (in module ivy)": [[378, "ivy.check_scalar"], [466, "ivy.check_scalar"]], "choose() (in module ivy)": [[378, "ivy.choose"], [467, "ivy.choose"]], "column_stack() (in module ivy)": [[378, "ivy.column_stack"], [468, "ivy.column_stack"]], "concat_from_sequence() (in module ivy)": [[378, "ivy.concat_from_sequence"], [469, "ivy.concat_from_sequence"]], "dsplit() (in module ivy)": [[378, "ivy.dsplit"], [470, "ivy.dsplit"]], "dstack() (in module ivy)": [[378, "ivy.dstack"], [471, "ivy.dstack"]], "expand() (in module ivy)": [[378, "ivy.expand"], [472, "ivy.expand"]], "fill_diagonal() (in module ivy)": [[378, "ivy.fill_diagonal"], [473, "ivy.fill_diagonal"]], "flatten() (in module ivy)": [[378, "ivy.flatten"], [474, "ivy.flatten"]], "fliplr() (in module ivy)": [[378, "ivy.fliplr"], [475, "ivy.fliplr"]], "flipud() (in module ivy)": [[378, "ivy.flipud"], [476, "ivy.flipud"]], "fold() (in module ivy)": [[378, "ivy.fold"], [477, "ivy.fold"]], "heaviside() (in module ivy)": [[378, "ivy.heaviside"], [478, "ivy.heaviside"]], "hsplit() (in module ivy)": [[378, "ivy.hsplit"], [479, "ivy.hsplit"]], "hstack() (in module ivy)": [[378, "ivy.hstack"], [480, "ivy.hstack"]], "i0() (in module ivy)": [[378, "ivy.i0"], [481, "ivy.i0"]], "ivy.functional.ivy.experimental.manipulation": [[378, "module-ivy.functional.ivy.experimental.manipulation"]], "matricize() (in module ivy)": [[378, "ivy.matricize"], [482, "ivy.matricize"]], "moveaxis() (in module ivy)": [[378, "ivy.moveaxis"], [483, "ivy.moveaxis"]], "pad() (in module ivy)": [[378, "ivy.pad"], [484, "ivy.pad"]], "partial_fold() (in module ivy)": [[378, "ivy.partial_fold"], [485, "ivy.partial_fold"]], "partial_tensor_to_vec() (in module ivy)": [[378, "ivy.partial_tensor_to_vec"], [486, "ivy.partial_tensor_to_vec"]], "partial_unfold() (in module ivy)": [[378, "ivy.partial_unfold"], [487, "ivy.partial_unfold"]], "partial_vec_to_tensor() (in module ivy)": [[378, "ivy.partial_vec_to_tensor"], [488, "ivy.partial_vec_to_tensor"]], "put_along_axis() (in module ivy)": [[378, "ivy.put_along_axis"], [489, "ivy.put_along_axis"]], "rot90() (in module ivy)": [[378, "ivy.rot90"], [490, "ivy.rot90"]], "soft_thresholding() (in module ivy)": [[378, "ivy.soft_thresholding"], [491, "ivy.soft_thresholding"]], "take() (in module ivy)": [[378, "ivy.take"], [492, "ivy.take"]], "take_along_axis() (in module ivy)": [[378, "ivy.take_along_axis"], [493, "ivy.take_along_axis"]], "top_k() (in module ivy)": [[378, "ivy.top_k"], [494, "ivy.top_k"]], "trim_zeros() (in module ivy)": [[378, "ivy.trim_zeros"], [495, "ivy.trim_zeros"]], "unflatten() (in module ivy)": [[378, "ivy.unflatten"], [496, "ivy.unflatten"]], "unfold() (in module ivy)": [[378, "ivy.unfold"], [497, "ivy.unfold"]], "unique_consecutive() (in module ivy)": [[378, "ivy.unique_consecutive"], [498, "ivy.unique_consecutive"]], "vsplit() (in module ivy)": [[378, "ivy.vsplit"], [499, "ivy.vsplit"]], "vstack() (in module ivy)": [[378, "ivy.vstack"], [500, "ivy.vstack"]], "ivy.functional.ivy.experimental.meta": [[379, "module-ivy.functional.ivy.experimental.meta"]], "ivy.functional.ivy.experimental.nest": [[380, "module-ivy.functional.ivy.experimental.nest"]], "batch_norm() (in module ivy)": [[381, "ivy.batch_norm"], [501, "ivy.batch_norm"]], "group_norm() (in module ivy)": [[381, "ivy.group_norm"], [502, "ivy.group_norm"]], "instance_norm() (in module ivy)": [[381, "ivy.instance_norm"], [503, "ivy.instance_norm"]], "ivy.functional.ivy.experimental.norms": [[381, "module-ivy.functional.ivy.experimental.norms"]], "l1_normalize() (in module ivy)": [[381, "ivy.l1_normalize"], [504, "ivy.l1_normalize"]], "l2_normalize() (in module ivy)": [[381, "ivy.l2_normalize"], [505, "ivy.l2_normalize"]], "local_response_norm() (in module ivy)": [[381, "ivy.local_response_norm"], [506, "ivy.local_response_norm"]], "lp_normalize() (in module ivy)": [[381, "ivy.lp_normalize"], [507, "ivy.lp_normalize"]], "bernoulli() (in module ivy)": [[382, "ivy.bernoulli"], [508, "ivy.bernoulli"]], "beta() (in module ivy)": [[382, "ivy.beta"], [509, "ivy.beta"]], "dirichlet() (in module ivy)": [[382, "ivy.dirichlet"], [510, "ivy.dirichlet"]], "gamma() (in module ivy)": [[382, "ivy.gamma"], [511, "ivy.gamma"]], "ivy.functional.ivy.experimental.random": [[382, "module-ivy.functional.ivy.experimental.random"]], "poisson() (in module ivy)": [[382, "ivy.poisson"], [512, "ivy.poisson"]], "ivy.functional.ivy.experimental.searching": [[383, "module-ivy.functional.ivy.experimental.searching"]], "unravel_index() (in module ivy)": [[383, "ivy.unravel_index"], [513, "ivy.unravel_index"]], "ivy.functional.ivy.experimental.set": [[384, "module-ivy.functional.ivy.experimental.set"]], "invert_permutation() (in module ivy)": [[385, "ivy.invert_permutation"], [514, "ivy.invert_permutation"]], "ivy.functional.ivy.experimental.sorting": [[385, "module-ivy.functional.ivy.experimental.sorting"]], "lexsort() (in module ivy)": [[385, "ivy.lexsort"], [515, "ivy.lexsort"]], "nativesparsearray (class in ivy)": [[386, "ivy.NativeSparseArray"]], "sparsearray (class in ivy)": [[386, "ivy.SparseArray"]], "is_ivy_sparse_array() (in module ivy)": [[386, "ivy.is_ivy_sparse_array"], [516, "ivy.is_ivy_sparse_array"]], "is_native_sparse_array() (in module ivy)": [[386, "ivy.is_native_sparse_array"], [517, "ivy.is_native_sparse_array"]], "ivy.functional.ivy.experimental.sparse_array": [[386, "module-ivy.functional.ivy.experimental.sparse_array"]], "native_sparse_array() (in module ivy)": [[386, "ivy.native_sparse_array"], [518, "ivy.native_sparse_array"]], "native_sparse_array_to_indices_values_and_shape() (in module ivy)": [[386, "ivy.native_sparse_array_to_indices_values_and_shape"], [519, "ivy.native_sparse_array_to_indices_values_and_shape"]], "bincount() (in module ivy)": [[387, "ivy.bincount"], [520, "ivy.bincount"]], "corrcoef() (in module ivy)": [[387, "ivy.corrcoef"], [521, "ivy.corrcoef"]], "cov() (in module ivy)": [[387, "ivy.cov"], [522, "ivy.cov"]], "cummax() (in module ivy)": [[387, "ivy.cummax"], [523, "ivy.cummax"]], "cummin() (in module ivy)": [[387, "ivy.cummin"], [524, "ivy.cummin"]], "histogram() (in module ivy)": [[387, "ivy.histogram"], [525, "ivy.histogram"]], "igamma() (in module ivy)": [[387, "ivy.igamma"], [526, "ivy.igamma"]], "ivy.functional.ivy.experimental.statistical": [[387, "module-ivy.functional.ivy.experimental.statistical"]], "median() (in module ivy)": [[387, "ivy.median"], [527, "ivy.median"]], "nanmean() (in module ivy)": [[387, "ivy.nanmean"], [528, "ivy.nanmean"]], "nanmedian() (in module ivy)": [[387, "ivy.nanmedian"], [529, "ivy.nanmedian"]], "nanmin() (in module ivy)": [[387, "ivy.nanmin"], [530, "ivy.nanmin"]], "nanprod() (in module ivy)": [[387, "ivy.nanprod"], [531, "ivy.nanprod"]], "quantile() (in module ivy)": [[387, "ivy.quantile"], [532, "ivy.quantile"]], "ivy.functional.ivy.experimental.utility": [[388, "module-ivy.functional.ivy.experimental.utility"]], "optional_get_element() (in module ivy)": [[388, "ivy.optional_get_element"], [533, "ivy.optional_get_element"]], "adaptive_avg_pool1d() (ivy.array method)": [[389, "ivy.Array.adaptive_avg_pool1d"]], "adaptive_avg_pool1d() (ivy.container method)": [[389, "ivy.Container.adaptive_avg_pool1d"]], "adaptive_avg_pool2d() (ivy.array method)": [[390, "ivy.Array.adaptive_avg_pool2d"]], "adaptive_avg_pool2d() (ivy.container method)": [[390, "ivy.Container.adaptive_avg_pool2d"]], "adaptive_max_pool2d() (ivy.array method)": [[391, "ivy.Array.adaptive_max_pool2d"]], "adaptive_max_pool2d() (ivy.container method)": [[391, "ivy.Container.adaptive_max_pool2d"]], "adaptive_max_pool3d() (ivy.array method)": [[392, "ivy.Array.adaptive_max_pool3d"]], "adaptive_max_pool3d() (ivy.container method)": [[392, "ivy.Container.adaptive_max_pool3d"]], "avg_pool1d() (ivy.array method)": [[394, "ivy.Array.avg_pool1d"]], "avg_pool1d() (ivy.container method)": [[394, "ivy.Container.avg_pool1d"]], "avg_pool2d() (ivy.array method)": [[395, "ivy.Array.avg_pool2d"]], "avg_pool2d() (ivy.container method)": [[395, "ivy.Container.avg_pool2d"]], "avg_pool3d() (ivy.array method)": [[396, "ivy.Array.avg_pool3d"]], "avg_pool3d() (ivy.container method)": [[396, "ivy.Container.avg_pool3d"]], "dct() (ivy.array method)": [[397, "ivy.Array.dct"]], "dct() (ivy.container method)": [[397, "ivy.Container.dct"]], "dft() (ivy.array method)": [[398, "ivy.Array.dft"]], "dft() (ivy.container method)": [[398, "ivy.Container.dft"]], "dropout1d() (ivy.array method)": [[399, "ivy.Array.dropout1d"]], "dropout1d() (ivy.container method)": [[399, "ivy.Container.dropout1d"]], "dropout2d() (ivy.array method)": [[400, "ivy.Array.dropout2d"]], "dropout2d() (ivy.container method)": [[400, "ivy.Container.dropout2d"]], "dropout3d() (ivy.array method)": [[401, "ivy.Array.dropout3d"]], "dropout3d() (ivy.container method)": [[401, "ivy.Container.dropout3d"]], "embedding() (ivy.array method)": [[402, "ivy.Array.embedding"]], "embedding() (ivy.container method)": [[402, "ivy.Container.embedding"]], "fft() (ivy.array method)": [[403, "ivy.Array.fft"]], "fft() (ivy.container method)": [[403, "ivy.Container.fft"]], "fft2() (ivy.array method)": [[404, "ivy.Array.fft2"]], "idct() (ivy.array method)": [[407, "ivy.Array.idct"]], "idct() (ivy.container method)": [[407, "ivy.Container.idct"]], "ifft() (ivy.array method)": [[408, "ivy.Array.ifft"]], "ifft() (ivy.container method)": [[408, "ivy.Container.ifft"]], "ifftn() (ivy.array method)": [[409, "ivy.Array.ifftn"]], "ifftn() (ivy.container method)": [[409, "ivy.Container.ifftn"]], "interpolate() (ivy.array method)": [[411, "ivy.Array.interpolate"]], "interpolate() (ivy.container method)": [[411, "ivy.Container.interpolate"]], "max_pool1d() (ivy.array method)": [[412, "ivy.Array.max_pool1d"]], "max_pool1d() (ivy.container method)": [[412, "ivy.Container.max_pool1d"]], "max_pool2d() (ivy.array method)": [[413, "ivy.Array.max_pool2d"]], "max_pool2d() (ivy.container method)": [[413, "ivy.Container.max_pool2d"]], "max_pool3d() (ivy.array method)": [[414, "ivy.Array.max_pool3d"]], "max_pool3d() (ivy.container method)": [[414, "ivy.Container.max_pool3d"]], "max_unpool1d() (ivy.array method)": [[415, "ivy.Array.max_unpool1d"]], "max_unpool1d() (ivy.container method)": [[415, "ivy.Container.max_unpool1d"]], "reduce_window() (ivy.array method)": [[418, "ivy.Array.reduce_window"]], "reduce_window() (ivy.container method)": [[418, "ivy.Container.reduce_window"]], "rfft() (ivy.array method)": [[419, "ivy.Array.rfft"]], "rfft() (ivy.container method)": [[419, "ivy.Container.rfft"]], "rfftn() (ivy.array method)": [[420, "ivy.Array.rfftn"]], "rfftn() (ivy.container method)": [[420, "ivy.Container.rfftn"]], "sliding_window() (ivy.array method)": [[422, "ivy.Array.sliding_window"]], "sliding_window() (ivy.container method)": [[422, "ivy.Container.sliding_window"]], "stft() (ivy.array method)": [[423, "ivy.Array.stft"]], "stft() (ivy.container method)": [[423, "ivy.Container.stft"]], "adjoint() (ivy.array method)": [[424, "ivy.Array.adjoint"]], "adjoint() (ivy.container method)": [[424, "ivy.Container.adjoint"]], "batched_outer() (ivy.array method)": [[425, "ivy.Array.batched_outer"]], "batched_outer() (ivy.container method)": [[425, "ivy.Container.batched_outer"]], "cond() (ivy.array method)": [[426, "ivy.Array.cond"]], "cond() (ivy.container method)": [[426, "ivy.Container.cond"]], "diagflat() (ivy.array method)": [[427, "ivy.Array.diagflat"]], "diagflat() (ivy.container method)": [[427, "ivy.Container.diagflat"]], "dot() (ivy.array method)": [[428, "ivy.Array.dot"]], "dot() (ivy.container method)": [[428, "ivy.Container.dot"]], "eig() (ivy.array method)": [[429, "ivy.Array.eig"], [672, "ivy.Array.eig"]], "eig() (ivy.container method)": [[429, "ivy.Container.eig"], [672, "ivy.Container.eig"]], "eigh_tridiagonal() (ivy.array method)": [[430, "ivy.Array.eigh_tridiagonal"]], "eigh_tridiagonal() (ivy.container method)": [[430, "ivy.Container.eigh_tridiagonal"]], "eigvals() (ivy.array method)": [[431, "ivy.Array.eigvals"]], "eigvals() (ivy.container method)": [[431, "ivy.Container.eigvals"]], "general_inner_product() (ivy.array method)": [[432, "ivy.Array.general_inner_product"]], "general_inner_product() (ivy.container method)": [[432, "ivy.Container.general_inner_product"]], "higher_order_moment() (ivy.array method)": [[433, "ivy.Array.higher_order_moment"]], "higher_order_moment() (ivy.container method)": [[433, "ivy.Container.higher_order_moment"]], "initialize_tucker() (ivy.array method)": [[434, "ivy.Array.initialize_tucker"]], "initialize_tucker() (ivy.container method)": [[434, "ivy.Container.initialize_tucker"]], "kron() (ivy.array method)": [[436, "ivy.Array.kron"]], "kron() (ivy.container method)": [[436, "ivy.Container.kron"]], "make_svd_non_negative() (ivy.array method)": [[440, "ivy.Array.make_svd_non_negative"]], "make_svd_non_negative() (ivy.container method)": [[440, "ivy.Container.make_svd_non_negative"]], "matrix_exp() (ivy.array method)": [[441, "ivy.Array.matrix_exp"]], "matrix_exp() (ivy.container method)": [[441, "ivy.Container.matrix_exp"]], "mode_dot() (ivy.array method)": [[442, "ivy.Array.mode_dot"]], "mode_dot() (ivy.container method)": [[442, "ivy.Container.mode_dot"]], "multi_dot() (ivy.array method)": [[443, "ivy.Array.multi_dot"]], "multi_dot() (ivy.container method)": [[443, "ivy.Container.multi_dot"]], "multi_mode_dot() (ivy.array method)": [[444, "ivy.Array.multi_mode_dot"]], "multi_mode_dot() (ivy.container method)": [[444, "ivy.Container.multi_mode_dot"]], "partial_tucker() (ivy.array method)": [[445, "ivy.Array.partial_tucker"]], "partial_tucker() (ivy.container method)": [[445, "ivy.Container.partial_tucker"]], "svd_flip() (ivy.array method)": [[447, "ivy.Array.svd_flip"]], "svd_flip() (ivy.container method)": [[447, "ivy.Container.svd_flip"]], "tensor_train() (ivy.array method)": [[448, "ivy.Array.tensor_train"]], "tensor_train() (ivy.container method)": [[448, "ivy.Container.tensor_train"]], "truncated_svd() (ivy.array method)": [[449, "ivy.Array.truncated_svd"]], "truncated_svd() (ivy.container method)": [[449, "ivy.Container.truncated_svd"]], "tt_matrix_to_tensor() (ivy.array method)": [[450, "ivy.Array.tt_matrix_to_tensor"]], "tt_matrix_to_tensor() (ivy.container method)": [[450, "ivy.Container.tt_matrix_to_tensor"]], "tucker() (ivy.array method)": [[451, "ivy.Array.tucker"]], "tucker() (ivy.container method)": [[451, "ivy.Container.tucker"]], "hinge_embedding_loss() (ivy.array method)": [[452, "ivy.Array.hinge_embedding_loss"]], "hinge_embedding_loss() (ivy.container method)": [[452, "ivy.Container.hinge_embedding_loss"]], "huber_loss() (ivy.array method)": [[453, "ivy.Array.huber_loss"]], "huber_loss() (ivy.container method)": [[453, "ivy.Container.huber_loss"]], "kl_div() (ivy.array method)": [[454, "ivy.Array.kl_div"]], "kl_div() (ivy.container method)": [[454, "ivy.Container.kl_div"]], "l1_loss() (ivy.array method)": [[455, "ivy.Array.l1_loss"]], "l1_loss() (ivy.container method)": [[455, "ivy.Container.l1_loss"]], "log_poisson_loss() (ivy.array method)": [[456, "ivy.Array.log_poisson_loss"]], "log_poisson_loss() (ivy.container method)": [[456, "ivy.Container.log_poisson_loss"]], "poisson_nll_loss() (ivy.array method)": [[457, "ivy.Array.poisson_nll_loss"]], "poisson_nll_loss() (ivy.container method)": [[457, "ivy.Container.poisson_nll_loss"]], "smooth_l1_loss() (ivy.array method)": [[458, "ivy.Array.smooth_l1_loss"]], "smooth_l1_loss() (ivy.container method)": [[458, "ivy.Container.smooth_l1_loss"]], "soft_margin_loss() (ivy.array method)": [[459, "ivy.Array.soft_margin_loss"]], "soft_margin_loss() (ivy.container method)": [[459, "ivy.Container.soft_margin_loss"]], "as_strided() (ivy.array method)": [[460, "ivy.Array.as_strided"]], "as_strided() (ivy.container method)": [[460, "ivy.Container.as_strided"]], "associative_scan() (ivy.array method)": [[461, "ivy.Array.associative_scan"]], "associative_scan() (ivy.container method)": [[461, "ivy.Container.associative_scan"]], "atleast_1d() (ivy.array method)": [[462, "ivy.Array.atleast_1d"]], "atleast_1d() (ivy.container method)": [[462, "ivy.Container.atleast_1d"]], "atleast_2d() (ivy.array method)": [[463, "ivy.Array.atleast_2d"]], "atleast_2d() (ivy.container method)": [[463, "ivy.Container.atleast_2d"]], "atleast_3d() (ivy.array method)": [[464, "ivy.Array.atleast_3d"]], "atleast_3d() (ivy.container method)": [[464, "ivy.Container.atleast_3d"]], "broadcast_shapes() (ivy.container method)": [[465, "ivy.Container.broadcast_shapes"]], "column_stack() (ivy.array method)": [[468, "ivy.Array.column_stack"]], "column_stack() (ivy.container method)": [[468, "ivy.Container.column_stack"]], "concat_from_sequence() (ivy.array method)": [[469, "ivy.Array.concat_from_sequence"]], "concat_from_sequence() (ivy.container method)": [[469, "ivy.Container.concat_from_sequence"]], "dsplit() (ivy.array method)": [[470, "ivy.Array.dsplit"]], "dsplit() (ivy.container method)": [[470, "ivy.Container.dsplit"]], "dstack() (ivy.array method)": [[471, "ivy.Array.dstack"]], "dstack() (ivy.container method)": [[471, "ivy.Container.dstack"]], "expand() (ivy.array method)": [[472, "ivy.Array.expand"]], "expand() (ivy.container method)": [[472, "ivy.Container.expand"]], "fill_diagonal() (ivy.array method)": [[473, "ivy.Array.fill_diagonal"]], "fill_diagonal() (ivy.container method)": [[473, "ivy.Container.fill_diagonal"]], "flatten() (ivy.array method)": [[474, "ivy.Array.flatten"]], "flatten() (ivy.container method)": [[474, "ivy.Container.flatten"]], "fliplr() (ivy.array method)": [[475, "ivy.Array.fliplr"]], "fliplr() (ivy.container method)": [[475, "ivy.Container.fliplr"]], "flipud() (ivy.array method)": [[476, "ivy.Array.flipud"]], "flipud() (ivy.container method)": [[476, "ivy.Container.flipud"]], "fold() (ivy.array method)": [[477, "ivy.Array.fold"]], "fold() (ivy.container method)": [[477, "ivy.Container.fold"]], "heaviside() (ivy.array method)": [[478, "ivy.Array.heaviside"]], "heaviside() (ivy.container method)": [[478, "ivy.Container.heaviside"]], "hsplit() (ivy.array method)": [[479, "ivy.Array.hsplit"]], "hsplit() (ivy.container method)": [[479, "ivy.Container.hsplit"]], "hstack() (ivy.array method)": [[480, "ivy.Array.hstack"]], "hstack() (ivy.container method)": [[480, "ivy.Container.hstack"]], "i0() (ivy.array method)": [[481, "ivy.Array.i0"]], "i0() (ivy.container method)": [[481, "ivy.Container.i0"]], "matricize() (ivy.array method)": [[482, "ivy.Array.matricize"]], "matricize() (ivy.container method)": [[482, "ivy.Container.matricize"]], "moveaxis() (ivy.array method)": [[483, "ivy.Array.moveaxis"]], "moveaxis() (ivy.container method)": [[483, "ivy.Container.moveaxis"]], "pad() (ivy.array method)": [[484, "ivy.Array.pad"]], "pad() (ivy.container method)": [[484, "ivy.Container.pad"]], "partial_fold() (ivy.array method)": [[485, "ivy.Array.partial_fold"]], "partial_fold() (ivy.container method)": [[485, "ivy.Container.partial_fold"]], "partial_tensor_to_vec() (ivy.array method)": [[486, "ivy.Array.partial_tensor_to_vec"]], "partial_tensor_to_vec() (ivy.container method)": [[486, "ivy.Container.partial_tensor_to_vec"]], "partial_unfold() (ivy.array method)": [[487, "ivy.Array.partial_unfold"]], "partial_unfold() (ivy.container method)": [[487, "ivy.Container.partial_unfold"]], "partial_vec_to_tensor() (ivy.array method)": [[488, "ivy.Array.partial_vec_to_tensor"]], "partial_vec_to_tensor() (ivy.container method)": [[488, "ivy.Container.partial_vec_to_tensor"]], "put_along_axis() (ivy.array method)": [[489, "ivy.Array.put_along_axis"]], "put_along_axis() (ivy.container method)": [[489, "ivy.Container.put_along_axis"]], "rot90() (ivy.array method)": [[490, "ivy.Array.rot90"]], "rot90() (ivy.container method)": [[490, "ivy.Container.rot90"]], "soft_thresholding() (ivy.array method)": [[491, "ivy.Array.soft_thresholding"]], "soft_thresholding() (ivy.container method)": [[491, "ivy.Container.soft_thresholding"]], "take() (ivy.array method)": [[492, "ivy.Array.take"]], "take() (ivy.container method)": [[492, "ivy.Container.take"]], "take_along_axis() (ivy.array method)": [[493, "ivy.Array.take_along_axis"]], "take_along_axis() (ivy.container method)": [[493, "ivy.Container.take_along_axis"]], "top_k() (ivy.array method)": [[494, "ivy.Array.top_k"]], "top_k() (ivy.container method)": [[494, "ivy.Container.top_k"]], "trim_zeros() (ivy.array method)": [[495, "ivy.Array.trim_zeros"]], "trim_zeros() (ivy.container method)": [[495, "ivy.Container.trim_zeros"]], "unflatten() (ivy.array method)": [[496, "ivy.Array.unflatten"]], "unflatten() (ivy.container method)": [[496, "ivy.Container.unflatten"]], "unfold() (ivy.array method)": [[497, "ivy.Array.unfold"]], "unfold() (ivy.container method)": [[497, "ivy.Container.unfold"]], "unique_consecutive() (ivy.array method)": [[498, "ivy.Array.unique_consecutive"]], "unique_consecutive() (ivy.container method)": [[498, "ivy.Container.unique_consecutive"]], "vsplit() (ivy.array method)": [[499, "ivy.Array.vsplit"]], "vsplit() (ivy.container method)": [[499, "ivy.Container.vsplit"]], "vstack() (ivy.array method)": [[500, "ivy.Array.vstack"]], "vstack() (ivy.container method)": [[500, "ivy.Container.vstack"]], "batch_norm() (ivy.array method)": [[501, "ivy.Array.batch_norm"]], "batch_norm() (ivy.container method)": [[501, "ivy.Container.batch_norm"]], "group_norm() (ivy.array method)": [[502, "ivy.Array.group_norm"]], "group_norm() (ivy.container method)": [[502, "ivy.Container.group_norm"]], "instance_norm() (ivy.array method)": [[503, "ivy.Array.instance_norm"]], "instance_norm() (ivy.container method)": [[503, "ivy.Container.instance_norm"]], "l1_normalize() (ivy.array method)": [[504, "ivy.Array.l1_normalize"]], "l1_normalize() (ivy.container method)": [[504, "ivy.Container.l1_normalize"]], "l2_normalize() (ivy.array method)": [[505, "ivy.Array.l2_normalize"]], "l2_normalize() (ivy.container method)": [[505, "ivy.Container.l2_normalize"]], "lp_normalize() (ivy.array method)": [[507, "ivy.Array.lp_normalize"]], "lp_normalize() (ivy.container method)": [[507, "ivy.Container.lp_normalize"]], "bernoulli() (ivy.array method)": [[508, "ivy.Array.bernoulli"]], "bernoulli() (ivy.container method)": [[508, "ivy.Container.bernoulli"]], "beta() (ivy.array method)": [[509, "ivy.Array.beta"]], "beta() (ivy.container method)": [[509, "ivy.Container.beta"]], "dirichlet() (ivy.array method)": [[510, "ivy.Array.dirichlet"]], "dirichlet() (ivy.container method)": [[510, "ivy.Container.dirichlet"]], "gamma() (ivy.array method)": [[511, "ivy.Array.gamma"]], "gamma() (ivy.container method)": [[511, "ivy.Container.gamma"]], "poisson() (ivy.array method)": [[512, "ivy.Array.poisson"]], "poisson() (ivy.container method)": [[512, "ivy.Container.poisson"]], "unravel_index() (ivy.array method)": [[513, "ivy.Array.unravel_index"]], "unravel_index() (ivy.container method)": [[513, "ivy.Container.unravel_index"]], "invert_permutation() (ivy.container method)": [[514, "ivy.Container.invert_permutation"]], "lexsort() (ivy.array method)": [[515, "ivy.Array.lexsort"]], "lexsort() (ivy.container method)": [[515, "ivy.Container.lexsort"]], "bincount() (ivy.array method)": [[520, "ivy.Array.bincount"]], "bincount() (ivy.container method)": [[520, "ivy.Container.bincount"]], "corrcoef() (ivy.array method)": [[521, "ivy.Array.corrcoef"]], "corrcoef() (ivy.container method)": [[521, "ivy.Container.corrcoef"]], "cov() (ivy.array method)": [[522, "ivy.Array.cov"]], "cov() (ivy.container method)": [[522, "ivy.Container.cov"]], "cummax() (ivy.array method)": [[523, "ivy.Array.cummax"]], "cummax() (ivy.container method)": [[523, "ivy.Container.cummax"]], "cummin() (ivy.array method)": [[524, "ivy.Array.cummin"]], "cummin() (ivy.container method)": [[524, "ivy.Container.cummin"]], "histogram() (ivy.array method)": [[525, "ivy.Array.histogram"]], "histogram() (ivy.container method)": [[525, "ivy.Container.histogram"]], "igamma() (ivy.array method)": [[526, "ivy.Array.igamma"]], "igamma() (ivy.container method)": [[526, "ivy.Container.igamma"]], "median() (ivy.array method)": [[527, "ivy.Array.median"]], "median() (ivy.container method)": [[527, "ivy.Container.median"]], "nanmean() (ivy.array method)": [[528, "ivy.Array.nanmean"]], "nanmean() (ivy.container method)": [[528, "ivy.Container.nanmean"]], "nanmedian() (ivy.array method)": [[529, "ivy.Array.nanmedian"]], "nanmedian() (ivy.container method)": [[529, "ivy.Container.nanmedian"]], "nanmin() (ivy.array method)": [[530, "ivy.Array.nanmin"]], "nanmin() (ivy.container method)": [[530, "ivy.Container.nanmin"]], "nanprod() (ivy.array method)": [[531, "ivy.Array.nanprod"]], "nanprod() (ivy.container method)": [[531, "ivy.Container.nanprod"]], "quantile() (ivy.array method)": [[532, "ivy.Array.quantile"]], "quantile() (ivy.container method)": [[532, "ivy.Container.quantile"]], "optional_get_element() (ivy.array method)": [[533, "ivy.Array.optional_get_element"]], "optional_get_element() (ivy.container method)": [[533, "ivy.Container.optional_get_element"]], "all_equal() (in module ivy)": [[534, "ivy.all_equal"], [634, "ivy.all_equal"]], "all_equal() (ivy.array method)": [[534, "ivy.Array.all_equal"]], "all_equal() (ivy.container method)": [[534, "ivy.Container.all_equal"]], "arg_info() (in module ivy)": [[535, "ivy.arg_info"], [634, "ivy.arg_info"]], "arg_names() (in module ivy)": [[536, "ivy.arg_names"], [634, "ivy.arg_names"]], "array_equal() (in module ivy)": [[537, "ivy.array_equal"], [634, "ivy.array_equal"]], "array_equal() (ivy.array method)": [[537, "ivy.Array.array_equal"]], "array_equal() (ivy.container method)": [[537, "ivy.Container.array_equal"]], "assert_supports_inplace() (in module ivy)": [[538, "ivy.assert_supports_inplace"], [634, "ivy.assert_supports_inplace"]], "assert_supports_inplace() (ivy.array method)": [[538, "ivy.Array.assert_supports_inplace"]], "assert_supports_inplace() (ivy.container method)": [[538, "ivy.Container.assert_supports_inplace"]], "cache_fn() (in module ivy)": [[539, "ivy.cache_fn"], [634, "ivy.cache_fn"]], "clip_matrix_norm() (in module ivy)": [[540, "ivy.clip_matrix_norm"], [634, "ivy.clip_matrix_norm"]], "clip_matrix_norm() (ivy.array method)": [[540, "ivy.Array.clip_matrix_norm"]], "clip_matrix_norm() (ivy.container method)": [[540, "ivy.Container.clip_matrix_norm"]], "clip_vector_norm() (in module ivy)": [[541, "ivy.clip_vector_norm"], [634, "ivy.clip_vector_norm"]], "clip_vector_norm() (ivy.array method)": [[541, "ivy.Array.clip_vector_norm"]], "clip_vector_norm() (ivy.container method)": [[541, "ivy.Container.clip_vector_norm"]], "container_types() (in module ivy)": [[542, "ivy.container_types"], [634, "ivy.container_types"]], "current_backend_str() (in module ivy)": [[543, "ivy.current_backend_str"], [634, "ivy.current_backend_str"]], "default() (in module ivy)": [[544, "ivy.default"], [634, "ivy.default"]], "default() (ivy.array method)": [[544, "ivy.Array.default"]], "einops_rearrange() (in module ivy)": [[545, "ivy.einops_rearrange"], [634, "ivy.einops_rearrange"]], "einops_rearrange() (ivy.array method)": [[545, "ivy.Array.einops_rearrange"]], "einops_rearrange() (ivy.container method)": [[545, "ivy.Container.einops_rearrange"]], "einops_reduce() (in module ivy)": [[546, "ivy.einops_reduce"], [634, "ivy.einops_reduce"]], "einops_reduce() (ivy.array method)": [[546, "ivy.Array.einops_reduce"]], "einops_reduce() (ivy.container method)": [[546, "ivy.Container.einops_reduce"]], "einops_repeat() (in module ivy)": [[547, "ivy.einops_repeat"], [634, "ivy.einops_repeat"]], "einops_repeat() (ivy.array method)": [[547, "ivy.Array.einops_repeat"]], "einops_repeat() (ivy.container method)": [[547, "ivy.Container.einops_repeat"]], "exists() (in module ivy)": [[548, "ivy.exists"], [634, "ivy.exists"]], "exists() (ivy.array method)": [[548, "ivy.Array.exists"]], "exists() (ivy.container method)": [[548, "ivy.Container.exists"]], "fourier_encode() (in module ivy)": [[549, "ivy.fourier_encode"], [634, "ivy.fourier_encode"]], "fourier_encode() (ivy.array method)": [[549, "ivy.Array.fourier_encode"]], "fourier_encode() (ivy.container method)": [[549, "ivy.Container.fourier_encode"]], "function_supported_devices_and_dtypes() (in module ivy)": [[550, "ivy.function_supported_devices_and_dtypes"], [634, "ivy.function_supported_devices_and_dtypes"]], "function_unsupported_devices_and_dtypes() (in module ivy)": [[551, "ivy.function_unsupported_devices_and_dtypes"], [634, "ivy.function_unsupported_devices_and_dtypes"]], "gather() (in module ivy)": [[552, "ivy.gather"], [634, "ivy.gather"]], "gather() (ivy.array method)": [[552, "ivy.Array.gather"]], "gather() (ivy.container method)": [[552, "ivy.Container.gather"]], "gather_nd() (in module ivy)": [[553, "ivy.gather_nd"], [634, "ivy.gather_nd"]], "gather_nd() (ivy.array method)": [[553, "ivy.Array.gather_nd"]], "gather_nd() (ivy.container method)": [[553, "ivy.Container.gather_nd"]], "get_all_arrays_in_memory() (in module ivy)": [[554, "ivy.get_all_arrays_in_memory"], [634, "ivy.get_all_arrays_in_memory"]], "get_item() (in module ivy)": [[555, "ivy.get_item"], [634, "ivy.get_item"]], "get_num_dims() (in module ivy)": [[556, "ivy.get_num_dims"], [634, "ivy.get_num_dims"]], "get_num_dims() (ivy.array method)": [[556, "ivy.Array.get_num_dims"]], "get_num_dims() (ivy.container method)": [[556, "ivy.Container.get_num_dims"]], "get_referrers_recursive() (in module ivy)": [[557, "ivy.get_referrers_recursive"], [634, "ivy.get_referrers_recursive"]], "has_nans() (in module ivy)": [[558, "ivy.has_nans"], [634, "ivy.has_nans"]], "has_nans() (ivy.array method)": [[558, "ivy.Array.has_nans"]], "has_nans() (ivy.container method)": [[558, "ivy.Container.has_nans"]], "inplace_arrays_supported() (in module ivy)": [[559, "ivy.inplace_arrays_supported"], [634, "ivy.inplace_arrays_supported"]], "inplace_decrement() (in module ivy)": [[560, "ivy.inplace_decrement"], [634, "ivy.inplace_decrement"]], "inplace_decrement() (ivy.array method)": [[560, "ivy.Array.inplace_decrement"]], "inplace_decrement() (ivy.container method)": [[560, "ivy.Container.inplace_decrement"]], "inplace_increment() (in module ivy)": [[561, "ivy.inplace_increment"], [634, "ivy.inplace_increment"]], "inplace_increment() (ivy.array method)": [[561, "ivy.Array.inplace_increment"]], "inplace_increment() (ivy.container method)": [[561, "ivy.Container.inplace_increment"]], "inplace_update() (in module ivy)": [[562, "ivy.inplace_update"], [634, "ivy.inplace_update"]], "inplace_update() (ivy.array method)": [[562, "ivy.Array.inplace_update"]], "inplace_update() (ivy.container method)": [[562, "ivy.Container.inplace_update"]], "inplace_variables_supported() (in module ivy)": [[563, "ivy.inplace_variables_supported"], [634, "ivy.inplace_variables_supported"]], "is_array() (in module ivy)": [[564, "ivy.is_array"], [634, "ivy.is_array"]], "is_array() (ivy.array method)": [[564, "ivy.Array.is_array"]], "is_array() (ivy.container method)": [[564, "ivy.Container.is_array"]], "is_ivy_array() (in module ivy)": [[565, "ivy.is_ivy_array"], [634, "ivy.is_ivy_array"]], "is_ivy_array() (ivy.array method)": [[565, "ivy.Array.is_ivy_array"]], "is_ivy_array() (ivy.container method)": [[565, "ivy.Container.is_ivy_array"]], "is_ivy_container() (in module ivy)": [[566, "ivy.is_ivy_container"], [634, "ivy.is_ivy_container"]], "is_ivy_container() (ivy.array method)": [[566, "ivy.Array.is_ivy_container"]], "is_ivy_nested_array() (in module ivy)": [[567, "ivy.is_ivy_nested_array"], [634, "ivy.is_ivy_nested_array"]], "is_native_array() (in module ivy)": [[568, "ivy.is_native_array"], [634, "ivy.is_native_array"]], "is_native_array() (ivy.array method)": [[568, "ivy.Array.is_native_array"]], "is_native_array() (ivy.container method)": [[568, "ivy.Container.is_native_array"]], "isin() (in module ivy)": [[569, "ivy.isin"], [634, "ivy.isin"]], "isin() (ivy.array method)": [[569, "ivy.Array.isin"]], "isin() (ivy.container method)": [[569, "ivy.Container.isin"]], "isscalar() (in module ivy)": [[570, "ivy.isscalar"], [634, "ivy.isscalar"]], "itemsize() (in module ivy)": [[571, "ivy.itemsize"], [634, "ivy.itemsize"]], "itemsize() (ivy.array method)": [[571, "ivy.Array.itemsize"]], "itemsize() (ivy.container method)": [[571, "ivy.Container.itemsize"]], "match_kwargs() (in module ivy)": [[572, "ivy.match_kwargs"], [634, "ivy.match_kwargs"]], "multiprocessing() (in module ivy)": [[573, "ivy.multiprocessing"], [634, "ivy.multiprocessing"]], "num_arrays_in_memory() (in module ivy)": [[574, "ivy.num_arrays_in_memory"], [634, "ivy.num_arrays_in_memory"]], "print_all_arrays_in_memory() (in module ivy)": [[575, "ivy.print_all_arrays_in_memory"], [634, "ivy.print_all_arrays_in_memory"]], "scatter_flat() (in module ivy)": [[576, "ivy.scatter_flat"], [634, "ivy.scatter_flat"]], "scatter_flat() (ivy.array method)": [[576, "ivy.Array.scatter_flat"]], "scatter_flat() (ivy.container method)": [[576, "ivy.Container.scatter_flat"]], "scatter_nd() (in module ivy)": [[577, "ivy.scatter_nd"], [634, "ivy.scatter_nd"]], "scatter_nd() (ivy.array method)": [[577, "ivy.Array.scatter_nd"]], "scatter_nd() (ivy.container method)": [[577, "ivy.Container.scatter_nd"]], "set_array_mode() (in module ivy)": [[578, "ivy.set_array_mode"], [634, "ivy.set_array_mode"]], "set_exception_trace_mode() (in module ivy)": [[579, "ivy.set_exception_trace_mode"], [634, "ivy.set_exception_trace_mode"]], "set_inplace_mode() (in module ivy)": [[580, "ivy.set_inplace_mode"], [634, "ivy.set_inplace_mode"]], "set_item() (in module ivy)": [[581, "ivy.set_item"], [634, "ivy.set_item"]], "set_min_base() (in module ivy)": [[582, "ivy.set_min_base"], [634, "ivy.set_min_base"]], "set_min_denominator() (in module ivy)": [[583, "ivy.set_min_denominator"], [634, "ivy.set_min_denominator"]], "set_nestable_mode() (in module ivy)": [[584, "ivy.set_nestable_mode"], [634, "ivy.set_nestable_mode"]], "set_precise_mode() (in module ivy)": [[585, "ivy.set_precise_mode"], [634, "ivy.set_precise_mode"]], "set_queue_timeout() (in module ivy)": [[586, "ivy.set_queue_timeout"], [634, "ivy.set_queue_timeout"]], "set_shape_array_mode() (in module ivy)": [[587, "ivy.set_shape_array_mode"], [634, "ivy.set_shape_array_mode"]], "set_show_func_wrapper_trace_mode() (in module ivy)": [[588, "ivy.set_show_func_wrapper_trace_mode"], [634, "ivy.set_show_func_wrapper_trace_mode"]], "set_tmp_dir() (in module ivy)": [[589, "ivy.set_tmp_dir"], [634, "ivy.set_tmp_dir"]], "shape() (in module ivy)": [[590, "ivy.shape"], [634, "ivy.shape"]], "shape() (ivy.array method)": [[590, "ivy.Array.shape"]], "size() (in module ivy)": [[591, "ivy.size"], [634, "ivy.size"]], "size() (ivy.array method)": [[591, "ivy.Array.size"]], "size() (ivy.container method)": [[591, "ivy.Container.size"]], "stable_divide() (in module ivy)": [[592, "ivy.stable_divide"], [634, "ivy.stable_divide"]], "stable_divide() (ivy.array method)": [[592, "ivy.Array.stable_divide"]], "stable_divide() (ivy.container method)": [[592, "ivy.Container.stable_divide"]], "stable_pow() (in module ivy)": [[593, "ivy.stable_pow"], [634, "ivy.stable_pow"]], "stable_pow() (ivy.array method)": [[593, "ivy.Array.stable_pow"]], "stable_pow() (ivy.container method)": [[593, "ivy.Container.stable_pow"]], "strides() (in module ivy)": [[594, "ivy.strides"], [634, "ivy.strides"]], "strides() (ivy.array method)": [[594, "ivy.Array.strides"]], "strides() (ivy.container method)": [[594, "ivy.Container.strides"]], "supports_inplace_updates() (in module ivy)": [[595, "ivy.supports_inplace_updates"], [634, "ivy.supports_inplace_updates"]], "supports_inplace_updates() (ivy.array method)": [[595, "ivy.Array.supports_inplace_updates"]], "supports_inplace_updates() (ivy.container method)": [[595, "ivy.Container.supports_inplace_updates"]], "to_ivy_shape() (in module ivy)": [[596, "ivy.to_ivy_shape"], [634, "ivy.to_ivy_shape"]], "to_list() (in module ivy)": [[597, "ivy.to_list"], [634, "ivy.to_list"]], "to_list() (ivy.array method)": [[597, "ivy.Array.to_list"]], "to_list() (ivy.container method)": [[597, "ivy.Container.to_list"]], "to_native_shape() (in module ivy)": [[598, "ivy.to_native_shape"], [634, "ivy.to_native_shape"]], "to_numpy() (in module ivy)": [[599, "ivy.to_numpy"], [634, "ivy.to_numpy"]], "to_numpy() (ivy.array method)": [[599, "ivy.Array.to_numpy"]], "to_numpy() (ivy.container method)": [[599, "ivy.Container.to_numpy"]], "to_scalar() (in module ivy)": [[600, "ivy.to_scalar"], [634, "ivy.to_scalar"]], "to_scalar() (ivy.array method)": [[600, "ivy.Array.to_scalar"]], "to_scalar() (ivy.container method)": [[600, "ivy.Container.to_scalar"]], "try_else_none() (in module ivy)": [[601, "ivy.try_else_none"], [634, "ivy.try_else_none"]], "unset_array_mode() (in module ivy)": [[602, "ivy.unset_array_mode"], [634, "ivy.unset_array_mode"]], "unset_exception_trace_mode() (in module ivy)": [[603, "ivy.unset_exception_trace_mode"], [634, "ivy.unset_exception_trace_mode"]], "unset_inplace_mode() (in module ivy)": [[604, "ivy.unset_inplace_mode"], [634, "ivy.unset_inplace_mode"]], "unset_min_base() (in module ivy)": [[605, "ivy.unset_min_base"], [634, "ivy.unset_min_base"]], "unset_min_denominator() (in module ivy)": [[606, "ivy.unset_min_denominator"], [634, "ivy.unset_min_denominator"]], "unset_nestable_mode() (in module ivy)": [[607, "ivy.unset_nestable_mode"], [634, "ivy.unset_nestable_mode"]], "unset_precise_mode() (in module ivy)": [[608, "ivy.unset_precise_mode"], [634, "ivy.unset_precise_mode"]], "unset_queue_timeout() (in module ivy)": [[609, "ivy.unset_queue_timeout"], [634, "ivy.unset_queue_timeout"]], "unset_shape_array_mode() (in module ivy)": [[610, "ivy.unset_shape_array_mode"], [634, "ivy.unset_shape_array_mode"]], "unset_show_func_wrapper_trace_mode() (in module ivy)": [[611, "ivy.unset_show_func_wrapper_trace_mode"], [634, "ivy.unset_show_func_wrapper_trace_mode"]], "unset_tmp_dir() (in module ivy)": [[612, "ivy.unset_tmp_dir"], [634, "ivy.unset_tmp_dir"]], "value_is_nan() (in module ivy)": [[613, "ivy.value_is_nan"], [634, "ivy.value_is_nan"]], "value_is_nan() (ivy.array method)": [[613, "ivy.Array.value_is_nan"]], "value_is_nan() (ivy.container method)": [[613, "ivy.Container.value_is_nan"]], "vmap() (in module ivy)": [[614, "ivy.vmap"], [634, "ivy.vmap"]], "adam_step() (in module ivy)": [[615, "ivy.adam_step"], [635, "ivy.adam_step"]], "adam_step() (ivy.array method)": [[615, "ivy.Array.adam_step"]], "adam_step() (ivy.container method)": [[615, "ivy.Container.adam_step"]], "adam_update() (in module ivy)": [[616, "ivy.adam_update"], [635, "ivy.adam_update"]], "adam_update() (ivy.array method)": [[616, "ivy.Array.adam_update"]], "adam_update() (ivy.container method)": [[616, "ivy.Container.adam_update"]], "execute_with_gradients() (in module ivy)": [[617, "ivy.execute_with_gradients"], [635, "ivy.execute_with_gradients"]], "grad() (in module ivy)": [[618, "ivy.grad"], [635, "ivy.grad"]], "gradient_descent_update() (in module ivy)": [[619, "ivy.gradient_descent_update"], [635, "ivy.gradient_descent_update"]], "gradient_descent_update() (ivy.array method)": [[619, "ivy.Array.gradient_descent_update"]], "gradient_descent_update() (ivy.container method)": [[619, "ivy.Container.gradient_descent_update"]], "jac() (in module ivy)": [[620, "ivy.jac"], [635, "ivy.jac"]], "lamb_update() (in module ivy)": [[621, "ivy.lamb_update"], [635, "ivy.lamb_update"]], "lamb_update() (ivy.array method)": [[621, "ivy.Array.lamb_update"]], "lamb_update() (ivy.container method)": [[621, "ivy.Container.lamb_update"]], "lars_update() (in module ivy)": [[622, "ivy.lars_update"], [635, "ivy.lars_update"]], "lars_update() (ivy.array method)": [[622, "ivy.Array.lars_update"]], "lars_update() (ivy.container method)": [[622, "ivy.Container.lars_update"]], "optimizer_update() (in module ivy)": [[623, "ivy.optimizer_update"], [635, "ivy.optimizer_update"]], "optimizer_update() (ivy.array method)": [[623, "ivy.Array.optimizer_update"]], "optimizer_update() (ivy.container method)": [[623, "ivy.Container.optimizer_update"]], "stop_gradient() (in module ivy)": [[624, "ivy.stop_gradient"], [635, "ivy.stop_gradient"]], "stop_gradient() (ivy.array method)": [[624, "ivy.Array.stop_gradient"]], "stop_gradient() (ivy.container method)": [[624, "ivy.Container.stop_gradient"]], "value_and_grad() (in module ivy)": [[625, "ivy.value_and_grad"], [635, "ivy.value_and_grad"]], "ivy.functional.ivy.activations": [[626, "module-ivy.functional.ivy.activations"]], "e (in module ivy)": [[627, "ivy.e"]], "inf (in module ivy)": [[627, "ivy.inf"]], "ivy.functional.ivy.constants": [[627, "module-ivy.functional.ivy.constants"]], "nan (in module ivy)": [[627, "ivy.nan"]], "newaxis (in module ivy)": [[627, "ivy.newaxis"]], "pi (in module ivy)": [[627, "ivy.pi"]], "ivy.functional.ivy.control_flow_ops": [[628, "module-ivy.functional.ivy.control_flow_ops"]], "nestedsequence (class in ivy)": [[629, "ivy.NestedSequence"]], "ivy.functional.ivy.creation": [[629, "module-ivy.functional.ivy.creation"]], "defaultcomplexdtype (class in ivy)": [[630, "ivy.DefaultComplexDtype"]], "defaultdtype (class in ivy)": [[630, "ivy.DefaultDtype"]], "defaultfloatdtype (class in ivy)": [[630, "ivy.DefaultFloatDtype"]], "defaultintdtype (class in ivy)": [[630, "ivy.DefaultIntDtype"]], "defaultuintdtype (class in ivy)": [[630, "ivy.DefaultUintDtype"]], "ivy.functional.ivy.data_type": [[630, "module-ivy.functional.ivy.data_type"]], "defaultdevice (class in ivy)": [[631, "ivy.DefaultDevice"]], "profiler (class in ivy)": [[631, "ivy.Profiler"]], "ivy.functional.ivy.device": [[631, "module-ivy.functional.ivy.device"]], "ivy.functional.ivy.elementwise": [[632, "module-ivy.functional.ivy.elementwise"]], "ivy.functional.ivy.experimental": [[633, "module-ivy.functional.ivy.experimental"]], "arraymode (class in ivy)": [[634, "ivy.ArrayMode"]], "precisemode (class in ivy)": [[634, "ivy.PreciseMode"]], "ivy.functional.ivy.general": [[634, "module-ivy.functional.ivy.general"]], "ivy.functional.ivy.gradients": [[635, "module-ivy.functional.ivy.gradients"]], "conv() (in module ivy)": [[636, "ivy.conv"], [649, "ivy.conv"]], "conv1d() (in module ivy)": [[636, "ivy.conv1d"], [650, "ivy.conv1d"]], "conv1d_transpose() (in module ivy)": [[636, "ivy.conv1d_transpose"], [651, "ivy.conv1d_transpose"]], "conv2d() (in module ivy)": [[636, "ivy.conv2d"], [652, "ivy.conv2d"]], "conv2d_transpose() (in module ivy)": [[636, "ivy.conv2d_transpose"], [653, "ivy.conv2d_transpose"]], "conv3d() (in module ivy)": [[636, "ivy.conv3d"], [654, "ivy.conv3d"]], "conv3d_transpose() (in module ivy)": [[636, "ivy.conv3d_transpose"], [655, "ivy.conv3d_transpose"]], "conv_general_dilated() (in module ivy)": [[636, "ivy.conv_general_dilated"], [656, "ivy.conv_general_dilated"]], "conv_general_transpose() (in module ivy)": [[636, "ivy.conv_general_transpose"], [657, "ivy.conv_general_transpose"]], "depthwise_conv2d() (in module ivy)": [[636, "ivy.depthwise_conv2d"], [658, "ivy.depthwise_conv2d"]], "dropout() (in module ivy)": [[636, "ivy.dropout"], [659, "ivy.dropout"]], "ivy.functional.ivy.layers": [[636, "module-ivy.functional.ivy.layers"]], "linear() (in module ivy)": [[636, "ivy.linear"], [660, "ivy.linear"]], "lstm() (in module ivy)": [[636, "ivy.lstm"], [661, "ivy.lstm"]], "lstm_update() (in module ivy)": [[636, "ivy.lstm_update"], [662, "ivy.lstm_update"]], "multi_head_attention() (in module ivy)": [[636, "ivy.multi_head_attention"], [663, "ivy.multi_head_attention"]], "nms() (in module ivy)": [[636, "ivy.nms"], [664, "ivy.nms"]], "roi_align() (in module ivy)": [[636, "ivy.roi_align"], [665, "ivy.roi_align"]], "scaled_dot_product_attention() (in module ivy)": [[636, "ivy.scaled_dot_product_attention"], [666, "ivy.scaled_dot_product_attention"]], "cholesky() (in module ivy)": [[637, "ivy.cholesky"], [667, "ivy.cholesky"]], "cross() (in module ivy)": [[637, "ivy.cross"], [668, "ivy.cross"]], "det() (in module ivy)": [[637, "ivy.det"], [669, "ivy.det"]], "diag() (in module ivy)": [[637, "ivy.diag"], [670, "ivy.diag"]], "diagonal() (in module ivy)": [[637, "ivy.diagonal"], [671, "ivy.diagonal"]], "eigh() (in module ivy)": [[637, "ivy.eigh"], [673, "ivy.eigh"]], "eigvalsh() (in module ivy)": [[637, "ivy.eigvalsh"], [674, "ivy.eigvalsh"]], "inner() (in module ivy)": [[637, "ivy.inner"], [675, "ivy.inner"]], "inv() (in module ivy)": [[637, "ivy.inv"], [676, "ivy.inv"]], "ivy.functional.ivy.linear_algebra": [[637, "module-ivy.functional.ivy.linear_algebra"]], "matmul() (in module ivy)": [[637, "ivy.matmul"], [677, "ivy.matmul"]], "matrix_norm() (in module ivy)": [[637, "ivy.matrix_norm"], [678, "ivy.matrix_norm"]], "matrix_power() (in module ivy)": [[637, "ivy.matrix_power"], [679, "ivy.matrix_power"]], "matrix_rank() (in module ivy)": [[637, "ivy.matrix_rank"], [680, "ivy.matrix_rank"]], "matrix_transpose() (in module ivy)": [[637, "ivy.matrix_transpose"], [681, "ivy.matrix_transpose"]], "outer() (in module ivy)": [[637, "ivy.outer"], [682, "ivy.outer"]], "pinv() (in module ivy)": [[637, "ivy.pinv"], [683, "ivy.pinv"]], "qr() (in module ivy)": [[637, "ivy.qr"], [684, "ivy.qr"]], "slogdet() (in module ivy)": [[637, "ivy.slogdet"], [685, "ivy.slogdet"]], "solve() (in module ivy)": [[637, "ivy.solve"], [686, "ivy.solve"]], "svd() (in module ivy)": [[637, "ivy.svd"], [687, "ivy.svd"]], "svdvals() (in module ivy)": [[637, "ivy.svdvals"], [688, "ivy.svdvals"]], "tensordot() (in module ivy)": [[637, "ivy.tensordot"], [689, "ivy.tensordot"]], "tensorsolve() (in module ivy)": [[637, "ivy.tensorsolve"], [690, "ivy.tensorsolve"]], "trace() (in module ivy)": [[637, "ivy.trace"], [691, "ivy.trace"]], "vander() (in module ivy)": [[637, "ivy.vander"], [692, "ivy.vander"]], "vecdot() (in module ivy)": [[637, "ivy.vecdot"], [693, "ivy.vecdot"]], "vector_norm() (in module ivy)": [[637, "ivy.vector_norm"], [694, "ivy.vector_norm"]], "vector_to_skew_symmetric_matrix() (in module ivy)": [[637, "ivy.vector_to_skew_symmetric_matrix"], [695, "ivy.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (in module ivy)": [[638, "ivy.binary_cross_entropy"], [696, "ivy.binary_cross_entropy"]], "cross_entropy() (in module ivy)": [[638, "ivy.cross_entropy"], [697, "ivy.cross_entropy"]], "ivy.functional.ivy.losses": [[638, "module-ivy.functional.ivy.losses"]], "sparse_cross_entropy() (in module ivy)": [[638, "ivy.sparse_cross_entropy"], [698, "ivy.sparse_cross_entropy"]], "clip() (in module ivy)": [[639, "ivy.clip"], [699, "ivy.clip"]], "concat() (in module ivy)": [[639, "ivy.concat"], [700, "ivy.concat"]], "constant_pad() (in module ivy)": [[639, "ivy.constant_pad"], [701, "ivy.constant_pad"]], "expand_dims() (in module ivy)": [[639, "ivy.expand_dims"], [702, "ivy.expand_dims"]], "flip() (in module ivy)": [[639, "ivy.flip"], [703, "ivy.flip"]], "ivy.functional.ivy.manipulation": [[639, "module-ivy.functional.ivy.manipulation"]], "permute_dims() (in module ivy)": [[639, "ivy.permute_dims"], [704, "ivy.permute_dims"]], "repeat() (in module ivy)": [[639, "ivy.repeat"], [705, "ivy.repeat"]], "reshape() (in module ivy)": [[639, "ivy.reshape"], [706, "ivy.reshape"]], "roll() (in module ivy)": [[639, "ivy.roll"], [707, "ivy.roll"]], "split() (in module ivy)": [[639, "ivy.split"], [708, "ivy.split"]], "squeeze() (in module ivy)": [[639, "ivy.squeeze"], [709, "ivy.squeeze"]], "stack() (in module ivy)": [[639, "ivy.stack"], [710, "ivy.stack"]], "swapaxes() (in module ivy)": [[639, "ivy.swapaxes"], [711, "ivy.swapaxes"]], "tile() (in module ivy)": [[639, "ivy.tile"], [712, "ivy.tile"]], "unstack() (in module ivy)": [[639, "ivy.unstack"], [713, "ivy.unstack"]], "zero_pad() (in module ivy)": [[639, "ivy.zero_pad"], [714, "ivy.zero_pad"]], "fomaml_step() (in module ivy)": [[640, "ivy.fomaml_step"], [715, "ivy.fomaml_step"]], "ivy.functional.ivy.meta": [[640, "module-ivy.functional.ivy.meta"]], "maml_step() (in module ivy)": [[640, "ivy.maml_step"], [716, "ivy.maml_step"]], "reptile_step() (in module ivy)": [[640, "ivy.reptile_step"], [717, "ivy.reptile_step"]], "all_nested_indices() (in module ivy)": [[641, "ivy.all_nested_indices"], [718, "ivy.all_nested_indices"]], "copy_nest() (in module ivy)": [[641, "ivy.copy_nest"], [719, "ivy.copy_nest"]], "duplicate_array_index_chains() (in module ivy)": [[641, "ivy.duplicate_array_index_chains"], [720, "ivy.duplicate_array_index_chains"]], "index_nest() (in module ivy)": [[641, "ivy.index_nest"], [721, "ivy.index_nest"]], "insert_into_nest_at_index() (in module ivy)": [[641, "ivy.insert_into_nest_at_index"], [722, "ivy.insert_into_nest_at_index"]], "insert_into_nest_at_indices() (in module ivy)": [[641, "ivy.insert_into_nest_at_indices"], [723, "ivy.insert_into_nest_at_indices"]], "ivy.functional.ivy.nest": [[641, "module-ivy.functional.ivy.nest"]], "map() (in module ivy)": [[641, "ivy.map"], [724, "ivy.map"]], "map_nest_at_index() (in module ivy)": [[641, "ivy.map_nest_at_index"], [725, "ivy.map_nest_at_index"]], "map_nest_at_indices() (in module ivy)": [[641, "ivy.map_nest_at_indices"], [726, "ivy.map_nest_at_indices"]], "multi_index_nest() (in module ivy)": [[641, "ivy.multi_index_nest"], [727, "ivy.multi_index_nest"]], "nested_any() (in module ivy)": [[641, "ivy.nested_any"], [728, "ivy.nested_any"]], "nested_argwhere() (in module ivy)": [[641, "ivy.nested_argwhere"], [729, "ivy.nested_argwhere"]], "nested_map() (in module ivy)": [[641, "ivy.nested_map"], [730, "ivy.nested_map"]], "nested_multi_map() (in module ivy)": [[641, "ivy.nested_multi_map"], [731, "ivy.nested_multi_map"]], "prune_empty() (in module ivy)": [[641, "ivy.prune_empty"], [732, "ivy.prune_empty"]], "prune_nest_at_index() (in module ivy)": [[641, "ivy.prune_nest_at_index"], [733, "ivy.prune_nest_at_index"]], "prune_nest_at_indices() (in module ivy)": [[641, "ivy.prune_nest_at_indices"], [734, "ivy.prune_nest_at_indices"]], "set_nest_at_index() (in module ivy)": [[641, "ivy.set_nest_at_index"], [735, "ivy.set_nest_at_index"]], "set_nest_at_indices() (in module ivy)": [[641, "ivy.set_nest_at_indices"], [736, "ivy.set_nest_at_indices"]], "ivy.functional.ivy.norms": [[642, "module-ivy.functional.ivy.norms"]], "layer_norm() (in module ivy)": [[642, "ivy.layer_norm"], [737, "ivy.layer_norm"]], "ivy.functional.ivy.random": [[643, "module-ivy.functional.ivy.random"]], "multinomial() (in module ivy)": [[643, "ivy.multinomial"], [738, "ivy.multinomial"]], "randint() (in module ivy)": [[643, "ivy.randint"], [739, "ivy.randint"]], "random_normal() (in module ivy)": [[643, "ivy.random_normal"], [740, "ivy.random_normal"]], "random_uniform() (in module ivy)": [[643, "ivy.random_uniform"], [741, "ivy.random_uniform"]], "seed() (in module ivy)": [[643, "ivy.seed"], [742, "ivy.seed"]], "shuffle() (in module ivy)": [[643, "ivy.shuffle"], [743, "ivy.shuffle"]], "argmax() (in module ivy)": [[644, "ivy.argmax"], [744, "ivy.argmax"]], "argmin() (in module ivy)": [[644, "ivy.argmin"], [745, "ivy.argmin"]], "argwhere() (in module ivy)": [[644, "ivy.argwhere"], [746, "ivy.argwhere"]], "ivy.functional.ivy.searching": [[644, "module-ivy.functional.ivy.searching"]], "nonzero() (in module ivy)": [[644, "ivy.nonzero"], [747, "ivy.nonzero"]], "where() (in module ivy)": [[644, "ivy.where"], [748, "ivy.where"]], "ivy.functional.ivy.set": [[645, "module-ivy.functional.ivy.set"]], "unique_all() (in module ivy)": [[645, "ivy.unique_all"], [749, "ivy.unique_all"]], "unique_counts() (in module ivy)": [[645, "ivy.unique_counts"], [750, "ivy.unique_counts"]], "unique_inverse() (in module ivy)": [[645, "ivy.unique_inverse"], [751, "ivy.unique_inverse"]], "unique_values() (in module ivy)": [[645, "ivy.unique_values"], [752, "ivy.unique_values"]], "argsort() (in module ivy)": [[646, "ivy.argsort"], [753, "ivy.argsort"]], "ivy.functional.ivy.sorting": [[646, "module-ivy.functional.ivy.sorting"]], "msort() (in module ivy)": [[646, "ivy.msort"], [754, "ivy.msort"]], "searchsorted() (in module ivy)": [[646, "ivy.searchsorted"], [755, "ivy.searchsorted"]], "sort() (in module ivy)": [[646, "ivy.sort"], [756, "ivy.sort"]], "cumprod() (in module ivy)": [[647, "ivy.cumprod"], [757, "ivy.cumprod"]], "cumsum() (in module ivy)": [[647, "ivy.cumsum"], [758, "ivy.cumsum"]], "einsum() (in module ivy)": [[647, "ivy.einsum"], [759, "ivy.einsum"]], "ivy.functional.ivy.statistical": [[647, "module-ivy.functional.ivy.statistical"]], "max() (in module ivy)": [[647, "ivy.max"], [760, "ivy.max"]], "mean() (in module ivy)": [[647, "ivy.mean"], [761, "ivy.mean"]], "min() (in module ivy)": [[647, "ivy.min"], [762, "ivy.min"]], "prod() (in module ivy)": [[647, "ivy.prod"], [763, "ivy.prod"]], "std() (in module ivy)": [[647, "ivy.std"], [764, "ivy.std"]], "sum() (in module ivy)": [[647, "ivy.sum"], [765, "ivy.sum"]], "var() (in module ivy)": [[647, "ivy.var"], [766, "ivy.var"]], "all() (in module ivy)": [[648, "ivy.all"], [767, "ivy.all"]], "any() (in module ivy)": [[648, "ivy.any"], [768, "ivy.any"]], "ivy.functional.ivy.utility": [[648, "module-ivy.functional.ivy.utility"]], "load() (in module ivy)": [[648, "ivy.load"], [769, "ivy.load"]], "save() (in module ivy)": [[648, "ivy.save"], [770, "ivy.save"]], "conv1d() (ivy.array method)": [[650, "ivy.Array.conv1d"]], "conv1d() (ivy.container method)": [[650, "ivy.Container.conv1d"]], "conv1d_transpose() (ivy.array method)": [[651, "ivy.Array.conv1d_transpose"]], "conv1d_transpose() (ivy.container method)": [[651, "ivy.Container.conv1d_transpose"]], "conv2d() (ivy.array method)": [[652, "ivy.Array.conv2d"]], "conv2d() (ivy.container method)": [[652, "ivy.Container.conv2d"]], "conv2d_transpose() (ivy.array method)": [[653, "ivy.Array.conv2d_transpose"]], "conv2d_transpose() (ivy.container method)": [[653, "ivy.Container.conv2d_transpose"]], "conv3d() (ivy.array method)": [[654, "ivy.Array.conv3d"]], "conv3d() (ivy.container method)": [[654, "ivy.Container.conv3d"]], "conv3d_transpose() (ivy.array method)": [[655, "ivy.Array.conv3d_transpose"]], "conv3d_transpose() (ivy.container method)": [[655, "ivy.Container.conv3d_transpose"]], "depthwise_conv2d() (ivy.array method)": [[658, "ivy.Array.depthwise_conv2d"]], "depthwise_conv2d() (ivy.container method)": [[658, "ivy.Container.depthwise_conv2d"]], "dropout() (ivy.array method)": [[659, "ivy.Array.dropout"]], "dropout() (ivy.container method)": [[659, "ivy.Container.dropout"]], "linear() (ivy.array method)": [[660, "ivy.Array.linear"]], "linear() (ivy.container method)": [[660, "ivy.Container.linear"]], "lstm_update() (ivy.array method)": [[662, "ivy.Array.lstm_update"]], "lstm_update() (ivy.container method)": [[662, "ivy.Container.lstm_update"]], "multi_head_attention() (ivy.array method)": [[663, "ivy.Array.multi_head_attention"]], "multi_head_attention() (ivy.container method)": [[663, "ivy.Container.multi_head_attention"]], "scaled_dot_product_attention() (ivy.array method)": [[666, "ivy.Array.scaled_dot_product_attention"]], "scaled_dot_product_attention() (ivy.container method)": [[666, "ivy.Container.scaled_dot_product_attention"]], "cholesky() (ivy.array method)": [[667, "ivy.Array.cholesky"]], "cholesky() (ivy.container method)": [[667, "ivy.Container.cholesky"]], "cross() (ivy.array method)": [[668, "ivy.Array.cross"]], "cross() (ivy.container method)": [[668, "ivy.Container.cross"]], "det() (ivy.array method)": [[669, "ivy.Array.det"]], "det() (ivy.container method)": [[669, "ivy.Container.det"]], "diag() (ivy.array method)": [[670, "ivy.Array.diag"]], "diag() (ivy.container method)": [[670, "ivy.Container.diag"]], "diagonal() (ivy.array method)": [[671, "ivy.Array.diagonal"]], "diagonal() (ivy.container method)": [[671, "ivy.Container.diagonal"]], "eigh() (ivy.array method)": [[673, "ivy.Array.eigh"]], "eigh() (ivy.container method)": [[673, "ivy.Container.eigh"]], "eigvalsh() (ivy.array method)": [[674, "ivy.Array.eigvalsh"]], "eigvalsh() (ivy.container method)": [[674, "ivy.Container.eigvalsh"]], "inner() (ivy.array method)": [[675, "ivy.Array.inner"]], "inner() (ivy.container method)": [[675, "ivy.Container.inner"]], "inv() (ivy.array method)": [[676, "ivy.Array.inv"]], "inv() (ivy.container method)": [[676, "ivy.Container.inv"]], "matmul() (ivy.array method)": [[677, "ivy.Array.matmul"]], "matmul() (ivy.container method)": [[677, "ivy.Container.matmul"]], "matrix_norm() (ivy.array method)": [[678, "ivy.Array.matrix_norm"]], "matrix_norm() (ivy.container method)": [[678, "ivy.Container.matrix_norm"]], "matrix_power() (ivy.array method)": [[679, "ivy.Array.matrix_power"]], "matrix_power() (ivy.container method)": [[679, "ivy.Container.matrix_power"]], "matrix_rank() (ivy.array method)": [[680, "ivy.Array.matrix_rank"]], "matrix_rank() (ivy.container method)": [[680, "ivy.Container.matrix_rank"]], "matrix_transpose() (ivy.array method)": [[681, "ivy.Array.matrix_transpose"]], "matrix_transpose() (ivy.container method)": [[681, "ivy.Container.matrix_transpose"]], "outer() (ivy.array method)": [[682, "ivy.Array.outer"]], "outer() (ivy.container method)": [[682, "ivy.Container.outer"]], "pinv() (ivy.array method)": [[683, "ivy.Array.pinv"]], "pinv() (ivy.container method)": [[683, "ivy.Container.pinv"]], "qr() (ivy.array method)": [[684, "ivy.Array.qr"]], "qr() (ivy.container method)": [[684, "ivy.Container.qr"]], "slogdet() (ivy.array method)": [[685, "ivy.Array.slogdet"]], "slogdet() (ivy.container method)": [[685, "ivy.Container.slogdet"]], "solve() (ivy.array method)": [[686, "ivy.Array.solve"]], "solve() (ivy.container method)": [[686, "ivy.Container.solve"]], "svd() (ivy.array method)": [[687, "ivy.Array.svd"]], "svd() (ivy.container method)": [[687, "ivy.Container.svd"]], "svdvals() (ivy.array method)": [[688, "ivy.Array.svdvals"]], "svdvals() (ivy.container method)": [[688, "ivy.Container.svdvals"]], "tensordot() (ivy.array method)": [[689, "ivy.Array.tensordot"]], "tensordot() (ivy.container method)": [[689, "ivy.Container.tensordot"]], "tensorsolve() (ivy.array method)": [[690, "ivy.Array.tensorsolve"]], "tensorsolve() (ivy.container method)": [[690, "ivy.Container.tensorsolve"]], "trace() (ivy.array method)": [[691, "ivy.Array.trace"]], "trace() (ivy.container method)": [[691, "ivy.Container.trace"]], "vander() (ivy.array method)": [[692, "ivy.Array.vander"]], "vander() (ivy.container method)": [[692, "ivy.Container.vander"]], "vecdot() (ivy.array method)": [[693, "ivy.Array.vecdot"]], "vecdot() (ivy.container method)": [[693, "ivy.Container.vecdot"]], "vector_norm() (ivy.array method)": [[694, "ivy.Array.vector_norm"]], "vector_norm() (ivy.container method)": [[694, "ivy.Container.vector_norm"]], "vector_to_skew_symmetric_matrix() (ivy.array method)": [[695, "ivy.Array.vector_to_skew_symmetric_matrix"]], "vector_to_skew_symmetric_matrix() (ivy.container method)": [[695, "ivy.Container.vector_to_skew_symmetric_matrix"]], "binary_cross_entropy() (ivy.array method)": [[696, "ivy.Array.binary_cross_entropy"]], "binary_cross_entropy() (ivy.container method)": [[696, "ivy.Container.binary_cross_entropy"]], "cross_entropy() (ivy.array method)": [[697, "ivy.Array.cross_entropy"]], "cross_entropy() (ivy.container method)": [[697, "ivy.Container.cross_entropy"]], "sparse_cross_entropy() (ivy.array method)": [[698, "ivy.Array.sparse_cross_entropy"]], "sparse_cross_entropy() (ivy.container method)": [[698, "ivy.Container.sparse_cross_entropy"]], "clip() (ivy.array method)": [[699, "ivy.Array.clip"]], "clip() (ivy.container method)": [[699, "ivy.Container.clip"]], "concat() (ivy.array method)": [[700, "ivy.Array.concat"]], "concat() (ivy.container method)": [[700, "ivy.Container.concat"]], "constant_pad() (ivy.array method)": [[701, "ivy.Array.constant_pad"]], "constant_pad() (ivy.container method)": [[701, "ivy.Container.constant_pad"]], "expand_dims() (ivy.array method)": [[702, "ivy.Array.expand_dims"]], "expand_dims() (ivy.container method)": [[702, "ivy.Container.expand_dims"]], "flip() (ivy.array method)": [[703, "ivy.Array.flip"]], "flip() (ivy.container method)": [[703, "ivy.Container.flip"]], "permute_dims() (ivy.array method)": [[704, "ivy.Array.permute_dims"]], "permute_dims() (ivy.container method)": [[704, "ivy.Container.permute_dims"]], "repeat() (ivy.array method)": [[705, "ivy.Array.repeat"]], "repeat() (ivy.container method)": [[705, "ivy.Container.repeat"]], "reshape() (ivy.array method)": [[706, "ivy.Array.reshape"]], "reshape() (ivy.container method)": [[706, "ivy.Container.reshape"]], "roll() (ivy.array method)": [[707, "ivy.Array.roll"]], "roll() (ivy.container method)": [[707, "ivy.Container.roll"]], "split() (ivy.array method)": [[708, "ivy.Array.split"]], "split() (ivy.container method)": [[708, "ivy.Container.split"]], "squeeze() (ivy.array method)": [[709, "ivy.Array.squeeze"]], "squeeze() (ivy.container method)": [[709, "ivy.Container.squeeze"]], "stack() (ivy.array method)": [[710, "ivy.Array.stack"]], "stack() (ivy.container method)": [[710, "ivy.Container.stack"]], "swapaxes() (ivy.array method)": [[711, "ivy.Array.swapaxes"]], "swapaxes() (ivy.container method)": [[711, "ivy.Container.swapaxes"]], "tile() (ivy.array method)": [[712, "ivy.Array.tile"]], "tile() (ivy.container method)": [[712, "ivy.Container.tile"]], "unstack() (ivy.array method)": [[713, "ivy.Array.unstack"]], "unstack() (ivy.container method)": [[713, "ivy.Container.unstack"]], "zero_pad() (ivy.array method)": [[714, "ivy.Array.zero_pad"]], "zero_pad() (ivy.container method)": [[714, "ivy.Container.zero_pad"]], "layer_norm() (ivy.array method)": [[737, "ivy.Array.layer_norm"]], "layer_norm() (ivy.container method)": [[737, "ivy.Container.layer_norm"]], "multinomial() (ivy.array method)": [[738, "ivy.Array.multinomial"]], "multinomial() (ivy.container method)": [[738, "ivy.Container.multinomial"]], "randint() (ivy.array method)": [[739, "ivy.Array.randint"]], "randint() (ivy.container method)": [[739, "ivy.Container.randint"]], "random_normal() (ivy.array method)": [[740, "ivy.Array.random_normal"]], "random_normal() (ivy.container method)": [[740, "ivy.Container.random_normal"]], "random_uniform() (ivy.array method)": [[741, "ivy.Array.random_uniform"]], "random_uniform() (ivy.container method)": [[741, "ivy.Container.random_uniform"]], "shuffle() (ivy.array method)": [[743, "ivy.Array.shuffle"]], "shuffle() (ivy.container method)": [[743, "ivy.Container.shuffle"]], "argmax() (ivy.array method)": [[744, "ivy.Array.argmax"]], "argmax() (ivy.container method)": [[744, "ivy.Container.argmax"]], "argmin() (ivy.array method)": [[745, "ivy.Array.argmin"]], "argmin() (ivy.container method)": [[745, "ivy.Container.argmin"]], "argwhere() (ivy.array method)": [[746, "ivy.Array.argwhere"]], "argwhere() (ivy.container method)": [[746, "ivy.Container.argwhere"]], "nonzero() (ivy.array method)": [[747, "ivy.Array.nonzero"]], "nonzero() (ivy.container method)": [[747, "ivy.Container.nonzero"]], "where() (ivy.array method)": [[748, "ivy.Array.where"]], "where() (ivy.container method)": [[748, "ivy.Container.where"]], "unique_all() (ivy.array method)": [[749, "ivy.Array.unique_all"]], "unique_all() (ivy.container method)": [[749, "ivy.Container.unique_all"]], "unique_counts() (ivy.array method)": [[750, "ivy.Array.unique_counts"]], "unique_counts() (ivy.container method)": [[750, "ivy.Container.unique_counts"]], "unique_inverse() (ivy.array method)": [[751, "ivy.Array.unique_inverse"]], "unique_inverse() (ivy.container method)": [[751, "ivy.Container.unique_inverse"]], "unique_values() (ivy.array method)": [[752, "ivy.Array.unique_values"]], "unique_values() (ivy.container method)": [[752, "ivy.Container.unique_values"]], "argsort() (ivy.array method)": [[753, "ivy.Array.argsort"]], "argsort() (ivy.container method)": [[753, "ivy.Container.argsort"]], "msort() (ivy.array method)": [[754, "ivy.Array.msort"]], "msort() (ivy.container method)": [[754, "ivy.Container.msort"]], "searchsorted() (ivy.array method)": [[755, "ivy.Array.searchsorted"]], "searchsorted() (ivy.container method)": [[755, "ivy.Container.searchsorted"]], "sort() (ivy.array method)": [[756, "ivy.Array.sort"]], "sort() (ivy.container method)": [[756, "ivy.Container.sort"]], "cumprod() (ivy.array method)": [[757, "ivy.Array.cumprod"]], "cumprod() (ivy.container method)": [[757, "ivy.Container.cumprod"]], "cumsum() (ivy.array method)": [[758, "ivy.Array.cumsum"]], "cumsum() (ivy.container method)": [[758, "ivy.Container.cumsum"]], "einsum() (ivy.array method)": [[759, "ivy.Array.einsum"]], "einsum() (ivy.container method)": [[759, "ivy.Container.einsum"]], "max() (ivy.array method)": [[760, "ivy.Array.max"]], "max() (ivy.container method)": [[760, "ivy.Container.max"]], "mean() (ivy.array method)": [[761, "ivy.Array.mean"]], "mean() (ivy.container method)": [[761, "ivy.Container.mean"]], "min() (ivy.array method)": [[762, "ivy.Array.min"]], "min() (ivy.container method)": [[762, "ivy.Container.min"]], "prod() (ivy.array method)": [[763, "ivy.Array.prod"]], "prod() (ivy.container method)": [[763, "ivy.Container.prod"]], "std() (ivy.array method)": [[764, "ivy.Array.std"]], "std() (ivy.container method)": [[764, "ivy.Container.std"]], "sum() (ivy.array method)": [[765, "ivy.Array.sum"]], "sum() (ivy.container method)": [[765, "ivy.Container.sum"]], "var() (ivy.array method)": [[766, "ivy.Array.var"]], "var() (ivy.container method)": [[766, "ivy.Container.var"]], "all() (ivy.array method)": [[767, "ivy.Array.all"]], "all() (ivy.container method)": [[767, "ivy.Container.all"]], "any() (ivy.array method)": [[768, "ivy.Array.any"]], "any() (ivy.container method)": [[768, "ivy.Container.any"]], "assert_all_close() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.assert_all_close"]], "assert_same_type() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.assert_same_type"]], "assert_same_type_and_shape() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.assert_same_type_and_shape"]], "check_unsupported_device() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device"]], "check_unsupported_device_and_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_device_and_dtype"]], "check_unsupported_dtype() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.check_unsupported_dtype"]], "ivy_tests.test_ivy.helpers.assertions": [[771, "module-ivy_tests.test_ivy.helpers.assertions"]], "test_unsupported_function() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.test_unsupported_function"]], "value_test() (in module ivy_tests.test_ivy.helpers.assertions)": [[771, "ivy_tests.test_ivy.helpers.assertions.value_test"]], "ivy_tests.test_ivy.helpers.available_frameworks": [[772, "module-ivy_tests.test_ivy.helpers.available_frameworks"]], "args_to_container() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.args_to_container"]], "args_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.args_to_frontend"]], "arrays_to_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.arrays_to_frontend"]], "as_lists() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.as_lists"]], "convtrue() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.convtrue"]], "create_args_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.create_args_kwargs"]], "flatten() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.flatten"]], "flatten_and_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.flatten_and_to_np"]], "flatten_frontend() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend"]], "flatten_frontend_fw_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_fw_to_np"]], "flatten_frontend_to_np() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.flatten_frontend_to_np"]], "get_frontend_ret() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.get_frontend_ret"]], "get_ret_and_flattened_np_array() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.get_ret_and_flattened_np_array"]], "gradient_incompatible_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.gradient_incompatible_function"]], "gradient_test() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.gradient_test"]], "gradient_unsupported_dtypes() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.gradient_unsupported_dtypes"]], "ivy_tests.test_ivy.helpers.function_testing": [[773, "module-ivy_tests.test_ivy.helpers.function_testing"]], "kwargs_to_args_n_kwargs() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.kwargs_to_args_n_kwargs"]], "test_frontend_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_function"]], "test_frontend_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_frontend_method"]], "test_function() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_function"]], "test_function_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_function_backend_computation"]], "test_function_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_function_ground_truth_computation"]], "test_gradient_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_backend_computation"]], "test_gradient_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_gradient_ground_truth_computation"]], "test_method() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_method"]], "test_method_backend_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_method_backend_computation"]], "test_method_ground_truth_computation() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.test_method_ground_truth_computation"]], "traced_if_required() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.traced_if_required"]], "wrap_frontend_function_args() (in module ivy_tests.test_ivy.helpers.function_testing)": [[773, "ivy_tests.test_ivy.helpers.function_testing.wrap_frontend_function_args"]], "current_frontend_config (in module ivy_tests.test_ivy.helpers.globals)": [[774, "ivy_tests.test_ivy.helpers.globals.CURRENT_FRONTEND_CONFIG"]], "interruptedtest": [[774, "ivy_tests.test_ivy.helpers.globals.InterruptedTest"]], "testdata (class in ivy_tests.test_ivy.helpers.globals)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData"]], "__init__() (ivy_tests.test_ivy.helpers.globals.interruptedtest method)": [[774, "ivy_tests.test_ivy.helpers.globals.InterruptedTest.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.globals.testdata method)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData.__init__"]], "fn_name (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData.fn_name"]], "fn_tree (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData.fn_tree"]], "is_method (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData.is_method"]], "ivy_tests.test_ivy.helpers.globals": [[774, "module-ivy_tests.test_ivy.helpers.globals"]], "setup_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[774, "ivy_tests.test_ivy.helpers.globals.setup_api_test"]], "setup_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[774, "ivy_tests.test_ivy.helpers.globals.setup_frontend_test"]], "supported_device_dtypes (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData.supported_device_dtypes"]], "teardown_api_test() (in module ivy_tests.test_ivy.helpers.globals)": [[774, "ivy_tests.test_ivy.helpers.globals.teardown_api_test"]], "teardown_frontend_test() (in module ivy_tests.test_ivy.helpers.globals)": [[774, "ivy_tests.test_ivy.helpers.globals.teardown_frontend_test"]], "test_fn (ivy_tests.test_ivy.helpers.globals.testdata attribute)": [[774, "ivy_tests.test_ivy.helpers.globals.TestData.test_fn"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers": [[775, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers"]], "array_and_broadcastable_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_and_broadcastable_shape"]], "array_bools() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_bools"]], "array_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_helpers_dtype_info_helper"]], "array_indices_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_axis"]], "array_indices_put_along_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_indices_put_along_axis"]], "array_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.array_values"]], "arrays_and_axes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_and_axes"]], "arrays_for_pooling() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.arrays_for_pooling"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.broadcast_shapes"]], "cond_data_gen_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.cond_data_gen_helper"]], "create_concatenable_arrays_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_concatenable_arrays_dtypes"]], "create_nested_input() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.create_nested_input"]], "dtype_and_values() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_and_values"]], "dtype_array_query() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query"]], "dtype_array_query_val() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_array_query_val"]], "dtype_values_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.dtype_values_axis"]], "einsum_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.einsum_helper"]], "get_first_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_batch_matrix"]], "get_first_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_first_solve_matrix"]], "get_second_solve_batch_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_batch_matrix"]], "get_second_solve_matrix() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.get_second_solve_matrix"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers": [[776, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers"]], "list_of_size() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.list_of_size"]], "lists() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.lists"]], "mutually_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.mutually_broadcastable_shapes"]], "prod() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers)": [[776, "ivy_tests.test_ivy.helpers.hypothesis_helpers.array_helpers.prod"]], "array_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.array_dtypes"]], "cast_filter() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter"]], "cast_filter_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.cast_filter_helper"]], "get_castable_dtype() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_castable_dtype"]], "get_dtypes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers)": [[777, "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers.get_dtypes"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers": [[777, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.dtype_helpers"]], "broadcasterror": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.BroadcastError"]], "apply_safety_factor() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.apply_safety_factor"]], "broadcast_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.broadcast_shapes"]], "dims_and_offset() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.dims_and_offset"]], "embedding_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.embedding_helper"]], "general_helpers_dtype_info_helper() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.general_helpers_dtype_info_helper"]], "get_axis() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_axis"]], "get_bounds() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_bounds"]], "get_mean_std() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_mean_std"]], "get_shape() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.get_shape"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers": [[778, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers"]], "matrix_is_stable() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.matrix_is_stable"]], "reshape_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.reshape_shapes"]], "sizes_() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.sizes_"]], "subsets() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.subsets"]], "two_broadcastable_shapes() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.two_broadcastable_shapes"]], "x_and_filters() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers)": [[778, "ivy_tests.test_ivy.helpers.hypothesis_helpers.general_helpers.x_and_filters"]], "floats() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.floats"]], "ints() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.ints"]], "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers": [[779, "module-ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers"]], "number() (in module ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers)": [[779, "ivy_tests.test_ivy.helpers.hypothesis_helpers.number_helpers.number"]], "backend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[780, "ivy_tests.test_ivy.helpers.multiprocessing.backend_proc"]], "frontend_proc() (in module ivy_tests.test_ivy.helpers.multiprocessing)": [[780, "ivy_tests.test_ivy.helpers.multiprocessing.frontend_proc"]], "ivy_tests.test_ivy.helpers.multiprocessing": [[780, "module-ivy_tests.test_ivy.helpers.multiprocessing"]], "backendhandler (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler"]], "backendhandlermode (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode"]], "setbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.SetBackend"]], "withbackend (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandlermode attribute)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandlerMode.WithBackend"]], "withbackendcontext (class in ivy_tests.test_ivy.helpers.pipeline_helper)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext"]], "__init__() (ivy_tests.test_ivy.helpers.pipeline_helper.withbackendcontext method)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.WithBackendContext.__init__"]], "get_frontend_config() (in module ivy_tests.test_ivy.helpers.pipeline_helper)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.get_frontend_config"]], "ivy_tests.test_ivy.helpers.pipeline_helper": [[781, "module-ivy_tests.test_ivy.helpers.pipeline_helper"]], "update_backend() (ivy_tests.test_ivy.helpers.pipeline_helper.backendhandler class method)": [[781, "ivy_tests.test_ivy.helpers.pipeline_helper.BackendHandler.update_backend"]], "frontendmethoddata (class in ivy_tests.test_ivy.helpers.structs)": [[782, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData"]], "__init__() (ivy_tests.test_ivy.helpers.structs.frontendmethoddata method)": [[782, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.__init__"]], "framework_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[782, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.framework_init_module"]], "init_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[782, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.init_name"]], "ivy_init_module (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[782, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.ivy_init_module"]], "ivy_tests.test_ivy.helpers.structs": [[782, "module-ivy_tests.test_ivy.helpers.structs"]], "method_name (ivy_tests.test_ivy.helpers.structs.frontendmethoddata attribute)": [[782, "ivy_tests.test_ivy.helpers.structs.FrontendMethodData.method_name"]], "dynamicflag (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag"]], "frontendfunctiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags"]], "frontendinittestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags"]], "frontendmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags"]], "functiontestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags"]], "initmethodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags"]], "methodtestflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags"]], "testflags (class in ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.__init__"]], "__init__() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.__init__"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendfunctiontestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendFunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendinittestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendInitTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.frontendmethodtestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FrontendMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.functiontestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.FunctionTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.initmethodtestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.InitMethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.methodtestflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.MethodTestFlags.apply_flags"]], "apply_flags() (ivy_tests.test_ivy.helpers.test_parameter_flags.testflags method)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.TestFlags.apply_flags"]], "build_flag() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.build_flag"]], "frontend_function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_function_flags"]], "frontend_init_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_init_flags"]], "frontend_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.frontend_method_flags"]], "function_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.function_flags"]], "init_method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.init_method_flags"]], "ivy_tests.test_ivy.helpers.test_parameter_flags": [[783, "module-ivy_tests.test_ivy.helpers.test_parameter_flags"]], "method_flags() (in module ivy_tests.test_ivy.helpers.test_parameter_flags)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.method_flags"]], "strategy (ivy_tests.test_ivy.helpers.test_parameter_flags.dynamicflag attribute)": [[783, "ivy_tests.test_ivy.helpers.test_parameter_flags.DynamicFlag.strategy"]], "handle_example() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.handle_example"]], "handle_frontend_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_method"]], "handle_frontend_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.handle_frontend_test"]], "handle_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.handle_method"]], "handle_test() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.handle_test"]], "ivy_tests.test_ivy.helpers.testing_helpers": [[784, "module-ivy_tests.test_ivy.helpers.testing_helpers"]], "num_positional_args() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args"]], "num_positional_args_helper() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_helper"]], "num_positional_args_method() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.num_positional_args_method"]], "seed() (in module ivy_tests.test_ivy.helpers.testing_helpers)": [[784, "ivy_tests.test_ivy.helpers.testing_helpers.seed"]], "elu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.ELU"]], "geglu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.GEGLU"]], "gelu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.GELU"]], "hardswish (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Hardswish"]], "leakyrelu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.LeakyReLU"]], "logsigmoid (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.LogSigmoid"]], "logsoftmax (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.LogSoftmax"]], "logit (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Logit"]], "mish (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Mish"]], "prelu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.PReLU"]], "relu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.ReLU"]], "relu6 (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.ReLU6"]], "selu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.SeLU"]], "silu (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.SiLU"]], "sigmoid (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Sigmoid"]], "softmax (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Softmax"]], "softplus (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Softplus"]], "tanh (class in ivy.stateful.activations)": [[788, "ivy.stateful.activations.Tanh"]], "__init__() (ivy.stateful.activations.elu method)": [[788, "ivy.stateful.activations.ELU.__init__"]], "__init__() (ivy.stateful.activations.geglu method)": [[788, "ivy.stateful.activations.GEGLU.__init__"]], "__init__() (ivy.stateful.activations.gelu method)": [[788, "ivy.stateful.activations.GELU.__init__"]], "__init__() (ivy.stateful.activations.hardswish method)": [[788, "ivy.stateful.activations.Hardswish.__init__"]], "__init__() (ivy.stateful.activations.leakyrelu method)": [[788, "ivy.stateful.activations.LeakyReLU.__init__"]], "__init__() (ivy.stateful.activations.logsigmoid method)": [[788, "ivy.stateful.activations.LogSigmoid.__init__"]], "__init__() (ivy.stateful.activations.logsoftmax method)": [[788, "ivy.stateful.activations.LogSoftmax.__init__"]], "__init__() (ivy.stateful.activations.logit method)": [[788, "ivy.stateful.activations.Logit.__init__"]], "__init__() (ivy.stateful.activations.mish method)": [[788, "ivy.stateful.activations.Mish.__init__"]], "__init__() (ivy.stateful.activations.prelu method)": [[788, "ivy.stateful.activations.PReLU.__init__"]], "__init__() (ivy.stateful.activations.relu method)": [[788, "ivy.stateful.activations.ReLU.__init__"]], "__init__() (ivy.stateful.activations.relu6 method)": [[788, "ivy.stateful.activations.ReLU6.__init__"]], "__init__() (ivy.stateful.activations.selu method)": [[788, "ivy.stateful.activations.SeLU.__init__"]], "__init__() (ivy.stateful.activations.silu method)": [[788, "ivy.stateful.activations.SiLU.__init__"]], "__init__() (ivy.stateful.activations.sigmoid method)": [[788, "ivy.stateful.activations.Sigmoid.__init__"]], "__init__() (ivy.stateful.activations.softmax method)": [[788, "ivy.stateful.activations.Softmax.__init__"]], "__init__() (ivy.stateful.activations.softplus method)": [[788, "ivy.stateful.activations.Softplus.__init__"]], "__init__() (ivy.stateful.activations.tanh method)": [[788, "ivy.stateful.activations.Tanh.__init__"]], "ivy.stateful.activations": [[788, "module-ivy.stateful.activations"]], "moduleconverters (class in ivy.stateful.converters)": [[789, "ivy.stateful.converters.ModuleConverters"]], "from_flax_module() (ivy.stateful.converters.moduleconverters static method)": [[789, "ivy.stateful.converters.ModuleConverters.from_flax_module"]], "from_haiku_module() (ivy.stateful.converters.moduleconverters static method)": [[789, "ivy.stateful.converters.ModuleConverters.from_haiku_module"]], "from_keras_module() (ivy.stateful.converters.moduleconverters static method)": [[789, "ivy.stateful.converters.ModuleConverters.from_keras_module"]], "from_paddle_module() (ivy.stateful.converters.moduleconverters static method)": [[789, "ivy.stateful.converters.ModuleConverters.from_paddle_module"]], "from_torch_module() (ivy.stateful.converters.moduleconverters static method)": [[789, "ivy.stateful.converters.ModuleConverters.from_torch_module"]], "ivy.stateful.converters": [[789, "module-ivy.stateful.converters"]], "to_ivy_module() (in module ivy.stateful.converters)": [[789, "ivy.stateful.converters.to_ivy_module"]], "to_keras_module() (ivy.stateful.converters.moduleconverters method)": [[789, "ivy.stateful.converters.ModuleConverters.to_keras_module"]], "modulehelpers (class in ivy.stateful.helpers)": [[790, "ivy.stateful.helpers.ModuleHelpers"]], "ivy.stateful.helpers": [[790, "module-ivy.stateful.helpers"]], "constant (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.Constant"]], "firstlayersiren (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.FirstLayerSiren"]], "glorotuniform (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.GlorotUniform"]], "initializer (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.Initializer"]], "kaimingnormal (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.KaimingNormal"]], "ones (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.Ones"]], "randomnormal (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.RandomNormal"]], "siren (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.Siren"]], "uniform (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.Uniform"]], "zeros (class in ivy.stateful.initializers)": [[791, "ivy.stateful.initializers.Zeros"]], "__init__() (ivy.stateful.initializers.constant method)": [[791, "ivy.stateful.initializers.Constant.__init__"]], "__init__() (ivy.stateful.initializers.firstlayersiren method)": [[791, "ivy.stateful.initializers.FirstLayerSiren.__init__"]], "__init__() (ivy.stateful.initializers.glorotuniform method)": [[791, "ivy.stateful.initializers.GlorotUniform.__init__"]], "__init__() (ivy.stateful.initializers.kaimingnormal method)": [[791, "ivy.stateful.initializers.KaimingNormal.__init__"]], "__init__() (ivy.stateful.initializers.ones method)": [[791, "ivy.stateful.initializers.Ones.__init__"]], "__init__() (ivy.stateful.initializers.randomnormal method)": [[791, "ivy.stateful.initializers.RandomNormal.__init__"]], "__init__() (ivy.stateful.initializers.siren method)": [[791, "ivy.stateful.initializers.Siren.__init__"]], "__init__() (ivy.stateful.initializers.uniform method)": [[791, "ivy.stateful.initializers.Uniform.__init__"]], "__init__() (ivy.stateful.initializers.zeros method)": [[791, "ivy.stateful.initializers.Zeros.__init__"]], "create_variables() (ivy.stateful.initializers.constant method)": [[791, "ivy.stateful.initializers.Constant.create_variables"]], "create_variables() (ivy.stateful.initializers.initializer method)": [[791, "ivy.stateful.initializers.Initializer.create_variables"]], "create_variables() (ivy.stateful.initializers.kaimingnormal method)": [[791, "ivy.stateful.initializers.KaimingNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.randomnormal method)": [[791, "ivy.stateful.initializers.RandomNormal.create_variables"]], "create_variables() (ivy.stateful.initializers.uniform method)": [[791, "ivy.stateful.initializers.Uniform.create_variables"]], "ivy.stateful.initializers": [[791, "module-ivy.stateful.initializers"]], "adaptiveavgpool1d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.AdaptiveAvgPool1d"]], "adaptiveavgpool2d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.AdaptiveAvgPool2d"]], "avgpool1d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.AvgPool1D"]], "avgpool2d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.AvgPool2D"]], "avgpool3d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.AvgPool3D"]], "conv1d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Conv1D"]], "conv1dtranspose (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Conv1DTranspose"]], "conv2d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Conv2D"]], "conv2dtranspose (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Conv2DTranspose"]], "conv3d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Conv3D"]], "conv3dtranspose (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Conv3DTranspose"]], "dct (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Dct"]], "depthwiseconv2d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.DepthwiseConv2D"]], "dropout (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Dropout"]], "embedding (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Embedding"]], "fft (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.FFT"]], "ifft (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.IFFT"]], "identity (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Identity"]], "lstm (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.LSTM"]], "linear (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.Linear"]], "maxpool1d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.MaxPool1D"]], "maxpool2d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.MaxPool2D"]], "maxpool3d (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.MaxPool3D"]], "multiheadattention (class in ivy.stateful.layers)": [[792, "ivy.stateful.layers.MultiHeadAttention"]], "__init__() (ivy.stateful.layers.adaptiveavgpool1d method)": [[792, "ivy.stateful.layers.AdaptiveAvgPool1d.__init__"]], "__init__() (ivy.stateful.layers.adaptiveavgpool2d method)": [[792, "ivy.stateful.layers.AdaptiveAvgPool2d.__init__"]], "__init__() (ivy.stateful.layers.avgpool1d method)": [[792, "ivy.stateful.layers.AvgPool1D.__init__"]], "__init__() (ivy.stateful.layers.avgpool2d method)": [[792, "ivy.stateful.layers.AvgPool2D.__init__"]], "__init__() (ivy.stateful.layers.avgpool3d method)": [[792, "ivy.stateful.layers.AvgPool3D.__init__"]], "__init__() (ivy.stateful.layers.conv1d method)": [[792, "ivy.stateful.layers.Conv1D.__init__"]], "__init__() (ivy.stateful.layers.conv1dtranspose method)": [[792, "ivy.stateful.layers.Conv1DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv2d method)": [[792, "ivy.stateful.layers.Conv2D.__init__"]], "__init__() (ivy.stateful.layers.conv2dtranspose method)": [[792, "ivy.stateful.layers.Conv2DTranspose.__init__"]], "__init__() (ivy.stateful.layers.conv3d method)": [[792, "ivy.stateful.layers.Conv3D.__init__"]], "__init__() (ivy.stateful.layers.conv3dtranspose method)": [[792, "ivy.stateful.layers.Conv3DTranspose.__init__"]], "__init__() (ivy.stateful.layers.dct method)": [[792, "ivy.stateful.layers.Dct.__init__"]], "__init__() (ivy.stateful.layers.depthwiseconv2d method)": [[792, "ivy.stateful.layers.DepthwiseConv2D.__init__"]], "__init__() (ivy.stateful.layers.dropout method)": [[792, "ivy.stateful.layers.Dropout.__init__"]], "__init__() (ivy.stateful.layers.embedding method)": [[792, "ivy.stateful.layers.Embedding.__init__"]], "__init__() (ivy.stateful.layers.fft method)": [[792, "ivy.stateful.layers.FFT.__init__"]], "__init__() (ivy.stateful.layers.ifft method)": [[792, "ivy.stateful.layers.IFFT.__init__"]], "__init__() (ivy.stateful.layers.identity method)": [[792, "ivy.stateful.layers.Identity.__init__"]], "__init__() (ivy.stateful.layers.lstm method)": [[792, "ivy.stateful.layers.LSTM.__init__"]], "__init__() (ivy.stateful.layers.linear method)": [[792, "ivy.stateful.layers.Linear.__init__"]], "__init__() (ivy.stateful.layers.maxpool1d method)": [[792, "ivy.stateful.layers.MaxPool1D.__init__"]], "__init__() (ivy.stateful.layers.maxpool2d method)": [[792, "ivy.stateful.layers.MaxPool2D.__init__"]], "__init__() (ivy.stateful.layers.maxpool3d method)": [[792, "ivy.stateful.layers.MaxPool3D.__init__"]], "__init__() (ivy.stateful.layers.multiheadattention method)": [[792, "ivy.stateful.layers.MultiHeadAttention.__init__"]], "get_initial_state() (ivy.stateful.layers.lstm method)": [[792, "ivy.stateful.layers.LSTM.get_initial_state"]], "ivy.stateful.layers": [[792, "module-ivy.stateful.layers"]], "binarycrossentropyloss (class in ivy.stateful.losses)": [[793, "ivy.stateful.losses.BinaryCrossEntropyLoss"]], "crossentropyloss (class in ivy.stateful.losses)": [[793, "ivy.stateful.losses.CrossEntropyLoss"]], "logpoissonloss (class in ivy.stateful.losses)": [[793, "ivy.stateful.losses.LogPoissonLoss"]], "__init__() (ivy.stateful.losses.binarycrossentropyloss method)": [[793, "ivy.stateful.losses.BinaryCrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.crossentropyloss method)": [[793, "ivy.stateful.losses.CrossEntropyLoss.__init__"]], "__init__() (ivy.stateful.losses.logpoissonloss method)": [[793, "ivy.stateful.losses.LogPoissonLoss.__init__"]], "ivy.stateful.losses": [[793, "module-ivy.stateful.losses"]], "module (class in ivy.stateful.module)": [[794, "ivy.stateful.module.Module"]], "modulemeta (class in ivy.stateful.module)": [[794, "ivy.stateful.module.ModuleMeta"]], "__call__() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.__call__"]], "__init__() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.__init__"]], "buffers (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.buffers"]], "build() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.build"]], "build_mode (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.build_mode"]], "built (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.built"]], "device (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.device"]], "dtype (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.dtype"]], "eval() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.eval"]], "ivy.stateful.module": [[794, "module-ivy.stateful.module"]], "load() (ivy.stateful.module.module static method)": [[794, "ivy.stateful.module.Module.load"]], "module_dict (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.module_dict"]], "register_buffer() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.register_buffer"]], "register_parameter() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.register_parameter"]], "save() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.save"]], "save_weights() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.save_weights"]], "show_graph() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.show_graph"]], "state_dict (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.state_dict"]], "to_device() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.to_device"]], "trace_graph() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.trace_graph"]], "train() (ivy.stateful.module.module method)": [[794, "ivy.stateful.module.Module.train"]], "training (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.training"]], "v (ivy.stateful.module.module property)": [[794, "ivy.stateful.module.Module.v"]], "batchnorm2d (class in ivy.stateful.norms)": [[795, "ivy.stateful.norms.BatchNorm2D"]], "layernorm (class in ivy.stateful.norms)": [[795, "ivy.stateful.norms.LayerNorm"]], "__init__() (ivy.stateful.norms.batchnorm2d method)": [[795, "ivy.stateful.norms.BatchNorm2D.__init__"]], "__init__() (ivy.stateful.norms.layernorm method)": [[795, "ivy.stateful.norms.LayerNorm.__init__"]], "ivy.stateful.norms": [[795, "module-ivy.stateful.norms"]], "adam (class in ivy.stateful.optimizers)": [[796, "ivy.stateful.optimizers.Adam"]], "adamw (class in ivy.stateful.optimizers)": [[796, "ivy.stateful.optimizers.AdamW"]], "lamb (class in ivy.stateful.optimizers)": [[796, "ivy.stateful.optimizers.LAMB"]], "lars (class in ivy.stateful.optimizers)": [[796, "ivy.stateful.optimizers.LARS"]], "optimizer (class in ivy.stateful.optimizers)": [[796, "ivy.stateful.optimizers.Optimizer"]], "sgd (class in ivy.stateful.optimizers)": [[796, "ivy.stateful.optimizers.SGD"]], "__init__() (ivy.stateful.optimizers.adam method)": [[796, "ivy.stateful.optimizers.Adam.__init__"]], "__init__() (ivy.stateful.optimizers.adamw method)": [[796, "ivy.stateful.optimizers.AdamW.__init__"]], "__init__() (ivy.stateful.optimizers.lamb method)": [[796, "ivy.stateful.optimizers.LAMB.__init__"]], "__init__() (ivy.stateful.optimizers.lars method)": [[796, "ivy.stateful.optimizers.LARS.__init__"]], "__init__() (ivy.stateful.optimizers.optimizer method)": [[796, "ivy.stateful.optimizers.Optimizer.__init__"]], "__init__() (ivy.stateful.optimizers.sgd method)": [[796, "ivy.stateful.optimizers.SGD.__init__"]], "ivy.stateful.optimizers": [[796, "module-ivy.stateful.optimizers"]], "set_state() (ivy.stateful.optimizers.adam method)": [[796, "ivy.stateful.optimizers.Adam.set_state"]], "set_state() (ivy.stateful.optimizers.lamb method)": [[796, "ivy.stateful.optimizers.LAMB.set_state"]], "set_state() (ivy.stateful.optimizers.lars method)": [[796, "ivy.stateful.optimizers.LARS.set_state"]], "set_state() (ivy.stateful.optimizers.optimizer method)": [[796, "ivy.stateful.optimizers.Optimizer.set_state"]], "set_state() (ivy.stateful.optimizers.sgd method)": [[796, "ivy.stateful.optimizers.SGD.set_state"]], "state (ivy.stateful.optimizers.adam property)": [[796, "ivy.stateful.optimizers.Adam.state"]], "state (ivy.stateful.optimizers.lamb property)": [[796, "ivy.stateful.optimizers.LAMB.state"]], "state (ivy.stateful.optimizers.lars property)": [[796, "ivy.stateful.optimizers.LARS.state"]], "state (ivy.stateful.optimizers.sgd property)": [[796, "ivy.stateful.optimizers.SGD.state"]], "step() (ivy.stateful.optimizers.optimizer method)": [[796, "ivy.stateful.optimizers.Optimizer.step"]], "sequential (class in ivy.stateful.sequential)": [[797, "ivy.stateful.sequential.Sequential"]], "__init__() (ivy.stateful.sequential.sequential method)": [[797, "ivy.stateful.sequential.Sequential.__init__"]], "ivy.stateful.sequential": [[797, "module-ivy.stateful.sequential"]], "check_all() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_all"]], "check_all_or_any_fn() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_all_or_any_fn"]], "check_any() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_any"]], "check_dev_correct_formatting() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_dev_correct_formatting"]], "check_dimensions() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_dimensions"]], "check_elem_in_list() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_elem_in_list"]], "check_equal() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_equal"]], "check_exists() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_exists"]], "check_false() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_false"]], "check_gather_input_valid() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_gather_input_valid"]], "check_gather_nd_input_valid() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_gather_nd_input_valid"]], "check_greater() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_greater"]], "check_inplace_sizes_valid() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_inplace_sizes_valid"]], "check_isinstance() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_isinstance"]], "check_kernel_padding_size() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_kernel_padding_size"]], "check_less() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_less"]], "check_one_way_broadcastable() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_one_way_broadcastable"]], "check_same_dtype() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_same_dtype"]], "check_shape() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_shape"]], "check_shapes_broadcastable() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_shapes_broadcastable"]], "check_true() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_true"]], "check_unsorted_segment_valid_params() (in module ivy.utils.assertions)": [[798, "ivy.utils.assertions.check_unsorted_segment_valid_params"]], "ivy.utils.assertions": [[798, "module-ivy.utils.assertions"]], "ivy.utils.backend": [[799, "module-ivy.utils.backend"]], "importtransformer (class in ivy.utils.backend.ast_helpers)": [[800, "ivy.utils.backend.ast_helpers.ImportTransformer"]], "ivyloader (class in ivy.utils.backend.ast_helpers)": [[800, "ivy.utils.backend.ast_helpers.IvyLoader"]], "ivypathfinder (class in ivy.utils.backend.ast_helpers)": [[800, "ivy.utils.backend.ast_helpers.IvyPathFinder"]], "__init__() (ivy.utils.backend.ast_helpers.importtransformer method)": [[800, "ivy.utils.backend.ast_helpers.ImportTransformer.__init__"]], "__init__() (ivy.utils.backend.ast_helpers.ivyloader method)": [[800, "ivy.utils.backend.ast_helpers.IvyLoader.__init__"]], "exec_module() (ivy.utils.backend.ast_helpers.ivyloader method)": [[800, "ivy.utils.backend.ast_helpers.IvyLoader.exec_module"]], "find_spec() (ivy.utils.backend.ast_helpers.ivypathfinder method)": [[800, "ivy.utils.backend.ast_helpers.IvyPathFinder.find_spec"]], "impersonate_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[800, "ivy.utils.backend.ast_helpers.ImportTransformer.impersonate_import"]], "ivy.utils.backend.ast_helpers": [[800, "module-ivy.utils.backend.ast_helpers"]], "visit_import() (ivy.utils.backend.ast_helpers.importtransformer method)": [[800, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_Import"]], "visit_importfrom() (ivy.utils.backend.ast_helpers.importtransformer method)": [[800, "ivy.utils.backend.ast_helpers.ImportTransformer.visit_ImportFrom"]], "contextmanager (class in ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.ContextManager"]], "__init__() (ivy.utils.backend.handler.contextmanager method)": [[801, "ivy.utils.backend.handler.ContextManager.__init__"]], "choose_random_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.choose_random_backend"]], "current_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.current_backend"]], "dynamic_backend_converter() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.dynamic_backend_converter"]], "ivy.utils.backend.handler": [[801, "module-ivy.utils.backend.handler"]], "prevent_access_locally() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.prevent_access_locally"]], "previous_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.previous_backend"]], "set_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_backend"]], "set_backend_to_specific_version() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_backend_to_specific_version"]], "set_jax_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_jax_backend"]], "set_mxnet_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_mxnet_backend"]], "set_numpy_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_numpy_backend"]], "set_paddle_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_paddle_backend"]], "set_tensorflow_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_tensorflow_backend"]], "set_torch_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.set_torch_backend"]], "unset_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.unset_backend"]], "with_backend() (in module ivy.utils.backend.handler)": [[801, "ivy.utils.backend.handler.with_backend"]], "clear_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.clear_sub_backends"]], "find_available_sub_backends() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.find_available_sub_backends"]], "fn_name_from_version_specific_fn_name() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name"]], "fn_name_from_version_specific_fn_name_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.fn_name_from_version_specific_fn_name_sub_backend"]], "ivy.utils.backend.sub_backend_handler": [[802, "module-ivy.utils.backend.sub_backend_handler"]], "set_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.set_sub_backend"]], "set_sub_backend_to_specific_version() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.set_sub_backend_to_specific_version"]], "unset_sub_backend() (in module ivy.utils.backend.sub_backend_handler)": [[802, "ivy.utils.backend.sub_backend_handler.unset_sub_backend"]], "check_for_binaries() (in module ivy.utils.binaries)": [[803, "ivy.utils.binaries.check_for_binaries"]], "cleanup_and_fetch_binaries() (in module ivy.utils.binaries)": [[803, "ivy.utils.binaries.cleanup_and_fetch_binaries"]], "ivy.utils.binaries": [[803, "module-ivy.utils.binaries"]], "import_module() (in module ivy.utils.dynamic_import)": [[804, "ivy.utils.dynamic_import.import_module"]], "ivy.utils.dynamic_import": [[804, "module-ivy.utils.dynamic_import"]], "convert_interleaved_input() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.convert_interleaved_input"]], "convert_subscripts() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.convert_subscripts"]], "find_output_shape() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.find_output_shape"]], "find_output_str() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.find_output_str"]], "gen_unused_symbols() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.gen_unused_symbols"]], "get_symbol() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.get_symbol"]], "has_valid_einsum_chars_only() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.has_valid_einsum_chars_only"]], "is_valid_einsum_char() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.is_valid_einsum_char"]], "ivy.utils.einsum_parser": [[805, "module-ivy.utils.einsum_parser"]], "legalise_einsum_expr() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.legalise_einsum_expr"]], "possibly_convert_to_numpy() (in module ivy.utils.einsum_parser)": [[805, "ivy.utils.einsum_parser.possibly_convert_to_numpy"]], "can_dot() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.can_dot"]], "compute_size_by_dict() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.compute_size_by_dict"]], "find_contraction() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.find_contraction"]], "flop_count() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.flop_count"]], "greedy_path() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.greedy_path"]], "ivy.utils.einsum_path_helpers": [[806, "module-ivy.utils.einsum_path_helpers"]], "optimal_path() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.optimal_path"]], "parse_einsum_input() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.parse_einsum_input"]], "parse_possible_contraction() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.parse_possible_contraction"]], "update_other_results() (in module ivy.utils.einsum_path_helpers)": [[806, "ivy.utils.einsum_path_helpers.update_other_results"]], "inplaceupdateexception": [[807, "ivy.utils.exceptions.InplaceUpdateException"]], "ivyattributeerror": [[807, "ivy.utils.exceptions.IvyAttributeError"]], "ivybackendexception": [[807, "ivy.utils.exceptions.IvyBackendException"]], "ivybroadcastshapeerror": [[807, "ivy.utils.exceptions.IvyBroadcastShapeError"]], "ivydeviceerror": [[807, "ivy.utils.exceptions.IvyDeviceError"]], "ivydtypepromotionerror": [[807, "ivy.utils.exceptions.IvyDtypePromotionError"]], "ivyerror": [[807, "ivy.utils.exceptions.IvyError"]], "ivyexception": [[807, "ivy.utils.exceptions.IvyException"]], "ivyindexerror": [[807, "ivy.utils.exceptions.IvyIndexError"]], "ivyinvalidbackendexception": [[807, "ivy.utils.exceptions.IvyInvalidBackendException"]], "ivynotimplementedexception": [[807, "ivy.utils.exceptions.IvyNotImplementedException"]], "ivyvalueerror": [[807, "ivy.utils.exceptions.IvyValueError"]], "__init__() (ivy.utils.exceptions.inplaceupdateexception method)": [[807, "ivy.utils.exceptions.InplaceUpdateException.__init__"]], "__init__() (ivy.utils.exceptions.ivyattributeerror method)": [[807, "ivy.utils.exceptions.IvyAttributeError.__init__"]], "__init__() (ivy.utils.exceptions.ivybackendexception method)": [[807, "ivy.utils.exceptions.IvyBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivybroadcastshapeerror method)": [[807, "ivy.utils.exceptions.IvyBroadcastShapeError.__init__"]], "__init__() (ivy.utils.exceptions.ivydeviceerror method)": [[807, "ivy.utils.exceptions.IvyDeviceError.__init__"]], "__init__() (ivy.utils.exceptions.ivydtypepromotionerror method)": [[807, "ivy.utils.exceptions.IvyDtypePromotionError.__init__"]], "__init__() (ivy.utils.exceptions.ivyerror method)": [[807, "ivy.utils.exceptions.IvyError.__init__"]], "__init__() (ivy.utils.exceptions.ivyexception method)": [[807, "ivy.utils.exceptions.IvyException.__init__"]], "__init__() (ivy.utils.exceptions.ivyindexerror method)": [[807, "ivy.utils.exceptions.IvyIndexError.__init__"]], "__init__() (ivy.utils.exceptions.ivyinvalidbackendexception method)": [[807, "ivy.utils.exceptions.IvyInvalidBackendException.__init__"]], "__init__() (ivy.utils.exceptions.ivynotimplementedexception method)": [[807, "ivy.utils.exceptions.IvyNotImplementedException.__init__"]], "__init__() (ivy.utils.exceptions.ivyvalueerror method)": [[807, "ivy.utils.exceptions.IvyValueError.__init__"]], "handle_exceptions() (in module ivy.utils.exceptions)": [[807, "ivy.utils.exceptions.handle_exceptions"]], "ivy.utils.exceptions": [[807, "module-ivy.utils.exceptions"]], "add_array_specs() (in module ivy.utils.inspection)": [[808, "ivy.utils.inspection.add_array_specs"]], "fn_array_spec() (in module ivy.utils.inspection)": [[808, "ivy.utils.inspection.fn_array_spec"]], "ivy.utils.inspection": [[808, "module-ivy.utils.inspection"]], "ivy.utils.logging": [[809, "module-ivy.utils.logging"]], "set_logging_mode() (in module ivy.utils.logging)": [[809, "ivy.utils.logging.set_logging_mode"]], "unset_logging_mode() (in module ivy.utils.logging)": [[809, "ivy.utils.logging.unset_logging_mode"]], "profiler (class in ivy.utils.profiler)": [[810, "ivy.utils.profiler.Profiler"]], "__init__() (ivy.utils.profiler.profiler method)": [[810, "ivy.utils.profiler.Profiler.__init__"]], "ivy.utils.profiler": [[810, "module-ivy.utils.profiler"]], "print_stats (ivy.utils.profiler.profiler attribute)": [[810, "ivy.utils.profiler.Profiler.print_stats"]], "tensorflow_profile_start() (in module ivy.utils.profiler)": [[810, "ivy.utils.profiler.tensorflow_profile_start"]], "tensorflow_profile_stop() (in module ivy.utils.profiler)": [[810, "ivy.utils.profiler.tensorflow_profile_stop"]], "torch_profiler_init() (in module ivy.utils.profiler)": [[810, "ivy.utils.profiler.torch_profiler_init"]], "torch_profiler_start() (in module ivy.utils.profiler)": [[810, "ivy.utils.profiler.torch_profiler_start"]], "torch_profiler_stop() (in module ivy.utils.profiler)": [[810, "ivy.utils.profiler.torch_profiler_stop"]], "viz (ivy.utils.profiler.profiler attribute)": [[810, "ivy.utils.profiler.Profiler.viz"]], "cprint() (in module ivy.utils.verbosity)": [[811, "ivy.utils.verbosity.cprint"]], "ivy.utils.verbosity": [[811, "module-ivy.utils.verbosity"]], "automatic code conversions": [[857, "term-Automatic-Code-Conversions"]], "backend handler": [[857, "term-Backend-Handler"]], "compositional functions": [[857, "term-Compositional-Functions"]], "convenience functions": [[857, "term-Convenience-Functions"]], "framework": [[857, "term-Framework"]], "framework handler": [[857, "term-Framework-Handler"]], "graph compiler": [[857, "term-Graph-Compiler"]], "ivy array": [[857, "term-Ivy-Array"]], "ivy backends": [[857, "term-Ivy-Backends"]], "ivy compiler": [[857, "term-Ivy-Compiler"]], "ivy container": [[857, "term-Ivy-Container"]], "ivy frontends": [[857, "term-Ivy-Frontends"]], "ivy functional api": [[857, "term-Ivy-Functional-API"]], "ivy tracer": [[857, "term-Ivy-Tracer"]], "ivy transpiler": [[857, "term-Ivy-Transpiler"]], "mixed functions": [[857, "term-Mixed-Functions"]], "native array": [[857, "term-Native-Array"]], "nestable functions": [[857, "term-Nestable-Functions"]], "pipeline": [[857, "term-Pipeline"]], "primary functions": [[857, "term-Primary-Functions"]], "standalone functions": [[857, "term-Standalone-Functions"]], "submodule helper functions": [[857, "term-Submodule-Helper-Functions"]], "built-in function": [[863, "ivy.trace_graph"], [864, "ivy.transpile"], [865, "ivy.unify"]], "ivy.trace_graph()": [[863, "ivy.trace_graph"]], "ivy.transpile()": [[864, "ivy.transpile"]], "ivy.unify()": [[865, "ivy.unify"]]}})